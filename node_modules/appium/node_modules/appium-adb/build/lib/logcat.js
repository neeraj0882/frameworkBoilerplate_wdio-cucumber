'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _teen_process = require('teen_process');

var _appiumSupport = require('appium-support');

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

var EventEmitter = _events2['default'].EventEmitter;

var log = _appiumSupport.logger.getLogger('Logcat');
var MAX_BUFFER_SIZE = 10000;
var LOGCAT_PROC_STARTUP_TIMEOUT = 10000;

var Logcat = (function (_EventEmitter) {
  _inherits(Logcat, _EventEmitter);

  function Logcat() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, Logcat);

    _get(Object.getPrototypeOf(Logcat.prototype), 'constructor', this).call(this);
    this.adb = opts.adb;
    this.clearLogs = opts.clearDeviceLogsOnStart || false;
    this.debug = opts.debug;
    this.debugTrace = opts.debugTrace;
    this.maxBufferSize = opts.maxBufferSize || MAX_BUFFER_SIZE;
    this.logs = [];
    this.logIdxSinceLastRequest = 0;
  }

  _createClass(Logcat, [{
    key: 'startCapture',
    value: function startCapture() {
      var _this2 = this;

      var started = false;
      return new _bluebird2['default'](function callee$2$0(_resolve, _reject) {
        var resolve, reject;
        return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
          var _this = this;

          while (1) switch (context$3$0.prev = context$3$0.next) {
            case 0:
              resolve = function resolve() {
                started = true;
                _resolve.apply(undefined, arguments);
              };

              reject = function reject() {
                started = true;
                _reject.apply(undefined, arguments);
              };

              if (!this.clearLogs) {
                context$3$0.next = 5;
                break;
              }

              context$3$0.next = 5;
              return _regeneratorRuntime.awrap(this.clear());

            case 5:

              log.debug('Starting logcat capture');
              this.proc = new _teen_process.SubProcess(this.adb.path, this.adb.defaultArgs.concat(['logcat', '-v', 'threadtime']));
              this.proc.on('exit', function (code, signal) {
                log.error('Logcat terminated with code ' + code + ', signal ' + signal);
                _this.proc = null;
                if (!started) {
                  log.warn('Logcat not started. Continuing');
                  resolve();
                }
              });
              this.proc.on('lines-stderr', function (lines) {
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                  for (var _iterator = _getIterator(lines), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var line = _step.value;

                    if (/execvp\(\)/.test(line)) {
                      log.error('Logcat process failed to start');
                      reject(new Error('Logcat process failed to start. stderr: ' + line));
                    }
                    _this.outputHandler(line, 'STDERR: ');
                  }
                } catch (err) {
                  _didIteratorError = true;
                  _iteratorError = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion && _iterator['return']) {
                      _iterator['return']();
                    }
                  } finally {
                    if (_didIteratorError) {
                      throw _iteratorError;
                    }
                  }
                }

                resolve();
              });
              this.proc.on('lines-stdout', function (lines) {
                resolve();
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                  for (var _iterator2 = _getIterator(lines), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var line = _step2.value;

                    _this.outputHandler(line);
                  }
                } catch (err) {
                  _didIteratorError2 = true;
                  _iteratorError2 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion2 && _iterator2['return']) {
                      _iterator2['return']();
                    }
                  } finally {
                    if (_didIteratorError2) {
                      throw _iteratorError2;
                    }
                  }
                }
              });
              context$3$0.next = 12;
              return _regeneratorRuntime.awrap(this.proc.start(0));

            case 12:
              // resolve after a timeout, even if no output was recorded
              setTimeout(resolve, LOGCAT_PROC_STARTUP_TIMEOUT);

            case 13:
            case 'end':
              return context$3$0.stop();
          }
        }, null, _this2);
      });
    }
  }, {
    key: 'outputHandler',
    value: function outputHandler(output) {
      var prefix = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];

      output = output.trim();
      if (!output) {
        return;
      }

      if (this.logs.length >= this.maxBufferSize) {
        this.logs.shift();
        if (this.logIdxSinceLastRequest > 0) {
          --this.logIdxSinceLastRequest;
        }
      }
      var outputObj = {
        timestamp: Date.now(),
        level: 'ALL',
        message: output
      };
      this.logs.push(outputObj);
      this.emit('output', outputObj);
      var isTrace = /W\/Trace/.test(output);
      if (this.debug && (!isTrace || this.debugTrace)) {
        log.debug(prefix + output);
      }
    }
  }, {
    key: 'stopCapture',
    value: function stopCapture() {
      return _regeneratorRuntime.async(function stopCapture$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            log.debug("Stopping logcat capture");

            if (!(!this.proc || !this.proc.isRunning)) {
              context$2$0.next = 5;
              break;
            }

            log.debug("Logcat already stopped");
            this.proc = null;
            return context$2$0.abrupt('return');

          case 5:
            this.proc.removeAllListeners('exit');
            context$2$0.next = 8;
            return _regeneratorRuntime.awrap(this.proc.stop());

          case 8:
            this.proc = null;

          case 9:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getLogs',
    value: function getLogs() {
      if (this.logIdxSinceLastRequest < this.logs.length) {
        var result = this.logs.slice(this.logIdxSinceLastRequest);
        this.logIdxSinceLastRequest = this.logs.length;
        return result;
      }
      return [];
    }
  }, {
    key: 'getAllLogs',
    value: function getAllLogs() {
      return this.logs;
    }
  }, {
    key: 'clear',
    value: function clear() {
      var args;
      return _regeneratorRuntime.async(function clear$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            log.debug('Clearing logcat logs from device');
            context$2$0.prev = 1;
            args = this.adb.defaultArgs.concat(['logcat', '-c']);

            log.debug('Running \'' + this.adb.path + ' ' + args.join(' ') + '\'');
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap((0, _teen_process.exec)(this.adb.path, args));

          case 6:
            context$2$0.next = 11;
            break;

          case 8:
            context$2$0.prev = 8;
            context$2$0.t0 = context$2$0['catch'](1);

            log.warn('Failed to clear logcat logs: ' + context$2$0.t0.message);

          case 11:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[1, 8]]);
    }
  }]);

  return Logcat;
})(EventEmitter);

exports['default'] = Logcat;
module.exports = exports['default'];
// eslint-disable-line promise/param-names
//# sourceMappingURL=data:application/json;charset=utf8;base64,
