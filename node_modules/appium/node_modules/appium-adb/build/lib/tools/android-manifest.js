'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _teen_process = require('teen_process');

var _loggerJs = require('../logger.js');

var _loggerJs2 = _interopRequireDefault(_loggerJs);

var _helpersJs = require('../helpers.js');

var _appiumSupport = require('appium-support');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _xmldom = require('xmldom');

var _xmldom2 = _interopRequireDefault(_xmldom);

var _xpath = require('xpath');

var _xpath2 = _interopRequireDefault(_xpath);

var manifestMethods = {};

// android:process= may be defined in AndroidManifest.xml
// http://developer.android.com/reference/android/R.attr.html#process
// note that the process name when used with ps must be truncated to the last 15 chars
// ps -c com.example.android.apis becomes ps -c le.android.apis
manifestMethods.processFromManifest = function callee$0$0(localApk) {
  var args, _ref, stdout, result, lines, applicationRegex, applicationFound, attributeRegex, processRegex, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, line, notAttribute, _process;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.initAapt());

      case 2:
        _loggerJs2['default'].info("Retrieving process from manifest");
        args = ['dump', 'xmltree', localApk, 'AndroidManifest.xml'];
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)(this.binaries.aapt, args));

      case 6:
        _ref = context$1$0.sent;
        stdout = _ref.stdout;
        result = null;
        lines = stdout.split("\n");
        applicationRegex = new RegExp(/\s+E: application \(line=\d+\).*/);
        applicationFound = false;
        attributeRegex = new RegExp(/\s+A: .+/);
        processRegex = new RegExp(/\s+A: android:process\(0x01010011\)="([^"]+).*"/);
        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 17;
        _iterator = _getIterator(lines);

      case 19:
        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
          context$1$0.next = 36;
          break;
        }

        line = _step.value;

        if (applicationFound) {
          context$1$0.next = 25;
          break;
        }

        if (applicationRegex.test(line)) {
          applicationFound = true;
        }
        context$1$0.next = 33;
        break;

      case 25:
        notAttribute = !attributeRegex.test(line);

        if (!notAttribute) {
          context$1$0.next = 28;
          break;
        }

        return context$1$0.abrupt('break', 36);

      case 28:
        _process = processRegex.exec(line);

        if (!(_process && _process.length > 1)) {
          context$1$0.next = 33;
          break;
        }

        result = _process[1];
        // must trim to last 15 for android's ps binary
        if (result.length > 15) {
          result = result.substr(result.length - 15);
        }
        return context$1$0.abrupt('break', 36);

      case 33:
        _iteratorNormalCompletion = true;
        context$1$0.next = 19;
        break;

      case 36:
        context$1$0.next = 42;
        break;

      case 38:
        context$1$0.prev = 38;
        context$1$0.t0 = context$1$0['catch'](17);
        _didIteratorError = true;
        _iteratorError = context$1$0.t0;

      case 42:
        context$1$0.prev = 42;
        context$1$0.prev = 43;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 45:
        context$1$0.prev = 45;

        if (!_didIteratorError) {
          context$1$0.next = 48;
          break;
        }

        throw _iteratorError;

      case 48:
        return context$1$0.finish(45);

      case 49:
        return context$1$0.finish(42);

      case 50:
        return context$1$0.abrupt('return', result);

      case 51:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[17, 38, 42, 50], [43,, 45, 49]]);
};

/**
 * @typedef {Object} APKInfo
 * @property {string} apkPackage - The name of application package, for example 'com.acme.app'.
 * @property {string} apkActivity - The name of main application activity.
 */

/**
* Extract package and main activity name from application manifest using
* the custom apk tools.
*
* @param {string} localApk - The full path to application package.
* @param {string} aaptPath - The full path to appt binary.
* @param {string} jarPath - The full path to appium_apk_tools.jar utility
* @param {string} tmpRoot - The full path to the class-wide temporary folder.
* @return {APKInfo} The parsed application info.
* @throws {Error} If there was an error while getting the data from the given
*                 application package.
*/
function extractApkInfoWithApkTools(localApk, aaptPath, jarPath, tmpRoot) {
  var args, stdout, apkPackage, apkActivity, outputPath, getLaunchActivity, output, act;
  return _regeneratorRuntime.async(function extractApkInfoWithApkTools$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _loggerJs2['default'].info("Extracting package and launch activity from manifest");
        args = ['dump', 'badging', localApk];
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)(aaptPath, args));

      case 4:
        stdout = context$1$0.sent.stdout;
        apkPackage = new RegExp(/package: name='([^']+)'/g).exec(stdout);

        if (!(!apkPackage || apkPackage.length < 2)) {
          context$1$0.next = 8;
          break;
        }

        throw new Error('Cannot parse package name from ' + ('\'' + _lodash2['default'].join([aaptPath, 'dump', 'badging', '"' + localApk + '"'], ' ') + '\' command  output'));

      case 8:
        apkPackage = apkPackage[1];
        apkActivity = new RegExp(/launchable-activity: name='([^']+)'/g).exec(stdout);

        if (!(apkActivity && apkActivity.length >= 2)) {
          context$1$0.next = 13;
          break;
        }

        apkActivity = apkActivity[1];
        return context$1$0.abrupt('return', { apkPackage: apkPackage, apkActivity: apkActivity });

      case 13:
        outputPath = _path2['default'].resolve(tmpRoot, apkPackage);
        getLaunchActivity = ['-jar', jarPath, 'printLaunchActivity', localApk, outputPath];
        context$1$0.next = 17;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('java', getLaunchActivity));

      case 17:
        output = context$1$0.sent;

        if (!output.stderr) {
          context$1$0.next = 20;
          break;
        }

        throw new Error('Cannot parse launchActivity from manifest: ' + output.stderr);

      case 20:
        stdout = output.stdout;
        act = new RegExp(/Launch activity parsed:([^']+)/g).exec(stdout);

        if (!(act && act.length >= 2)) {
          context$1$0.next = 25;
          break;
        }

        apkActivity = act[1];
        return context$1$0.abrupt('return', { apkPackage: apkPackage, apkActivity: apkActivity });

      case 25:
        throw new Error('Cannot parse main activity name from \'' + stdout + '\' command  output');

      case 26:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

/**
 * Extract package and main activity name from application manifest using
 * apkanalyzer tool.
 *
 * @param {string} localApk - The full path to application package.
 * @param {string} apkanalyzerPath - The full path to apkanalyzer tool.
 * @return {APKInfo} The parsed application info.
 * @throws {Error} If there was an error while getting the data from the given
 *                 application package or if the tool itself
 *                 is not present on the local file system.
 */
function extractApkInfoWithApkanalyzer(localApk, apkanalyzerPath) {
  var args, manifestXml, doc, apkPackageAttribute, apkPackage, apkActivityAttribute, apkActivity;
  return _regeneratorRuntime.async(function extractApkInfoWithApkanalyzer$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        args = ['-h', 'manifest', 'print', localApk];

        _loggerJs2['default'].debug('Starting \'' + apkanalyzerPath + '\' with args ' + JSON.stringify(args));
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)(apkanalyzerPath, args, {
          shell: true,
          cwd: _path2['default'].dirname(apkanalyzerPath)
        }));

      case 4:
        manifestXml = context$1$0.sent.stdout;
        doc = new _xmldom2['default'].DOMParser().parseFromString(manifestXml);
        apkPackageAttribute = _xpath2['default'].select1('//manifest/@package', doc);

        if (apkPackageAttribute) {
          context$1$0.next = 9;
          break;
        }

        throw new Error('Cannot parse package name from ' + manifestXml);

      case 9:
        apkPackage = apkPackageAttribute.value;
        apkActivityAttribute = _xpath2['default'].select1("//application/*[starts-with(name(), 'activity') " + "and .//action[@*[local-name()='name' and .='android.intent.action.MAIN']] " + "and .//category[@*[local-name()='name' and .='android.intent.category.LAUNCHER']]]" + "/@*[local-name()='name']", doc);

        if (apkActivityAttribute) {
          context$1$0.next = 13;
          break;
        }

        throw new Error('Cannot parse main activity name from ' + manifestXml);

      case 13:
        apkActivity = apkActivityAttribute.value;
        return context$1$0.abrupt('return', { apkPackage: apkPackage, apkActivity: apkActivity });

      case 15:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

/**
 * Extract package and main activity name from application manifest.
 *
 * @param {string} localApk - The full path to application package.
 * @return {APKInfo} The parsed application info.
 * @throws {error} If there was an error while getting the data from the given
 *                 application package.
 */
manifestMethods.packageAndLaunchActivityFromManifest = function callee$0$0(localApk) {
  var apkInfoGetters, savedError, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, infoGetter, _ref2, apkPackage, apkActivity;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        apkInfoGetters = [function callee$1$0() {
          var apkanalyzerPath;
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap((0, _helpersJs.getApkanalyzerForOs)(this));

              case 2:
                apkanalyzerPath = context$2$0.sent;
                context$2$0.next = 5;
                return _regeneratorRuntime.awrap(extractApkInfoWithApkanalyzer(localApk, apkanalyzerPath));

              case 5:
                return context$2$0.abrupt('return', context$2$0.sent);

              case 6:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        }, function callee$1$0() {
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(this.initAapt());

              case 2:
                context$2$0.next = 4;
                return _regeneratorRuntime.awrap(extractApkInfoWithApkTools(localApk, this.binaries.aapt, this.jars['appium_apk_tools.jar'], this.tmpDir));

              case 4:
                return context$2$0.abrupt('return', context$2$0.sent);

              case 5:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        }];
        savedError = undefined;
        _iteratorNormalCompletion2 = true;
        _didIteratorError2 = false;
        _iteratorError2 = undefined;
        context$1$0.prev = 5;
        _iterator2 = _getIterator(apkInfoGetters);

      case 7:
        if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
          context$1$0.next = 27;
          break;
        }

        infoGetter = _step2.value;
        context$1$0.prev = 9;
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(infoGetter());

      case 12:
        _ref2 = context$1$0.sent;
        apkPackage = _ref2.apkPackage;
        apkActivity = _ref2.apkActivity;

        _loggerJs2['default'].info('Package name: \'' + apkPackage + '\'');
        _loggerJs2['default'].info('Main activity name: \'' + apkActivity + '\'');
        return context$1$0.abrupt('return', { apkPackage: apkPackage, apkActivity: apkActivity });

      case 20:
        context$1$0.prev = 20;
        context$1$0.t0 = context$1$0['catch'](9);

        if (infoGetter !== _lodash2['default'].last(apkInfoGetters)) {
          _loggerJs2['default'].info('Using the alternative activity name detection method ' + ('because of: ' + context$1$0.t0.message));
        }
        savedError = context$1$0.t0;

      case 24:
        _iteratorNormalCompletion2 = true;
        context$1$0.next = 7;
        break;

      case 27:
        context$1$0.next = 33;
        break;

      case 29:
        context$1$0.prev = 29;
        context$1$0.t1 = context$1$0['catch'](5);
        _didIteratorError2 = true;
        _iteratorError2 = context$1$0.t1;

      case 33:
        context$1$0.prev = 33;
        context$1$0.prev = 34;

        if (!_iteratorNormalCompletion2 && _iterator2['return']) {
          _iterator2['return']();
        }

      case 36:
        context$1$0.prev = 36;

        if (!_didIteratorError2) {
          context$1$0.next = 39;
          break;
        }

        throw _iteratorError2;

      case 39:
        return context$1$0.finish(36);

      case 40:
        return context$1$0.finish(33);

      case 41:
        throw new Error('packageAndLaunchActivityFromManifest failed. ' + ('Original error: ' + savedError.message) + (savedError.stderr ? '; StdErr: ' + savedError.stderr : ''));

      case 42:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[5, 29, 33, 41], [9, 20], [34,, 36, 40]]);
};

/**
 * Extract target SDK version from application manifest.
 *
 * @param {string} localApk - The full path to application package.
 * @return {number} The version of the target SDK.
 * @throws {error} If there was an error while getting the data from the given
 *                 application package.
 */
manifestMethods.targetSdkVersionFromManifest = function callee$0$0(localApk) {
  var args, output, _ref3, stdout, targetSdkVersion;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.initAapt());

      case 2:
        _loggerJs2['default'].info("Extracting package and launch activity from manifest");
        args = ['dump', 'badging', localApk];
        output = undefined;
        context$1$0.prev = 5;
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)(this.binaries.aapt, args));

      case 8:
        _ref3 = context$1$0.sent;
        stdout = _ref3.stdout;

        output = stdout;
        context$1$0.next = 16;
        break;

      case 13:
        context$1$0.prev = 13;
        context$1$0.t0 = context$1$0['catch'](5);
        throw new Error('fetching targetSdkVersion from local APK failed. Original error: ' + context$1$0.t0.message);

      case 16:
        targetSdkVersion = new RegExp(/targetSdkVersion:'([^']+)'/g).exec(output);

        if (targetSdkVersion) {
          context$1$0.next = 19;
          break;
        }

        throw new Error('targetSdkVersion is not specified in the application.');

      case 19:
        return context$1$0.abrupt('return', parseInt(targetSdkVersion[1], 10));

      case 20:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[5, 13]]);
};

/**
 * Extract target SDK version from package information.
 *
 * @param {string} pkg - The class name of the package installed on the device under test.
 * @return {number} The version of the target SDK.
 */
manifestMethods.targetSdkVersionUsingPKG = function callee$0$0(pkg) {
  var stdout, targetSdkVersion;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.shell(['dumpsys', 'package', pkg]));

      case 2:
        stdout = context$1$0.sent;
        targetSdkVersion = new RegExp(/targetSdk=([^\s\s]+)/g).exec(stdout);

        if (targetSdkVersion && targetSdkVersion.length >= 2) {
          targetSdkVersion = targetSdkVersion[1];
        } else {
          // targetSdk not found in the dump, assigning 0 to targetSdkVersion
          targetSdkVersion = 0;
        }
        return context$1$0.abrupt('return', parseInt(targetSdkVersion, 10));

      case 6:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Create binary representation of package manifest (usually AndroidManifest.xml).
 * `${manifest}.apk` file will be created as the result of this method
 * containing the compiled manifest.
 *
 * @param {string} manifest - Full path to the initial manifest template
 * @param {string} manifestPackage - The name of the manifest package
 * @param {string} targetPackage - The name of the destination package
 */
manifestMethods.compileManifest = function callee$0$0(manifest, manifestPackage, targetPackage) {
  var _ref4, platform, platformPath;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _loggerJs2['default'].debug('Compiling manifest ' + manifest);
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap((0, _helpersJs.getAndroidPlatformAndPath)());

      case 3:
        _ref4 = context$1$0.sent;
        platform = _ref4.platform;
        platformPath = _ref4.platformPath;

        if (platform) {
          context$1$0.next = 8;
          break;
        }

        throw new Error("Required platform doesn't exist (API level >= 17)");

      case 8:
        _loggerJs2['default'].debug('Compiling manifest.');
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(this.initAapt());

      case 11:
        context$1$0.prev = 11;
        context$1$0.next = 14;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)(this.binaries.aapt, ['package', '-M', manifest, '--rename-manifest-package', manifestPackage, '--rename-instrumentation-target-package', targetPackage, '-I', _path2['default'].resolve(platformPath, 'android.jar'), '-F', manifest + '.apk', '-f']));

      case 14:
        _loggerJs2['default'].debug("Compiled manifest");
        context$1$0.next = 20;
        break;

      case 17:
        context$1$0.prev = 17;
        context$1$0.t0 = context$1$0['catch'](11);
        throw new Error('Error compiling manifest. Original error: ' + context$1$0.t0.message);

      case 20:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[11, 17]]);
};

/**
 * Replace/insert the specially precompiled manifest file into the
 * particular package.
 *
 * @param {string} manifest - Full path to the precompiled manifest
 *                            created by `compileManifest` method call
 *                            without .apk extension
 * @param {string} srcApk - Full path to the existing valid application package, where
 *                          this manifest has to be insetred to. This package
 *                          will NOT be modified.
 * @param {string} dstApk - Full path to the resulting package.
 *                          The file will be overriden if it already exists.
 */
manifestMethods.insertManifest = function callee$0$0(manifest, srcApk, dstApk) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _loggerJs2['default'].debug('Inserting manifest, src: ' + srcApk + ' dst: ' + dstApk);
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.initAapt());

      case 3:
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap((0, _helpersJs.unzipFile)(manifest + '.apk'));

      case 5:
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.copyFile(srcApk, dstApk));

      case 7:
        _loggerJs2['default'].debug("Testing new tmp apk");
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap((0, _helpersJs.assertZipArchive)(dstApk));

      case 10:
        _loggerJs2['default'].debug("Moving manifest");
        context$1$0.prev = 11;
        context$1$0.next = 14;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)(this.binaries.aapt, ['remove', dstApk, _path2['default'].basename(manifest)]));

      case 14:
        context$1$0.next = 18;
        break;

      case 16:
        context$1$0.prev = 16;
        context$1$0.t0 = context$1$0['catch'](11);

      case 18:
        context$1$0.next = 20;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)(this.binaries.aapt, ['add', dstApk, _path2['default'].basename(manifest)], { cwd: _path2['default'].dirname(manifest) }));

      case 20:
        _loggerJs2['default'].debug("Inserted manifest.");

      case 21:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[11, 16]]);
};

/**
 * Check whether package manifest contains Internet permissions.
 *
 * @param {string} localApk - The full path to application package.
 * @return {boolean} True if the manifest requires Internet access permission.
 */
manifestMethods.hasInternetPermissionFromManifest = function callee$0$0(localApk) {
  var _ref5, stdout;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.initAapt());

      case 2:
        _loggerJs2['default'].debug('Checking if \'' + localApk + '\' requires internet access permission in the manifest');
        context$1$0.prev = 3;
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)(this.binaries.aapt, ['dump', 'badging', localApk]));

      case 6:
        _ref5 = context$1$0.sent;
        stdout = _ref5.stdout;
        return context$1$0.abrupt('return', new RegExp(/uses-permission:.*'android.permission.INTERNET'/).test(stdout));

      case 11:
        context$1$0.prev = 11;
        context$1$0.t0 = context$1$0['catch'](3);
        throw new Error('Cannot check if \'' + localApk + '\' requires internet access permission. ' + ('Original error: ' + context$1$0.t0.message));

      case 14:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[3, 11]]);
};

exports['default'] = manifestMethods;
module.exports = exports['default'];

// process must be an attribute after application.

// this is an application attribute process.

// Look for activity or activity-alias with
// action == android.intent.action.MAIN and
// category == android.intent.category.LAUNCHER
// descendants
//# sourceMappingURL=data:application/json;charset=utf8;base64,
