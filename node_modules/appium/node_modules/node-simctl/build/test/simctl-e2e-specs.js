/* global it:true, describe:true*/
require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _libSimctlJs = require('../lib/simctl.js');

var _appiumXcode = require('appium-xcode');

var _appiumXcode2 = _interopRequireDefault(_appiumXcode);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _appiumSupport = require('appium-support');

var _asyncbox = require('asyncbox');

var should = _chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('simctl', function () {
  var DEVICE_NAME = 'iPhone 6';
  var MOCHA_TIMEOUT = 200000;
  this.timeout(MOCHA_TIMEOUT);

  var randName = undefined;
  var randDeviceUdid = null;
  var validSdks = [];

  before(function callee$1$0() {
    var devices, i, randNum, nameFound, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, list;

    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.getDevices)());

        case 2:
          devices = context$2$0.sent;

          validSdks = _lodash2['default'].keys(devices).sort(function (a, b) {
            return a - b;
          });

          if (validSdks.length) {
            context$2$0.next = 6;
            break;
          }

          throw new Error('No valid SDKs');

        case 6:
          console.log('Found valid SDKs: ' + validSdks.join(', ')); // eslint-disable-line no-console

          // need to find a random name that does not already exist
          // give it 5 tries
          i = 0;

        case 8:
          if (!(i < 5)) {
            context$2$0.next = 44;
            break;
          }

          randNum = parseInt(Math.random() * 100, 10);

          randName = 'device' + randNum;

          nameFound = false;
          _iteratorNormalCompletion = true;
          _didIteratorError = false;
          _iteratorError = undefined;
          context$2$0.prev = 15;
          _iterator = _getIterator(_lodash2['default'].values(devices));

        case 17:
          if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
            context$2$0.next = 25;
            break;
          }

          list = _step.value;

          if (!_lodash2['default'].includes(_lodash2['default'].map(list, 'name'), randName)) {
            context$2$0.next = 22;
            break;
          }

          // need to find another random name
          nameFound = true;
          return context$2$0.abrupt('break', 25);

        case 22:
          _iteratorNormalCompletion = true;
          context$2$0.next = 17;
          break;

        case 25:
          context$2$0.next = 31;
          break;

        case 27:
          context$2$0.prev = 27;
          context$2$0.t0 = context$2$0['catch'](15);
          _didIteratorError = true;
          _iteratorError = context$2$0.t0;

        case 31:
          context$2$0.prev = 31;
          context$2$0.prev = 32;

          if (!_iteratorNormalCompletion && _iterator['return']) {
            _iterator['return']();
          }

        case 34:
          context$2$0.prev = 34;

          if (!_didIteratorError) {
            context$2$0.next = 37;
            break;
          }

          throw _iteratorError;

        case 37:
          return context$2$0.finish(34);

        case 38:
          return context$2$0.finish(31);

        case 39:
          if (nameFound) {
            context$2$0.next = 41;
            break;
          }

          return context$2$0.abrupt('break', 44);

        case 41:
          i++;
          context$2$0.next = 8;
          break;

        case 44:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this, [[15, 27, 31, 39], [32,, 34, 38]]);
  });

  // eslint-disable-line curly
  it('should create a device', function callee$1$0() {
    var udid;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.createDevice)(randName, DEVICE_NAME, _lodash2['default'].last(validSdks)));

        case 2:
          udid = context$2$0.sent;

          (typeof udid).should.equal('string');
          udid.length.should.equal(36);

        case 5:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('should get devices', function callee$1$0() {
    var sdkDevices;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.getDevices)(_lodash2['default'].last(validSdks)));

        case 2:
          sdkDevices = context$2$0.sent;

          _lodash2['default'].map(sdkDevices, 'name').should.include(randName);
          randDeviceUdid = sdkDevices.filter(function (d) {
            return d.name === randName;
          })[0].udid;

        case 5:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('should erase devices', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.eraseDevice)(randDeviceUdid, 16000));

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('should delete devices', function callee$1$0() {
    var sdkDevices;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.deleteDevice)(randDeviceUdid));

        case 2:
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.getDevices)(_lodash2['default'].last(validSdks)));

        case 4:
          sdkDevices = context$2$0.sent;

          _lodash2['default'].map(sdkDevices, 'name').should.not.include(randName);

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('should return a nice error for invalid usage', function callee$1$0() {
    var err;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          err = null;
          context$2$0.prev = 1;
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.createDevice)('foo', 'bar', 'baz'));

        case 4:
          context$2$0.next = 9;
          break;

        case 6:
          context$2$0.prev = 6;
          context$2$0.t0 = context$2$0['catch'](1);

          err = context$2$0.t0;

        case 9:
          should.exist(err);
          err.message.should.include('Invalid device type: bar');

        case 11:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this, [[1, 6]]);
  });

  it('should create a device and be able to see it in devices list right away', function callee$1$0() {
    var sdk, numSimsBefore, udid, numSimsAfter;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          sdk = _lodash2['default'].last(validSdks);
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.getDevices)());

        case 3:
          context$2$0.t0 = sdk;
          numSimsBefore = context$2$0.sent[context$2$0.t0].length;
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.createDevice)('node-simctl test', DEVICE_NAME, sdk));

        case 7:
          udid = context$2$0.sent;
          context$2$0.next = 10;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.getDevices)());

        case 10:
          context$2$0.t1 = sdk;
          numSimsAfter = context$2$0.sent[context$2$0.t1].length;

          numSimsAfter.should.equal(numSimsBefore + 1);
          context$2$0.next = 15;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.deleteDevice)(udid));

        case 15:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('should create a device with compatible properties', function callee$1$0() {
    var sdk, devices, firstDevice, expectedList;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          sdk = _lodash2['default'].last(validSdks);
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.getDevices)());

        case 3:
          context$2$0.t0 = sdk;
          devices = context$2$0.sent[context$2$0.t0];
          firstDevice = devices[0];
          expectedList = ['name', 'sdk', 'state', 'udid'];

          _Object$keys(firstDevice).sort().should.eql(expectedList);

        case 8:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('should not fail to shutdown a shutdown simulator', function callee$1$0() {
    var sdk, udid;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          sdk = _lodash2['default'].last(validSdks);
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.createDevice)('node-simctl test', DEVICE_NAME, sdk));

        case 3:
          udid = context$2$0.sent;
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.shutdown)(udid).should.eventually.not.be.rejected);

        case 6:
          context$2$0.next = 8;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.deleteDevice)(udid));

        case 8:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  describe('on running Simulator', function () {
    if (process.env.TRAVIS) {
      this.retries(3);
    }

    var udid = undefined;
    var major = undefined,
        minor = undefined;

    before(function callee$2$0() {
      var _ref, sdk;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(_appiumXcode2['default'].getVersion(true));

          case 2:
            _ref = context$3$0.sent;
            major = _ref.major;
            minor = _ref.minor;

            if (!(major < 8 || major === 8 && minor < 1)) {
              context$3$0.next = 7;
              break;
            }

            return context$3$0.abrupt('return', this.skip());

          case 7:
            sdk = _lodash2['default'].last(validSdks);
            context$3$0.next = 10;
            return _regeneratorRuntime.awrap((0, _libSimctlJs.createDevice)('runningSimTest', DEVICE_NAME, sdk));

          case 10:
            udid = context$3$0.sent;
            context$3$0.next = 13;
            return _regeneratorRuntime.awrap((0, _libSimctlJs.bootDevice)(udid));

          case 13:
            context$3$0.next = 15;
            return _regeneratorRuntime.awrap((0, _libSimctlJs.launch)(udid, 'com.apple.springboard', MOCHA_TIMEOUT));

          case 15:
            context$3$0.next = 17;
            return _regeneratorRuntime.awrap(_bluebird2['default'].delay(5000));

          case 17:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    after(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            if (!udid) {
              context$3$0.next = 10;
              break;
            }

            context$3$0.prev = 1;
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap((0, _libSimctlJs.shutdown)(udid));

          case 4:
            context$3$0.next = 8;
            break;

          case 6:
            context$3$0.prev = 6;
            context$3$0.t0 = context$3$0['catch'](1);

          case 8:
            context$3$0.next = 10;
            return _regeneratorRuntime.awrap((0, _libSimctlJs.deleteDevice)(udid));

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this, [[1, 6]]);
    });

    describe('pasteboard', function () {
      var pbRetries = 0;
      before(function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              if (!(major < 8 || major === 8 && minor < 1)) {
                context$4$0.next = 2;
                break;
              }

              return context$4$0.abrupt('return', this.skip());

            case 2:
              if (!(major === 9)) {
                context$4$0.next = 7;
                break;
              }

              if (!process.env.TRAVIS) {
                context$4$0.next = 5;
                break;
              }

              return context$4$0.abrupt('return', this.skip());

            case 5:
              // TODO: recheck when full Xcode 9 comes out to see if pasteboard works better
              pbRetries = 200;
              this.timeout(200 * 1000 * 2);

            case 7:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
      it('should set and get the content of the pasteboard', function callee$3$0() {
        var pbContent, encoding;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          var _this = this;

          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              pbContent = 'blablabla';
              encoding = 'ascii';
              context$4$0.next = 4;
              return _regeneratorRuntime.awrap((0, _libSimctlJs.setPasteboard)(udid, pbContent, encoding));

            case 4:
              context$4$0.next = 6;
              return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(pbRetries, 1000, function callee$4$0() {
                return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
                  while (1) switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      context$5$0.next = 2;
                      return _regeneratorRuntime.awrap((0, _libSimctlJs.getPasteboard)(udid, encoding));

                    case 2:
                      context$5$0.t0 = pbContent;
                      context$5$0.sent.should.eql(context$5$0.t0);

                    case 4:
                    case 'end':
                      return context$5$0.stop();
                  }
                }, null, _this);
              }));

            case 6:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
    });

    describe('add media', function () {
      var BASE64_PNG = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNk+M9QDwADhgGAWjR9awAAAABJRU5ErkJggg==';
      var picturePath = undefined;
      before(function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              if (!(major < 8 || major === 8 && minor < 1)) {
                context$4$0.next = 2;
                break;
              }

              return context$4$0.abrupt('return', this.skip());

            case 2:
              context$4$0.next = 4;
              return _regeneratorRuntime.awrap(_appiumSupport.tempDir.path({ prefix: 'pixel', suffix: '.png' }));

            case 4:
              picturePath = context$4$0.sent;
              context$4$0.next = 7;
              return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(picturePath, new Buffer(BASE64_PNG, 'base64').toString('binary'), 'binary'));

            case 7:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
      after(function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(picturePath));

            case 2:
              if (!context$4$0.sent) {
                context$4$0.next = 5;
                break;
              }

              context$4$0.next = 5;
              return _regeneratorRuntime.awrap(_appiumSupport.fs.unlink(picturePath));

            case 5:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
      it('should add media files', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap((0, _libSimctlJs.addMedia)(udid, picturePath));

            case 2:
              context$4$0.sent.code.should.eql(0);

            case 3:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
    });

    it('should extract applications information', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _libSimctlJs.appInfo)(udid, 'com.apple.springboard'));

          case 2:
            context$3$0.sent.should.include('ApplicationType');

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
});

// Wait for boot to complete

// pause a moment or everything is messed up
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3Qvc2ltY3RsLWUyZS1zcGVjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O29CQUdpQixNQUFNOzs7OzhCQUNJLGtCQUFrQjs7OztzQkFDL0IsUUFBUTs7OzsyQkFFMEMsa0JBQWtCOzsyQkFDaEUsY0FBYzs7Ozt3QkFDbEIsVUFBVTs7Ozs2QkFDSSxnQkFBZ0I7O3dCQUNkLFVBQVU7O0FBR3hDLElBQU0sTUFBTSxHQUFHLGtCQUFLLE1BQU0sRUFBRSxDQUFDO0FBQzdCLGtCQUFLLEdBQUcsNkJBQWdCLENBQUM7O0FBRXpCLFFBQVEsQ0FBQyxRQUFRLEVBQUUsWUFBWTtBQUM3QixNQUFNLFdBQVcsR0FBRyxVQUFVLENBQUM7QUFDL0IsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDO0FBQzdCLE1BQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7O0FBRTVCLE1BQUksUUFBUSxZQUFBLENBQUM7QUFDYixNQUFJLGNBQWMsR0FBRyxJQUFJLENBQUM7QUFDMUIsTUFBSSxTQUFTLEdBQUcsRUFBRSxDQUFDOztBQUVuQixRQUFNLENBQUM7UUFDRCxPQUFPLEVBU0YsQ0FBQyxFQUNKLE9BQU8sRUFHUCxTQUFTLGtGQUNKLElBQUk7Ozs7OzsyQ0FkSyw4QkFBWTs7O0FBQTVCLGlCQUFPOztBQUNYLG1CQUFTLEdBQUcsb0JBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFDLENBQUMsRUFBRSxDQUFDO21CQUFLLENBQUMsR0FBRyxDQUFDO1dBQUEsQ0FBQyxDQUFDOztjQUM3QyxTQUFTLENBQUMsTUFBTTs7Ozs7Z0JBQ2IsSUFBSSxLQUFLLENBQUMsZUFBZSxDQUFDOzs7QUFFbEMsaUJBQU8sQ0FBQyxHQUFHLHdCQUFzQixTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFHLENBQUM7Ozs7QUFJaEQsV0FBQyxHQUFHLENBQUM7OztnQkFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFBOzs7OztBQUNm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LFdBQVcsQ0FBQzs7Ozs7OztPQUUvQixDQUFDLENBQUM7QUFDSCxRQUFFLENBQUMsd0JBQXdCLEVBQUU7Ozs7OytDQUNwQiwyQkFBUyxJQUFJLEVBQUUsV0FBVyxDQUFDOzs7K0JBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQzs7Ozs7OztPQUN0RCxDQUFDLENBQUM7S0FDSixDQUFDLENBQUM7O0FBRUgsTUFBRSxDQUFDLHlDQUF5QyxFQUFFOzs7Ozs2Q0FDckMsMEJBQVEsSUFBSSxFQUFFLHVCQUF1QixDQUFDOzs7NkJBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUI7Ozs7Ozs7S0FDaEYsQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDO0NBQ0osQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3Qvc2ltY3RsLWUyZS1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbCBpdDp0cnVlLCBkZXNjcmliZTp0cnVlKi9cbi8vIHRyYW5zcGlsZTptb2NoYVxuXG5pbXBvcnQgY2hhaSBmcm9tICdjaGFpJztcbmltcG9ydCBjaGFpQXNQcm9taXNlZCBmcm9tICdjaGFpLWFzLXByb21pc2VkJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBjcmVhdGVEZXZpY2UsIGRlbGV0ZURldmljZSwgZXJhc2VEZXZpY2UsIGdldERldmljZXMsIHNldFBhc3RlYm9hcmQsIGdldFBhc3RlYm9hcmQsXG4gICAgICAgICBib290RGV2aWNlLCBsYXVuY2gsIHNodXRkb3duLCBhZGRNZWRpYSwgYXBwSW5mbyB9IGZyb20gJy4uL2xpYi9zaW1jdGwuanMnO1xuaW1wb3J0IHhjb2RlIGZyb20gJ2FwcGl1bS14Y29kZSc7XG5pbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgeyBmcywgdGVtcERpciB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCB7IHJldHJ5SW50ZXJ2YWwgfSBmcm9tICdhc3luY2JveCc7XG5cblxuY29uc3Qgc2hvdWxkID0gY2hhaS5zaG91bGQoKTtcbmNoYWkudXNlKGNoYWlBc1Byb21pc2VkKTtcblxuZGVzY3JpYmUoJ3NpbWN0bCcsIGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgREVWSUNFX05BTUUgPSAnaVBob25lIDYnO1xuICBjb25zdCBNT0NIQV9USU1FT1VUID0gMjAwMDAwO1xuICB0aGlzLnRpbWVvdXQoTU9DSEFfVElNRU9VVCk7XG5cbiAgbGV0IHJhbmROYW1lO1xuICBsZXQgcmFuZERldmljZVVkaWQgPSBudWxsO1xuICBsZXQgdmFsaWRTZGtzID0gW107XG5cbiAgYmVmb3JlKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgZGV2aWNlcyA9IGF3YWl0IGdldERldmljZXMoKTtcbiAgICB2YWxpZFNka3MgPSBfLmtleXMoZGV2aWNlcykuc29ydCgoYSwgYikgPT4gYSAtIGIpO1xuICAgIGlmICghdmFsaWRTZGtzLmxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyB2YWxpZCBTREtzJyk7XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKGBGb3VuZCB2YWxpZCBTREtzOiAke3ZhbGlkU2Rrcy5qb2luKCcsICcpfWApOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcblxuICAgIC8vIG5lZWQgdG8gZmluZCBhIHJhbmRvbSBuYW1lIHRoYXQgZG9lcyBub3QgYWxyZWFkeSBleGlzdFxuICAgIC8vIGdpdmUgaXQgNSB0cmllc1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNTsgaSsrKSB7XG4gICAgICBsZXQgcmFuZE51bSA9IHBhcnNlSW50KE1hdGgucmFuZG9tKCkgKiAxMDAsIDEwKTtcbiAgICAgIHJhbmROYW1lID0gYGRldmljZSR7cmFuZE51bX1gO1xuXG4gICAgICBsZXQgbmFtZUZvdW5kID0gZmFsc2U7XG4gICAgICBmb3IgKGxldCBsaXN0IG9mIF8udmFsdWVzKGRldmljZXMpKSB7XG4gICAgICAgIGlmIChfLmluY2x1ZGVzKF8ubWFwKGxpc3QsICduYW1lJyksIHJhbmROYW1lKSkge1xuICAgICAgICAgIC8vIG5lZWQgdG8gZmluZCBhbm90aGVyIHJhbmRvbSBuYW1lXG4gICAgICAgICAgbmFtZUZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFuYW1lRm91bmQpIGJyZWFrOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGN1cmx5XG4gICAgfVxuICB9KTtcblxuICBpdCgnc2hvdWxkIGNyZWF0ZSBhIGRldmljZScsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgdWRpZCA9IGF3YWl0IGNyZWF0ZURldmljZShyYW5kTmFtZSwgREVWSUNFX05BTUUsIF8ubGFzdCh2YWxpZFNka3MpKTtcbiAgICAodHlwZW9mIHVkaWQpLnNob3VsZC5lcXVhbCgnc3RyaW5nJyk7XG4gICAgdWRpZC5sZW5ndGguc2hvdWxkLmVxdWFsKDM2KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBnZXQgZGV2aWNlcycsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgc2RrRGV2aWNlcyA9IGF3YWl0IGdldERldmljZXMoXy5sYXN0KHZhbGlkU2RrcykpO1xuICAgIF8ubWFwKHNka0RldmljZXMsICduYW1lJykuc2hvdWxkLmluY2x1ZGUocmFuZE5hbWUpO1xuICAgIHJhbmREZXZpY2VVZGlkID0gc2RrRGV2aWNlcy5maWx0ZXIoKGQpID0+IGQubmFtZSA9PT0gcmFuZE5hbWUpWzBdLnVkaWQ7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgZXJhc2UgZGV2aWNlcycsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBhd2FpdCBlcmFzZURldmljZShyYW5kRGV2aWNlVWRpZCwgMTYwMDApO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGRlbGV0ZSBkZXZpY2VzJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGF3YWl0IGRlbGV0ZURldmljZShyYW5kRGV2aWNlVWRpZCk7XG4gICAgbGV0IHNka0RldmljZXMgPSBhd2FpdCBnZXREZXZpY2VzKF8ubGFzdCh2YWxpZFNka3MpKTtcbiAgICBfLm1hcChzZGtEZXZpY2VzLCAnbmFtZScpLnNob3VsZC5ub3QuaW5jbHVkZShyYW5kTmFtZSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmV0dXJuIGEgbmljZSBlcnJvciBmb3IgaW52YWxpZCB1c2FnZScsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgZXJyID0gbnVsbDtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgY3JlYXRlRGV2aWNlKCdmb28nLCAnYmFyJywgJ2JheicpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGVyciA9IGU7XG4gICAgfVxuICAgIHNob3VsZC5leGlzdChlcnIpO1xuICAgIGVyci5tZXNzYWdlLnNob3VsZC5pbmNsdWRlKCdJbnZhbGlkIGRldmljZSB0eXBlOiBiYXInKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBjcmVhdGUgYSBkZXZpY2UgYW5kIGJlIGFibGUgdG8gc2VlIGl0IGluIGRldmljZXMgbGlzdCByaWdodCBhd2F5JywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGxldCBzZGsgPSBfLmxhc3QodmFsaWRTZGtzKTtcbiAgICBsZXQgbnVtU2ltc0JlZm9yZSA9IChhd2FpdCBnZXREZXZpY2VzKCkpW3Nka10ubGVuZ3RoO1xuICAgIGxldCB1ZGlkID0gYXdhaXQgY3JlYXRlRGV2aWNlKCdub2RlLXNpbWN0bCB0ZXN0JywgREVWSUNFX05BTUUsIHNkayk7XG4gICAgbGV0IG51bVNpbXNBZnRlciA9IChhd2FpdCBnZXREZXZpY2VzKCkpW3Nka10ubGVuZ3RoO1xuICAgIG51bVNpbXNBZnRlci5zaG91bGQuZXF1YWwobnVtU2ltc0JlZm9yZSArIDEpO1xuICAgIGF3YWl0IGRlbGV0ZURldmljZSh1ZGlkKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBjcmVhdGUgYSBkZXZpY2Ugd2l0aCBjb21wYXRpYmxlIHByb3BlcnRpZXMnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IHNkayA9IF8ubGFzdCh2YWxpZFNka3MpO1xuICAgIGxldCBkZXZpY2VzID0gKGF3YWl0IGdldERldmljZXMoKSlbc2RrXTtcbiAgICBsZXQgZmlyc3REZXZpY2UgPSBkZXZpY2VzWzBdO1xuICAgIGxldCBleHBlY3RlZExpc3QgPSBbJ25hbWUnLCAnc2RrJywgJ3N0YXRlJywgJ3VkaWQnXTtcbiAgICBPYmplY3Qua2V5cyhmaXJzdERldmljZSkuc29ydCgpLnNob3VsZC5lcWwoZXhwZWN0ZWRMaXN0KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBub3QgZmFpbCB0byBzaHV0ZG93biBhIHNodXRkb3duIHNpbXVsYXRvcicsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgc2RrID0gXy5sYXN0KHZhbGlkU2Rrcyk7XG4gICAgbGV0IHVkaWQgPSBhd2FpdCBjcmVhdGVEZXZpY2UoJ25vZGUtc2ltY3RsIHRlc3QnLCBERVZJQ0VfTkFNRSwgc2RrKTtcbiAgICBhd2FpdCBzaHV0ZG93bih1ZGlkKS5zaG91bGQuZXZlbnR1YWxseS5ub3QuYmUucmVqZWN0ZWQ7XG4gICAgYXdhaXQgZGVsZXRlRGV2aWNlKHVkaWQpO1xuICB9KTtcblxuICBkZXNjcmliZSgnb24gcnVubmluZyBTaW11bGF0b3InLCBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52LlRSQVZJUykge1xuICAgICAgdGhpcy5yZXRyaWVzKDMpO1xuICAgIH1cblxuICAgIGxldCB1ZGlkO1xuICAgIGxldCBtYWpvciwgbWlub3I7XG5cbiAgICBiZWZvcmUoYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgKHttYWpvciwgbWlub3J9ID0gYXdhaXQgeGNvZGUuZ2V0VmVyc2lvbih0cnVlKSk7XG4gICAgICBpZiAobWFqb3IgPCA4IHx8IChtYWpvciA9PT0gOCAmJiBtaW5vciA8IDEpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNraXAoKTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgc2RrID0gXy5sYXN0KHZhbGlkU2Rrcyk7XG4gICAgICB1ZGlkID0gYXdhaXQgY3JlYXRlRGV2aWNlKCdydW5uaW5nU2ltVGVzdCcsIERFVklDRV9OQU1FLCBzZGspO1xuXG4gICAgICBhd2FpdCBib290RGV2aWNlKHVkaWQpO1xuICAgICAgLy8gV2FpdCBmb3IgYm9vdCB0byBjb21wbGV0ZVxuICAgICAgYXdhaXQgbGF1bmNoKHVkaWQsICdjb20uYXBwbGUuc3ByaW5nYm9hcmQnLCBNT0NIQV9USU1FT1VUKTtcblxuICAgICAgLy8gcGF1c2UgYSBtb21lbnQgb3IgZXZlcnl0aGluZyBpcyBtZXNzZWQgdXBcbiAgICAgIGF3YWl0IEIuZGVsYXkoNTAwMCk7XG4gICAgfSk7XG4gICAgYWZ0ZXIoYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHVkaWQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBhd2FpdCBzaHV0ZG93bih1ZGlkKTtcbiAgICAgICAgfSBjYXRjaCAoaWduKSB7fVxuICAgICAgICBhd2FpdCBkZWxldGVEZXZpY2UodWRpZCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgncGFzdGVib2FyZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBwYlJldHJpZXMgPSAwO1xuICAgICAgYmVmb3JlKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKG1ham9yIDwgOCB8fCAobWFqb3IgPT09IDggJiYgbWlub3IgPCAxKSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnNraXAoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWFqb3IgPT09IDkpIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuVFJBVklTKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5za2lwKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIFRPRE86IHJlY2hlY2sgd2hlbiBmdWxsIFhjb2RlIDkgY29tZXMgb3V0IHRvIHNlZSBpZiBwYXN0ZWJvYXJkIHdvcmtzIGJldHRlclxuICAgICAgICAgIHBiUmV0cmllcyA9IDIwMDtcbiAgICAgICAgICB0aGlzLnRpbWVvdXQoMjAwICogMTAwMCAqIDIpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGl0KCdzaG91bGQgc2V0IGFuZCBnZXQgdGhlIGNvbnRlbnQgb2YgdGhlIHBhc3RlYm9hcmQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnN0IHBiQ29udGVudCA9ICdibGFibGFibGEnO1xuICAgICAgICBjb25zdCBlbmNvZGluZyA9ICdhc2NpaSc7XG5cbiAgICAgICAgYXdhaXQgc2V0UGFzdGVib2FyZCh1ZGlkLCBwYkNvbnRlbnQsIGVuY29kaW5nKTtcbiAgICAgICAgYXdhaXQgcmV0cnlJbnRlcnZhbChwYlJldHJpZXMsIDEwMDAsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAoYXdhaXQgZ2V0UGFzdGVib2FyZCh1ZGlkLCBlbmNvZGluZykpLnNob3VsZC5lcWwocGJDb250ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdhZGQgbWVkaWEnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBCQVNFNjRfUE5HID0gJ2lWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFBRUFBQUFCQ0FZQUFBQWZGY1NKQUFBQURVbEVRVlI0Mm1OaytNOVFEd0FEaGdHQVdqUjlhd0FBQUFCSlJVNUVya0pnZ2c9PSc7XG4gICAgICBsZXQgcGljdHVyZVBhdGg7XG4gICAgICBiZWZvcmUoYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAobWFqb3IgPCA4IHx8IChtYWpvciA9PT0gOCAmJiBtaW5vciA8IDEpKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuc2tpcCgpO1xuICAgICAgICB9XG4gICAgICAgIHBpY3R1cmVQYXRoID0gYXdhaXQgdGVtcERpci5wYXRoKHtwcmVmaXg6ICdwaXhlbCcsIHN1ZmZpeDogJy5wbmcnfSk7XG4gICAgICAgIGF3YWl0IGZzLndyaXRlRmlsZShwaWN0dXJlUGF0aCwgbmV3IEJ1ZmZlcihCQVNFNjRfUE5HLCAnYmFzZTY0JykudG9TdHJpbmcoJ2JpbmFyeScpLCAnYmluYXJ5Jyk7XG4gICAgICB9KTtcbiAgICAgIGFmdGVyKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGF3YWl0IGZzLmV4aXN0cyhwaWN0dXJlUGF0aCkpIHtcbiAgICAgICAgICBhd2FpdCBmcy51bmxpbmsocGljdHVyZVBhdGgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGl0KCdzaG91bGQgYWRkIG1lZGlhIGZpbGVzJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICAoYXdhaXQgYWRkTWVkaWEodWRpZCwgcGljdHVyZVBhdGgpKS5jb2RlLnNob3VsZC5lcWwoMCk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgZXh0cmFjdCBhcHBsaWNhdGlvbnMgaW5mb3JtYXRpb24nLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAoYXdhaXQgYXBwSW5mbyh1ZGlkLCAnY29tLmFwcGxlLnNwcmluZ2JvYXJkJykpLnNob3VsZC5pbmNsdWRlKCdBcHBsaWNhdGlvblR5cGUnKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
