{
  "_args": [
    [
      {
        "raw": "pem@https://registry.npmjs.org/pem/-/pem-1.12.5.tgz",
        "scope": null,
        "escapedName": "pem",
        "name": "pem",
        "rawSpec": "https://registry.npmjs.org/pem/-/pem-1.12.5.tgz",
        "spec": "https://registry.npmjs.org/pem/-/pem-1.12.5.tgz",
        "type": "remote"
      },
      "/Users/saxenan3/myprojects/uiAutomation/mytest_project/node_modules/appium"
    ]
  ],
  "_from": "pem@https://registry.npmjs.org/pem/-/pem-1.12.5.tgz",
  "_id": "pem@1.12.5",
  "_inCache": true,
  "_location": "/appium/pem",
  "_phantomChildren": {},
  "_requested": {
    "raw": "pem@https://registry.npmjs.org/pem/-/pem-1.12.5.tgz",
    "scope": null,
    "escapedName": "pem",
    "name": "pem",
    "rawSpec": "https://registry.npmjs.org/pem/-/pem-1.12.5.tgz",
    "spec": "https://registry.npmjs.org/pem/-/pem-1.12.5.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/appium",
    "/appium/appium-ios-driver"
  ],
  "_resolved": "https://registry.npmjs.org/pem/-/pem-1.12.5.tgz",
  "_shasum": "97bf2e459537c54e0ee5b0aa11b5ca18d6b5fef2",
  "_shrinkwrap": null,
  "_spec": "pem@https://registry.npmjs.org/pem/-/pem-1.12.5.tgz",
  "_where": "/Users/saxenan3/myprojects/uiAutomation/mytest_project/node_modules/appium",
  "author": {
    "name": "Andris Reinman",
    "email": "andris@kreata.ee"
  },
  "bugs": {
    "url": "https://github.com/Dexus/pem/issues"
  },
  "contributors": [
    {
      "name": "Josef FrÃ¶hle",
      "email": "github@josef-froehle.de",
      "url": "https://www.josef-froehle.de/"
    }
  ],
  "dependencies": {
    "md5": "^2.2.1",
    "os-tmpdir": "^1.0.1",
    "safe-buffer": "^5.1.1",
    "which": "^1.2.4"
  },
  "description": "Create private keys and certificates with node.js and io.js",
  "devDependencies": {
    "@deineagenturug/docdash": "^0.4.1",
    "auto-changelog": "^1.0.0",
    "chai": "^4.1.2",
    "cross-env": "^5.1.4",
    "dirty-chai": "^2.0.1",
    "docco": "^0.8.0",
    "eslint": "^4.8.0",
    "eslint-config-standard": "^11.0.0",
    "eslint-plugin-import": "2.10.0",
    "eslint-plugin-json": "^1.2.0",
    "eslint-plugin-markdown": "^1.0.0-beta.7",
    "eslint-plugin-node": "^6.0.1",
    "eslint-plugin-promise": "^3.5.0",
    "eslint-plugin-standard": "^3.0.1",
    "jsdoc": "^3.5.5",
    "mocha": "^5.0.5",
    "nyc": "^11.2.1",
    "semantic-release": "^15.1.5",
    "travis-deploy-once": "^4.0.0"
  },
  "engines": {
    "node": ">=4.0.0"
  },
  "homepage": "https://github.com/Dexus/pem#readme",
  "license": "MIT",
  "main": "lib/pem",
  "name": "pem",
  "nyc": {
    "reporter": [
      "html",
      "text"
    ],
    "exclude": [
      "**/*.spec.js",
      "test/pem.helper.js"
    ]
  },
  "optionalDependencies": {},
  "readme": "pem\n===\n\nCreate private keys and certificates with node.js\n\n[![Build Status](https://secure.travis-ci.org/Dexus/pem.png)](http://travis-ci.org/Dexus/pem) [![npm version](https://badge.fury.io/js/pem.svg)](http://badge.fury.io/js/pem) [![npm downloads](https://img.shields.io/npm/dt/pem.svg)](https://www.npmjs.com/package/pem) [![pem documentation](https://img.shields.io/badge/pem-documentation-0099ff.svg?style=flat)](https://www.deineagentur.com/projects/pem) [![Greenkeeper badge](https://badges.greenkeeper.io/Dexus/pem.svg)](https://greenkeeper.io/)\n\n\n[![JavaScript Style Guide](https://cdn.rawgit.com/standard/standard/master/badge.svg)](https://github.com/standard/standard)\n\n## Installation\n\nInstall with npm\n\n    npm install pem\n\n## Examples\n\nHere are some examples for creating an SSL key/cert on the fly, and running an HTTPS server on port 443.  443 is the standard HTTPS port, but requires root permissions on most systems.  To get around this, you could use a higher port number, like 4300, and use https://localhost:4300 to access your server.\n\n### Basic https\n```javascript\nvar https = require('https')\nvar pem = require('pem')\n\npem.createCertificate({ days: 1, selfSigned: true }, function (err, keys) {\n  if (err) {\n    throw err\n  }\n  https.createServer({ key: keys.serviceKey, cert: keys.certificate }, function (req, res) {\n    res.end('o hai!')\n  }).listen(443)\n})\n```\n\n###  Express\n```javascript\nvar https = require('https')\nvar pem = require('pem')\nvar express = require('express')\n\npem.createCertificate({ days: 1, selfSigned: true }, function (err, keys) {\n  if (err) {\n    throw err\n  }\n  var app = express()\n\n  app.get('/', function (req, res) {\n    res.send('o hai!')\n  })\n\n  https.createServer({ key: keys.serviceKey, cert: keys.certificate }, app).listen(443)\n})\n```\n\n## API\nPlease have a look into the [API documentation](https://www.deineagentur.com/projects/pem/index.html).\n\n_we had to clean up a bit_\n<!--\n### Create a dhparam key\n\nUse `createDhparam` for creating dhparam keys\n\n    pem.createDhparam(keyBitsize, callback)\n\nWhere\n\n  * **keyBitsize** is an optional size of the key, defaults to 512 (bit)\n  * **callback** is a callback function with an error object and `{dhparam}`\n\n### Create a ecparam key\n\nUse `createEcparam` for creating ecparam keys\n\n    pem.createEcparam(keyName, callback)\n\nWhere\n\n  * **keyName** is an optional name of the key curves name, defaults to secp256k1\n  * **callback** is a callback function with an error object and `{ecparam}`\n\n### Create a private key\n\nUse `createPrivateKey` for creating private keys\n\n    pem.createPrivateKey(keyBitsize, [options,] callback)\n\nWhere\n\n  * **keyBitsize** is an optional size of the key, defaults to 2048 (bit)\n  * **options** is an optional object of the cipher and password (both required for encryption), defaults {cipher:'',password:''}\n  (ciphers:[\"aes128\", \"aes192\", \"aes256\", \"camellia128\", \"camellia192\", \"camellia256\", \"des\", \"des3\", \"idea\"])\n  * **callback** is a callback function with an error object and `{key}`\n\n### Create a Certificate Signing Request\n\nUse `createCSR` for creating certificate signing requests\n\n    pem.createCSR(options, callback)\n\nWhere\n\n  * **options** is an optional options object\n  * **callback** is a callback function with an error object and `{csr, clientKey}`\n\nPossible options are the following\n\n  * **clientKey** is an optional client key to use\n  * **clientKeyPassword** the optional password for `clientKey`\n  * **keyBitsize** - if `clientKey` is undefined, bit size to use for generating a new key (defaults to 2048)\n  * **hash** is a hash function to use (either `md5`, `sha1` or `sha256`, defaults to `sha256`)\n  * **country** is a CSR country field\n  * **state** is a CSR state field\n  * **locality** is a CSR locality field\n  * **organization** is a CSR organization field\n  * **organizationUnit** is a CSR organizational unit field\n  * **commonName** is a CSR common name field (defaults to `localhost`)\n  * **altNames** is a list (`Array`) of subjectAltNames in the subjectAltName field (optional)\n  * **emailAddress** is a CSR email address field\n  * **csrConfigFile** is a CSR config file\n\n### Create a certificate\n\nUse `createCertificate` for creating private keys\n\n    pem.createCertificate(options, callback)\n\nWhere\n\n  * **options** is an optional options object\n  * **callback** is a callback function with an error object and `{certificate, csr, clientKey, serviceKey}`\n\nPossible options include all the options for `createCSR` - in case `csr` parameter is not defined and a new\nCSR needs to be generated.\n\nIn addition, possible options are the following\n\n  * **serviceKey** is a private key for signing the certificate, if not defined a new one is generated\n  * **serviceKeyPassword** Password of the service key\n  * **serviceCertificate** is the optional certificate for the `serviceKey`\n  * **serial** is the unique serial number for the signed certificate, required if `serviceCertificate` is defined\n  * **selfSigned** - if set to true and `serviceKey` is not defined, use `clientKey` for signing\n  * **csr** is a CSR for the certificate, if not defined a new one is generated\n  * **days** is the certificate expire time in days\n  * **extFile** extension config file - **without** `-extensions v3_req`\n  * **config** extension config file - **with** `-extensions v3_req`\n\n### Export a public key\n\nUse `getPublicKey` for exporting a public key from a private key, CSR or certificate\n\n    pem.getPublicKey(certificate, callback)\n\nWhere\n\n  * **certificate** is a PEM encoded private key, CSR or certificate\n  * **callback** is a callback function with an error object and `{publicKey}`\n\n### Read certificate info\n\nUse `readCertificateInfo` for reading subject data from a certificate or a CSR\n\n    pem.readCertificateInfo(certificate, callback)\n\nWhere\n\n  * **certificate** is a PEM encoded CSR or a certificate\n  * **callback** is a callback function with an error object and `{serial, country, state, locality, organization, organizationUnit, commonName, emailAddress, validity{start, end}, san{dns, ip, email}?, issuer{country, state, locality, organization, organizationUnit}, signatureAlgorithm, publicKeyAlgorithm, publicKeySize }`\n\n? *san* is only present if the CSR or certificate has SAN entries.\n\n*signatureAlgorithm, publicKeyAlgorithm and publicKeySize* only available if supportet and can parsed form openssl output\n\n### Get fingerprint\n\nUse `getFingerprint` to get the default SHA1 fingerprint for a certificate\n\n    pem.getFingerprint(certificate, [hash], callback)\n\nWhere\n\n  * **certificate** is a PEM encoded certificate\n  * **hash** is a hash function to use (either `md5`, `sha1` or `sha256`, defaults to `sha1`)\n  * **callback** is a callback function with an error object and `{fingerprint}`\n\n### Get modulus\n\nUse `getModulus` to get the modulus for a certificate, a CSR or a private key. Modulus can be useful to check that a Private Key Matches a Certificate\n\n    pem.getModulus(certificate, [password], [hash], callback)\n\nWhere\n\n  * **certificate** is a PEM encoded certificate, CSR or private key\n  * **password** is an optional passphrase for passpharse protected certificates\n  * **hash** is an optional hash function to use (up to now `md5` supported) (default: none)\n  * **callback** is a callback function with an error object and `{modulus}`\n\n### Get DH parameter information\n\nUse `getDhparamInfo` to get the size and prime of DH parameters.\n\n    pem.getDhparamInfo(dhparam, callback)\n\nWhere\n\n  * **dhparam** is a PEM encoded DH parameters string\n  * **callback** is a callback function with an error object and `{size, prime}`\n\n\n### Export to a PKCS12 keystore\n\nUse `createPkcs12` to export a certificate, the private key and optionally any signing or intermediate CA certificates to a PKCS12 keystore.\n\n\tpem.createPkcs12(clientKey, certificate, p12Password, [options], callback)\n\nWhere\n\n* **clientKey** is a PEM encoded private key\n* **certificate** is a PEM encoded certificate\n* **p12Password** is the password of the exported keystore\n* **options** is an optional options object with `cipher`, (one of \"aes128\", \"aes192\", \"aes256\", \"camellia128\", \"camellia192\", \"camellia256\", \"des\", \"des3\" or \"idea\"), `clientKeyPassword` and `certFiles` (an array of additional certificates to include - e.g. CA certificates)\n* **callback** is a callback function with an error object and `{pkcs12}` (binary)\n\n### Read a PKCS12 keystore\n\nUse `readPkcs12` to read a certificate, private key and CA certificates from a PKCS12 keystore.\n\n\tpem.readPkcs12(bufferOrPath, [options], callback)\n\nWhere\n\n* **bufferOrPath** is a PKCS12 keystore as a [Buffer](https://nodejs.org/api/buffer.html) or the path to a file\n* **options** is an optional options object with `clientKeyPassword` which will be used to encrypt the stored key and `p12Password` which will be used to open the keystore\n* **callback** is a callback function with an error object and `{key: String, cert: String, ca: Array}`\n\n### Check a PKCS12 keystore\n\nUse `checkPkcs12` to check a PKCS12 keystore.\n\n\tpem.checkPkcs12(bufferOrPath, [passphrase], callback)\n\nWhere\n\n* **bufferOrPath** is a PKCS12 keystore as a [Buffer](https://nodejs.org/api/buffer.html) or the path to a file\n* **passphrase** is an optional passphrase which will be used to open the keystore\n* **callback** is a callback function with an error object and a boolean as arguments\n\n###Â Verify a certificate signing chain\n\nUse `verifySigningChain` to assert that a given certificate has a valid signing chain.\n\n    pem.verifySigningChain(certificate, ca, callback)\n\nWhere\n\n* **certificate** is a PEM encoded certificate string\n* **ca** is a PEM encoded CA certificate string or an array of certificate strings\n* **callback** is a callback function with an error object and a boolean as arguments\n\n###Â Check a certificate file\n\nUse `checkCertificate` to check / verify consistency of a certificate.\n\n    pem.checkCertificate(certificate, callback)\n\nWhere\n\n* **certificate** is a PEM encoded certificate string\n* **callback** is a callback function with an error object and a boolean as arguments\n-->\n\n### Custom extensions config file\n\nYou can specify custom OpenSSL extensions using the `config` or `extFile` options for `createCertificate` (or using `csrConfigFile` with `createCSR`).\n\n`extFile` and `csrConfigFile` should be paths to the extension files. While `config` will generate a temporary file from the supplied file contents.\n\nIf you specify `config` then the `v3_req` section of your config file will be used.\n\nThe following would be an example of a Certificate Authority extensions file:\n\n    [req]\n    req_extensions = v3_req\n    distinguished_name = req_distinguished_name\n\n    [req_distinguished_name]\n    commonName = Common Name\n    commonName_max = 64\n\n    [v3_req]\n    basicConstraints = critical,CA:TRUE\n\nWhile the following would specify subjectAltNames in the resulting certificate:\n\n    [req]\n    req_extensions = v3_req\n\n    [ v3_req ]\n    basicConstraints = CA:FALSE\n    keyUsage = nonRepudiation, digitalSignature, keyEncipherment\n    subjectAltName = @alt_names\n\n    [alt_names]\n    DNS.1 = host1.example.com\n    DNS.2 = host2.example.com\n    DNS.3 = host3.example.com\n\nNote that `createCertificate` and `createCSR` supports the `altNames` option which would be easier to use in most cases.\n\n**Warning: If you specify `altNames` the custom extensions file will not be passed to OpenSSL.**\n\n### Setting openssl location\n\nIn some systems the `openssl` executable might not be available by the default name or it is not included in $PATH. In this case you can define the location of the executable yourself as a one time action after you have loaded the pem module:\n\n```javascript\nvar pem = require('pem')\npem.config({\n  pathOpenSSL: '/usr/local/bin/openssl'\n})\n// do something with the pem module\n```\n\n### Specialthanks to\n\n- Andris Reinman (@andris9) - Initiator of pem\n\n## License\n\n**MIT**\n",
  "readmeFilename": "README.md",
  "release": {
    "debug": false
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Dexus/pem.git"
  },
  "scripts": {
    "aftersuccess": "bin/aftersuccess.sh",
    "changelog": "auto-changelog --output HISTORY.md",
    "coverage": "cross-env NODE_ENV=development nyc ./node_modules/.bin/_mocha --opts mocha.opts $(find . -type f -name '*.spec.js'  ! -path './nyc_output/*' ! -path './coverage/*' ! -path './node_modules/*')",
    "docco": "docco -l parallel -o docs/docco lib/helper.js lib/openssl.js lib/pem.js",
    "documentation": "npm run docco --silent && npm run jsdoc --silent",
    "jsdoc": "jsdoc -c jsdoc.json",
    "lint": "eslint --fix --config=./.eslintrc.js *.js *.md *.json lib/*.js test/*.js test/*.spec.js",
    "semantic-release": "semantic-release",
    "test": "npm run lint --silent && npm run coverage --silent"
  },
  "version": "1.12.5"
}
