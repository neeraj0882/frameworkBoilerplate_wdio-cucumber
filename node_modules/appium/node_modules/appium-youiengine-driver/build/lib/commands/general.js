'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _utils = require('../utils');

var commands = {};

commands.getPageSource = function callee$0$0() {
  var source, commandObject, commandJSON;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        source = undefined;
        commandObject = {
          name: 'GetSRC'
        };
        commandJSON = JSON.stringify(commandObject);
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.executeSocketCommand(commandJSON));

      case 5:
        source = context$1$0.sent;

        if (!source) {
          context$1$0.next = 10;
          break;
        }

        return context$1$0.abrupt('return', source.toString());

      case 10:
        throw new Error("Bad response from getTreeForXML");

      case 11:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getWindowSize = function callee$0$0() {
  var commandObject, commandJSON, data, result;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        commandObject = {
          name: 'getWindowSize'
        };
        commandJSON = JSON.stringify(commandObject);
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.executeSocketCommand(commandJSON));

      case 4:
        data = context$1$0.sent;
        result = undefined;
        context$1$0.prev = 6;

        result = JSON.parse(data);
        context$1$0.next = 13;
        break;

      case 10:
        context$1$0.prev = 10;
        context$1$0.t0 = context$1$0['catch'](6);
        throw new Error("Bad response from window_size");

      case 13:
        if (!(result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_NO_SUCH_WINDOW)) {
          context$1$0.next = 17;
          break;
        }

        throw new Error("Could not find the requested surface");

      case 17:
        if (!(result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_UNKNOWN_COMMAND)) {
          context$1$0.next = 19;
          break;
        }

        throw new Error("The requested command is not supported in the version of You.i Engine currently running.");

      case 19:
        return context$1$0.abrupt('return', result.value);

      case 20:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[6, 10]]);
};

exports['default'] = commands;
module.exports = exports['default'];

// this should never happen but we've received bug reports; this will help us track down
// what's wrong in getTreeForXML

// get status returned and handle errors returned from server
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9nZW5lcmFsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O3FCQUE2QyxVQUFVOztBQUV2RCxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7O0FBRWxCLFFBQVEsQ0FBQyxhQUFhLEdBQUc7TUFFbkIsTUFBTSxFQUVOLGFBQWEsRUFHYixXQUFXOzs7O0FBTFgsY0FBTTtBQUVOLHFCQUFhLEdBQUc7QUFDbEIsY0FBSSxFQUFFLFFBQVE7U0FDZjtBQUNHLG1CQUFXLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUM7O3lDQUVoQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsV0FBVyxDQUFDOzs7QUFBckQsY0FBTTs7YUFFRixNQUFNOzs7Ozs0Q0FDRCxNQUFNLENBQUMsUUFBUSxFQUFFOzs7Y0FJbEIsSUFBSSxLQUFLLENBQUMsaUNBQWlDLENBQUM7Ozs7Ozs7Q0FFckQsQ0FBQzs7QUFFRixRQUFRLENBQUMsYUFBYSxHQUFHO01BRW5CLGFBQWEsRUFHYixXQUFXLEVBRVgsSUFBSSxFQUVKLE1BQU07Ozs7QUFQTixxQkFBYSxHQUFHO0FBQ2xCLGNBQUksaUJBQWlCO1NBQ3RCO0FBQ0csbUJBQVcsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQzs7eUNBRTlCLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxXQUFXLENBQUM7OztBQUFuRCxZQUFJO0FBRUosY0FBTTs7O0FBRVIsY0FBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7Ozs7Ozs7Y0FFcEIsSUFBSSxLQUFLLENBQUMsK0JBQStCLENBQUM7OztjQUk5QyxNQUFNLENBQUMsTUFBTSxLQUFLLG9DQUE2Qix3QkFBd0IsQ0FBQTs7Ozs7Y0FDbkUsSUFBSSxLQUFLLENBQUMsc0NBQXNDLENBQUM7OztjQUM5QyxNQUFNLENBQUMsTUFBTSxLQUFLLG9DQUE2Qix5QkFBeUIsQ0FBQTs7Ozs7Y0FDM0UsSUFBSSxLQUFLLENBQUMsMEZBQTBGLENBQUM7Ozs0Q0FHdEcsTUFBTSxDQUFDLEtBQUs7Ozs7Ozs7Q0FDcEIsQ0FBQzs7cUJBRWEsUUFBUSIsImZpbGUiOiJsaWIvY29tbWFuZHMvZ2VuZXJhbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHlvdWlFbmdpbmVEcml2ZXJSZXR1cm5WYWx1ZXMgfSBmcm9tICcuLi91dGlscyc7XG5cbmxldCBjb21tYW5kcyA9IHt9O1xuXG5jb21tYW5kcy5nZXRQYWdlU291cmNlID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuXG4gIGxldCBzb3VyY2U7XG5cbiAgdmFyIGNvbW1hbmRPYmplY3QgPSB7XG4gICAgbmFtZTogJ0dldFNSQydcbiAgfTtcbiAgdmFyIGNvbW1hbmRKU09OID0gSlNPTi5zdHJpbmdpZnkoY29tbWFuZE9iamVjdCk7XG5cbiAgc291cmNlID0gYXdhaXQgdGhpcy5leGVjdXRlU29ja2V0Q29tbWFuZChjb21tYW5kSlNPTik7XG5cbiAgaWYgKHNvdXJjZSkge1xuICAgIHJldHVybiBzb3VyY2UudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyB0aGlzIHNob3VsZCBuZXZlciBoYXBwZW4gYnV0IHdlJ3ZlIHJlY2VpdmVkIGJ1ZyByZXBvcnRzOyB0aGlzIHdpbGwgaGVscCB1cyB0cmFjayBkb3duXG4gICAgLy8gd2hhdCdzIHdyb25nIGluIGdldFRyZWVGb3JYTUxcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJCYWQgcmVzcG9uc2UgZnJvbSBnZXRUcmVlRm9yWE1MXCIpO1xuICB9XG59O1xuXG5jb21tYW5kcy5nZXRXaW5kb3dTaXplID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuXG4gIHZhciBjb21tYW5kT2JqZWN0ID0ge1xuICAgIG5hbWU6IGBnZXRXaW5kb3dTaXplYFxuICB9O1xuICB2YXIgY29tbWFuZEpTT04gPSBKU09OLnN0cmluZ2lmeShjb21tYW5kT2JqZWN0KTtcblxuICBsZXQgZGF0YSA9IGF3YWl0IHRoaXMuZXhlY3V0ZVNvY2tldENvbW1hbmQoY29tbWFuZEpTT04pO1xuXG4gIGxldCByZXN1bHQ7XG4gIHRyeSB7XG4gICAgcmVzdWx0ID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkJhZCByZXNwb25zZSBmcm9tIHdpbmRvd19zaXplXCIpO1xuICB9XG5cbiAgLy8gZ2V0IHN0YXR1cyByZXR1cm5lZCBhbmQgaGFuZGxlIGVycm9ycyByZXR1cm5lZCBmcm9tIHNlcnZlclxuICBpZiAocmVzdWx0LnN0YXR1cyA9PT0geW91aUVuZ2luZURyaXZlclJldHVyblZhbHVlcy5XRUJEUklWRVJfTk9fU1VDSF9XSU5ET1cpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgZmluZCB0aGUgcmVxdWVzdGVkIHN1cmZhY2VcIik7XG4gIH0gZWxzZSBpZiAocmVzdWx0LnN0YXR1cyA9PT0geW91aUVuZ2luZURyaXZlclJldHVyblZhbHVlcy5XRUJEUklWRVJfVU5LTk9XTl9DT01NQU5EKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHJlcXVlc3RlZCBjb21tYW5kIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhlIHZlcnNpb24gb2YgWW91LmkgRW5naW5lIGN1cnJlbnRseSBydW5uaW5nLlwiKTtcbiAgfVxuICBcbiAgcmV0dXJuIHJlc3VsdC52YWx1ZTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbW1hbmRzO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
