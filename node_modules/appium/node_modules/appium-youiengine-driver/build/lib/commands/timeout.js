'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _appiumSupport = require('appium-support');

var commands = {},
    helpers = {},
    extensions = {};

commands.implicitWait = function (ms) {
  this.implicitWaitMs = parseInt(ms, 10);
  _logger2['default'].debug('Set implicit wait to ' + ms + 'ms');
};

commands.timeouts = function callee$0$0(name, duration) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (name === 'command') {
          this.newCommandTimeoutMs = duration;
        }

      case 1:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.clearNewCommandTimeout = function () {
  if (this.noCommandTimer) {
    this.noCommandTimer.cancel();
    this.noCommandTimer = null;
  }
};

helpers.startNewCommandTimeout = function (cmd) {
  var _this = this;

  // make sure there are no rogue timeouts
  this.clearNewCommandTimeout();

  // if command timeout is 0, it is disabled
  if (!this.newCommandTimeoutMs) return;

  this.noCommandTimer = _appiumSupport.util.cancellableDelay(this.newCommandTimeoutMs);
  this.noCommandTimer.then(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          _logger2['default'].warn('Shutting down because we waited ' + (this.newCommandTimeoutMs / 1000 + ' seconds for a command'));
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(this.startUnexpectedShutdown(new Error('Command ' + cmd + ' timed out!')));

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  })['catch'](_bluebird2['default'].CancellationError, function () /*err*/{
    // ignore
  });
};

_Object$assign(extensions, commands, helpers);
exports.commands = commands;
exports.helpers = helpers;
exports['default'] = extensions;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy90aW1lb3V0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztzQkFBZ0IsV0FBVzs7Ozt3QkFDYixVQUFVOzs7OzZCQUNILGdCQUFnQjs7QUFHckMsSUFBSSxRQUFRLEdBQUcsRUFBRTtJQUFFLE9BQU8sR0FBRyxFQUFFO0lBQUUsVUFBVSxHQUFHLEVBQUUsQ0FBQzs7QUFFakQsUUFBUSxDQUFDLFlBQVksR0FBRyxVQUFVLEVBQUUsRUFBRTtBQUNwQyxNQUFJLENBQUMsY0FBYyxHQUFHLFFBQVEsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDdkMsc0JBQUksS0FBSywyQkFBeUIsRUFBRSxRQUFLLENBQUM7Q0FDM0MsQ0FBQzs7QUFFRixRQUFRLENBQUMsUUFBUSxHQUFHLG9CQUFnQixJQUFJLEVBQUUsUUFBUTs7OztBQUNoRCxZQUFJLElBQUksS0FBSyxTQUFTLEVBQUU7QUFDdEIsY0FBSSxDQUFDLG1CQUFtQixHQUFHLFFBQVEsQ0FBQztTQUNyQzs7Ozs7OztDQUNGLENBQUM7O0FBRUYsT0FBTyxDQUFDLHNCQUFzQixHQUFHLFlBQVk7QUFDM0MsTUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFO0FBQ3ZCLFFBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDN0IsUUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7R0FDNUI7Q0FDRixDQUFDOztBQUVGLE9BQU8sQ0FBQyxzQkFBc0IsR0FBRyxVQUFVLEdBQUcsRUFBRTs7OztBQUU5QyxNQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQzs7O0FBRzlCLE1BQUksQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsT0FBTzs7QUFFdEMsTUFBSSxDQUFDLGNBQWMsR0FBRyxvQkFBSyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztBQUN0RSxNQUFJLENBQUMsY0FBYyxDQUNoQixJQUFJLENBQUM7Ozs7QUFDSiw4QkFBSSxJQUFJLENBQUMsc0NBQ0csSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksNEJBQXdCLENBQUMsQ0FBQzs7MkNBQy9ELElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLEtBQUssY0FBWSxHQUFHLGlCQUFjLENBQUM7Ozs7Ozs7R0FDM0UsQ0FBQyxTQUNJLENBQUMsc0JBQUUsaUJBQWlCLEVBQUUsbUJBQWE7O0dBRXhDLENBQUMsQ0FBQztDQUNOLENBQUM7O0FBRUYsZUFBYyxVQUFVLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3BDLFFBQVEsR0FBUixRQUFRO1FBQUUsT0FBTyxHQUFQLE9BQU87cUJBQ1gsVUFBVSIsImZpbGUiOiJsaWIvY29tbWFuZHMvdGltZW91dC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyJztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCB7IHV0aWwgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5cblxubGV0IGNvbW1hbmRzID0ge30sIGhlbHBlcnMgPSB7fSwgZXh0ZW5zaW9ucyA9IHt9O1xuXG5jb21tYW5kcy5pbXBsaWNpdFdhaXQgPSBmdW5jdGlvbiAobXMpIHtcbiAgdGhpcy5pbXBsaWNpdFdhaXRNcyA9IHBhcnNlSW50KG1zLCAxMCk7XG4gIGxvZy5kZWJ1ZyhgU2V0IGltcGxpY2l0IHdhaXQgdG8gJHttc31tc2ApO1xufTtcblxuY29tbWFuZHMudGltZW91dHMgPSBhc3luYyBmdW5jdGlvbiAobmFtZSwgZHVyYXRpb24pIHtcbiAgaWYgKG5hbWUgPT09ICdjb21tYW5kJykge1xuICAgIHRoaXMubmV3Q29tbWFuZFRpbWVvdXRNcyA9IGR1cmF0aW9uO1xuICB9XG59O1xuXG5oZWxwZXJzLmNsZWFyTmV3Q29tbWFuZFRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLm5vQ29tbWFuZFRpbWVyKSB7XG4gICAgdGhpcy5ub0NvbW1hbmRUaW1lci5jYW5jZWwoKTtcbiAgICB0aGlzLm5vQ29tbWFuZFRpbWVyID0gbnVsbDtcbiAgfVxufTtcblxuaGVscGVycy5zdGFydE5ld0NvbW1hbmRUaW1lb3V0ID0gZnVuY3Rpb24gKGNtZCkge1xuICAvLyBtYWtlIHN1cmUgdGhlcmUgYXJlIG5vIHJvZ3VlIHRpbWVvdXRzXG4gIHRoaXMuY2xlYXJOZXdDb21tYW5kVGltZW91dCgpO1xuXG4gIC8vIGlmIGNvbW1hbmQgdGltZW91dCBpcyAwLCBpdCBpcyBkaXNhYmxlZFxuICBpZiAoIXRoaXMubmV3Q29tbWFuZFRpbWVvdXRNcykgcmV0dXJuO1xuXG4gIHRoaXMubm9Db21tYW5kVGltZXIgPSB1dGlsLmNhbmNlbGxhYmxlRGVsYXkodGhpcy5uZXdDb21tYW5kVGltZW91dE1zKTtcbiAgdGhpcy5ub0NvbW1hbmRUaW1lclxuICAgIC50aGVuKGFzeW5jICgpID0+IHtcbiAgICAgIGxvZy53YXJuKGBTaHV0dGluZyBkb3duIGJlY2F1c2Ugd2Ugd2FpdGVkIGAgK1xuICAgICAgICAgICAgICAgYCR7dGhpcy5uZXdDb21tYW5kVGltZW91dE1zIC8gMTAwMH0gc2Vjb25kcyBmb3IgYSBjb21tYW5kYCk7XG4gICAgICBhd2FpdCB0aGlzLnN0YXJ0VW5leHBlY3RlZFNodXRkb3duKG5ldyBFcnJvcihgQ29tbWFuZCAke2NtZH0gdGltZWQgb3V0IWApKTtcbiAgICB9KVxuICAgIC5jYXRjaChCLkNhbmNlbGxhdGlvbkVycm9yLCAoLyplcnIqLykgPT4ge1xuICAgICAgLy8gaWdub3JlXG4gICAgfSk7XG59O1xuXG5PYmplY3QuYXNzaWduKGV4dGVuc2lvbnMsIGNvbW1hbmRzLCBoZWxwZXJzKTtcbmV4cG9ydCB7IGNvbW1hbmRzLCBoZWxwZXJzIH07XG5leHBvcnQgZGVmYXVsdCBleHRlbnNpb25zO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
