'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _appiumBaseDriver = require('appium-base-driver');

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var _utils = require('../utils');

var commands = {};

commands.updateSettings = function callee$0$0(newSettings) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.settings) {
          _logger2['default'].errorAndThrow('Cannot update settings; settings object not found');
        }
        return context$1$0.abrupt('return', this.settings.update(newSettings));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getSettings = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.settings) {
          _logger2['default'].errorAndThrow('Cannot get settings; settings object not found');
        }
        return context$1$0.abrupt('return', this.settings.getSettings());

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

// Amplifies time on the device by a factor
// examples:
// 2 = twice the speed
// 1 = normal speed
// 0.5 = half the speed
commands.setTimeDilation = function callee$0$0(factor) {
  var commandObject, commandJSON, data, result;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        commandObject = {
          name: 'setTimeDilation',
          args: ['' + factor]
        };
        commandJSON = JSON.stringify(commandObject);
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.executeSocketCommand(commandJSON));

      case 4:
        data = context$1$0.sent;
        result = undefined;
        context$1$0.prev = 6;

        result = JSON.parse(data);
        context$1$0.next = 13;
        break;

      case 10:
        context$1$0.prev = 10;
        context$1$0.t0 = context$1$0['catch'](6);
        throw new Error("Bad response from setValue");

      case 13:
        if (!(result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_UNKNOWN_COMMAND)) {
          context$1$0.next = 15;
          break;
        }

        throw new _appiumBaseDriver.errors.UnknownCommandError('argument must be numeric and larger than zero');

      case 15:
        return context$1$0.abrupt('return', result.value);

      case 16:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[6, 10]]);
};

// Sets the attribute type/value to filter the source tree
// format:
// SourceTreeFilter: "[@attributeType='attributeValue']"
commands.setSourceTreeFilter = function callee$0$0(filter) {
  var commandObject, commandJSON, data, result;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        commandObject = {
          name: 'setSourceTreeFilter',
          args: ['' + filter]
        };
        commandJSON = JSON.stringify(commandObject);
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.executeSocketCommand(commandJSON));

      case 4:
        data = context$1$0.sent;
        result = undefined;
        context$1$0.prev = 6;

        result = JSON.parse(data);
        context$1$0.next = 13;
        break;

      case 10:
        context$1$0.prev = 10;
        context$1$0.t0 = context$1$0['catch'](6);
        throw new Error("Bad response from setValue");

      case 13:
        if (!(result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_UNKNOWN_COMMAND)) {
          context$1$0.next = 15;
          break;
        }

        throw new _appiumBaseDriver.errors.UnknownCommandError('argument must be numeric and larger than zero');

      case 15:
        if (!(result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_INVALID_SELECTOR)) {
          context$1$0.next = 17;
          break;
        }

        throw new _appiumBaseDriver.errors.InvalidSelectorError("Attribute filter should have following format: [@attributeType='attributeValue']");

      case 17:
        return context$1$0.abrupt('return', result.value);

      case 18:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[6, 10]]);
};

exports['default'] = commands;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9zZXR0aW5ncy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O2dDQUF1QixvQkFBb0I7O3NCQUMzQixXQUFXOzs7O3FCQUNrQixVQUFVOztBQUV2RCxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7O0FBRWxCLFFBQVEsQ0FBQyxjQUFjLEdBQUcsb0JBQWdCLFdBQVc7Ozs7QUFDbkQsWUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7QUFDbEIsOEJBQUksYUFBYSxDQUFDLG1EQUFtRCxDQUFDLENBQUM7U0FDeEU7NENBQ00sSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDOzs7Ozs7O0NBQ3pDLENBQUM7O0FBRUYsUUFBUSxDQUFDLFdBQVcsR0FBRzs7OztBQUNyQixZQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtBQUNsQiw4QkFBSSxhQUFhLENBQUMsZ0RBQWdELENBQUMsQ0FBQztTQUNyRTs0Q0FDTSxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRTs7Ozs7OztDQUNuQyxDQUFDOzs7Ozs7O0FBT0YsUUFBUSxDQUFDLGVBQWUsR0FBRyxvQkFBZ0IsTUFBTTtNQUMzQyxhQUFhLEVBSWIsV0FBVyxFQUNYLElBQUksRUFFSixNQUFNOzs7O0FBUE4scUJBQWEsR0FBRztBQUNsQixjQUFJLG1CQUFtQjtBQUN2QixjQUFJLEVBQUUsTUFBSSxNQUFNLENBQUc7U0FDcEI7QUFDRyxtQkFBVyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDOzt5Q0FDOUIsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFdBQVcsQ0FBQzs7O0FBQW5ELFlBQUk7QUFFSixjQUFNOzs7QUFFUixjQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQzs7Ozs7OztjQUVwQixJQUFJLEtBQUssQ0FBQyw0QkFBNEIsQ0FBQzs7O2NBRzNDLE1BQU0sQ0FBQyxNQUFNLEtBQUssb0NBQTZCLHlCQUF5QixDQUFBOzs7OztjQUNwRSxJQUFJLHlCQUFPLG1CQUFtQixDQUFDLCtDQUErQyxDQUFDOzs7NENBR2hGLE1BQU0sQ0FBQyxLQUFLOzs7Ozs7O0NBQ3BCLENBQUM7Ozs7O0FBTUYsUUFBUSxDQUFDLG1CQUFtQixHQUFHLG9CQUFnQixNQUFNO01BQy9DLGFBQWEsRUFJYixXQUFXLEVBQ1gsSUFBSSxFQUVKLE1BQU07Ozs7QUFQTixxQkFBYSxHQUFHO0FBQ2xCLGNBQUksdUJBQXVCO0FBQzNCLGNBQUksRUFBRSxNQUFJLE1BQU0sQ0FBRztTQUNwQjtBQUNHLG1CQUFXLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUM7O3lDQUM5QixJQUFJLENBQUMsb0JBQW9CLENBQUMsV0FBVyxDQUFDOzs7QUFBbkQsWUFBSTtBQUVKLGNBQU07OztBQUVSLGNBQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDOzs7Ozs7O2NBRXBCLElBQUksS0FBSyxDQUFDLDRCQUE0QixDQUFDOzs7Y0FHM0MsTUFBTSxDQUFDLE1BQU0sS0FBSyxvQ0FBNkIseUJBQXlCLENBQUE7Ozs7O2NBQ3BFLElBQUkseUJBQU8sbUJBQW1CLENBQUMsK0NBQStDLENBQUM7OztjQUVuRixNQUFNLENBQUMsTUFBTSxLQUFLLG9DQUE2QiwwQkFBMEIsQ0FBQTs7Ozs7Y0FDckUsSUFBSSx5QkFBTyxvQkFBb0IsQ0FBQyxrRkFBa0YsQ0FBQzs7OzRDQUVwSCxNQUFNLENBQUMsS0FBSzs7Ozs7OztDQUNwQixDQUFDOztxQkFHYSxRQUFRIiwiZmlsZSI6ImxpYi9jb21tYW5kcy9zZXR0aW5ncy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGVycm9ycyB9IGZyb20gJ2FwcGl1bS1iYXNlLWRyaXZlcic7XG5pbXBvcnQgbG9nIGZyb20gJy4uL2xvZ2dlcic7XG5pbXBvcnQgeyB5b3VpRW5naW5lRHJpdmVyUmV0dXJuVmFsdWVzIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5sZXQgY29tbWFuZHMgPSB7fTtcblxuY29tbWFuZHMudXBkYXRlU2V0dGluZ3MgPSBhc3luYyBmdW5jdGlvbiAobmV3U2V0dGluZ3MpIHtcbiAgaWYgKCF0aGlzLnNldHRpbmdzKSB7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coJ0Nhbm5vdCB1cGRhdGUgc2V0dGluZ3M7IHNldHRpbmdzIG9iamVjdCBub3QgZm91bmQnKTtcbiAgfVxuICByZXR1cm4gdGhpcy5zZXR0aW5ncy51cGRhdGUobmV3U2V0dGluZ3MpO1xufTtcblxuY29tbWFuZHMuZ2V0U2V0dGluZ3MgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGlmICghdGhpcy5zZXR0aW5ncykge1xuICAgIGxvZy5lcnJvckFuZFRocm93KCdDYW5ub3QgZ2V0IHNldHRpbmdzOyBzZXR0aW5ncyBvYmplY3Qgbm90IGZvdW5kJyk7XG4gIH1cbiAgcmV0dXJuIHRoaXMuc2V0dGluZ3MuZ2V0U2V0dGluZ3MoKTtcbn07XG5cbi8vIEFtcGxpZmllcyB0aW1lIG9uIHRoZSBkZXZpY2UgYnkgYSBmYWN0b3Jcbi8vIGV4YW1wbGVzOiBcbi8vIDIgPSB0d2ljZSB0aGUgc3BlZWRcbi8vIDEgPSBub3JtYWwgc3BlZWRcbi8vIDAuNSA9IGhhbGYgdGhlIHNwZWVkIFxuY29tbWFuZHMuc2V0VGltZURpbGF0aW9uID0gYXN5bmMgZnVuY3Rpb24gKGZhY3Rvcikge1xuICB2YXIgY29tbWFuZE9iamVjdCA9IHtcbiAgICBuYW1lOiBgc2V0VGltZURpbGF0aW9uYCxcbiAgICBhcmdzOiBbYCR7ZmFjdG9yfWBdXG4gIH07XG4gIHZhciBjb21tYW5kSlNPTiA9IEpTT04uc3RyaW5naWZ5KGNvbW1hbmRPYmplY3QpO1xuICBsZXQgZGF0YSA9IGF3YWl0IHRoaXMuZXhlY3V0ZVNvY2tldENvbW1hbmQoY29tbWFuZEpTT04pO1xuICBcbiAgbGV0IHJlc3VsdDtcbiAgdHJ5IHtcbiAgICByZXN1bHQgPSBKU09OLnBhcnNlKGRhdGEpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQmFkIHJlc3BvbnNlIGZyb20gc2V0VmFsdWVcIik7XG4gIH1cbiAgXG4gIGlmIChyZXN1bHQuc3RhdHVzID09PSB5b3VpRW5naW5lRHJpdmVyUmV0dXJuVmFsdWVzLldFQkRSSVZFUl9VTktOT1dOX0NPTU1BTkQpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLlVua25vd25Db21tYW5kRXJyb3IoJ2FyZ3VtZW50IG11c3QgYmUgbnVtZXJpYyBhbmQgbGFyZ2VyIHRoYW4gemVybycpO1xuICB9XG4gIFxuICByZXR1cm4gcmVzdWx0LnZhbHVlO1xufTtcblxuXG4vLyBTZXRzIHRoZSBhdHRyaWJ1dGUgdHlwZS92YWx1ZSB0byBmaWx0ZXIgdGhlIHNvdXJjZSB0cmVlXG4vLyBmb3JtYXQ6IFxuLy8gU291cmNlVHJlZUZpbHRlcjogXCJbQGF0dHJpYnV0ZVR5cGU9J2F0dHJpYnV0ZVZhbHVlJ11cIlxuY29tbWFuZHMuc2V0U291cmNlVHJlZUZpbHRlciA9IGFzeW5jIGZ1bmN0aW9uIChmaWx0ZXIpIHtcbiAgdmFyIGNvbW1hbmRPYmplY3QgPSB7XG4gICAgbmFtZTogYHNldFNvdXJjZVRyZWVGaWx0ZXJgLFxuICAgIGFyZ3M6IFtgJHtmaWx0ZXJ9YF1cbiAgfTtcbiAgdmFyIGNvbW1hbmRKU09OID0gSlNPTi5zdHJpbmdpZnkoY29tbWFuZE9iamVjdCk7XG4gIGxldCBkYXRhID0gYXdhaXQgdGhpcy5leGVjdXRlU29ja2V0Q29tbWFuZChjb21tYW5kSlNPTik7XG4gIFxuICBsZXQgcmVzdWx0O1xuICB0cnkge1xuICAgIHJlc3VsdCA9IEpTT04ucGFyc2UoZGF0YSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJCYWQgcmVzcG9uc2UgZnJvbSBzZXRWYWx1ZVwiKTtcbiAgfVxuICBcbiAgaWYgKHJlc3VsdC5zdGF0dXMgPT09IHlvdWlFbmdpbmVEcml2ZXJSZXR1cm5WYWx1ZXMuV0VCRFJJVkVSX1VOS05PV05fQ09NTUFORCkge1xuICAgIHRocm93IG5ldyBlcnJvcnMuVW5rbm93bkNvbW1hbmRFcnJvcignYXJndW1lbnQgbXVzdCBiZSBudW1lcmljIGFuZCBsYXJnZXIgdGhhbiB6ZXJvJyk7XG4gIH1cbiAgaWYgKHJlc3VsdC5zdGF0dXMgPT09IHlvdWlFbmdpbmVEcml2ZXJSZXR1cm5WYWx1ZXMuV0VCRFJJVkVSX0lOVkFMSURfU0VMRUNUT1IpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRTZWxlY3RvckVycm9yKFwiQXR0cmlidXRlIGZpbHRlciBzaG91bGQgaGF2ZSBmb2xsb3dpbmcgZm9ybWF0OiBbQGF0dHJpYnV0ZVR5cGU9J2F0dHJpYnV0ZVZhbHVlJ11cIik7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdC52YWx1ZTtcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgY29tbWFuZHM7XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
