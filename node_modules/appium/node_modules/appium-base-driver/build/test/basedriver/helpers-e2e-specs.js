'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _appiumSupport = require('appium-support');

var _libBasedriverHelpers = require('../../lib/basedriver/helpers');

var _libBasedriverHelpers2 = _interopRequireDefault(_libBasedriverHelpers);

var _http = require('http');

var _http2 = _interopRequireDefault(_http);

var _finalhandler = require('finalhandler');

var _finalhandler2 = _interopRequireDefault(_finalhandler);

var _serveStatic = require('serve-static');

var _serveStatic2 = _interopRequireDefault(_serveStatic);

var _contentDisposition = require('content-disposition');

var _contentDisposition2 = _interopRequireDefault(_contentDisposition);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

function getFixture(file) {
  return _path2['default'].resolve(__dirname, '..', '..', '..', 'test', 'basedriver', 'fixtures', file);
}

describe('app download and configuration', function () {
  describe('configureApp', function () {
    it('should get the path for a local .app', function callee$2$0() {
      var newAppPath, contents;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(_libBasedriverHelpers2['default'].configureApp(getFixture('FakeIOSApp.app'), '.app'));

          case 2:
            newAppPath = context$3$0.sent;

            newAppPath.should.contain('FakeIOSApp.app');
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(newAppPath, 'utf8'));

          case 6:
            contents = context$3$0.sent;

            contents.should.eql('this is not really an app\n');

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should get the path for a local .apk', function callee$2$0() {
      var newAppPath, contents;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(_libBasedriverHelpers2['default'].configureApp(getFixture('FakeAndroidApp.apk'), '.apk'));

          case 2:
            newAppPath = context$3$0.sent;

            newAppPath.should.contain('FakeAndroidApp.apk');
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(newAppPath, 'utf8'));

          case 6:
            contents = context$3$0.sent;

            contents.should.eql('this is not really an apk\n');

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should unzip and get the path for a local .app.zip', function callee$2$0() {
      var newAppPath, contents;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(_libBasedriverHelpers2['default'].configureApp(getFixture('FakeIOSApp.app.zip'), '.app'));

          case 2:
            newAppPath = context$3$0.sent;

            newAppPath.should.contain('FakeIOSApp.app');
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(newAppPath, 'utf8'));

          case 6:
            contents = context$3$0.sent;

            contents.should.eql('this is not really an app\n');

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should unzip and get the path for a local .ipa', function callee$2$0() {
      var newAppPath, contents;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(_libBasedriverHelpers2['default'].configureApp(getFixture('FakeIOSApp.ipa'), '.app'));

          case 2:
            newAppPath = context$3$0.sent;

            newAppPath.should.contain('FakeIOSApp.app');
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(newAppPath, 'utf8'));

          case 6:
            contents = context$3$0.sent;

            contents.should.eql('this is not really an app\n');

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should fail for a bad zip file', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(_libBasedriverHelpers2['default'].configureApp(getFixture('BadZippedApp.zip'), '.app').should.be.rejectedWith('Error testing zip archive, are you sure this is a zip file?'));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should fail if extensions do not match', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(_libBasedriverHelpers2['default'].configureApp(getFixture('FakeIOSApp.app'), '.wrong').should.be.rejectedWith(/did not have extension '.wrong'/));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should fail if zip file does not contain an app whose extension matches', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(_libBasedriverHelpers2['default'].configureApp(getFixture('FakeIOSApp.app.zip'), '.wrong').should.be.rejectedWith(/could not find a .wrong bundle in it/));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    describe('should download an app from the web', function callee$2$0() {
      var server;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            server = undefined;

            before(function () {
              var dir = _path2['default'].resolve(__dirname, '..', '..', '..', 'test', 'basedriver', 'fixtures');
              var serve = (0, _serveStatic2['default'])(dir, {
                index: false,
                setHeaders: function setHeaders(res, path) {
                  res.setHeader('Content-Disposition', (0, _contentDisposition2['default'])(path));
                }
              });

              server = _http2['default'].createServer(function (req, res) {
                if (req.url.indexOf('missing') !== -1) {
                  res.writeHead(404);
                  res.end();
                  return;
                }
                // for testing zip file content types
                if (req.url.indexOf('mime-zip') !== -1) {
                  res.setHeader('Content-Type', 'application/zip');
                } else if (req.url.indexOf('mime-bip') !== 1) {
                  res.setHeader('Content-Type', 'application/bip');
                }
                serve(req, res, (0, _finalhandler2['default'])(req, res));
              });
              server.listen(8000);
            });
            after(function () {
              server.close();
            });

            it('should download zip file', function callee$3$0() {
              var newAppPath, contents;
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    context$4$0.next = 2;
                    return _regeneratorRuntime.awrap(_libBasedriverHelpers2['default'].configureApp('http://localhost:8000/FakeIOSApp.app.zip', '.app'));

                  case 2:
                    newAppPath = context$4$0.sent;

                    newAppPath.should.contain('FakeIOSApp.app');
                    context$4$0.next = 6;
                    return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(newAppPath, 'utf8'));

                  case 6:
                    contents = context$4$0.sent;

                    contents.should.eql('this is not really an app\n');

                  case 8:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, this);
            });
            it('should download zip file with query string', function callee$3$0() {
              var newAppPath, contents;
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    context$4$0.next = 2;
                    return _regeneratorRuntime.awrap(_libBasedriverHelpers2['default'].configureApp('http://localhost:8000/FakeIOSApp.app.zip?sv=abc&sr=def', '.app'));

                  case 2:
                    newAppPath = context$4$0.sent;

                    newAppPath.should.contain('.app');
                    context$4$0.next = 6;
                    return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(newAppPath, 'utf8'));

                  case 6:
                    contents = context$4$0.sent;

                    contents.should.eql('this is not really an app\n');

                  case 8:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, this);
            });
            it('should download an app file', function callee$3$0() {
              var newAppPath, contents;
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    context$4$0.next = 2;
                    return _regeneratorRuntime.awrap(_libBasedriverHelpers2['default'].configureApp('http://localhost:8000/FakeIOSApp.app', '.app'));

                  case 2:
                    newAppPath = context$4$0.sent;

                    newAppPath.should.contain('.app');
                    context$4$0.next = 6;
                    return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(newAppPath, 'utf8'));

                  case 6:
                    contents = context$4$0.sent;

                    contents.should.eql('this is not really an app\n');

                  case 8:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, this);
            });
            it('should download an apk file', function callee$3$0() {
              var newAppPath, contents;
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    context$4$0.next = 2;
                    return _regeneratorRuntime.awrap(_libBasedriverHelpers2['default'].configureApp('http://localhost:8000/FakeAndroidApp.apk', '.apk'));

                  case 2:
                    newAppPath = context$4$0.sent;

                    newAppPath.should.contain('.apk');
                    context$4$0.next = 6;
                    return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(newAppPath, 'utf8'));

                  case 6:
                    contents = context$4$0.sent;

                    contents.should.eql('this is not really an apk\n');

                  case 8:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, this);
            });
            it('should handle zip file that cannot be downloaded', function callee$3$0() {
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    context$4$0.next = 2;
                    return _regeneratorRuntime.awrap(_libBasedriverHelpers2['default'].configureApp('http://localhost:8000/missing/FakeIOSApp.app.zip', '.app').should.be.rejectedWith(/Problem downloading app from url/));

                  case 2:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, this);
            });
            it('should handle invalid protocol', function callee$3$0() {
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    context$4$0.next = 2;
                    return _regeneratorRuntime.awrap(_libBasedriverHelpers2['default'].configureApp('file://C:/missing/FakeIOSApp.app.zip', '.app').should.be.rejectedWith(/is not supported/));

                  case 2:
                    context$4$0.next = 4;
                    return _regeneratorRuntime.awrap(_libBasedriverHelpers2['default'].configureApp('ftp://localhost:8000/missing/FakeIOSApp.app.zip', '.app').should.be.rejectedWith(/is not supported/));

                  case 4:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, this);
            });
            it('should handle missing file in Windows path format', function callee$3$0() {
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    context$4$0.next = 2;
                    return _regeneratorRuntime.awrap(_libBasedriverHelpers2['default'].configureApp('C:\\missing\\FakeIOSApp.app.zip', '.app').should.be.rejectedWith(/does not exist or is not accessible/));

                  case 2:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, this);
            });
            it('should recognize zip mime types and unzip the downloaded file', function callee$3$0() {
              var newAppPath, contents;
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    context$4$0.next = 2;
                    return _regeneratorRuntime.awrap(_libBasedriverHelpers2['default'].configureApp('http://localhost:8000/FakeAndroidApp.asd?mime-zip', '.apk'));

                  case 2:
                    newAppPath = context$4$0.sent;

                    newAppPath.should.contain('FakeAndroidApp.apk');
                    newAppPath.should.not.contain('.asd');
                    context$4$0.next = 7;
                    return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(newAppPath, 'utf8'));

                  case 7:
                    contents = context$4$0.sent;

                    contents.should.eql('this is not really an apk\n');

                  case 9:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, this);
            });
            it('should recognize zip mime types and unzip the downloaded file with query string', function callee$3$0() {
              var newAppPath, contents;
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    context$4$0.next = 2;
                    return _regeneratorRuntime.awrap(_libBasedriverHelpers2['default'].configureApp('http://localhost:8000/FakeAndroidApp.asd?mime-zip&sv=abc&sr=def', '.apk'));

                  case 2:
                    newAppPath = context$4$0.sent;

                    newAppPath.should.contain('FakeAndroidApp.apk');
                    newAppPath.should.not.contain('.asd');
                    context$4$0.next = 7;
                    return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(newAppPath, 'utf8'));

                  case 7:
                    contents = context$4$0.sent;

                    contents.should.eql('this is not really an apk\n');

                  case 9:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, this);
            });
            it('should treat an unknown mime type as an app', function callee$3$0() {
              var newAppPath, contents;
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    context$4$0.next = 2;
                    return _regeneratorRuntime.awrap(_libBasedriverHelpers2['default'].configureApp('http://localhost:8000/FakeAndroidApp.apk?mime-bip', '.apk'));

                  case 2:
                    newAppPath = context$4$0.sent;

                    newAppPath.should.contain('.apk');
                    context$4$0.next = 6;
                    return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(newAppPath, 'utf8'));

                  case 6:
                    contents = context$4$0.sent;

                    contents.should.eql('this is not really an apk\n');

                  case 8:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, this);
            });
            it('should handle server not available', function callee$3$0() {
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    server.close();
                    context$4$0.next = 3;
                    return _regeneratorRuntime.awrap(_libBasedriverHelpers2['default'].configureApp('http://localhost:8000/FakeIOSApp.app.zip', '.app').should.be.rejectedWith(/ECONNREFUSED/));

                  case 3:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, this);
            });

          case 14:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
});

// use a local server so there is no dependency on the internet
//# sourceMappingURL=data:application/json;charset=utf8;base64,
