'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _2 = require('../..');

var _requestPromise = require('request-promise');

var _requestPromise2 = _interopRequireDefault(_requestPromise);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var should = _chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

function baseDriverE2ETests(DriverClass) {
  var defaultCaps = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  describe('BaseDriver (e2e)', function () {
    var baseServer = undefined,
        d = new DriverClass();
    before(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _2.server)((0, _2.routeConfiguringFunction)(d), 8181));

          case 2:
            baseServer = context$3$0.sent;

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    after(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(baseServer.close());

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    function startSession(caps) {
      return (0, _requestPromise2['default'])({
        url: 'http://localhost:8181/wd/hub/session',
        method: 'POST',
        json: { desiredCapabilities: caps, requiredCapabilities: {} }
      });
    }

    function endSession(id) {
      return (0, _requestPromise2['default'])({
        url: 'http://localhost:8181/wd/hub/session/' + id,
        method: 'DELETE',
        json: true,
        simple: false
      });
    }

    function getSession(id) {
      return (0, _requestPromise2['default'])({
        url: 'http://localhost:8181/wd/hub/session/' + id,
        method: 'GET',
        json: true,
        simple: false
      });
    }

    describe('session handling', function () {
      it('should create session and retrieve a session id, then delete it', function callee$3$0() {
        var res;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                url: 'http://localhost:8181/wd/hub/session',
                method: 'POST',
                json: { desiredCapabilities: defaultCaps, requiredCapabilities: {} },
                simple: false,
                resolveWithFullResponse: true
              }));

            case 2:
              res = context$4$0.sent;

              res.statusCode.should.equal(200);
              res.body.status.should.equal(0);
              should.exist(res.body.sessionId);
              res.body.value.should.eql(defaultCaps);

              context$4$0.next = 9;
              return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                url: 'http://localhost:8181/wd/hub/session/' + d.sessionId,
                method: 'DELETE',
                json: true,
                simple: false,
                resolveWithFullResponse: true
              }));

            case 9:
              res = context$4$0.sent;

              res.statusCode.should.equal(200);
              res.body.status.should.equal(0);
              should.equal(d.sessionId, null);

            case 13:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
    });

    it.skip('should throw NYI for commands not implemented', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    describe('command timeouts', function () {
      function startTimeoutSession(timeout) {
        var caps = _lodash2['default'].clone(defaultCaps);
        caps.newCommandTimeout = timeout;
        return startSession(caps);
      }

      d.findElement = (function () {
        return 'foo';
      }).bind(d);

      d.findElements = (function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(_bluebird2['default'].delay(200));

            case 2:
              return context$4$0.abrupt('return', ['foo']);

            case 3:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      }).bind(d);

      it('should set a default commandTimeout', function callee$3$0() {
        var newSession;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(startTimeoutSession());

            case 2:
              newSession = context$4$0.sent;

              d.newCommandTimeoutMs.should.be.above(0);
              context$4$0.next = 6;
              return _regeneratorRuntime.awrap(endSession(newSession.sessionId));

            case 6:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });

      it('should timeout on commands using commandTimeout cap', function callee$3$0() {
        var newSession, res;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(startTimeoutSession(0.25));

            case 2:
              newSession = context$4$0.sent;
              context$4$0.next = 5;
              return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                url: 'http://localhost:8181/wd/hub/session/' + d.sessionId + '/element',
                method: 'POST',
                json: { using: 'name', value: 'foo' }
              }));

            case 5:
              context$4$0.next = 7;
              return _regeneratorRuntime.awrap(_bluebird2['default'].delay(400));

            case 7:
              context$4$0.next = 9;
              return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                url: 'http://localhost:8181/wd/hub/session/' + d.sessionId,
                method: 'GET',
                json: true,
                simple: false
              }));

            case 9:
              res = context$4$0.sent;

              res.status.should.equal(6);
              should.equal(d.sessionId, null);
              context$4$0.next = 14;
              return _regeneratorRuntime.awrap(endSession(newSession.sessionId));

            case 14:
              res = context$4$0.sent;

              res.status.should.equal(6);

            case 16:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });

      it('should not timeout with commandTimeout of false', function callee$3$0() {
        var newSession, start, res;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(startTimeoutSession(0.1));

            case 2:
              newSession = context$4$0.sent;
              start = Date.now();
              context$4$0.next = 6;
              return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                url: 'http://localhost:8181/wd/hub/session/' + d.sessionId + '/elements',
                method: 'POST',
                json: { using: 'name', value: 'foo' }
              }));

            case 6:
              res = context$4$0.sent;

              (Date.now() - start).should.be.above(150);
              res.value.should.eql(['foo']);
              context$4$0.next = 11;
              return _regeneratorRuntime.awrap(endSession(newSession.sessionId));

            case 11:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });

      it('should not timeout with commandTimeout of 0', function callee$3$0() {
        var newSession, res;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              d.newCommandTimeoutMs = 2;
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(startTimeoutSession(0));

            case 3:
              newSession = context$4$0.sent;
              context$4$0.next = 6;
              return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                url: 'http://localhost:8181/wd/hub/session/' + d.sessionId + '/element',
                method: 'POST',
                json: { using: 'name', value: 'foo' }
              }));

            case 6:
              context$4$0.next = 8;
              return _regeneratorRuntime.awrap(_bluebird2['default'].delay(400));

            case 8:
              context$4$0.next = 10;
              return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                url: 'http://localhost:8181/wd/hub/session/' + d.sessionId,
                method: 'GET',
                json: true,
                simple: false
              }));

            case 10:
              res = context$4$0.sent;

              res.status.should.equal(0);
              context$4$0.next = 14;
              return _regeneratorRuntime.awrap(endSession(newSession.sessionId));

            case 14:
              res = context$4$0.sent;

              res.status.should.equal(0);

              d.newCommandTimeoutMs = 60 * 1000;

            case 17:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });

      it('should not timeout if its just the command taking awhile', function callee$3$0() {
        var newSession, res;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(startTimeoutSession(0.25));

            case 2:
              newSession = context$4$0.sent;
              context$4$0.next = 5;
              return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                url: 'http://localhost:8181/wd/hub/session/' + d.sessionId + '/element',
                method: 'POST',
                json: { using: 'name', value: 'foo' }
              }));

            case 5:
              context$4$0.next = 7;
              return _regeneratorRuntime.awrap(_bluebird2['default'].delay(400));

            case 7:
              context$4$0.next = 9;
              return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                url: 'http://localhost:8181/wd/hub/session/' + d.sessionId,
                method: 'GET',
                json: true,
                simple: false
              }));

            case 9:
              res = context$4$0.sent;

              res.status.should.equal(6);
              should.equal(d.sessionId, null);
              context$4$0.next = 14;
              return _regeneratorRuntime.awrap(endSession(newSession.sessionId));

            case 14:
              res = context$4$0.sent;

              res.status.should.equal(6);

            case 16:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });

      it('should not have a timer running before or after a session', function callee$3$0() {
        var newSession;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              should.not.exist(d.noCommandTimer);
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(startTimeoutSession(0.25));

            case 3:
              newSession = context$4$0.sent;

              newSession.sessionId.should.equal(d.sessionId);
              should.exist(d.noCommandTimer);
              context$4$0.next = 8;
              return _regeneratorRuntime.awrap(endSession(newSession.sessionId));

            case 8:
              should.not.exist(d.noCommandTimer);

            case 9:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
    });

    describe('settings api', function () {
      before(function () {
        d.settings = new _2.DeviceSettings({ ignoreUnimportantViews: false });
      });
      it('should be able to get settings object', function () {
        d.settings.getSettings().ignoreUnimportantViews.should.be['false'];
      });
      it('should throw error when updateSettings method is not defined', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(d.settings.update({ ignoreUnimportantViews: true }).should.eventually.be.rejectedWith('onSettingsUpdate'));

            case 2:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
      it('should throw error for invalid update object', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(d.settings.update('invalid json').should.eventually.be.rejectedWith('JSON'));

            case 2:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
    });

    describe('unexpected exits', function () {
      it('should reject a current command when the driver crashes', function callee$3$0() {
        var p, res;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              d._oldGetStatus = d.getStatus;
              d.getStatus = (function callee$4$0() {
                return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
                  while (1) switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      context$5$0.next = 2;
                      return _regeneratorRuntime.awrap(_bluebird2['default'].delay(5000));

                    case 2:
                    case 'end':
                      return context$5$0.stop();
                  }
                }, null, this);
              }).bind(d);
              p = (0, _requestPromise2['default'])({
                url: 'http://localhost:8181/wd/hub/status',
                method: 'GET',
                json: true,
                simple: false
              });
              context$4$0.next = 5;
              return _regeneratorRuntime.awrap(_bluebird2['default'].delay(100));

            case 5:
              d.startUnexpectedShutdown(new Error('Crashytimes'));
              context$4$0.next = 8;
              return _regeneratorRuntime.awrap(p);

            case 8:
              res = context$4$0.sent;

              res.status.should.equal(13);
              res.value.message.should.contain('Crashytimes');
              context$4$0.next = 13;
              return _regeneratorRuntime.awrap(d.onUnexpectedShutdown.should.be.rejectedWith('Crashytimes'));

            case 13:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
    });

    describe('event timings', function () {
      it('should not add timings if not using opt-in cap', function callee$3$0() {
        var session, res;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(startSession(defaultCaps));

            case 2:
              session = context$4$0.sent;
              context$4$0.next = 5;
              return _regeneratorRuntime.awrap(getSession(session.sessionId));

            case 5:
              res = context$4$0.sent;

              should.not.exist(res.events);
              context$4$0.next = 9;
              return _regeneratorRuntime.awrap(endSession(session.sessionId));

            case 9:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
      it('should add start session timings', function callee$3$0() {
        var caps, session, res;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              caps = _Object$assign({}, defaultCaps, { eventTimings: true });
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(startSession(caps));

            case 3:
              session = context$4$0.sent;
              context$4$0.next = 6;
              return _regeneratorRuntime.awrap(getSession(session.sessionId));

            case 6:
              res = context$4$0.sent.value;

              should.exist(res.events);
              should.exist(res.events.newSessionRequested);
              should.exist(res.events.newSessionStarted);
              res.events.newSessionRequested[0].should.be.a('number');
              res.events.newSessionStarted[0].should.be.a('number');
              context$4$0.next = 14;
              return _regeneratorRuntime.awrap(endSession(session.sessionId));

            case 14:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
    });
  });
}

exports['default'] = baseDriverE2ETests;
module.exports = exports['default'];

// make sure that the request gets to the server before our shutdown
//# sourceMappingURL=data:application/json;charset=utf8;base64,
