'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _libBasedriverCommandsLog = require('../../../lib/basedriver/commands/log');

var _libBasedriverCommandsLog2 = _interopRequireDefault(_libBasedriverCommandsLog);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);
var expect = _chai2['default'].expect;

var FIRST_LOGS = ['first', 'logs'];
var SECOND_LOGS = ['second', 'logs'];
var SUPPORTED_LOG_TYPES = {
  one: {
    description: 'First logs',
    getter: function getter() {
      return _lodash2['default'].clone(FIRST_LOGS);
    }
  },
  two: {
    description: 'Seconds logs',
    getter: function getter() {
      return _lodash2['default'].clone(SECOND_LOGS);
    }
  }
};

describe('log commands -', function () {
  beforeEach(function () {
    // reset the supported log types
    _libBasedriverCommandsLog2['default'].supportedLogTypes = {};
  });
  describe('getLogTypes', function () {
    it('should return empty array when no supported log types', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(_libBasedriverCommandsLog2['default'].getLogTypes());

          case 2:
            context$3$0.t0 = [];
            context$3$0.sent.should.eql(context$3$0.t0);

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should return keys to log type object', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            _libBasedriverCommandsLog2['default'].supportedLogTypes = SUPPORTED_LOG_TYPES;
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_libBasedriverCommandsLog2['default'].getLogTypes());

          case 3:
            context$3$0.t0 = ['one', 'two'];
            context$3$0.sent.should.eql(context$3$0.t0);

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('getLog', function () {
    beforeEach(function () {
      _sinon2['default'].spy(SUPPORTED_LOG_TYPES.one, 'getter');
      _sinon2['default'].spy(SUPPORTED_LOG_TYPES.two, 'getter');
    });
    afterEach(function () {
      SUPPORTED_LOG_TYPES.one.getter.restore();
      SUPPORTED_LOG_TYPES.two.getter.restore();
    });
    it('should throw error if log type not supported', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(_libBasedriverCommandsLog2['default'].getLog('one').should.eventually.be.rejected);

          case 2:
            SUPPORTED_LOG_TYPES.one.getter.called.should.be['false'];
            SUPPORTED_LOG_TYPES.two.getter.called.should.be['false'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw an error with available log types if log type not supported', function callee$2$0() {
      var err;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            _libBasedriverCommandsLog2['default'].supportedLogTypes = SUPPORTED_LOG_TYPES;
            err = undefined;
            context$3$0.prev = 2;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(_libBasedriverCommandsLog2['default'].getLog('three'));

          case 5:
            context$3$0.next = 10;
            break;

          case 7:
            context$3$0.prev = 7;
            context$3$0.t0 = context$3$0['catch'](2);

            err = context$3$0.t0;

          case 10:
            expect(err).to.exist;
            err.message.should.eql('Unsupported log type \'three\'. Supported types: {"one":"First logs","two":"Seconds logs"}');
            SUPPORTED_LOG_TYPES.one.getter.called.should.be['false'];
            SUPPORTED_LOG_TYPES.two.getter.called.should.be['false'];

          case 14:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this, [[2, 7]]);
    });
    it('should call getter on appropriate log when found', function callee$2$0() {
      var logs;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            _libBasedriverCommandsLog2['default'].supportedLogTypes = SUPPORTED_LOG_TYPES;
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_libBasedriverCommandsLog2['default'].getLog('one'));

          case 3:
            logs = context$3$0.sent;

            logs.should.eql(FIRST_LOGS);
            SUPPORTED_LOG_TYPES.one.getter.called.should.be['true'];
            SUPPORTED_LOG_TYPES.two.getter.called.should.be['false'];

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvYmFzZWRyaXZlci9jb21tYW5kcy9sb2ctc3BlY3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O3dDQUF3QixzQ0FBc0M7Ozs7b0JBQzdDLE1BQU07Ozs7OEJBQ0ksa0JBQWtCOzs7O3FCQUMzQixPQUFPOzs7O3NCQUNYLFFBQVE7Ozs7QUFHdEIsa0JBQUssTUFBTSxFQUFFLENBQUM7QUFDZCxrQkFBSyxHQUFHLDZCQUFnQixDQUFDO0FBQ3pCLElBQU0sTUFBTSxHQUFHLGtCQUFLLE1BQU0sQ0FBQzs7QUFFM0IsSUFBTSxVQUFVLEdBQUcsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDckMsSUFBTSxXQUFXLEdBQUcsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDdkMsSUFBTSxtQkFBbUIsR0FBRztBQUMxQixLQUFHLEVBQUU7QUFDSCxlQUFXLEVBQUUsWUFBWTtBQUN6QixVQUFNLEVBQUU7YUFBTSxvQkFBRSxLQUFLLENBQUMsVUFBVSxDQUFDO0tBQUE7R0FDbEM7QUFDRCxLQUFHLEVBQUU7QUFDSCxlQUFXLEVBQUUsY0FBYztBQUMzQixVQUFNLEVBQUU7YUFBTSxvQkFBRSxLQUFLLENBQUMsV0FBVyxDQUFDO0tBQUE7R0FDbkM7Q0FDRixDQUFDOztBQUVGLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxZQUFZO0FBQ3JDLFlBQVUsQ0FBQyxZQUFZOztBQUVyQiwwQ0FBWSxpQkFBaUIsR0FBRyxFQUFFLENBQUM7R0FDcEMsQ0FBQyxDQUFDO0FBQ0gsVUFBUSxDQUFDLGFBQWEsRUFBRSxZQUFZO0FBQ2xDLE1BQUUsQ0FBQyx1REFBdUQsRUFBRTs7Ozs7NkNBQ25ELHNDQUFZLFdBQVcsRUFBRTs7OzZCQUFhLEVBQUU7NkJBQWIsTUFBTSxDQUFDLEdBQUc7Ozs7Ozs7S0FDN0MsQ0FBQyxDQUFDO0FBQ0gsTUFBRSxDQUFDLHVDQUF1QyxFQUFFOzs7O0FBQzFDLGtEQUFZLGlCQUFpQixHQUFHLG1CQUFtQixDQUFDOzs2Q0FDN0Msc0NBQVksV0FBVyxFQUFFOzs7NkJBQWEsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDOzZCQUF6QixNQUFNLENBQUMsR0FBRzs7Ozs7OztLQUM3QyxDQUFDLENBQUM7R0FDSixDQUFDLENBQUM7QUFDSCxVQUFRLENBQUMsUUFBUSxFQUFFLFlBQVk7QUFDN0IsY0FBVSxDQUFDLFlBQVk7QUFDckIseUJBQU0sR0FBRyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUM3Qyx5QkFBTSxHQUFHLENBQUMsbUJBQW1CLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0tBQzlDLENBQUMsQ0FBQztBQUNILGFBQVMsQ0FBQyxZQUFZO0FBQ3BCLHlCQUFtQixDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDekMseUJBQW1CLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztLQUMxQyxDQUFDLENBQUM7QUFDSCxNQUFFLENBQUMsOENBQThDLEVBQUU7Ozs7OzZDQUMzQyxzQ0FBWSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsUUFBUTs7O0FBQzdELCtCQUFtQixDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLFNBQU0sQ0FBQztBQUN0RCwrQkFBbUIsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxTQUFNLENBQUM7Ozs7Ozs7S0FDdkQsQ0FBQyxDQUFDO0FBQ0gsTUFBRSxDQUFDLDBFQUEwRSxFQUFFO1VBRXpFLEdBQUc7Ozs7QUFEUCxrREFBWSxpQkFBaUIsR0FBRyxtQkFBbUIsQ0FBQztBQUNoRCxlQUFHOzs7NkNBRUMsc0NBQVksTUFBTSxDQUFDLE9BQU8sQ0FBQzs7Ozs7Ozs7OztBQUVqQyxlQUFHLGlCQUFPLENBQUM7OztBQUViLGtCQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQztBQUNyQixlQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLDhGQUE0RixDQUFDO0FBQ25ILCtCQUFtQixDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLFNBQU0sQ0FBQztBQUN0RCwrQkFBbUIsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxTQUFNLENBQUM7Ozs7Ozs7S0FDdkQsQ0FBQyxDQUFDO0FBQ0gsTUFBRSxDQUFDLGtEQUFrRCxFQUFFO1VBRWpELElBQUk7Ozs7QUFEUixrREFBWSxpQkFBaUIsR0FBRyxtQkFBbUIsQ0FBQzs7NkNBQ25DLHNDQUFZLE1BQU0sQ0FBQyxLQUFLLENBQUM7OztBQUF0QyxnQkFBSTs7QUFDUixnQkFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDNUIsK0JBQW1CLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsUUFBSyxDQUFDO0FBQ3JELCtCQUFtQixDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLFNBQU0sQ0FBQzs7Ozs7OztLQUN2RCxDQUFDLENBQUM7R0FDSixDQUFDLENBQUM7Q0FDSixDQUFDLENBQUMiLCJmaWxlIjoidGVzdC9iYXNlZHJpdmVyL2NvbW1hbmRzL2xvZy1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBsb2dDb21tYW5kcyBmcm9tICcuLi8uLi8uLi9saWIvYmFzZWRyaXZlci9jb21tYW5kcy9sb2cnO1xuaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XG5pbXBvcnQgY2hhaUFzUHJvbWlzZWQgZnJvbSAnY2hhaS1hcy1wcm9taXNlZCc7XG5pbXBvcnQgc2lub24gZnJvbSAnc2lub24nO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuXG5jaGFpLnNob3VsZCgpO1xuY2hhaS51c2UoY2hhaUFzUHJvbWlzZWQpO1xuY29uc3QgZXhwZWN0ID0gY2hhaS5leHBlY3Q7XG5cbmNvbnN0IEZJUlNUX0xPR1MgPSBbJ2ZpcnN0JywgJ2xvZ3MnXTtcbmNvbnN0IFNFQ09ORF9MT0dTID0gWydzZWNvbmQnLCAnbG9ncyddO1xuY29uc3QgU1VQUE9SVEVEX0xPR19UWVBFUyA9IHtcbiAgb25lOiB7XG4gICAgZGVzY3JpcHRpb246ICdGaXJzdCBsb2dzJyxcbiAgICBnZXR0ZXI6ICgpID0+IF8uY2xvbmUoRklSU1RfTE9HUyksXG4gIH0sXG4gIHR3bzoge1xuICAgIGRlc2NyaXB0aW9uOiAnU2Vjb25kcyBsb2dzJyxcbiAgICBnZXR0ZXI6ICgpID0+IF8uY2xvbmUoU0VDT05EX0xPR1MpLFxuICB9LFxufTtcblxuZGVzY3JpYmUoJ2xvZyBjb21tYW5kcyAtJywgZnVuY3Rpb24gKCkge1xuICBiZWZvcmVFYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAvLyByZXNldCB0aGUgc3VwcG9ydGVkIGxvZyB0eXBlc1xuICAgIGxvZ0NvbW1hbmRzLnN1cHBvcnRlZExvZ1R5cGVzID0ge307XG4gIH0pO1xuICBkZXNjcmliZSgnZ2V0TG9nVHlwZXMnLCBmdW5jdGlvbiAoKSB7XG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gZW1wdHkgYXJyYXkgd2hlbiBubyBzdXBwb3J0ZWQgbG9nIHR5cGVzJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgKGF3YWl0IGxvZ0NvbW1hbmRzLmdldExvZ1R5cGVzKCkpLnNob3VsZC5lcWwoW10pO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgcmV0dXJuIGtleXMgdG8gbG9nIHR5cGUgb2JqZWN0JywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbG9nQ29tbWFuZHMuc3VwcG9ydGVkTG9nVHlwZXMgPSBTVVBQT1JURURfTE9HX1RZUEVTO1xuICAgICAgKGF3YWl0IGxvZ0NvbW1hbmRzLmdldExvZ1R5cGVzKCkpLnNob3VsZC5lcWwoWydvbmUnLCAndHdvJ10pO1xuICAgIH0pO1xuICB9KTtcbiAgZGVzY3JpYmUoJ2dldExvZycsIGZ1bmN0aW9uICgpIHtcbiAgICBiZWZvcmVFYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHNpbm9uLnNweShTVVBQT1JURURfTE9HX1RZUEVTLm9uZSwgJ2dldHRlcicpO1xuICAgICAgc2lub24uc3B5KFNVUFBPUlRFRF9MT0dfVFlQRVMudHdvLCAnZ2V0dGVyJyk7XG4gICAgfSk7XG4gICAgYWZ0ZXJFYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIFNVUFBPUlRFRF9MT0dfVFlQRVMub25lLmdldHRlci5yZXN0b3JlKCk7XG4gICAgICBTVVBQT1JURURfTE9HX1RZUEVTLnR3by5nZXR0ZXIucmVzdG9yZSgpO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgdGhyb3cgZXJyb3IgaWYgbG9nIHR5cGUgbm90IHN1cHBvcnRlZCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGF3YWl0IGxvZ0NvbW1hbmRzLmdldExvZygnb25lJykuc2hvdWxkLmV2ZW50dWFsbHkuYmUucmVqZWN0ZWQ7XG4gICAgICBTVVBQT1JURURfTE9HX1RZUEVTLm9uZS5nZXR0ZXIuY2FsbGVkLnNob3VsZC5iZS5mYWxzZTtcbiAgICAgIFNVUFBPUlRFRF9MT0dfVFlQRVMudHdvLmdldHRlci5jYWxsZWQuc2hvdWxkLmJlLmZhbHNlO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgdGhyb3cgYW4gZXJyb3Igd2l0aCBhdmFpbGFibGUgbG9nIHR5cGVzIGlmIGxvZyB0eXBlIG5vdCBzdXBwb3J0ZWQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBsb2dDb21tYW5kcy5zdXBwb3J0ZWRMb2dUeXBlcyA9IFNVUFBPUlRFRF9MT0dfVFlQRVM7XG4gICAgICBsZXQgZXJyO1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgbG9nQ29tbWFuZHMuZ2V0TG9nKCd0aHJlZScpO1xuICAgICAgfSBjYXRjaCAoX2Vycikge1xuICAgICAgICBlcnIgPSBfZXJyO1xuICAgICAgfVxuICAgICAgZXhwZWN0KGVycikudG8uZXhpc3Q7XG4gICAgICBlcnIubWVzc2FnZS5zaG91bGQuZXFsKGBVbnN1cHBvcnRlZCBsb2cgdHlwZSAndGhyZWUnLiBTdXBwb3J0ZWQgdHlwZXM6IHtcIm9uZVwiOlwiRmlyc3QgbG9nc1wiLFwidHdvXCI6XCJTZWNvbmRzIGxvZ3NcIn1gKTtcbiAgICAgIFNVUFBPUlRFRF9MT0dfVFlQRVMub25lLmdldHRlci5jYWxsZWQuc2hvdWxkLmJlLmZhbHNlO1xuICAgICAgU1VQUE9SVEVEX0xPR19UWVBFUy50d28uZ2V0dGVyLmNhbGxlZC5zaG91bGQuYmUuZmFsc2U7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBjYWxsIGdldHRlciBvbiBhcHByb3ByaWF0ZSBsb2cgd2hlbiBmb3VuZCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxvZ0NvbW1hbmRzLnN1cHBvcnRlZExvZ1R5cGVzID0gU1VQUE9SVEVEX0xPR19UWVBFUztcbiAgICAgIGxldCBsb2dzID0gYXdhaXQgbG9nQ29tbWFuZHMuZ2V0TG9nKCdvbmUnKTtcbiAgICAgIGxvZ3Muc2hvdWxkLmVxbChGSVJTVF9MT0dTKTtcbiAgICAgIFNVUFBPUlRFRF9MT0dfVFlQRVMub25lLmdldHRlci5jYWxsZWQuc2hvdWxkLmJlLnRydWU7XG4gICAgICBTVVBQT1JURURfTE9HX1RZUEVTLnR3by5nZXR0ZXIuY2FsbGVkLnNob3VsZC5iZS5mYWxzZTtcbiAgICB9KTtcbiAgfSk7XG59KTsiXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uLy4uIn0=
