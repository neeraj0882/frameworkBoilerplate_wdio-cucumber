require('source-map-support').install();

'use strict';

var _extends = require('babel-runtime/helpers/extends')['default'];

var _defineProperty = require('babel-runtime/helpers/define-property')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _2 = require('../..');

var _fakeDriver = require('./fake-driver');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _requestPromise = require('request-promise');

var _requestPromise2 = _interopRequireDefault(_requestPromise);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _httpStatusCodes = require('http-status-codes');

var _httpStatusCodes2 = _interopRequireDefault(_httpStatusCodes);

var _helpers = require('./helpers');

var _libProtocolProtocol = require('../../lib/protocol/protocol');

var should = _chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('Protocol', function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:

        //TODO: more tests!:
        // Unknown commands should return 404

        describe('direct to driver', function () {
          var d = new _fakeDriver.FakeDriver();
          it('should return response values directly from the driver', function callee$2$0() {
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap(d.setUrl("http://google.com"));

                case 2:
                  context$3$0.sent.should.contain("google");

                case 3:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });
        });

        describe('via express router', function () {
          var mjsonwpServer = undefined;
          var driver = undefined;

          before(function callee$2$0() {
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  driver = new _fakeDriver.FakeDriver();
                  driver.sessionId = 'foo';
                  context$3$0.next = 4;
                  return _regeneratorRuntime.awrap((0, _2.server)((0, _2.routeConfiguringFunction)(driver), 8181));

                case 4:
                  mjsonwpServer = context$3$0.sent;

                case 5:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });

          after(function callee$2$0() {
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  mjsonwpServer.close();

                case 1:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });

          it('should proxy to driver and return valid jsonwp response', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/foo/url',
                    method: 'POST',
                    json: { url: 'http://google.com' }
                  }));

                case 2:
                  res = context$3$0.sent;

                  res.should.eql({
                    status: 0,
                    value: "Navigated to: http://google.com",
                    sessionId: "foo"
                  });

                case 4:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });

          it('should assume requests without a Content-Type are json requests', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/foo/url',
                    method: 'POST',
                    body: JSON.stringify({ url: 'http://google.com' })
                  }));

                case 2:
                  res = context$3$0.sent;

                  JSON.parse(res).should.eql({
                    status: 0,
                    value: "Navigated to: http://google.com",
                    sessionId: "foo"
                  });

                case 4:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });

          it('should respond to x-www-form-urlencoded as well as json requests', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/foo/url',
                    method: 'POST',
                    form: { url: 'http://google.com' }
                  }));

                case 2:
                  res = context$3$0.sent;

                  JSON.parse(res).should.eql({
                    status: 0,
                    value: "Navigated to: http://google.com",
                    sessionId: "foo"
                  });

                case 4:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });

          it('should include url request parameters for methods to use - sessionid', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/foo/back',
                    method: 'POST',
                    json: {},
                    simple: false,
                    resolveWithFullResponse: true
                  }));

                case 2:
                  res = context$3$0.sent;

                  res.body.should.eql({
                    status: 0,
                    value: "foo",
                    sessionId: "foo"
                  });

                case 4:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });

          it('should include url request parameters for methods to use - elementid', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/foo/element/bar/click',
                    method: 'POST',
                    json: {}
                  }));

                case 2:
                  res = context$3$0.sent;

                  res.status.should.equal(0);
                  res.value.should.eql(["bar", "foo"]);

                case 5:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });

          it('should include url req params in the order: custom, element, session', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/foo/element/bar/attribute/baz',
                    method: 'GET',
                    json: {}
                  }));

                case 2:
                  res = context$3$0.sent;

                  res.status.should.equal(0);
                  res.value.should.eql(["baz", "bar", "foo"]);

                case 5:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });

          it('should respond with 400 Bad Request if parameters missing', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/foo/url',
                    method: 'POST',
                    json: {},
                    resolveWithFullResponse: true,
                    simple: false
                  }));

                case 2:
                  res = context$3$0.sent;

                  res.statusCode.should.equal(400);
                  res.body.should.contain("url");

                case 5:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });

          it('should reject requests with a badly formatted body and not crash', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/foo/url',
                    method: 'POST',
                    json: "oh hello"
                  }).should.eventually.be.rejected);

                case 2:
                  context$3$0.next = 4;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/foo/url',
                    method: 'POST',
                    json: { url: 'http://google.com' }
                  }));

                case 4:
                  res = context$3$0.sent;

                  res.should.eql({
                    status: 0,
                    value: "Navigated to: http://google.com",
                    sessionId: "foo"
                  });

                case 6:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });

          it('should get 404 for bad routes', function callee$2$0() {
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/blargimarg',
                    method: 'GET'
                  }).should.eventually.be.rejectedWith("404"));

                case 2:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });

          // TODO pass this test
          // https://github.com/appium/node-mobile-json-wire-protocol/issues/3
          it('4xx responses should have content-type of text/plain', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/blargimargarita',
                    method: 'GET',
                    resolveWithFullResponse: true,
                    simple: false // 404 errors fulfill the promise, rather than rejecting
                  }));

                case 2:
                  res = context$3$0.sent;

                  res.headers['content-type'].should.include('text/plain');

                case 4:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });

          it('should throw not yet implemented for unfilledout commands', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/foo/element/bar/location',
                    method: 'GET',
                    json: true,
                    resolveWithFullResponse: true,
                    simple: false
                  }));

                case 2:
                  res = context$3$0.sent;

                  res.statusCode.should.equal(501);
                  res.body.should.eql({
                    status: 13,
                    value: {
                      message: 'Method has not yet been implemented'
                    },
                    sessionId: 'foo'
                  });

                case 5:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });

          it('should throw not implemented for ignored commands', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/foo/buttonup',
                    method: 'POST',
                    json: {},
                    resolveWithFullResponse: true,
                    simple: false
                  }));

                case 2:
                  res = context$3$0.sent;

                  res.statusCode.should.equal(501);
                  res.body.should.eql({
                    status: 13,
                    value: {
                      message: 'Method is not implemented'
                    },
                    sessionId: 'foo'
                  });

                case 5:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });

          it('should get 400 for bad parameters', function callee$2$0() {
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/foo/url',
                    method: 'POST',
                    json: {}
                  }).should.eventually.be.rejectedWith("400"));

                case 2:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });

          it('should ignore special extra payload params in the right contexts', function callee$2$0() {
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/foo/element/bar/value',
                    method: 'POST',
                    json: { id: 'baz', sessionId: 'lol', value: ['a'] }
                  }));

                case 2:
                  context$3$0.next = 4;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/foo/element/bar/value',
                    method: 'POST',
                    json: { id: 'baz' }
                  }).should.eventually.be.rejectedWith("400"));

                case 4:
                  context$3$0.next = 6;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/foo/frame',
                    method: 'POST',
                    json: { id: 'baz' }
                  }));

                case 6:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });

          it('should return the correct error even if driver does not throw', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/foo/appium/receive_async_response',
                    method: 'POST',
                    json: { response: 'baz' },
                    resolveWithFullResponse: true,
                    simple: false
                  }));

                case 2:
                  res = context$3$0.sent;

                  res.statusCode.should.equal(500);
                  res.body.should.eql({
                    status: 13,
                    value: {
                      message: 'An unknown server-side error occurred while processing ' + 'the command. Original error: Mishandled Driver Error'
                    },
                    sessionId: "foo"
                  });

                case 5:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });

          describe('w3c sendkeys migration', function () {
            it('should accept value for sendkeys', function callee$3$0() {
              var res;
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    context$4$0.next = 2;
                    return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                      url: 'http://localhost:8181/wd/hub/session/foo/element/bar/value',
                      method: 'POST',
                      json: { value: "text to type" }
                    }));

                  case 2:
                    res = context$4$0.sent;

                    res.status.should.equal(0);
                    res.value.should.eql(["text to type", "bar"]);

                  case 5:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, this);
            });
            it('should accept text for sendkeys', function callee$3$0() {
              var res;
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    context$4$0.next = 2;
                    return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                      url: 'http://localhost:8181/wd/hub/session/foo/element/bar/value',
                      method: 'POST',
                      json: { text: "text to type" }
                    }));

                  case 2:
                    res = context$4$0.sent;

                    res.status.should.equal(0);
                    res.value.should.eql(["text to type", "bar"]);

                  case 5:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, this);
            });
            it('should accept value and text for sendkeys, and use value', function callee$3$0() {
              var res;
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    context$4$0.next = 2;
                    return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                      url: 'http://localhost:8181/wd/hub/session/foo/element/bar/value',
                      method: 'POST',
                      json: { value: "text to type", text: "text to ignore" }
                    }));

                  case 2:
                    res = context$4$0.sent;

                    res.status.should.equal(0);
                    res.value.should.eql(["text to type", "bar"]);

                  case 5:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, this);
            });
          });

          describe('multiple sets of arguments', function () {
            describe('optional', function () {
              it('should allow moveto with element', function callee$4$0() {
                var res;
                return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
                  while (1) switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      context$5$0.next = 2;
                      return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                        url: 'http://localhost:8181/wd/hub/session/foo/moveto',
                        method: 'POST',
                        json: { element: '3' }
                      }));

                    case 2:
                      res = context$5$0.sent;

                      res.status.should.equal(0);
                      res.value.should.eql(['3', null, null]);

                    case 5:
                    case 'end':
                      return context$5$0.stop();
                  }
                }, null, this);
              });
              it('should allow moveto with xoffset/yoffset', function callee$4$0() {
                var res;
                return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
                  while (1) switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      context$5$0.next = 2;
                      return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                        url: 'http://localhost:8181/wd/hub/session/foo/moveto',
                        method: 'POST',
                        json: { xoffset: 42, yoffset: 17 }
                      }));

                    case 2:
                      res = context$5$0.sent;

                      res.status.should.equal(0);
                      res.value.should.eql([null, 42, 17]);

                    case 5:
                    case 'end':
                      return context$5$0.stop();
                  }
                }, null, this);
              });
            });
            describe('required', function () {
              it('should allow removeApp with appId', function callee$4$0() {
                var res;
                return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
                  while (1) switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      context$5$0.next = 2;
                      return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                        url: 'http://localhost:8181/wd/hub/session/foo/appium/device/remove_app',
                        method: 'POST',
                        json: { appId: 42 }
                      }));

                    case 2:
                      res = context$5$0.sent;

                      res.status.should.equal(0);
                      res.value.should.eql(42);

                    case 5:
                    case 'end':
                      return context$5$0.stop();
                  }
                }, null, this);
              });
              it('should allow removeApp with bundleId', function callee$4$0() {
                var res;
                return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
                  while (1) switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      context$5$0.next = 2;
                      return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                        url: 'http://localhost:8181/wd/hub/session/foo/appium/device/remove_app',
                        method: 'POST',
                        json: { bundleId: 42 }
                      }));

                    case 2:
                      res = context$5$0.sent;

                      res.status.should.equal(0);
                      res.value.should.eql(42);

                    case 5:
                    case 'end':
                      return context$5$0.stop();
                  }
                }, null, this);
              });
            });
          });

          describe('default param wrap', function () {

            it('should wrap', function callee$3$0() {
              var res;
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    context$4$0.next = 2;
                    return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                      url: 'http://localhost:8181/wd/hub/session/foo/touch/perform',
                      method: 'POST',
                      json: [{ "action": "tap", "options": { "element": "3" } }]
                    }));

                  case 2:
                    res = context$4$0.sent;

                    res.value.should.deep.equal([[{ "action": "tap", "options": { "element": "3" } }], 'foo']);

                  case 4:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, this);
            });

            it('should not wrap twice', function callee$3$0() {
              var res;
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    context$4$0.next = 2;
                    return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                      url: 'http://localhost:8181/wd/hub/session/foo/touch/perform',
                      method: 'POST',
                      json: { actions: [{ "action": "tap", "options": { "element": "3" } }] }
                    }));

                  case 2:
                    res = context$4$0.sent;

                    res.value.should.deep.equal([[{ "action": "tap", "options": { "element": "3" } }], 'foo']);

                  case 4:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, this);
            });
          });

          describe('create sessions via HTTP endpoint', function () {
            var desiredCapabilities = { a: 'b' };
            var requiredCapabilities = { c: 'd' };
            var capabilities = { e: 'f' };
            var baseUrl = 'http://localhost:8181/wd/hub/session';

            it('should allow create session with desired caps (MJSONWP)', function callee$3$0() {
              var res;
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    context$4$0.next = 2;
                    return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                      url: baseUrl,
                      method: 'POST',
                      json: { desiredCapabilities: desiredCapabilities }
                    }));

                  case 2:
                    res = context$4$0.sent;

                    res.status.should.equal(0);
                    res.value.should.eql(desiredCapabilities);

                  case 5:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, this);
            });
            it('should allow create session with desired and required caps', function callee$3$0() {
              var res;
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    context$4$0.next = 2;
                    return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                      url: baseUrl,
                      method: 'POST',
                      json: {
                        desiredCapabilities: desiredCapabilities,
                        requiredCapabilities: requiredCapabilities
                      }
                    }));

                  case 2:
                    res = context$4$0.sent;

                    res.status.should.equal(0);
                    res.value.should.eql(_lodash2['default'].extend({}, desiredCapabilities, requiredCapabilities));

                  case 5:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, this);
            });
            it('should fail to create session without capabilities or desiredCapabilities', function callee$3$0() {
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    context$4$0.next = 2;
                    return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                      url: baseUrl,
                      method: 'POST',
                      json: {}
                    }).should.eventually.be.rejectedWith('400'));

                  case 2:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, this);
            });
            it('should allow create session with capabilities (W3C)', function callee$3$0() {
              var _ref3, status, value, sessionId;

              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    context$4$0.next = 2;
                    return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                      url: baseUrl,
                      method: 'POST',
                      json: {
                        capabilities: capabilities
                      }
                    }));

                  case 2:
                    _ref3 = context$4$0.sent;
                    status = _ref3.status;
                    value = _ref3.value;
                    sessionId = _ref3.sessionId;

                    should.not.exist(status);
                    should.not.exist(sessionId);
                    value.capabilities.should.eql(capabilities);
                    value.sessionId.should.exist;

                  case 10:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, this);
            });
            it('should fall back to MJSONWP if driver does not support W3C yet', function callee$3$0() {
              var createSessionStub, caps, _ref4, status, value, sessionId;

              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    createSessionStub = _sinon2['default'].stub(driver, 'createSession', function (capabilities) {
                      driver.sessionId = null;
                      return _2.BaseDriver.prototype.createSession.call(driver, capabilities);
                    });
                    caps = _extends({}, desiredCapabilities, {
                      platformName: 'Fake',
                      deviceName: 'Fake'
                    });
                    context$4$0.next = 4;
                    return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                      url: baseUrl,
                      method: 'POST',
                      json: {
                        desiredCapabilities: caps,
                        capabilities: {
                          alwaysMatch: caps,
                          firstMatch: [{}]
                        }
                      }
                    }));

                  case 4:
                    _ref4 = context$4$0.sent;
                    status = _ref4.status;
                    value = _ref4.value;
                    sessionId = _ref4.sessionId;

                    should.exist(status);
                    should.exist(sessionId);
                    value.should.eql(caps);
                    createSessionStub.restore();

                  case 12:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, this);
            });

            describe('w3c endpoints', function callee$3$0() {
              var w3cCaps, sessionUrl, sessionId;
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    w3cCaps = {
                      alwaysMatch: {
                        platformName: 'Fake',
                        deviceName: 'Commodore 64'
                      },
                      firstMatch: [{}]
                    };
                    sessionUrl = undefined;
                    sessionId = undefined;

                    beforeEach(function callee$4$0() {
                      var _ref5,
                      // Start a session
                      value;

                      return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
                        while (1) switch (context$5$0.prev = context$5$0.next) {
                          case 0:
                            context$5$0.next = 2;
                            return _regeneratorRuntime.awrap(_requestPromise2['default'].post(baseUrl, {
                              json: {
                                capabilities: w3cCaps
                              }
                            }));

                          case 2:
                            _ref5 = context$5$0.sent;
                            value = _ref5.value;

                            sessionId = value.sessionId;
                            sessionUrl = baseUrl + '/' + sessionId;

                          case 6:
                          case 'end':
                            return context$5$0.stop();
                        }
                      }, null, this);
                    });

                    afterEach(function callee$4$0() {
                      return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
                        while (1) switch (context$5$0.prev = context$5$0.next) {
                          case 0:
                            context$5$0.next = 2;
                            return _regeneratorRuntime.awrap(_requestPromise2['default']['delete'](sessionUrl));

                          case 2:
                          case 'end':
                            return context$5$0.stop();
                        }
                      }, null, this);
                    });

                    it('should throw 400 Bad Parameters exception if the parameters are bad', function callee$4$0() {
                      var _ref6, statusCode, error, _error$value, w3cError, message, stacktrace;

                      return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
                        while (1) switch (context$5$0.prev = context$5$0.next) {
                          case 0:
                            context$5$0.next = 2;
                            return _regeneratorRuntime.awrap(_requestPromise2['default'].post(sessionUrl + '/actions', {
                              json: {
                                bad: 'params'
                              }
                            }).should.eventually.be.rejected);

                          case 2:
                            _ref6 = context$5$0.sent;
                            statusCode = _ref6.statusCode;
                            error = _ref6.error;

                            statusCode.should.equal(400);

                            _error$value = error.value;
                            w3cError = _error$value.error;
                            message = _error$value.message;
                            stacktrace = _error$value.stacktrace;

                            message.should.match(/Parameters were incorrect/);
                            stacktrace.should.match(/protocol.js/);
                            w3cError.should.be.a.string;
                            w3cError.should.equal(_2.errors.InvalidArgumentError.error());

                          case 14:
                          case 'end':
                            return context$5$0.stop();
                        }
                      }, null, this);
                    });

                    it('should throw 404 Not Found exception if the command hasn\'t been implemented yet', function callee$4$0() {
                      var _ref7, statusCode, error, _error$value2, w3cError, message, stacktrace;

                      return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
                        while (1) switch (context$5$0.prev = context$5$0.next) {
                          case 0:
                            context$5$0.next = 2;
                            return _regeneratorRuntime.awrap(_requestPromise2['default'].post(sessionUrl + '/actions', {
                              json: {
                                actions: []
                              }
                            }).should.eventually.be.rejected);

                          case 2:
                            _ref7 = context$5$0.sent;
                            statusCode = _ref7.statusCode;
                            error = _ref7.error;

                            statusCode.should.equal(404);

                            _error$value2 = error.value;
                            w3cError = _error$value2.error;
                            message = _error$value2.message;
                            stacktrace = _error$value2.stacktrace;

                            message.should.match(/Method has not yet been implemented/);
                            stacktrace.should.match(/protocol.js/);
                            w3cError.should.be.a.string;
                            w3cError.should.equal(_2.errors.NotYetImplementedError.error());
                            message.should.match(/Method has not yet been implemented/);

                          case 15:
                          case 'end':
                            return context$5$0.stop();
                        }
                      }, null, this);
                    });

                    it('should throw 500 Unknown Error if the command throws an unexpected exception', function callee$4$0() {
                      var _ref8, statusCode, error, _error$value3, w3cError, message, stacktrace;

                      return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
                        while (1) switch (context$5$0.prev = context$5$0.next) {
                          case 0:
                            driver.performActions = function () {
                              throw new Error('Didn\'t work');
                            };
                            context$5$0.next = 3;
                            return _regeneratorRuntime.awrap(_requestPromise2['default'].post(sessionUrl + '/actions', {
                              json: {
                                actions: []
                              }
                            }).should.eventually.be.rejected);

                          case 3:
                            _ref8 = context$5$0.sent;
                            statusCode = _ref8.statusCode;
                            error = _ref8.error;

                            statusCode.should.equal(500);

                            _error$value3 = error.value;
                            w3cError = _error$value3.error;
                            message = _error$value3.message;
                            stacktrace = _error$value3.stacktrace;

                            stacktrace.should.match(/protocol.js/);
                            w3cError.should.be.a.string;
                            w3cError.should.equal(_2.errors.UnknownError.error());
                            message.should.match(/Didn't work/);

                            delete driver.performActions;

                          case 16:
                          case 'end':
                            return context$5$0.stop();
                        }
                      }, null, this);
                    });

                    it('should translate element format from MJSONWP to W3C', function callee$4$0() {
                      var _something, _something2;

                      var retValue, expectedValue, findElementsBackup, _ref9, value;

                      return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
                        while (1) switch (context$5$0.prev = context$5$0.next) {
                          case 0:
                            retValue = [{
                              something: (_something = {}, _defineProperty(_something, _libProtocolProtocol.MJSONWP_ELEMENT_KEY, 'fooo'), _defineProperty(_something, 'other', 'bar'), _something)
                            }, _defineProperty({}, _libProtocolProtocol.MJSONWP_ELEMENT_KEY, 'bar'), 'ignore'];
                            expectedValue = [{
                              something: (_something2 = {}, _defineProperty(_something2, _libProtocolProtocol.W3C_ELEMENT_KEY, 'fooo'), _defineProperty(_something2, 'other', 'bar'), _something2)
                            }, _defineProperty({}, _libProtocolProtocol.W3C_ELEMENT_KEY, 'bar'), 'ignore'];
                            findElementsBackup = driver.findElements;

                            driver.findElements = function () {
                              return retValue;
                            };
                            context$5$0.next = 6;
                            return _regeneratorRuntime.awrap(_requestPromise2['default'].post(sessionUrl + '/elements', {
                              json: {
                                using: 'whatever',
                                value: 'whatever'
                              }
                            }));

                          case 6:
                            _ref9 = context$5$0.sent;
                            value = _ref9.value;

                            value.should.deep.equal(expectedValue);
                            driver.findElements = findElementsBackup;

                          case 10:
                          case 'end':
                            return context$5$0.stop();
                        }
                      }, null, this);
                    });

                    it('should fail with a 408 error if it throws a TimeoutError exception', function callee$4$0() {
                      var _ref10, statusCode, error, _error$value4, w3cError, message, stacktrace;

                      return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
                        while (1) switch (context$5$0.prev = context$5$0.next) {
                          case 0:
                            _sinon2['default'].stub(driver, 'setUrl', function () {
                              throw new _2.errors.TimeoutError();
                            });
                            context$5$0.next = 3;
                            return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                              url: sessionUrl + '/url',
                              method: 'POST',
                              json: {
                                url: 'https://example.com/'
                              }
                            }).should.eventually.be.rejected);

                          case 3:
                            _ref10 = context$5$0.sent;
                            statusCode = _ref10.statusCode;
                            error = _ref10.error;

                            statusCode.should.equal(408);

                            _error$value4 = error.value;
                            w3cError = _error$value4.error;
                            message = _error$value4.message;
                            stacktrace = _error$value4.stacktrace;

                            stacktrace.should.match(/protocol.js/);
                            w3cError.should.be.a.string;
                            w3cError.should.equal(_2.errors.TimeoutError.error());
                            message.should.match(/An operation did not complete before its timeout expired/);

                            _sinon2['default'].restore(driver, 'setUrl');

                          case 16:
                          case 'end':
                            return context$5$0.stop();
                        }
                      }, null, this);
                    });

                    it('should pass with 200 HTTP status code if the command returns a value', function callee$4$0() {
                      var _ref11, status, value, sessionId;

                      return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
                        while (1) switch (context$5$0.prev = context$5$0.next) {
                          case 0:
                            driver.performActions = function (actions) {
                              return 'It works ' + actions.join('');
                            };
                            context$5$0.next = 3;
                            return _regeneratorRuntime.awrap(_requestPromise2['default'].post(sessionUrl + '/actions', {
                              json: {
                                actions: ['a', 'b', 'c']
                              }
                            }));

                          case 3:
                            _ref11 = context$5$0.sent;
                            status = _ref11.status;
                            value = _ref11.value;
                            sessionId = _ref11.sessionId;

                            should.not.exist(sessionId);
                            should.not.exist(status);
                            value.should.equal('It works abc');
                            delete driver.performActions;

                          case 11:
                          case 'end':
                            return context$5$0.stop();
                        }
                      }, null, this);
                    });

                    describe('jwproxy', function () {
                      var port = 56562;
                      var server = undefined,
                          jwproxy = undefined,
                          app = undefined;
                      beforeEach(function () {
                        var _this = this;

                        var res = (0, _helpers.createProxyServer)(sessionId, port);
                        server = res.server;
                        app = res.app;
                        jwproxy = new _2.JWProxy({ host: 'localhost', port: port });
                        jwproxy.sessionId = sessionId;
                        driver.performActions = function callee$6$0(actions) {
                          return _regeneratorRuntime.async(function callee$6$0$(context$7$0) {
                            while (1) switch (context$7$0.prev = context$7$0.next) {
                              case 0:
                                context$7$0.next = 2;
                                return _regeneratorRuntime.awrap(jwproxy.command('/perform-actions', 'POST', actions));

                              case 2:
                                return context$7$0.abrupt('return', context$7$0.sent);

                              case 3:
                              case 'end':
                                return context$7$0.stop();
                            }
                          }, null, _this);
                        };
                      });

                      afterEach(function () {
                        server.close();
                        delete driver.performActions;
                      });

                      it('should work if a proxied request returns a response with status 200', function callee$5$0() {
                        var _ref12, status, value, sessionId;

                        return _regeneratorRuntime.async(function callee$5$0$(context$6$0) {
                          while (1) switch (context$6$0.prev = context$6$0.next) {
                            case 0:
                              (0, _helpers.addHandler)(app, 'post', '/wd/hub/session/:sessionId/perform-actions', function (req, res) {
                                res.json({
                                  sessionId: req.params.sessionId,
                                  value: req.body,
                                  status: 0
                                });
                              });

                              context$6$0.next = 3;
                              return _regeneratorRuntime.awrap(_requestPromise2['default'].post(sessionUrl + '/actions', {
                                json: {
                                  actions: [1, 2, 3]
                                }
                              }));

                            case 3:
                              _ref12 = context$6$0.sent;
                              status = _ref12.status;
                              value = _ref12.value;
                              sessionId = _ref12.sessionId;

                              value.should.eql([1, 2, 3]);
                              should.not.exist(status);
                              should.not.exist(sessionId);

                            case 10:
                            case 'end':
                              return context$6$0.stop();
                          }
                        }, null, this);
                      });

                      it('should return error if a proxied request returns a MJSONWP error response', function callee$5$0() {
                        var _ref13, statusCode, message;

                        return _regeneratorRuntime.async(function callee$5$0$(context$6$0) {
                          while (1) switch (context$6$0.prev = context$6$0.next) {
                            case 0:
                              (0, _helpers.addHandler)(app, 'post', '/wd/hub/session/:sessionId/perform-actions', function (req, res) {
                                res.status(500).json({
                                  sessionId: sessionId,
                                  status: 6,
                                  value: 'A problem occurred'
                                });
                              });
                              context$6$0.next = 3;
                              return _regeneratorRuntime.awrap(_requestPromise2['default'].post(sessionUrl + '/actions', {
                                json: {
                                  actions: [1, 2, 3]
                                }
                              }).should.eventually.be.rejected);

                            case 3:
                              _ref13 = context$6$0.sent;
                              statusCode = _ref13.statusCode;
                              message = _ref13.message;

                              statusCode.should.equal(_httpStatusCodes2['default'].NOT_FOUND);
                              message.should.match(/A problem occurred/);

                            case 8:
                            case 'end':
                              return context$6$0.stop();
                          }
                        }, null, this);
                      });

                      it('should return error if a proxied request returns a MJSONWP error response but HTTP status code is 200', function callee$5$0() {
                        var _ref14, statusCode, message, error, _error$value5, w3cError, errMessage, stacktrace;

                        return _regeneratorRuntime.async(function callee$5$0$(context$6$0) {
                          while (1) switch (context$6$0.prev = context$6$0.next) {
                            case 0:
                              (0, _helpers.addHandler)(app, 'post', '/wd/hub/session/:sessionId/perform-actions', function (req, res) {
                                res.status(200).json({
                                  sessionId: 'Fake Session Id',
                                  status: 7,
                                  value: 'A problem occurred'
                                });
                              });
                              context$6$0.next = 3;
                              return _regeneratorRuntime.awrap(_requestPromise2['default'].post(sessionUrl + '/actions', {
                                json: {
                                  actions: [1, 2, 3]
                                }
                              }).should.eventually.be.rejected);

                            case 3:
                              _ref14 = context$6$0.sent;
                              statusCode = _ref14.statusCode;
                              message = _ref14.message;
                              error = _ref14.error;

                              statusCode.should.equal(_httpStatusCodes2['default'].NOT_FOUND);
                              message.should.match(/A problem occurred/);
                              _error$value5 = error.value;
                              w3cError = _error$value5.error;
                              errMessage = _error$value5.message;
                              stacktrace = _error$value5.stacktrace;

                              w3cError.should.equal('no such element');
                              errMessage.should.match(/A problem occurred/);
                              stacktrace.should.exist;

                            case 16:
                            case 'end':
                              return context$6$0.stop();
                          }
                        }, null, this);
                      });

                      it('should return error if a proxied request returns a W3C error response', function callee$5$0() {
                        var _ref15, statusCode, message, error, _error$value6, w3cError, stacktrace;

                        return _regeneratorRuntime.async(function callee$5$0$(context$6$0) {
                          while (1) switch (context$6$0.prev = context$6$0.next) {
                            case 0:
                              (0, _helpers.addHandler)(app, 'post', '/wd/hub/session/:sessionId/perform-actions', function (req, res) {
                                res.status(404).json({
                                  value: {
                                    error: 'no such element',
                                    message: 'does not make a difference',
                                    stacktrace: 'arbitrary stacktrace'
                                  }
                                });
                              });
                              context$6$0.next = 3;
                              return _regeneratorRuntime.awrap(_requestPromise2['default'].post(sessionUrl + '/actions', {
                                json: {
                                  actions: [1, 2, 3]
                                }
                              }).should.eventually.be.rejected);

                            case 3:
                              _ref15 = context$6$0.sent;
                              statusCode = _ref15.statusCode;
                              message = _ref15.message;
                              error = _ref15.error;

                              statusCode.should.equal(_httpStatusCodes2['default'].NOT_FOUND);
                              message.should.match(/does not make a difference/);
                              _error$value6 = error.value;
                              w3cError = _error$value6.error;
                              stacktrace = _error$value6.stacktrace;

                              w3cError.should.equal('no such element');
                              stacktrace.should.match(/arbitrary stacktrace/);

                            case 14:
                            case 'end':
                              return context$6$0.stop();
                          }
                        }, null, this);
                      });

                      it('should return an error if a proxied request returns a W3C error response', function callee$5$0() {
                        var _ref16, statusCode, message, error, _error$value7, w3cError, stacktrace;

                        return _regeneratorRuntime.async(function callee$5$0$(context$6$0) {
                          while (1) switch (context$6$0.prev = context$6$0.next) {
                            case 0:
                              (0, _helpers.addHandler)(app, 'post', '/wd/hub/session/:sessionId/perform-actions', function (req, res) {
                                res.status(444).json({
                                  value: {
                                    error: 'bogus error code',
                                    message: 'does not make a difference',
                                    stacktrace: 'arbitrary stacktrace'
                                  }
                                });
                              });
                              context$6$0.next = 3;
                              return _regeneratorRuntime.awrap(_requestPromise2['default'].post(sessionUrl + '/actions', {
                                json: {
                                  actions: [1, 2, 3]
                                }
                              }).should.eventually.be.rejected);

                            case 3:
                              _ref16 = context$6$0.sent;
                              statusCode = _ref16.statusCode;
                              message = _ref16.message;
                              error = _ref16.error;

                              statusCode.should.equal(_httpStatusCodes2['default'].INTERNAL_SERVER_ERROR);
                              message.should.match(/does not make a difference/);
                              _error$value7 = error.value;
                              w3cError = _error$value7.error;
                              stacktrace = _error$value7.stacktrace;

                              w3cError.should.equal('unknown error');
                              stacktrace.should.match(/arbitrary stacktrace/);

                            case 14:
                            case 'end':
                              return context$6$0.stop();
                          }
                        }, null, this);
                      });
                    });

                  case 12:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, this);
            });
          });

          it('should handle commands with no response values', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/foo/forward',
                    method: 'POST',
                    json: true
                  }));

                case 2:
                  res = context$3$0.sent;

                  res.should.eql({
                    status: 0,
                    value: null,
                    sessionId: "foo"
                  });

                case 4:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });

          it('should allow empty string response values', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/foo/element/bar/text',
                    method: 'GET',
                    json: true
                  }));

                case 2:
                  res = context$3$0.sent;

                  res.should.eql({
                    status: 0,
                    value: "",
                    sessionId: "foo"
                  });

                case 4:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });

          it('should send 500 response and an Unknown object for rejected commands', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/foo/refresh',
                    method: 'POST',
                    json: true,
                    resolveWithFullResponse: true,
                    simple: false
                  }));

                case 2:
                  res = context$3$0.sent;

                  res.statusCode.should.equal(500);
                  res.body.should.eql({
                    status: 13,
                    value: {
                      message: 'An unknown server-side error occurred while processing ' + 'the command. Original error: Too Fresh!'
                    },
                    sessionId: "foo"
                  });

                case 5:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });

          it('should not throw UnknownError when known', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/foo',
                    method: 'GET',
                    json: true,
                    resolveWithFullResponse: true,
                    simple: false
                  }));

                case 2:
                  res = context$3$0.sent;

                  res.statusCode.should.equal(404);
                  res.body.should.eql({
                    status: 6,
                    value: {
                      message: 'A session is either terminated or not started'
                    },
                    sessionId: "foo"
                  });

                case 5:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });
        });

        describe('session Ids', function () {
          var driver = new _fakeDriver.FakeDriver();
          var mjsonwpServer = undefined;

          before(function callee$2$0() {
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap((0, _2.server)((0, _2.routeConfiguringFunction)(driver), 8181));

                case 2:
                  mjsonwpServer = context$3$0.sent;

                case 3:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });

          after(function callee$2$0() {
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  mjsonwpServer.close();

                case 1:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });

          afterEach(function () {
            driver.sessionId = null;
          });

          it('returns null SessionId for commands without sessionIds', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/status',
                    method: 'GET',
                    json: true
                  }));

                case 2:
                  res = context$3$0.sent;

                  should.equal(res.sessionId, null);

                case 4:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });

          it('responds with the same session ID in the request', function callee$2$0() {
            var sessionId, res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  sessionId = 'Vader Sessions';

                  driver.sessionId = sessionId;

                  context$3$0.next = 4;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/' + sessionId + '/url',
                    method: 'POST',
                    json: { url: 'http://google.com' }
                  }));

                case 4:
                  res = context$3$0.sent;

                  should.exist(res.sessionId);
                  res.sessionId.should.eql(sessionId);

                case 7:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });

          it('yells if no session exists', function callee$2$0() {
            var sessionId, res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  sessionId = 'Vader Sessions';
                  context$3$0.next = 3;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/' + sessionId + '/url',
                    method: 'POST',
                    json: { url: 'http://google.com' },
                    resolveWithFullResponse: true,
                    simple: false
                  }));

                case 3:
                  res = context$3$0.sent;

                  res.statusCode.should.equal(404);
                  res.body.status.should.equal(6);
                  res.body.value.message.should.contain('session');

                case 7:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });

          it('yells if invalid session is sent', function callee$2$0() {
            var sessionId, res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  sessionId = 'Vader Sessions';

                  driver.sessionId = 'recession';

                  context$3$0.next = 4;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/' + sessionId + '/url',
                    method: 'POST',
                    json: { url: 'http://google.com' },
                    resolveWithFullResponse: true,
                    simple: false
                  }));

                case 4:
                  res = context$3$0.sent;

                  res.statusCode.should.equal(404);
                  res.body.status.should.equal(6);
                  res.body.value.message.should.contain('session');

                case 8:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });

          it('should have session IDs in error responses', function callee$2$0() {
            var sessionId, res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  sessionId = 'Vader Sessions';

                  driver.sessionId = sessionId;

                  context$3$0.next = 4;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/' + sessionId + '/refresh',
                    method: 'POST',
                    json: true,
                    resolveWithFullResponse: true,
                    simple: false
                  }));

                case 4:
                  res = context$3$0.sent;

                  res.statusCode.should.equal(500);
                  res.body.should.eql({
                    status: 13,
                    value: {
                      message: 'An unknown server-side error occurred while processing ' + 'the command. Original error: Too Fresh!'
                    },
                    sessionId: sessionId
                  });

                case 7:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });

          it('should return a new session ID on create', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session',
                    method: 'POST',
                    json: { desiredCapabilities: { greeting: 'hello' }, requiredCapabilities: { valediction: 'bye' } }
                  }));

                case 2:
                  res = context$3$0.sent;

                  should.exist(res.sessionId);
                  res.sessionId.should.equal('1234');
                  res.value.should.eql({ greeting: 'hello', valediction: 'bye' });

                case 6:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });
        });

        describe('via drivers jsonwp proxy', function () {
          var driver = undefined;
          var sessionId = 'foo';
          var mjsonwpServer = undefined;

          beforeEach(function callee$2$0() {
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  driver = new _fakeDriver.FakeDriver();
                  driver.sessionId = sessionId;
                  driver.proxyActive = function () {
                    return true;
                  };
                  driver.canProxy = function () {
                    return true;
                  };

                  context$3$0.next = 6;
                  return _regeneratorRuntime.awrap((0, _2.server)((0, _2.routeConfiguringFunction)(driver), 8181));

                case 6:
                  mjsonwpServer = context$3$0.sent;

                case 7:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });

          afterEach(function callee$2$0() {
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  mjsonwpServer.close();

                case 1:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });

          it('should give a nice error if proxying is set but no proxy function exists', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  driver.canProxy = function () {
                    return false;
                  };
                  context$3$0.next = 3;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/' + sessionId + '/url',
                    method: 'POST',
                    json: { url: 'http://google.com' },
                    resolveWithFullResponse: true,
                    simple: false
                  }));

                case 3:
                  res = context$3$0.sent;

                  res.statusCode.should.equal(500);
                  res.body.should.eql({
                    status: 13,
                    value: {
                      message: 'An unknown server-side error occurred while processing ' + 'the command. Original error: Trying to proxy to a JSONWP ' + 'server but driver is unable to proxy'
                    },
                    sessionId: sessionId
                  });

                case 6:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });

          it('should pass on any errors in proxying', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  driver.proxyReqRes = function callee$3$0() {
                    return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                      while (1) switch (context$4$0.prev = context$4$0.next) {
                        case 0:
                          throw new Error("foo");

                        case 1:
                        case 'end':
                          return context$4$0.stop();
                      }
                    }, null, this);
                  };
                  context$3$0.next = 3;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/' + sessionId + '/url',
                    method: 'POST',
                    json: { url: 'http://google.com' },
                    resolveWithFullResponse: true,
                    simple: false
                  }));

                case 3:
                  res = context$3$0.sent;

                  res.statusCode.should.equal(500);
                  res.body.should.eql({
                    status: 13,
                    value: {
                      message: 'An unknown server-side error occurred while processing ' + 'the command. Original error: Could not proxy. Proxy ' + 'error: foo'
                    },
                    sessionId: sessionId
                  });

                case 6:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });

          it('should able to throw ProxyRequestError in proxying', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  driver.proxyReqRes = function callee$3$0() {
                    var jsonwp;
                    return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                      while (1) switch (context$4$0.prev = context$4$0.next) {
                        case 0:
                          jsonwp = { status: 35, value: "No such context found.", sessionId: "foo" };
                          throw new _2.errors.ProxyRequestError('Could not proxy command to remote server. ', jsonwp);

                        case 2:
                        case 'end':
                          return context$4$0.stop();
                      }
                    }, null, this);
                  };
                  context$3$0.next = 3;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/' + sessionId + '/url',
                    method: 'POST',
                    json: { url: 'http://google.com' },
                    resolveWithFullResponse: true,
                    simple: false
                  }));

                case 3:
                  res = context$3$0.sent;

                  res.statusCode.should.equal(500);
                  res.body.should.eql({
                    status: 35,
                    "value": { "message": "No such context found." },
                    sessionId: "foo"
                  });

                case 6:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });

          it('should let the proxy handle req/res', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  driver.proxyReqRes = function callee$3$0(req, res) {
                    return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                      while (1) switch (context$4$0.prev = context$4$0.next) {
                        case 0:
                          res.status(200).json({ custom: 'data' });

                        case 1:
                        case 'end':
                          return context$4$0.stop();
                      }
                    }, null, this);
                  };
                  context$3$0.next = 3;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/' + sessionId + '/url',
                    method: 'POST',
                    json: { url: 'http://google.com' },
                    resolveWithFullResponse: true,
                    simple: false
                  }));

                case 3:
                  res = context$3$0.sent;

                  res.statusCode.should.equal(200);
                  res.body.should.eql({ custom: 'data' });

                case 6:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });

          it('should avoid jsonwp proxying when path matches avoidance list', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  driver.getProxyAvoidList = function () {
                    return [['POST', new RegExp('^/session/[^/]+/url$')]];
                  };
                  context$3$0.next = 3;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/' + sessionId + '/url',
                    method: 'POST',
                    json: { url: 'http://google.com' },
                    resolveWithFullResponse: true,
                    simple: false
                  }));

                case 3:
                  res = context$3$0.sent;

                  res.statusCode.should.equal(200);
                  res.body.should.eql({
                    status: 0,
                    value: "Navigated to: http://google.com",
                    sessionId: sessionId
                  });

                case 6:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });

          it('should fail if avoid proxy list is malformed in some way', function callee$2$0() {
            var badProxyAvoidanceList, lists, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, list;

            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  badProxyAvoidanceList = function badProxyAvoidanceList(list) {
                    var res;
                    return _regeneratorRuntime.async(function badProxyAvoidanceList$(context$4$0) {
                      while (1) switch (context$4$0.prev = context$4$0.next) {
                        case 0:
                          driver.getProxyAvoidList = function () {
                            return list;
                          };
                          context$4$0.next = 3;
                          return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                            url: 'http://localhost:8181/wd/hub/session/' + sessionId + '/url',
                            method: 'POST',
                            json: { url: 'http://google.com' },
                            resolveWithFullResponse: true,
                            simple: false
                          }));

                        case 3:
                          res = context$4$0.sent;

                          res.statusCode.should.equal(500);
                          res.body.status.should.equal(13);
                          res.body.value.message.should.contain("roxy");

                        case 7:
                        case 'end':
                          return context$4$0.stop();
                      }
                    }, null, this);
                  };

                  lists = ['foo', [['foo']], [['BAR', /lol/]], [['GET', 'foo']]];
                  _iteratorNormalCompletion = true;
                  _didIteratorError = false;
                  _iteratorError = undefined;
                  context$3$0.prev = 5;
                  _iterator = _getIterator(lists);

                case 7:
                  if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                    context$3$0.next = 14;
                    break;
                  }

                  list = _step.value;
                  context$3$0.next = 11;
                  return _regeneratorRuntime.awrap(badProxyAvoidanceList(list));

                case 11:
                  _iteratorNormalCompletion = true;
                  context$3$0.next = 7;
                  break;

                case 14:
                  context$3$0.next = 20;
                  break;

                case 16:
                  context$3$0.prev = 16;
                  context$3$0.t0 = context$3$0['catch'](5);
                  _didIteratorError = true;
                  _iteratorError = context$3$0.t0;

                case 20:
                  context$3$0.prev = 20;
                  context$3$0.prev = 21;

                  if (!_iteratorNormalCompletion && _iterator['return']) {
                    _iterator['return']();
                  }

                case 23:
                  context$3$0.prev = 23;

                  if (!_didIteratorError) {
                    context$3$0.next = 26;
                    break;
                  }

                  throw _iteratorError;

                case 26:
                  return context$3$0.finish(23);

                case 27:
                  return context$3$0.finish(20);

                case 28:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this, [[5, 16, 20, 28], [21,, 23, 27]]);
          });

          it('should avoid proxying non-session commands even if not in the list', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  driver.getProxyAvoidList = function () {
                    return [['POST', new RegExp('')]];
                  };

                  context$3$0.next = 3;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/status',
                    method: 'GET',
                    json: true,
                    resolveWithFullResponse: true,
                    simple: false
                  }));

                case 3:
                  res = context$3$0.sent;

                  res.statusCode.should.equal(200);
                  res.body.should.eql({
                    status: 0,
                    value: "I'm fine",
                    sessionId: null
                  });

                case 6:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });

          it('should avoid proxying deleteSession commands', function callee$2$0() {
            var res;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  driver.getProxyAvoidList = function () {
                    return [['POST', new RegExp('')]];
                  };

                  driver.sessionId.should.equal(sessionId);
                  context$3$0.next = 4;
                  return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                    url: 'http://localhost:8181/wd/hub/session/' + sessionId,
                    method: 'DELETE',
                    json: true,
                    resolveWithFullResponse: true,
                    simple: false
                  }));

                case 4:
                  res = context$3$0.sent;

                  res.statusCode.should.equal(200);
                  should.not.exist(driver.sessionId);
                  driver.jwpProxyActive.should.be['false'];

                case 8:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });
        });

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
});

// make sure adding the optional 'id' doesn't clobber a route where we
// have an actual required 'id'

// Delete the session
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvcHJvdG9jb2wvcHJvdG9jb2wtZTJlLXNwZWNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O2lCQUU4RSxPQUFPOzswQkFDMUQsZUFBZTs7c0JBQzVCLFFBQVE7Ozs7OEJBQ0YsaUJBQWlCOzs7O29CQUNwQixNQUFNOzs7OzhCQUNJLGtCQUFrQjs7OztxQkFDM0IsT0FBTzs7OzsrQkFDRyxtQkFBbUI7Ozs7dUJBQ0QsV0FBVzs7bUNBQ0osNkJBQTZCOztBQUVsRixJQUFJLE1BQU0sR0FBRyxrQkFBSyxNQUFNLEVBQUUsQ0FBQztBQUMzQixrQkFBSyxHQUFHLDZCQUFnQixDQUFDOztBQUV6QixRQUFRLENBQUMsVUFBVSxFQUFFOzs7Ozs7OztBQUtuQixnQkFBUSxDQUFDLGtCQUFrQixFQUFFLFlBQVk7QUFDdkMsY0FBSSxDQUFDLEdBQUcsNEJBQWdCLENBQUM7QUFDekIsWUFBRSxDQUFDLHdEQUF3RCxFQUFFOzs7OzttREFDcEQsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQzs7O21DQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUTs7Ozs7OztXQUM5RCxDQUFDLENBQUM7U0FDSixDQUFDLENBQUM7O0FBRUgsZ0JBQVEsQ0FBQyxvQkFBb0IsRUFBRSxZQUFZO0FBQ3pDLGNBQUksYUFBYSxZQUFBLENBQUM7QUFDbEIsY0FBSSxNQUFNLFlBQUEsQ0FBQzs7QUFFWCxnQkFBTSxDQUFDOzs7O0FBQ0wsd0JBQU0sR0FBRyw0QkFBZ0IsQ0FBQztBQUMxQix3QkFBTSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7O21EQUNILGVBQU8saUNBQXlCLE1BQU0sQ0FBQyxFQUFFLElBQUksQ0FBQzs7O0FBQXBFLCtCQUFhOzs7Ozs7O1dBQ2QsQ0FBQyxDQUFDOztBQUVILGVBQUssQ0FBQzs7OztBQUNKLCtCQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7Ozs7Ozs7V0FDdkIsQ0FBQyxDQUFDOztBQUVILFlBQUUsQ0FBQyx5REFB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QUFFLElBQUk7QUFDViwyQ0FBdUIsRUFBRSxJQUFJO0FBQzdCLDBCQUFNLEVBQUUsS0FBSzttQkFDZCxDQUFDOzs7QUFORSxxQkFBRzs7QUFRUCxxQkFBRyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2pDLHdCQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDbkMsd0JBQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLEVBQUUsU0FBTSxDQUFDOzs7Ozs7O1dBQ3ZDLENBQUMsQ0FBQztTQUNKLENBQUMsQ0FBQzs7Ozs7OztDQUNKLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L3Byb3RvY29sL3Byb3RvY29sLWUyZS1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRyYW5zcGlsZTptb2NoYVxuXG5pbXBvcnQgeyBzZXJ2ZXIsIHJvdXRlQ29uZmlndXJpbmdGdW5jdGlvbiwgZXJyb3JzLCBKV1Byb3h5LCBCYXNlRHJpdmVyIH0gZnJvbSAnLi4vLi4nO1xuaW1wb3J0IHsgRmFrZURyaXZlciB9IGZyb20gJy4vZmFrZS1kcml2ZXInO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCByZXF1ZXN0IGZyb20gJ3JlcXVlc3QtcHJvbWlzZSc7XG5pbXBvcnQgY2hhaSBmcm9tICdjaGFpJztcbmltcG9ydCBjaGFpQXNQcm9taXNlZCBmcm9tICdjaGFpLWFzLXByb21pc2VkJztcbmltcG9ydCBzaW5vbiBmcm9tICdzaW5vbic7XG5pbXBvcnQgSFRUUFN0YXR1c0NvZGVzIGZyb20gJ2h0dHAtc3RhdHVzLWNvZGVzJztcbmltcG9ydCB7IGNyZWF0ZVByb3h5U2VydmVyLCBhZGRIYW5kbGVyIH0gZnJvbSAnLi9oZWxwZXJzJztcbmltcG9ydCB7IE1KU09OV1BfRUxFTUVOVF9LRVksIFczQ19FTEVNRU5UX0tFWSB9IGZyb20gJy4uLy4uL2xpYi9wcm90b2NvbC9wcm90b2NvbCc7XG5cbmxldCBzaG91bGQgPSBjaGFpLnNob3VsZCgpO1xuY2hhaS51c2UoY2hhaUFzUHJvbWlzZWQpO1xuXG5kZXNjcmliZSgnUHJvdG9jb2wnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG5cbiAgLy9UT0RPOiBtb3JlIHRlc3RzITpcbiAgLy8gVW5rbm93biBjb21tYW5kcyBzaG91bGQgcmV0dXJuIDQwNFxuXG4gIGRlc2NyaWJlKCdkaXJlY3QgdG8gZHJpdmVyJywgZnVuY3Rpb24gKCkge1xuICAgIGxldCBkID0gbmV3IEZha2VEcml2ZXIoKTtcbiAgICBpdCgnc2hvdWxkIHJldHVybiByZXNwb25zZSB2YWx1ZXMgZGlyZWN0bHkgZnJvbSB0aGUgZHJpdmVyJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgKGF3YWl0IGQuc2V0VXJsKFwiaHR0cDovL2dvb2dsZS5jb21cIikpLnNob3VsZC5jb250YWluKFwiZ29vZ2xlXCIpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgndmlhIGV4cHJlc3Mgcm91dGVyJywgZnVuY3Rpb24gKCkge1xuICAgIGxldCBtanNvbndwU2VydmVyO1xuICAgIGxldCBkcml2ZXI7XG5cbiAgICBiZWZvcmUoYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgZHJpdmVyID0gbmV3IEZha2VEcml2ZXIoKTtcbiAgICAgIGRyaXZlci5zZXNzaW9uSWQgPSAnZm9vJztcbiAgICAgIG1qc29ud3BTZXJ2ZXIgPSBhd2FpdCBzZXJ2ZXIocm91dGVDb25maWd1cmluZ0Z1bmN0aW9uKGRyaXZlciksIDgxODEpO1xuICAgIH0pO1xuXG4gICAgYWZ0ZXIoYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbWpzb253cFNlcnZlci5jbG9zZSgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBwcm94eSB0byBkcml2ZXIgYW5kIHJldHVybiB2YWxpZCBqc29ud3AgcmVzcG9uc2UnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgcmVzID0gYXdhaXQgcmVxdWVzdCh7XG4gICAgICAgIHVybDogJ2h0dHA6Ly9sb2NhbGhvc3Q6ODE4MS93ZC9odWIvc2Vzc2lvbi9mb28vdXJsJyxcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGpzb246IHt1cmw6ICdodHRwOi8vZ29vZ2xlLmNvbSd9XG4gICAgICB9KTtcbiAgICAgIHJlcy5zaG91bGQuZXFsKHtcbiAgICAgICAgc3RhdHVzOiAwLFxuICAgICAgICB2YWx1ZTogXCJOYXZpZ2F0ZWQgdG86IGh0dHA6Ly9nb29nbGUuY29tXCIsXG4gICAgICAgIHNlc3Npb25JZDogXCJmb29cIlxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGFzc3VtZSByZXF1ZXN0cyB3aXRob3V0IGEgQ29udGVudC1UeXBlIGFyZSBqc29uIHJlcXVlc3RzJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IHJlcyA9IGF3YWl0IHJlcXVlc3Qoe1xuICAgICAgICB1cmw6ICdodHRwOi8vbG9jYWxob3N0OjgxODEvd2QvaHViL3Nlc3Npb24vZm9vL3VybCcsXG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7dXJsOiAnaHR0cDovL2dvb2dsZS5jb20nfSksXG4gICAgICB9KTtcbiAgICAgIEpTT04ucGFyc2UocmVzKS5zaG91bGQuZXFsKHtcbiAgICAgICAgc3RhdHVzOiAwLFxuICAgICAgICB2YWx1ZTogXCJOYXZpZ2F0ZWQgdG86IGh0dHA6Ly9nb29nbGUuY29tXCIsXG4gICAgICAgIHNlc3Npb25JZDogXCJmb29cIlxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJlc3BvbmQgdG8geC13d3ctZm9ybS11cmxlbmNvZGVkIGFzIHdlbGwgYXMganNvbiByZXF1ZXN0cycsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCByZXMgPSBhd2FpdCByZXF1ZXN0KHtcbiAgICAgICAgdXJsOiAnaHR0cDovL2xvY2FsaG9zdDo4MTgxL3dkL2h1Yi9zZXNzaW9uL2Zvby91cmwnLFxuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgZm9ybToge3VybDogJ2h0dHA6Ly9nb29nbGUuY29tJ31cbiAgICAgIH0pO1xuICAgICAgSlNPTi5wYXJzZShyZXMpLnNob3VsZC5lcWwoe1xuICAgICAgICBzdGF0dXM6IDAsXG4gICAgICAgIHZhbHVlOiBcIk5hdmlnYXRlZCB0bzogaHR0cDovL2dvb2dsZS5jb21cIixcbiAgICAgICAgc2Vzc2lvbklkOiBcImZvb1wiXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaW5jbHVkZSB1cmwgcmVxdWVzdCBwYXJhbWV0ZXJzIGZvciBtZXRob2RzIHRvIHVzZSAtIHNlc3Npb25pZCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCByZXMgPSBhd2FpdCByZXF1ZXN0KHtcbiAgICAgICAgdXJsOiAnaHR0cDovL2xvY2FsaG9zdDo4MTgxL3dkL2h1Yi9zZXNzaW9uL2Zvby9iYWNrJyxcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGpzb246IHt9LFxuICAgICAgICBzaW1wbGU6IGZhbHNlLFxuICAgICAgICByZXNvbHZlV2l0aEZ1bGxSZXNwb25zZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgICByZXMuYm9keS5zaG91bGQuZXFsKHtcbiAgICAgICAgc3RhdHVzOiAwLFxuICAgICAgICB2YWx1ZTogXCJmb29cIixcbiAgICAgICAgc2Vzc2lvbklkOiBcImZvb1wiXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaW5jbHVkZSB1cmwgcmVxdWVzdCBwYXJhbWV0ZXJzIGZvciBtZXRob2RzIHRvIHVzZSAtIGVsZW1lbnRpZCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCByZXMgPSBhd2FpdCByZXF1ZXN0KHtcbiAgICAgICAgdXJsOiAnaHR0cDovL2xvY2FsaG9zdDo4MTgxL3dkL2h1Yi9zZXNzaW9uL2Zvby9lbGVtZW50L2Jhci9jbGljaycsXG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBqc29uOiB7fVxuICAgICAgfSk7XG4gICAgICByZXMuc3RhdHVzLnNob3VsZC5lcXVhbCgwKTtcbiAgICAgIHJlcy52YWx1ZS5zaG91bGQuZXFsKFtcImJhclwiLCBcImZvb1wiXSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGluY2x1ZGUgdXJsIHJlcSBwYXJhbXMgaW4gdGhlIG9yZGVyOiBjdXN0b20sIGVsZW1lbnQsIHNlc3Npb24nLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgcmVzID0gYXdhaXQgcmVxdWVzdCh7XG4gICAgICAgIHVybDogJ2h0dHA6Ly9sb2NhbGhvc3Q6ODE4MS93ZC9odWIvc2Vzc2lvbi9mb28vZWxlbWVudC9iYXIvYXR0cmlidXRlL2JheicsXG4gICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgIGpzb246IHt9XG4gICAgICB9KTtcbiAgICAgIHJlcy5zdGF0dXMuc2hvdWxkLmVxdWFsKDApO1xuICAgICAgcmVzLnZhbHVlLnNob3VsZC5lcWwoW1wiYmF6XCIsIFwiYmFyXCIsIFwiZm9vXCJdKTtcblxuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZXNwb25kIHdpdGggNDAwIEJhZCBSZXF1ZXN0IGlmIHBhcmFtZXRlcnMgbWlzc2luZycsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCByZXMgPSBhd2FpdCByZXF1ZXN0KHtcbiAgICAgICAgdXJsOiAnaHR0cDovL2xvY2FsaG9zdDo4MTgxL3dkL2h1Yi9zZXNzaW9uL2Zvby91cmwnLFxuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAganNvbjoge30sXG4gICAgICAgIHJlc29sdmVXaXRoRnVsbFJlc3BvbnNlOiB0cnVlLFxuICAgICAgICBzaW1wbGU6IGZhbHNlXG4gICAgICB9KTtcblxuICAgICAgcmVzLnN0YXR1c0NvZGUuc2hvdWxkLmVxdWFsKDQwMCk7XG4gICAgICByZXMuYm9keS5zaG91bGQuY29udGFpbihcInVybFwiKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmVqZWN0IHJlcXVlc3RzIHdpdGggYSBiYWRseSBmb3JtYXR0ZWQgYm9keSBhbmQgbm90IGNyYXNoJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgYXdhaXQgcmVxdWVzdCh7XG4gICAgICAgIHVybDogJ2h0dHA6Ly9sb2NhbGhvc3Q6ODE4MS93ZC9odWIvc2Vzc2lvbi9mb28vdXJsJyxcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGpzb246IFwib2ggaGVsbG9cIlxuICAgICAgfSkuc2hvdWxkLmV2ZW50dWFsbHkuYmUucmVqZWN0ZWQ7XG5cbiAgICAgIGxldCByZXMgPSBhd2FpdCByZXF1ZXN0KHtcbiAgICAgICAgdXJsOiAnaHR0cDovL2xvY2FsaG9zdDo4MTgxL3dkL2h1Yi9zZXNzaW9uL2Zvby91cmwnLFxuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAganNvbjoge3VybDogJ2h0dHA6Ly9nb29nbGUuY29tJ31cbiAgICAgIH0pO1xuICAgICAgcmVzLnNob3VsZC5lcWwoe1xuICAgICAgICBzdGF0dXM6IDAsXG4gICAgICAgIHZhbHVlOiBcIk5hdmlnYXRlZCB0bzogaHR0cDovL2dvb2dsZS5jb21cIixcbiAgICAgICAgc2Vzc2lvbklkOiBcImZvb1wiXG4gICAgICB9KTtcblxuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBnZXQgNDA0IGZvciBiYWQgcm91dGVzJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgYXdhaXQgcmVxdWVzdCh7XG4gICAgICAgIHVybDogJ2h0dHA6Ly9sb2NhbGhvc3Q6ODE4MS93ZC9odWIvYmxhcmdpbWFyZycsXG4gICAgICAgIG1ldGhvZDogJ0dFVCdcbiAgICAgIH0pLnNob3VsZC5ldmVudHVhbGx5LmJlLnJlamVjdGVkV2l0aChcIjQwNFwiKTtcbiAgICB9KTtcblxuICAgIC8vIFRPRE8gcGFzcyB0aGlzIHRlc3RcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYXBwaXVtL25vZGUtbW9iaWxlLWpzb24td2lyZS1wcm90b2NvbC9pc3N1ZXMvM1xuICAgIGl0KCc0eHggcmVzcG9uc2VzIHNob3VsZCBoYXZlIGNvbnRlbnQtdHlwZSBvZiB0ZXh0L3BsYWluJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IHJlcyA9IGF3YWl0IHJlcXVlc3Qoe1xuICAgICAgICB1cmw6ICdodHRwOi8vbG9jYWxob3N0OjgxODEvd2QvaHViL2JsYXJnaW1hcmdhcml0YScsXG4gICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgIHJlc29sdmVXaXRoRnVsbFJlc3BvbnNlOiB0cnVlLFxuICAgICAgICBzaW1wbGU6IGZhbHNlIC8vIDQwNCBlcnJvcnMgZnVsZmlsbCB0aGUgcHJvbWlzZSwgcmF0aGVyIHRoYW4gcmVqZWN0aW5nXG4gICAgICB9KTtcblxuICAgICAgcmVzLmhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddLnNob3VsZC5pbmNsdWRlKCd0ZXh0L3BsYWluJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHRocm93IG5vdCB5ZXQgaW1wbGVtZW50ZWQgZm9yIHVuZmlsbGVkb3V0IGNvbW1hbmRzJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IHJlcyA9IGF3YWl0IHJlcXVlc3Qoe1xuICAgICAgICB1cmw6ICdodHRwOi8vbG9jYWxob3N0OjgxODEvd2QvaHViL3Nlc3Npb24vZm9vL2VsZW1lbnQvYmFyL2xvY2F0aW9uJyxcbiAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgcmVzb2x2ZVdpdGhGdWxsUmVzcG9uc2U6IHRydWUsXG4gICAgICAgIHNpbXBsZTogZmFsc2VcbiAgICAgIH0pO1xuXG4gICAgICByZXMuc3RhdHVzQ29kZS5zaG91bGQuZXF1YWwoNTAxKTtcbiAgICAgIHJlcy5ib2R5LnNob3VsZC5lcWwoe1xuICAgICAgICBzdGF0dXM6IDEzLFxuICAgICAgICB2YWx1ZToge1xuICAgICAgICAgIG1lc3NhZ2U6ICdNZXRob2QgaGFzIG5vdCB5ZXQgYmVlbiBpbXBsZW1lbnRlZCdcbiAgICAgICAgfSxcbiAgICAgICAgc2Vzc2lvbklkOiAnZm9vJ1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHRocm93IG5vdCBpbXBsZW1lbnRlZCBmb3IgaWdub3JlZCBjb21tYW5kcycsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCByZXMgPSBhd2FpdCByZXF1ZXN0KHtcbiAgICAgICAgdXJsOiAnaHR0cDovL2xvY2FsaG9zdDo4MTgxL3dkL2h1Yi9zZXNzaW9uL2Zvby9idXR0b251cCcsXG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBqc29uOiB7fSxcbiAgICAgICAgcmVzb2x2ZVdpdGhGdWxsUmVzcG9uc2U6IHRydWUsXG4gICAgICAgIHNpbXBsZTogZmFsc2VcbiAgICAgIH0pO1xuXG4gICAgICByZXMuc3RhdHVzQ29kZS5zaG91bGQuZXF1YWwoNTAxKTtcbiAgICAgIHJlcy5ib2R5LnNob3VsZC5lcWwoe1xuICAgICAgICBzdGF0dXM6IDEzLFxuICAgICAgICB2YWx1ZToge1xuICAgICAgICAgIG1lc3NhZ2U6ICdNZXRob2QgaXMgbm90IGltcGxlbWVudGVkJ1xuICAgICAgICB9LFxuICAgICAgICBzZXNzaW9uSWQ6ICdmb28nXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgZ2V0IDQwMCBmb3IgYmFkIHBhcmFtZXRlcnMnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBhd2FpdCByZXF1ZXN0KHtcbiAgICAgICAgdXJsOiAnaHR0cDovL2xvY2FsaG9zdDo4MTgxL3dkL2h1Yi9zZXNzaW9uL2Zvby91cmwnLFxuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAganNvbjoge31cbiAgICAgIH0pLnNob3VsZC5ldmVudHVhbGx5LmJlLnJlamVjdGVkV2l0aChcIjQwMFwiKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaWdub3JlIHNwZWNpYWwgZXh0cmEgcGF5bG9hZCBwYXJhbXMgaW4gdGhlIHJpZ2h0IGNvbnRleHRzJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgYXdhaXQgcmVxdWVzdCh7XG4gICAgICAgIHVybDogJ2h0dHA6Ly9sb2NhbGhvc3Q6ODE4MS93ZC9odWIvc2Vzc2lvbi9mb28vZWxlbWVudC9iYXIvdmFsdWUnLFxuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAganNvbjoge2lkOiAnYmF6Jywgc2Vzc2lvbklkOiAnbG9sJywgdmFsdWU6IFsnYSddfVxuICAgICAgfSk7XG5cbiAgICAgIGF3YWl0IHJlcXVlc3Qoe1xuICAgICAgICB1cmw6ICdodHRwOi8vbG9jYWxob3N0OjgxODEvd2QvaHViL3Nlc3Npb24vZm9vL2VsZW1lbnQvYmFyL3ZhbHVlJyxcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGpzb246IHtpZDogJ2Jheid9XG4gICAgICB9KS5zaG91bGQuZXZlbnR1YWxseS5iZS5yZWplY3RlZFdpdGgoXCI0MDBcIik7XG5cbiAgICAgIC8vIG1ha2Ugc3VyZSBhZGRpbmcgdGhlIG9wdGlvbmFsICdpZCcgZG9lc24ndCBjbG9iYmVyIGEgcm91dGUgd2hlcmUgd2VcbiAgICAgIC8vIGhhdmUgYW4gYWN0dWFsIHJlcXVpcmVkICdpZCdcbiAgICAgIGF3YWl0IHJlcXVlc3Qoe1xuICAgICAgICB1cmw6ICdodHRwOi8vbG9jYWxob3N0OjgxODEvd2QvaHViL3Nlc3Npb24vZm9vL2ZyYW1lJyxcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGpzb246IHtpZDogJ2Jheid9XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmV0dXJuIHRoZSBjb3JyZWN0IGVycm9yIGV2ZW4gaWYgZHJpdmVyIGRvZXMgbm90IHRocm93JywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IHJlcyA9ICBhd2FpdCByZXF1ZXN0KHtcbiAgICAgICAgdXJsOiAnaHR0cDovL2xvY2FsaG9zdDo4MTgxL3dkL2h1Yi9zZXNzaW9uL2Zvby9hcHBpdW0vcmVjZWl2ZV9hc3luY19yZXNwb25zZScsXG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBqc29uOiB7cmVzcG9uc2U6ICdiYXonfSxcbiAgICAgICAgcmVzb2x2ZVdpdGhGdWxsUmVzcG9uc2U6IHRydWUsXG4gICAgICAgIHNpbXBsZTogZmFsc2VcbiAgICAgIH0pO1xuICAgICAgcmVzLnN0YXR1c0NvZGUuc2hvdWxkLmVxdWFsKDUwMCk7XG4gICAgICByZXMuYm9keS5zaG91bGQuZXFsKHtcbiAgICAgICAgc3RhdHVzOiAxMyxcbiAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICBtZXNzYWdlOiAnQW4gdW5rbm93biBzZXJ2ZXItc2lkZSBlcnJvciBvY2N1cnJlZCB3aGlsZSBwcm9jZXNzaW5nICcgK1xuICAgICAgICAgICAgICAgICAgICd0aGUgY29tbWFuZC4gT3JpZ2luYWwgZXJyb3I6IE1pc2hhbmRsZWQgRHJpdmVyIEVycm9yJ1xuICAgICAgICB9LFxuICAgICAgICBzZXNzaW9uSWQ6IFwiZm9vXCJcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ3czYyBzZW5ka2V5cyBtaWdyYXRpb24nLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpdCgnc2hvdWxkIGFjY2VwdCB2YWx1ZSBmb3Igc2VuZGtleXMnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxldCByZXMgPSBhd2FpdCByZXF1ZXN0KHtcbiAgICAgICAgICB1cmw6ICdodHRwOi8vbG9jYWxob3N0OjgxODEvd2QvaHViL3Nlc3Npb24vZm9vL2VsZW1lbnQvYmFyL3ZhbHVlJyxcbiAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICBqc29uOiB7dmFsdWU6IFwidGV4dCB0byB0eXBlXCJ9XG4gICAgICAgIH0pO1xuICAgICAgICByZXMuc3RhdHVzLnNob3VsZC5lcXVhbCgwKTtcbiAgICAgICAgcmVzLnZhbHVlLnNob3VsZC5lcWwoW1widGV4dCB0byB0eXBlXCIsIFwiYmFyXCJdKTtcbiAgICAgIH0pO1xuICAgICAgaXQoJ3Nob3VsZCBhY2NlcHQgdGV4dCBmb3Igc2VuZGtleXMnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxldCByZXMgPSBhd2FpdCByZXF1ZXN0KHtcbiAgICAgICAgICB1cmw6ICdodHRwOi8vbG9jYWxob3N0OjgxODEvd2QvaHViL3Nlc3Npb24vZm9vL2VsZW1lbnQvYmFyL3ZhbHVlJyxcbiAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICBqc29uOiB7dGV4dDogXCJ0ZXh0IHRvIHR5cGVcIn1cbiAgICAgICAgfSk7XG4gICAgICAgIHJlcy5zdGF0dXMuc2hvdWxkLmVxdWFsKDApO1xuICAgICAgICByZXMudmFsdWUuc2hvdWxkLmVxbChbXCJ0ZXh0IHRvIHR5cGVcIiwgXCJiYXJcIl0pO1xuICAgICAgfSk7XG4gICAgICBpdCgnc2hvdWxkIGFjY2VwdCB2YWx1ZSBhbmQgdGV4dCBmb3Igc2VuZGtleXMsIGFuZCB1c2UgdmFsdWUnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxldCByZXMgPSBhd2FpdCByZXF1ZXN0KHtcbiAgICAgICAgICB1cmw6ICdodHRwOi8vbG9jYWxob3N0OjgxODEvd2QvaHViL3Nlc3Npb24vZm9vL2VsZW1lbnQvYmFyL3ZhbHVlJyxcbiAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICBqc29uOiB7dmFsdWU6IFwidGV4dCB0byB0eXBlXCIsIHRleHQ6IFwidGV4dCB0byBpZ25vcmVcIn1cbiAgICAgICAgfSk7XG4gICAgICAgIHJlcy5zdGF0dXMuc2hvdWxkLmVxdWFsKDApO1xuICAgICAgICByZXMudmFsdWUuc2hvdWxkLmVxbChbXCJ0ZXh0IHRvIHR5cGVcIiwgXCJiYXJcIl0pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnbXVsdGlwbGUgc2V0cyBvZiBhcmd1bWVudHMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBkZXNjcmliZSgnb3B0aW9uYWwnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGl0KCdzaG91bGQgYWxsb3cgbW92ZXRvIHdpdGggZWxlbWVudCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBsZXQgcmVzID0gYXdhaXQgcmVxdWVzdCh7XG4gICAgICAgICAgICB1cmw6ICdodHRwOi8vbG9jYWxob3N0OjgxODEvd2QvaHViL3Nlc3Npb24vZm9vL21vdmV0bycsXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIGpzb246IHtlbGVtZW50OiAnMyd9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmVzLnN0YXR1cy5zaG91bGQuZXF1YWwoMCk7XG4gICAgICAgICAgcmVzLnZhbHVlLnNob3VsZC5lcWwoWyczJywgbnVsbCwgbnVsbF0pO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCBhbGxvdyBtb3ZldG8gd2l0aCB4b2Zmc2V0L3lvZmZzZXQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgbGV0IHJlcyA9IGF3YWl0IHJlcXVlc3Qoe1xuICAgICAgICAgICAgdXJsOiAnaHR0cDovL2xvY2FsaG9zdDo4MTgxL3dkL2h1Yi9zZXNzaW9uL2Zvby9tb3ZldG8nLFxuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICBqc29uOiB7eG9mZnNldDogNDIsIHlvZmZzZXQ6IDE3fVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJlcy5zdGF0dXMuc2hvdWxkLmVxdWFsKDApO1xuICAgICAgICAgIHJlcy52YWx1ZS5zaG91bGQuZXFsKFtudWxsLCA0MiwgMTddKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIGRlc2NyaWJlKCdyZXF1aXJlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXQoJ3Nob3VsZCBhbGxvdyByZW1vdmVBcHAgd2l0aCBhcHBJZCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBsZXQgcmVzID0gYXdhaXQgcmVxdWVzdCh7XG4gICAgICAgICAgICB1cmw6ICdodHRwOi8vbG9jYWxob3N0OjgxODEvd2QvaHViL3Nlc3Npb24vZm9vL2FwcGl1bS9kZXZpY2UvcmVtb3ZlX2FwcCcsXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIGpzb246IHthcHBJZDogNDJ9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmVzLnN0YXR1cy5zaG91bGQuZXF1YWwoMCk7XG4gICAgICAgICAgcmVzLnZhbHVlLnNob3VsZC5lcWwoNDIpO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCBhbGxvdyByZW1vdmVBcHAgd2l0aCBidW5kbGVJZCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBsZXQgcmVzID0gYXdhaXQgcmVxdWVzdCh7XG4gICAgICAgICAgICB1cmw6ICdodHRwOi8vbG9jYWxob3N0OjgxODEvd2QvaHViL3Nlc3Npb24vZm9vL2FwcGl1bS9kZXZpY2UvcmVtb3ZlX2FwcCcsXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIGpzb246IHtidW5kbGVJZDogNDJ9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmVzLnN0YXR1cy5zaG91bGQuZXF1YWwoMCk7XG4gICAgICAgICAgcmVzLnZhbHVlLnNob3VsZC5lcWwoNDIpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ2RlZmF1bHQgcGFyYW0gd3JhcCcsIGZ1bmN0aW9uICgpIHtcblxuICAgICAgaXQoJ3Nob3VsZCB3cmFwJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBsZXQgcmVzID0gYXdhaXQgcmVxdWVzdCh7XG4gICAgICAgICAgdXJsOiAnaHR0cDovL2xvY2FsaG9zdDo4MTgxL3dkL2h1Yi9zZXNzaW9uL2Zvby90b3VjaC9wZXJmb3JtJyxcbiAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICBqc29uOiBbe1wiYWN0aW9uXCI6XCJ0YXBcIiwgXCJvcHRpb25zXCI6e1wiZWxlbWVudFwiOlwiM1wifX1dXG4gICAgICAgIH0pO1xuICAgICAgICByZXMudmFsdWUuc2hvdWxkLmRlZXAuZXF1YWwoW1t7XCJhY3Rpb25cIjpcInRhcFwiLCBcIm9wdGlvbnNcIjp7XCJlbGVtZW50XCI6XCIzXCJ9fV0sICdmb28nXSk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBub3Qgd3JhcCB0d2ljZScsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbGV0IHJlcyA9IGF3YWl0IHJlcXVlc3Qoe1xuICAgICAgICAgIHVybDogJ2h0dHA6Ly9sb2NhbGhvc3Q6ODE4MS93ZC9odWIvc2Vzc2lvbi9mb28vdG91Y2gvcGVyZm9ybScsXG4gICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAganNvbjoge2FjdGlvbnM6IFt7XCJhY3Rpb25cIjpcInRhcFwiLCBcIm9wdGlvbnNcIjp7XCJlbGVtZW50XCI6XCIzXCJ9fV19XG4gICAgICAgIH0pO1xuICAgICAgICByZXMudmFsdWUuc2hvdWxkLmRlZXAuZXF1YWwoW1t7XCJhY3Rpb25cIjpcInRhcFwiLCBcIm9wdGlvbnNcIjp7XCJlbGVtZW50XCI6XCIzXCJ9fV0sICdmb28nXSk7XG4gICAgICB9KTtcblxuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ2NyZWF0ZSBzZXNzaW9ucyB2aWEgSFRUUCBlbmRwb2ludCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBkZXNpcmVkQ2FwYWJpbGl0aWVzID0ge2E6ICdiJ307XG4gICAgICBsZXQgcmVxdWlyZWRDYXBhYmlsaXRpZXMgPSB7YzogJ2QnfTtcbiAgICAgIGxldCBjYXBhYmlsaXRpZXMgPSB7ZTogJ2YnfTtcbiAgICAgIGxldCBiYXNlVXJsID0gYGh0dHA6Ly9sb2NhbGhvc3Q6ODE4MS93ZC9odWIvc2Vzc2lvbmA7XG5cbiAgICAgIGl0KCdzaG91bGQgYWxsb3cgY3JlYXRlIHNlc3Npb24gd2l0aCBkZXNpcmVkIGNhcHMgKE1KU09OV1ApJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBsZXQgcmVzID0gYXdhaXQgcmVxdWVzdCh7XG4gICAgICAgICAgdXJsOiBiYXNlVXJsLFxuICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgIGpzb246IHtkZXNpcmVkQ2FwYWJpbGl0aWVzfVxuICAgICAgICB9KTtcbiAgICAgICAgcmVzLnN0YXR1cy5zaG91bGQuZXF1YWwoMCk7XG4gICAgICAgIHJlcy52YWx1ZS5zaG91bGQuZXFsKGRlc2lyZWRDYXBhYmlsaXRpZXMpO1xuICAgICAgfSk7XG4gICAgICBpdCgnc2hvdWxkIGFsbG93IGNyZWF0ZSBzZXNzaW9uIHdpdGggZGVzaXJlZCBhbmQgcmVxdWlyZWQgY2FwcycsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbGV0IHJlcyA9IGF3YWl0IHJlcXVlc3Qoe1xuICAgICAgICAgIHVybDogYmFzZVVybCxcbiAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICBqc29uOiB7XG4gICAgICAgICAgICBkZXNpcmVkQ2FwYWJpbGl0aWVzLFxuICAgICAgICAgICAgcmVxdWlyZWRDYXBhYmlsaXRpZXNcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXMuc3RhdHVzLnNob3VsZC5lcXVhbCgwKTtcbiAgICAgICAgcmVzLnZhbHVlLnNob3VsZC5lcWwoXy5leHRlbmQoe30sIGRlc2lyZWRDYXBhYmlsaXRpZXMsIHJlcXVpcmVkQ2FwYWJpbGl0aWVzKSk7XG4gICAgICB9KTtcbiAgICAgIGl0KCdzaG91bGQgZmFpbCB0byBjcmVhdGUgc2Vzc2lvbiB3aXRob3V0IGNhcGFiaWxpdGllcyBvciBkZXNpcmVkQ2FwYWJpbGl0aWVzJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBhd2FpdCByZXF1ZXN0KHtcbiAgICAgICAgICB1cmw6IGJhc2VVcmwsXG4gICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAganNvbjoge30sXG4gICAgICAgIH0pLnNob3VsZC5ldmVudHVhbGx5LmJlLnJlamVjdGVkV2l0aCgnNDAwJyk7XG4gICAgICB9KTtcbiAgICAgIGl0KCdzaG91bGQgYWxsb3cgY3JlYXRlIHNlc3Npb24gd2l0aCBjYXBhYmlsaXRpZXMgKFczQyknLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxldCB7c3RhdHVzLCB2YWx1ZSwgc2Vzc2lvbklkfSA9IGF3YWl0IHJlcXVlc3Qoe1xuICAgICAgICAgIHVybDogYmFzZVVybCxcbiAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICBqc29uOiB7XG4gICAgICAgICAgICBjYXBhYmlsaXRpZXMsXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgc2hvdWxkLm5vdC5leGlzdChzdGF0dXMpO1xuICAgICAgICBzaG91bGQubm90LmV4aXN0KHNlc3Npb25JZCk7XG4gICAgICAgIHZhbHVlLmNhcGFiaWxpdGllcy5zaG91bGQuZXFsKGNhcGFiaWxpdGllcyk7XG4gICAgICAgIHZhbHVlLnNlc3Npb25JZC5zaG91bGQuZXhpc3Q7XG4gICAgICB9KTtcbiAgICAgIGl0KCdzaG91bGQgZmFsbCBiYWNrIHRvIE1KU09OV1AgaWYgZHJpdmVyIGRvZXMgbm90IHN1cHBvcnQgVzNDIHlldCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgY3JlYXRlU2Vzc2lvblN0dWIgPSBzaW5vbi5zdHViKGRyaXZlciwgJ2NyZWF0ZVNlc3Npb24nLCAoY2FwYWJpbGl0aWVzKSA9PiB7XG4gICAgICAgICAgZHJpdmVyLnNlc3Npb25JZCA9IG51bGw7XG4gICAgICAgICAgcmV0dXJuIEJhc2VEcml2ZXIucHJvdG90eXBlLmNyZWF0ZVNlc3Npb24uY2FsbChkcml2ZXIsIGNhcGFiaWxpdGllcyk7XG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgY2FwcyA9IHtcbiAgICAgICAgICAuLi5kZXNpcmVkQ2FwYWJpbGl0aWVzLFxuICAgICAgICAgIHBsYXRmb3JtTmFtZTogJ0Zha2UnLFxuICAgICAgICAgIGRldmljZU5hbWU6ICdGYWtlJyxcbiAgICAgICAgfTtcbiAgICAgICAgbGV0IHtzdGF0dXMsIHZhbHVlLCBzZXNzaW9uSWR9ID0gYXdhaXQgcmVxdWVzdCh7XG4gICAgICAgICAgdXJsOiBiYXNlVXJsLFxuICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgIGpzb246IHtcbiAgICAgICAgICAgIGRlc2lyZWRDYXBhYmlsaXRpZXM6IGNhcHMsXG4gICAgICAgICAgICBjYXBhYmlsaXRpZXM6IHtcbiAgICAgICAgICAgICAgYWx3YXlzTWF0Y2g6IGNhcHMsXG4gICAgICAgICAgICAgIGZpcnN0TWF0Y2g6IFt7fV0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHNob3VsZC5leGlzdChzdGF0dXMpO1xuICAgICAgICBzaG91bGQuZXhpc3Qoc2Vzc2lvbklkKTtcbiAgICAgICAgdmFsdWUuc2hvdWxkLmVxbChjYXBzKTtcbiAgICAgICAgY3JlYXRlU2Vzc2lvblN0dWIucmVzdG9yZSgpO1xuICAgICAgfSk7XG5cbiAgICAgIGRlc2NyaWJlKCd3M2MgZW5kcG9pbnRzJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBsZXQgdzNjQ2FwcyA9IHtcbiAgICAgICAgICBhbHdheXNNYXRjaDoge1xuICAgICAgICAgICAgcGxhdGZvcm1OYW1lOiAnRmFrZScsXG4gICAgICAgICAgICBkZXZpY2VOYW1lOiAnQ29tbW9kb3JlIDY0JyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGZpcnN0TWF0Y2g6IFt7fV0sXG4gICAgICAgIH07XG4gICAgICAgIGxldCBzZXNzaW9uVXJsO1xuICAgICAgICBsZXQgc2Vzc2lvbklkO1xuXG4gICAgICAgIGJlZm9yZUVhY2goYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIC8vIFN0YXJ0IGEgc2Vzc2lvblxuICAgICAgICAgIGxldCB7dmFsdWV9ID0gYXdhaXQgcmVxdWVzdC5wb3N0KGJhc2VVcmwsIHtcbiAgICAgICAgICAgIGpzb246IHtcbiAgICAgICAgICAgICAgY2FwYWJpbGl0aWVzOiB3M2NDYXBzLFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHNlc3Npb25JZCA9IHZhbHVlLnNlc3Npb25JZDtcbiAgICAgICAgICBzZXNzaW9uVXJsID0gYCR7YmFzZVVybH0vJHtzZXNzaW9uSWR9YDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYWZ0ZXJFYWNoKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAvLyBEZWxldGUgdGhlIHNlc3Npb25cbiAgICAgICAgICBhd2FpdCByZXF1ZXN0LmRlbGV0ZShzZXNzaW9uVXJsKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoYHNob3VsZCB0aHJvdyA0MDAgQmFkIFBhcmFtZXRlcnMgZXhjZXB0aW9uIGlmIHRoZSBwYXJhbWV0ZXJzIGFyZSBiYWRgLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY29uc3Qge3N0YXR1c0NvZGUsIGVycm9yfSA9IGF3YWl0IHJlcXVlc3QucG9zdChgJHtzZXNzaW9uVXJsfS9hY3Rpb25zYCwge1xuICAgICAgICAgICAganNvbjoge1xuICAgICAgICAgICAgICBiYWQ6ICdwYXJhbXMnLFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLnNob3VsZC5ldmVudHVhbGx5LmJlLnJlamVjdGVkO1xuICAgICAgICAgIHN0YXR1c0NvZGUuc2hvdWxkLmVxdWFsKDQwMCk7XG5cbiAgICAgICAgICBjb25zdCB7ZXJyb3I6dzNjRXJyb3IsIG1lc3NhZ2UsIHN0YWNrdHJhY2V9ID0gZXJyb3IudmFsdWU7XG4gICAgICAgICAgbWVzc2FnZS5zaG91bGQubWF0Y2goL1BhcmFtZXRlcnMgd2VyZSBpbmNvcnJlY3QvKTtcbiAgICAgICAgICBzdGFja3RyYWNlLnNob3VsZC5tYXRjaCgvcHJvdG9jb2wuanMvKTtcbiAgICAgICAgICB3M2NFcnJvci5zaG91bGQuYmUuYS5zdHJpbmc7XG4gICAgICAgICAgdzNjRXJyb3Iuc2hvdWxkLmVxdWFsKGVycm9ycy5JbnZhbGlkQXJndW1lbnRFcnJvci5lcnJvcigpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoYHNob3VsZCB0aHJvdyA0MDQgTm90IEZvdW5kIGV4Y2VwdGlvbiBpZiB0aGUgY29tbWFuZCBoYXNuJ3QgYmVlbiBpbXBsZW1lbnRlZCB5ZXRgLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY29uc3Qge3N0YXR1c0NvZGUsIGVycm9yfSA9IGF3YWl0IHJlcXVlc3QucG9zdChgJHtzZXNzaW9uVXJsfS9hY3Rpb25zYCwge1xuICAgICAgICAgICAganNvbjoge1xuICAgICAgICAgICAgICBhY3Rpb25zOiBbXSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KS5zaG91bGQuZXZlbnR1YWxseS5iZS5yZWplY3RlZDtcbiAgICAgICAgICBzdGF0dXNDb2RlLnNob3VsZC5lcXVhbCg0MDQpO1xuXG4gICAgICAgICAgY29uc3Qge2Vycm9yOnczY0Vycm9yLCBtZXNzYWdlLCBzdGFja3RyYWNlfSA9IGVycm9yLnZhbHVlO1xuICAgICAgICAgIG1lc3NhZ2Uuc2hvdWxkLm1hdGNoKC9NZXRob2QgaGFzIG5vdCB5ZXQgYmVlbiBpbXBsZW1lbnRlZC8pO1xuICAgICAgICAgIHN0YWNrdHJhY2Uuc2hvdWxkLm1hdGNoKC9wcm90b2NvbC5qcy8pO1xuICAgICAgICAgIHczY0Vycm9yLnNob3VsZC5iZS5hLnN0cmluZztcbiAgICAgICAgICB3M2NFcnJvci5zaG91bGQuZXF1YWwoZXJyb3JzLk5vdFlldEltcGxlbWVudGVkRXJyb3IuZXJyb3IoKSk7XG4gICAgICAgICAgbWVzc2FnZS5zaG91bGQubWF0Y2goL01ldGhvZCBoYXMgbm90IHlldCBiZWVuIGltcGxlbWVudGVkLyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KGBzaG91bGQgdGhyb3cgNTAwIFVua25vd24gRXJyb3IgaWYgdGhlIGNvbW1hbmQgdGhyb3dzIGFuIHVuZXhwZWN0ZWQgZXhjZXB0aW9uYCwgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGRyaXZlci5wZXJmb3JtQWN0aW9ucyA9ICgpID0+IHsgdGhyb3cgbmV3IEVycm9yKGBEaWRuJ3Qgd29ya2ApOyB9O1xuICAgICAgICAgIGNvbnN0IHtzdGF0dXNDb2RlLCBlcnJvcn0gPSBhd2FpdCByZXF1ZXN0LnBvc3QoYCR7c2Vzc2lvblVybH0vYWN0aW9uc2AsIHtcbiAgICAgICAgICAgIGpzb246IHtcbiAgICAgICAgICAgICAgYWN0aW9uczogW10sXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkuc2hvdWxkLmV2ZW50dWFsbHkuYmUucmVqZWN0ZWQ7XG4gICAgICAgICAgc3RhdHVzQ29kZS5zaG91bGQuZXF1YWwoNTAwKTtcblxuICAgICAgICAgIGNvbnN0IHtlcnJvcjp3M2NFcnJvciwgbWVzc2FnZSwgc3RhY2t0cmFjZX0gPSBlcnJvci52YWx1ZTtcbiAgICAgICAgICBzdGFja3RyYWNlLnNob3VsZC5tYXRjaCgvcHJvdG9jb2wuanMvKTtcbiAgICAgICAgICB3M2NFcnJvci5zaG91bGQuYmUuYS5zdHJpbmc7XG4gICAgICAgICAgdzNjRXJyb3Iuc2hvdWxkLmVxdWFsKGVycm9ycy5Vbmtub3duRXJyb3IuZXJyb3IoKSk7XG4gICAgICAgICAgbWVzc2FnZS5zaG91bGQubWF0Y2goL0RpZG4ndCB3b3JrLyk7XG5cbiAgICAgICAgICBkZWxldGUgZHJpdmVyLnBlcmZvcm1BY3Rpb25zO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdChgc2hvdWxkIHRyYW5zbGF0ZSBlbGVtZW50IGZvcm1hdCBmcm9tIE1KU09OV1AgdG8gVzNDYCwgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGNvbnN0IHJldFZhbHVlID0gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBzb21ldGhpbmc6IHtcbiAgICAgICAgICAgICAgICBbTUpTT05XUF9FTEVNRU5UX0tFWV06ICdmb29vJyxcbiAgICAgICAgICAgICAgICBvdGhlcjogJ2JhcidcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICBbTUpTT05XUF9FTEVNRU5UX0tFWV06ICdiYXInXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ2lnbm9yZScsXG4gICAgICAgICAgXTtcblxuICAgICAgICAgIGNvbnN0IGV4cGVjdGVkVmFsdWUgPSBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHNvbWV0aGluZzoge1xuICAgICAgICAgICAgICAgIFtXM0NfRUxFTUVOVF9LRVldOiAnZm9vbycsXG4gICAgICAgICAgICAgICAgb3RoZXI6ICdiYXInXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgW1czQ19FTEVNRU5UX0tFWV06ICdiYXInXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ2lnbm9yZScsXG4gICAgICAgICAgXTtcblxuICAgICAgICAgIGNvbnN0IGZpbmRFbGVtZW50c0JhY2t1cCA9IGRyaXZlci5maW5kRWxlbWVudHM7XG4gICAgICAgICAgZHJpdmVyLmZpbmRFbGVtZW50cyA9ICgpID0+IHJldFZhbHVlO1xuICAgICAgICAgIGNvbnN0IHt2YWx1ZX0gPSBhd2FpdCByZXF1ZXN0LnBvc3QoYCR7c2Vzc2lvblVybH0vZWxlbWVudHNgLCB7XG4gICAgICAgICAgICBqc29uOiB7XG4gICAgICAgICAgICAgIHVzaW5nOiAnd2hhdGV2ZXInLFxuICAgICAgICAgICAgICB2YWx1ZTogJ3doYXRldmVyJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdmFsdWUuc2hvdWxkLmRlZXAuZXF1YWwoZXhwZWN0ZWRWYWx1ZSk7XG4gICAgICAgICAgZHJpdmVyLmZpbmRFbGVtZW50cyA9IGZpbmRFbGVtZW50c0JhY2t1cDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoYHNob3VsZCBmYWlsIHdpdGggYSA0MDggZXJyb3IgaWYgaXQgdGhyb3dzIGEgVGltZW91dEVycm9yIGV4Y2VwdGlvbmAsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzaW5vbi5zdHViKGRyaXZlciwgJ3NldFVybCcsICgpID0+IHsgdGhyb3cgbmV3IGVycm9ycy5UaW1lb3V0RXJyb3I7IH0pO1xuICAgICAgICAgIGxldCB7c3RhdHVzQ29kZSwgZXJyb3J9ID0gYXdhaXQgcmVxdWVzdCh7XG4gICAgICAgICAgICB1cmw6IGAke3Nlc3Npb25Vcmx9L3VybGAsXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIGpzb246IHtcbiAgICAgICAgICAgICAgdXJsOiAnaHR0cHM6Ly9leGFtcGxlLmNvbS8nLFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLnNob3VsZC5ldmVudHVhbGx5LmJlLnJlamVjdGVkO1xuICAgICAgICAgIHN0YXR1c0NvZGUuc2hvdWxkLmVxdWFsKDQwOCk7XG5cbiAgICAgICAgICBjb25zdCB7ZXJyb3I6dzNjRXJyb3IsIG1lc3NhZ2UsIHN0YWNrdHJhY2V9ID0gZXJyb3IudmFsdWU7XG4gICAgICAgICAgc3RhY2t0cmFjZS5zaG91bGQubWF0Y2goL3Byb3RvY29sLmpzLyk7XG4gICAgICAgICAgdzNjRXJyb3Iuc2hvdWxkLmJlLmEuc3RyaW5nO1xuICAgICAgICAgIHczY0Vycm9yLnNob3VsZC5lcXVhbChlcnJvcnMuVGltZW91dEVycm9yLmVycm9yKCkpO1xuICAgICAgICAgIG1lc3NhZ2Uuc2hvdWxkLm1hdGNoKC9BbiBvcGVyYXRpb24gZGlkIG5vdCBjb21wbGV0ZSBiZWZvcmUgaXRzIHRpbWVvdXQgZXhwaXJlZC8pO1xuXG4gICAgICAgICAgc2lub24ucmVzdG9yZShkcml2ZXIsICdzZXRVcmwnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoYHNob3VsZCBwYXNzIHdpdGggMjAwIEhUVFAgc3RhdHVzIGNvZGUgaWYgdGhlIGNvbW1hbmQgcmV0dXJucyBhIHZhbHVlYCwgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGRyaXZlci5wZXJmb3JtQWN0aW9ucyA9IChhY3Rpb25zKSA9PiAnSXQgd29ya3MgJyArIGFjdGlvbnMuam9pbignJyk7XG4gICAgICAgICAgY29uc3Qge3N0YXR1cywgdmFsdWUsIHNlc3Npb25JZH0gPSBhd2FpdCByZXF1ZXN0LnBvc3QoYCR7c2Vzc2lvblVybH0vYWN0aW9uc2AsIHtcbiAgICAgICAgICAgIGpzb246IHtcbiAgICAgICAgICAgICAgYWN0aW9uczogWydhJywgJ2InLCAnYyddLFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHNob3VsZC5ub3QuZXhpc3Qoc2Vzc2lvbklkKTtcbiAgICAgICAgICBzaG91bGQubm90LmV4aXN0KHN0YXR1cyk7XG4gICAgICAgICAgdmFsdWUuc2hvdWxkLmVxdWFsKCdJdCB3b3JrcyBhYmMnKTtcbiAgICAgICAgICBkZWxldGUgZHJpdmVyLnBlcmZvcm1BY3Rpb25zO1xuICAgICAgICB9KTtcblxuICAgICAgICBkZXNjcmliZSgnandwcm94eScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBsZXQgcG9ydCA9IDU2NTYyO1xuICAgICAgICAgIGxldCBzZXJ2ZXIsIGp3cHJveHksIGFwcDtcbiAgICAgICAgICBiZWZvcmVFYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGxldCByZXMgPSBjcmVhdGVQcm94eVNlcnZlcihzZXNzaW9uSWQsIHBvcnQpO1xuICAgICAgICAgICAgc2VydmVyID0gcmVzLnNlcnZlcjtcbiAgICAgICAgICAgIGFwcCA9IHJlcy5hcHA7XG4gICAgICAgICAgICBqd3Byb3h5ID0gbmV3IEpXUHJveHkoe2hvc3Q6ICdsb2NhbGhvc3QnLCBwb3J0fSk7XG4gICAgICAgICAgICBqd3Byb3h5LnNlc3Npb25JZCA9IHNlc3Npb25JZDtcbiAgICAgICAgICAgIGRyaXZlci5wZXJmb3JtQWN0aW9ucyA9IGFzeW5jIChhY3Rpb25zKSA9PiBhd2FpdCBqd3Byb3h5LmNvbW1hbmQoJy9wZXJmb3JtLWFjdGlvbnMnLCAnUE9TVCcsIGFjdGlvbnMpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgYWZ0ZXJFYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNlcnZlci5jbG9zZSgpO1xuICAgICAgICAgICAgZGVsZXRlIGRyaXZlci5wZXJmb3JtQWN0aW9ucztcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGl0KCdzaG91bGQgd29yayBpZiBhIHByb3hpZWQgcmVxdWVzdCByZXR1cm5zIGEgcmVzcG9uc2Ugd2l0aCBzdGF0dXMgMjAwJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgYWRkSGFuZGxlcihhcHAsICdwb3N0JywgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL3BlcmZvcm0tYWN0aW9ucycsIChyZXEsIHJlcykgPT4ge1xuICAgICAgICAgICAgICByZXMuanNvbih7XG4gICAgICAgICAgICAgICAgc2Vzc2lvbklkOiByZXEucGFyYW1zLnNlc3Npb25JZCxcbiAgICAgICAgICAgICAgICB2YWx1ZTogcmVxLmJvZHksXG4gICAgICAgICAgICAgICAgc3RhdHVzOiAwLFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb25zdCB7c3RhdHVzLCB2YWx1ZSwgc2Vzc2lvbklkfSA9IGF3YWl0IHJlcXVlc3QucG9zdChgJHtzZXNzaW9uVXJsfS9hY3Rpb25zYCwge1xuICAgICAgICAgICAgICBqc29uOiB7XG4gICAgICAgICAgICAgICAgYWN0aW9uczogWzEsIDIsIDNdLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YWx1ZS5zaG91bGQuZXFsKFsxLCAyLCAzXSk7XG4gICAgICAgICAgICBzaG91bGQubm90LmV4aXN0KHN0YXR1cyk7XG4gICAgICAgICAgICBzaG91bGQubm90LmV4aXN0KHNlc3Npb25JZCk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIHJldHVybiBlcnJvciBpZiBhIHByb3hpZWQgcmVxdWVzdCByZXR1cm5zIGEgTUpTT05XUCBlcnJvciByZXNwb25zZScsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGFkZEhhbmRsZXIoYXBwLCAncG9zdCcsICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC9wZXJmb3JtLWFjdGlvbnMnLCAocmVxLCByZXMpID0+IHtcbiAgICAgICAgICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgICAgICAgICAgICAgIHNlc3Npb25JZCxcbiAgICAgICAgICAgICAgICBzdGF0dXM6IDYsXG4gICAgICAgICAgICAgICAgdmFsdWU6ICdBIHByb2JsZW0gb2NjdXJyZWQnLFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3Qge3N0YXR1c0NvZGUsIG1lc3NhZ2V9ID0gYXdhaXQgcmVxdWVzdC5wb3N0KGAke3Nlc3Npb25Vcmx9L2FjdGlvbnNgLCB7XG4gICAgICAgICAgICAgIGpzb246IHtcbiAgICAgICAgICAgICAgICBhY3Rpb25zOiBbMSwgMiwgM10sXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLnNob3VsZC5ldmVudHVhbGx5LmJlLnJlamVjdGVkO1xuICAgICAgICAgICAgc3RhdHVzQ29kZS5zaG91bGQuZXF1YWwoSFRUUFN0YXR1c0NvZGVzLk5PVF9GT1VORCk7XG4gICAgICAgICAgICBtZXNzYWdlLnNob3VsZC5tYXRjaCgvQSBwcm9ibGVtIG9jY3VycmVkLyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIHJldHVybiBlcnJvciBpZiBhIHByb3hpZWQgcmVxdWVzdCByZXR1cm5zIGEgTUpTT05XUCBlcnJvciByZXNwb25zZSBidXQgSFRUUCBzdGF0dXMgY29kZSBpcyAyMDAnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBhZGRIYW5kbGVyKGFwcCwgJ3Bvc3QnLCAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvcGVyZm9ybS1hY3Rpb25zJywgKHJlcSwgcmVzKSA9PiB7XG4gICAgICAgICAgICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHtcbiAgICAgICAgICAgICAgICBzZXNzaW9uSWQ6ICdGYWtlIFNlc3Npb24gSWQnLFxuICAgICAgICAgICAgICAgIHN0YXR1czogNyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogJ0EgcHJvYmxlbSBvY2N1cnJlZCcsXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCB7c3RhdHVzQ29kZSwgbWVzc2FnZSwgZXJyb3J9ID0gYXdhaXQgcmVxdWVzdC5wb3N0KGAke3Nlc3Npb25Vcmx9L2FjdGlvbnNgLCB7XG4gICAgICAgICAgICAgIGpzb246IHtcbiAgICAgICAgICAgICAgICBhY3Rpb25zOiBbMSwgMiwgM10sXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLnNob3VsZC5ldmVudHVhbGx5LmJlLnJlamVjdGVkO1xuICAgICAgICAgICAgc3RhdHVzQ29kZS5zaG91bGQuZXF1YWwoSFRUUFN0YXR1c0NvZGVzLk5PVF9GT1VORCk7XG4gICAgICAgICAgICBtZXNzYWdlLnNob3VsZC5tYXRjaCgvQSBwcm9ibGVtIG9jY3VycmVkLyk7XG4gICAgICAgICAgICBjb25zdCB7ZXJyb3I6dzNjRXJyb3IsIG1lc3NhZ2U6ZXJyTWVzc2FnZSwgc3RhY2t0cmFjZX0gPSBlcnJvci52YWx1ZTtcbiAgICAgICAgICAgIHczY0Vycm9yLnNob3VsZC5lcXVhbCgnbm8gc3VjaCBlbGVtZW50Jyk7XG4gICAgICAgICAgICBlcnJNZXNzYWdlLnNob3VsZC5tYXRjaCgvQSBwcm9ibGVtIG9jY3VycmVkLyk7XG4gICAgICAgICAgICBzdGFja3RyYWNlLnNob3VsZC5leGlzdDtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGl0KCdzaG91bGQgcmV0dXJuIGVycm9yIGlmIGEgcHJveGllZCByZXF1ZXN0IHJldHVybnMgYSBXM0MgZXJyb3IgcmVzcG9uc2UnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBhZGRIYW5kbGVyKGFwcCwgJ3Bvc3QnLCAnL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvcGVyZm9ybS1hY3Rpb25zJywgKHJlcSwgcmVzKSA9PiB7XG4gICAgICAgICAgICAgIHJlcy5zdGF0dXMoNDA0KS5qc29uKHtcbiAgICAgICAgICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgICAgICAgZXJyb3I6ICdubyBzdWNoIGVsZW1lbnQnLFxuICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ2RvZXMgbm90IG1ha2UgYSBkaWZmZXJlbmNlJyxcbiAgICAgICAgICAgICAgICAgIHN0YWNrdHJhY2U6ICdhcmJpdHJhcnkgc3RhY2t0cmFjZScsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IHtzdGF0dXNDb2RlLCBtZXNzYWdlLCBlcnJvcn0gPSBhd2FpdCByZXF1ZXN0LnBvc3QoYCR7c2Vzc2lvblVybH0vYWN0aW9uc2AsIHtcbiAgICAgICAgICAgICAganNvbjoge1xuICAgICAgICAgICAgICAgIGFjdGlvbnM6IFsxLCAyLCAzXSxcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkuc2hvdWxkLmV2ZW50dWFsbHkuYmUucmVqZWN0ZWQ7XG4gICAgICAgICAgICBzdGF0dXNDb2RlLnNob3VsZC5lcXVhbChIVFRQU3RhdHVzQ29kZXMuTk9UX0ZPVU5EKTtcbiAgICAgICAgICAgIG1lc3NhZ2Uuc2hvdWxkLm1hdGNoKC9kb2VzIG5vdCBtYWtlIGEgZGlmZmVyZW5jZS8pO1xuICAgICAgICAgICAgY29uc3Qge2Vycm9yOnczY0Vycm9yLCBzdGFja3RyYWNlfSA9IGVycm9yLnZhbHVlO1xuICAgICAgICAgICAgdzNjRXJyb3Iuc2hvdWxkLmVxdWFsKCdubyBzdWNoIGVsZW1lbnQnKTtcbiAgICAgICAgICAgIHN0YWNrdHJhY2Uuc2hvdWxkLm1hdGNoKC9hcmJpdHJhcnkgc3RhY2t0cmFjZS8pO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gYW4gZXJyb3IgaWYgYSBwcm94aWVkIHJlcXVlc3QgcmV0dXJucyBhIFczQyBlcnJvciByZXNwb25zZScsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGFkZEhhbmRsZXIoYXBwLCAncG9zdCcsICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC9wZXJmb3JtLWFjdGlvbnMnLCAocmVxLCByZXMpID0+IHtcbiAgICAgICAgICAgICAgcmVzLnN0YXR1cyg0NDQpLmpzb24oe1xuICAgICAgICAgICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgICAgICAgICBlcnJvcjogJ2JvZ3VzIGVycm9yIGNvZGUnLFxuICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ2RvZXMgbm90IG1ha2UgYSBkaWZmZXJlbmNlJyxcbiAgICAgICAgICAgICAgICAgIHN0YWNrdHJhY2U6ICdhcmJpdHJhcnkgc3RhY2t0cmFjZScsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IHtzdGF0dXNDb2RlLCBtZXNzYWdlLCBlcnJvcn0gPSBhd2FpdCByZXF1ZXN0LnBvc3QoYCR7c2Vzc2lvblVybH0vYWN0aW9uc2AsIHtcbiAgICAgICAgICAgICAganNvbjoge1xuICAgICAgICAgICAgICAgIGFjdGlvbnM6IFsxLCAyLCAzXSxcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkuc2hvdWxkLmV2ZW50dWFsbHkuYmUucmVqZWN0ZWQ7XG4gICAgICAgICAgICBzdGF0dXNDb2RlLnNob3VsZC5lcXVhbChIVFRQU3RhdHVzQ29kZXMuSU5URVJOQUxfU0VSVkVSX0VSUk9SKTtcbiAgICAgICAgICAgIG1lc3NhZ2Uuc2hvdWxkLm1hdGNoKC9kb2VzIG5vdCBtYWtlIGEgZGlmZmVyZW5jZS8pO1xuICAgICAgICAgICAgY29uc3Qge2Vycm9yOnczY0Vycm9yLCBzdGFja3RyYWNlfSA9IGVycm9yLnZhbHVlO1xuICAgICAgICAgICAgdzNjRXJyb3Iuc2hvdWxkLmVxdWFsKCd1bmtub3duIGVycm9yJyk7XG4gICAgICAgICAgICBzdGFja3RyYWNlLnNob3VsZC5tYXRjaCgvYXJiaXRyYXJ5IHN0YWNrdHJhY2UvKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGNvbW1hbmRzIHdpdGggbm8gcmVzcG9uc2UgdmFsdWVzJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IHJlcyA9IGF3YWl0IHJlcXVlc3Qoe1xuICAgICAgICB1cmw6ICdodHRwOi8vbG9jYWxob3N0OjgxODEvd2QvaHViL3Nlc3Npb24vZm9vL2ZvcndhcmQnLFxuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgIH0pO1xuICAgICAgcmVzLnNob3VsZC5lcWwoe1xuICAgICAgICBzdGF0dXM6IDAsXG4gICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICBzZXNzaW9uSWQ6IFwiZm9vXCJcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBhbGxvdyBlbXB0eSBzdHJpbmcgcmVzcG9uc2UgdmFsdWVzJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IHJlcyA9IGF3YWl0IHJlcXVlc3Qoe1xuICAgICAgICB1cmw6ICdodHRwOi8vbG9jYWxob3N0OjgxODEvd2QvaHViL3Nlc3Npb24vZm9vL2VsZW1lbnQvYmFyL3RleHQnLFxuICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgfSk7XG4gICAgICByZXMuc2hvdWxkLmVxbCh7XG4gICAgICAgIHN0YXR1czogMCxcbiAgICAgICAgdmFsdWU6IFwiXCIsXG4gICAgICAgIHNlc3Npb25JZDogXCJmb29cIlxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHNlbmQgNTAwIHJlc3BvbnNlIGFuZCBhbiBVbmtub3duIG9iamVjdCBmb3IgcmVqZWN0ZWQgY29tbWFuZHMnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgcmVzID0gYXdhaXQgcmVxdWVzdCh7XG4gICAgICAgIHVybDogJ2h0dHA6Ly9sb2NhbGhvc3Q6ODE4MS93ZC9odWIvc2Vzc2lvbi9mb28vcmVmcmVzaCcsXG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICByZXNvbHZlV2l0aEZ1bGxSZXNwb25zZTogdHJ1ZSxcbiAgICAgICAgc2ltcGxlOiBmYWxzZVxuICAgICAgfSk7XG5cbiAgICAgIHJlcy5zdGF0dXNDb2RlLnNob3VsZC5lcXVhbCg1MDApO1xuICAgICAgcmVzLmJvZHkuc2hvdWxkLmVxbCh7XG4gICAgICAgIHN0YXR1czogMTMsXG4gICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgbWVzc2FnZTogJ0FuIHVua25vd24gc2VydmVyLXNpZGUgZXJyb3Igb2NjdXJyZWQgd2hpbGUgcHJvY2Vzc2luZyAnICtcbiAgICAgICAgICAgICAgICAgICAndGhlIGNvbW1hbmQuIE9yaWdpbmFsIGVycm9yOiBUb28gRnJlc2ghJ1xuICAgICAgICB9LFxuICAgICAgICBzZXNzaW9uSWQ6IFwiZm9vXCJcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBub3QgdGhyb3cgVW5rbm93bkVycm9yIHdoZW4ga25vd24nLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgcmVzID0gYXdhaXQgcmVxdWVzdCh7XG4gICAgICAgIHVybDogJ2h0dHA6Ly9sb2NhbGhvc3Q6ODE4MS93ZC9odWIvc2Vzc2lvbi9mb28nLFxuICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICByZXNvbHZlV2l0aEZ1bGxSZXNwb25zZTogdHJ1ZSxcbiAgICAgICAgc2ltcGxlOiBmYWxzZVxuICAgICAgfSk7XG5cbiAgICAgIHJlcy5zdGF0dXNDb2RlLnNob3VsZC5lcXVhbCg0MDQpO1xuICAgICAgcmVzLmJvZHkuc2hvdWxkLmVxbCh7XG4gICAgICAgIHN0YXR1czogNixcbiAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICBtZXNzYWdlOiAnQSBzZXNzaW9uIGlzIGVpdGhlciB0ZXJtaW5hdGVkIG9yIG5vdCBzdGFydGVkJ1xuICAgICAgICB9LFxuICAgICAgICBzZXNzaW9uSWQ6IFwiZm9vXCJcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnc2Vzc2lvbiBJZHMnLCBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IGRyaXZlciA9IG5ldyBGYWtlRHJpdmVyKCk7XG4gICAgbGV0IG1qc29ud3BTZXJ2ZXI7XG5cbiAgICBiZWZvcmUoYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbWpzb253cFNlcnZlciA9IGF3YWl0IHNlcnZlcihyb3V0ZUNvbmZpZ3VyaW5nRnVuY3Rpb24oZHJpdmVyKSwgODE4MSk7XG4gICAgfSk7XG5cbiAgICBhZnRlcihhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBtanNvbndwU2VydmVyLmNsb3NlKCk7XG4gICAgfSk7XG5cbiAgICBhZnRlckVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgZHJpdmVyLnNlc3Npb25JZCA9IG51bGw7XG4gICAgfSk7XG5cbiAgICBpdCgncmV0dXJucyBudWxsIFNlc3Npb25JZCBmb3IgY29tbWFuZHMgd2l0aG91dCBzZXNzaW9uSWRzJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IHJlcyA9IGF3YWl0IHJlcXVlc3Qoe1xuICAgICAgICB1cmw6ICdodHRwOi8vbG9jYWxob3N0OjgxODEvd2QvaHViL3N0YXR1cycsXG4gICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgIGpzb246IHRydWUsXG4gICAgICB9KTtcblxuICAgICAgc2hvdWxkLmVxdWFsKHJlcy5zZXNzaW9uSWQsIG51bGwpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Jlc3BvbmRzIHdpdGggdGhlIHNhbWUgc2Vzc2lvbiBJRCBpbiB0aGUgcmVxdWVzdCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBzZXNzaW9uSWQgPSAnVmFkZXIgU2Vzc2lvbnMnO1xuICAgICAgZHJpdmVyLnNlc3Npb25JZCA9IHNlc3Npb25JZDtcblxuICAgICAgbGV0IHJlcyA9IGF3YWl0IHJlcXVlc3Qoe1xuICAgICAgICB1cmw6IGBodHRwOi8vbG9jYWxob3N0OjgxODEvd2QvaHViL3Nlc3Npb24vJHtzZXNzaW9uSWR9L3VybGAsXG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBqc29uOiB7dXJsOiAnaHR0cDovL2dvb2dsZS5jb20nfVxuICAgICAgfSk7XG5cbiAgICAgIHNob3VsZC5leGlzdChyZXMuc2Vzc2lvbklkKTtcbiAgICAgIHJlcy5zZXNzaW9uSWQuc2hvdWxkLmVxbChzZXNzaW9uSWQpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3llbGxzIGlmIG5vIHNlc3Npb24gZXhpc3RzJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IHNlc3Npb25JZCA9ICdWYWRlciBTZXNzaW9ucyc7XG5cbiAgICAgIGxldCByZXMgPSBhd2FpdCByZXF1ZXN0KHtcbiAgICAgICAgdXJsOiBgaHR0cDovL2xvY2FsaG9zdDo4MTgxL3dkL2h1Yi9zZXNzaW9uLyR7c2Vzc2lvbklkfS91cmxgLFxuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAganNvbjoge3VybDogJ2h0dHA6Ly9nb29nbGUuY29tJ30sXG4gICAgICAgIHJlc29sdmVXaXRoRnVsbFJlc3BvbnNlOiB0cnVlLFxuICAgICAgICBzaW1wbGU6IGZhbHNlXG4gICAgICB9KTtcblxuICAgICAgcmVzLnN0YXR1c0NvZGUuc2hvdWxkLmVxdWFsKDQwNCk7XG4gICAgICByZXMuYm9keS5zdGF0dXMuc2hvdWxkLmVxdWFsKDYpO1xuICAgICAgcmVzLmJvZHkudmFsdWUubWVzc2FnZS5zaG91bGQuY29udGFpbignc2Vzc2lvbicpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3llbGxzIGlmIGludmFsaWQgc2Vzc2lvbiBpcyBzZW50JywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IHNlc3Npb25JZCA9ICdWYWRlciBTZXNzaW9ucyc7XG4gICAgICBkcml2ZXIuc2Vzc2lvbklkID0gJ3JlY2Vzc2lvbic7XG5cbiAgICAgIGxldCByZXMgPSBhd2FpdCByZXF1ZXN0KHtcbiAgICAgICAgdXJsOiBgaHR0cDovL2xvY2FsaG9zdDo4MTgxL3dkL2h1Yi9zZXNzaW9uLyR7c2Vzc2lvbklkfS91cmxgLFxuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAganNvbjoge3VybDogJ2h0dHA6Ly9nb29nbGUuY29tJ30sXG4gICAgICAgIHJlc29sdmVXaXRoRnVsbFJlc3BvbnNlOiB0cnVlLFxuICAgICAgICBzaW1wbGU6IGZhbHNlXG4gICAgICB9KTtcblxuICAgICAgcmVzLnN0YXR1c0NvZGUuc2hvdWxkLmVxdWFsKDQwNCk7XG4gICAgICByZXMuYm9keS5zdGF0dXMuc2hvdWxkLmVxdWFsKDYpO1xuICAgICAgcmVzLmJvZHkudmFsdWUubWVzc2FnZS5zaG91bGQuY29udGFpbignc2Vzc2lvbicpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYXZlIHNlc3Npb24gSURzIGluIGVycm9yIHJlc3BvbnNlcycsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBzZXNzaW9uSWQgPSAnVmFkZXIgU2Vzc2lvbnMnO1xuICAgICAgZHJpdmVyLnNlc3Npb25JZCA9IHNlc3Npb25JZDtcblxuICAgICAgbGV0IHJlcyA9IGF3YWl0IHJlcXVlc3Qoe1xuICAgICAgICB1cmw6IGBodHRwOi8vbG9jYWxob3N0OjgxODEvd2QvaHViL3Nlc3Npb24vJHtzZXNzaW9uSWR9L3JlZnJlc2hgLFxuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgcmVzb2x2ZVdpdGhGdWxsUmVzcG9uc2U6IHRydWUsXG4gICAgICAgIHNpbXBsZTogZmFsc2VcbiAgICAgIH0pO1xuXG4gICAgICByZXMuc3RhdHVzQ29kZS5zaG91bGQuZXF1YWwoNTAwKTtcbiAgICAgIHJlcy5ib2R5LnNob3VsZC5lcWwoe1xuICAgICAgICBzdGF0dXM6IDEzLFxuICAgICAgICB2YWx1ZToge1xuICAgICAgICAgIG1lc3NhZ2U6ICdBbiB1bmtub3duIHNlcnZlci1zaWRlIGVycm9yIG9jY3VycmVkIHdoaWxlIHByb2Nlc3NpbmcgJyArXG4gICAgICAgICAgICAgICAgICAgJ3RoZSBjb21tYW5kLiBPcmlnaW5hbCBlcnJvcjogVG9vIEZyZXNoISdcbiAgICAgICAgfSxcbiAgICAgICAgc2Vzc2lvbklkXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmV0dXJuIGEgbmV3IHNlc3Npb24gSUQgb24gY3JlYXRlJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuXG4gICAgICBsZXQgcmVzID0gYXdhaXQgcmVxdWVzdCh7XG4gICAgICAgIHVybDogJ2h0dHA6Ly9sb2NhbGhvc3Q6ODE4MS93ZC9odWIvc2Vzc2lvbicsXG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBqc29uOiB7ZGVzaXJlZENhcGFiaWxpdGllczoge2dyZWV0aW5nOiAnaGVsbG8nfSwgcmVxdWlyZWRDYXBhYmlsaXRpZXM6IHt2YWxlZGljdGlvbjogJ2J5ZSd9fVxuICAgICAgfSk7XG5cbiAgICAgIHNob3VsZC5leGlzdChyZXMuc2Vzc2lvbklkKTtcbiAgICAgIHJlcy5zZXNzaW9uSWQuc2hvdWxkLmVxdWFsKCcxMjM0Jyk7XG4gICAgICByZXMudmFsdWUuc2hvdWxkLmVxbCh7Z3JlZXRpbmc6ICdoZWxsbycsIHZhbGVkaWN0aW9uOiAnYnllJ30pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgndmlhIGRyaXZlcnMganNvbndwIHByb3h5JywgZnVuY3Rpb24gKCkge1xuICAgIGxldCBkcml2ZXI7XG4gICAgbGV0IHNlc3Npb25JZCA9ICdmb28nO1xuICAgIGxldCBtanNvbndwU2VydmVyO1xuXG4gICAgYmVmb3JlRWFjaChhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBkcml2ZXIgPSBuZXcgRmFrZURyaXZlcigpO1xuICAgICAgZHJpdmVyLnNlc3Npb25JZCA9IHNlc3Npb25JZDtcbiAgICAgIGRyaXZlci5wcm94eUFjdGl2ZSA9ICgpID0+IHsgcmV0dXJuIHRydWU7IH07XG4gICAgICBkcml2ZXIuY2FuUHJveHkgPSAoKSA9PiB7IHJldHVybiB0cnVlOyB9O1xuXG4gICAgICBtanNvbndwU2VydmVyID0gYXdhaXQgc2VydmVyKHJvdXRlQ29uZmlndXJpbmdGdW5jdGlvbihkcml2ZXIpLCA4MTgxKTtcbiAgICB9KTtcblxuICAgIGFmdGVyRWFjaChhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBtanNvbndwU2VydmVyLmNsb3NlKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGdpdmUgYSBuaWNlIGVycm9yIGlmIHByb3h5aW5nIGlzIHNldCBidXQgbm8gcHJveHkgZnVuY3Rpb24gZXhpc3RzJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgZHJpdmVyLmNhblByb3h5ID0gKCkgPT4geyByZXR1cm4gZmFsc2U7IH07XG4gICAgICBsZXQgcmVzID0gYXdhaXQgcmVxdWVzdCh7XG4gICAgICAgIHVybDogYGh0dHA6Ly9sb2NhbGhvc3Q6ODE4MS93ZC9odWIvc2Vzc2lvbi8ke3Nlc3Npb25JZH0vdXJsYCxcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGpzb246IHt1cmw6ICdodHRwOi8vZ29vZ2xlLmNvbSd9LFxuICAgICAgICByZXNvbHZlV2l0aEZ1bGxSZXNwb25zZTogdHJ1ZSxcbiAgICAgICAgc2ltcGxlOiBmYWxzZVxuICAgICAgfSk7XG5cbiAgICAgIHJlcy5zdGF0dXNDb2RlLnNob3VsZC5lcXVhbCg1MDApO1xuICAgICAgcmVzLmJvZHkuc2hvdWxkLmVxbCh7XG4gICAgICAgIHN0YXR1czogMTMsXG4gICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgbWVzc2FnZTogJ0FuIHVua25vd24gc2VydmVyLXNpZGUgZXJyb3Igb2NjdXJyZWQgd2hpbGUgcHJvY2Vzc2luZyAnICtcbiAgICAgICAgICAgICAgICAgICAndGhlIGNvbW1hbmQuIE9yaWdpbmFsIGVycm9yOiBUcnlpbmcgdG8gcHJveHkgdG8gYSBKU09OV1AgJyArXG4gICAgICAgICAgICAgICAgICAgJ3NlcnZlciBidXQgZHJpdmVyIGlzIHVuYWJsZSB0byBwcm94eSdcbiAgICAgICAgfSxcbiAgICAgICAgc2Vzc2lvbklkXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcGFzcyBvbiBhbnkgZXJyb3JzIGluIHByb3h5aW5nJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgZHJpdmVyLnByb3h5UmVxUmVzID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJmb29cIik7XG4gICAgICB9O1xuICAgICAgbGV0IHJlcyA9IGF3YWl0IHJlcXVlc3Qoe1xuICAgICAgICB1cmw6IGBodHRwOi8vbG9jYWxob3N0OjgxODEvd2QvaHViL3Nlc3Npb24vJHtzZXNzaW9uSWR9L3VybGAsXG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBqc29uOiB7dXJsOiAnaHR0cDovL2dvb2dsZS5jb20nfSxcbiAgICAgICAgcmVzb2x2ZVdpdGhGdWxsUmVzcG9uc2U6IHRydWUsXG4gICAgICAgIHNpbXBsZTogZmFsc2VcbiAgICAgIH0pO1xuXG4gICAgICByZXMuc3RhdHVzQ29kZS5zaG91bGQuZXF1YWwoNTAwKTtcbiAgICAgIHJlcy5ib2R5LnNob3VsZC5lcWwoe1xuICAgICAgICBzdGF0dXM6IDEzLFxuICAgICAgICB2YWx1ZToge1xuICAgICAgICAgIG1lc3NhZ2U6ICdBbiB1bmtub3duIHNlcnZlci1zaWRlIGVycm9yIG9jY3VycmVkIHdoaWxlIHByb2Nlc3NpbmcgJyArXG4gICAgICAgICAgICAgICAgICAgJ3RoZSBjb21tYW5kLiBPcmlnaW5hbCBlcnJvcjogQ291bGQgbm90IHByb3h5LiBQcm94eSAnICtcbiAgICAgICAgICAgICAgICAgICAnZXJyb3I6IGZvbydcbiAgICAgICAgfSxcbiAgICAgICAgc2Vzc2lvbklkXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgYWJsZSB0byB0aHJvdyBQcm94eVJlcXVlc3RFcnJvciBpbiBwcm94eWluZycsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGRyaXZlci5wcm94eVJlcVJlcyA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbGV0IGpzb253cCA9IHtzdGF0dXM6IDM1LCB2YWx1ZTogXCJObyBzdWNoIGNvbnRleHQgZm91bmQuXCIsIHNlc3Npb25JZDogXCJmb29cIn07XG4gICAgICAgIHRocm93ICBuZXcgZXJyb3JzLlByb3h5UmVxdWVzdEVycm9yKGBDb3VsZCBub3QgcHJveHkgY29tbWFuZCB0byByZW1vdGUgc2VydmVyLiBgLCBqc29ud3ApO1xuICAgICAgfTtcbiAgICAgIGxldCByZXMgPSBhd2FpdCByZXF1ZXN0KHtcbiAgICAgICAgdXJsOiBgaHR0cDovL2xvY2FsaG9zdDo4MTgxL3dkL2h1Yi9zZXNzaW9uLyR7c2Vzc2lvbklkfS91cmxgLFxuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAganNvbjoge3VybDogJ2h0dHA6Ly9nb29nbGUuY29tJ30sXG4gICAgICAgIHJlc29sdmVXaXRoRnVsbFJlc3BvbnNlOiB0cnVlLFxuICAgICAgICBzaW1wbGU6IGZhbHNlXG4gICAgICB9KTtcblxuICAgICAgcmVzLnN0YXR1c0NvZGUuc2hvdWxkLmVxdWFsKDUwMCk7XG4gICAgICByZXMuYm9keS5zaG91bGQuZXFsKHtcbiAgICAgICAgc3RhdHVzOiAzNSxcbiAgICAgICAgXCJ2YWx1ZVwiOiB7IFwibWVzc2FnZVwiOiBcIk5vIHN1Y2ggY29udGV4dCBmb3VuZC5cIn0sXG4gICAgICAgIHNlc3Npb25JZDogXCJmb29cIlxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGxldCB0aGUgcHJveHkgaGFuZGxlIHJlcS9yZXMnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBkcml2ZXIucHJveHlSZXFSZXMgPSBhc3luYyBmdW5jdGlvbiAocmVxLCByZXMpIHtcbiAgICAgICAgcmVzLnN0YXR1cygyMDApLmpzb24oe2N1c3RvbTogJ2RhdGEnfSk7XG4gICAgICB9O1xuICAgICAgbGV0IHJlcyA9IGF3YWl0IHJlcXVlc3Qoe1xuICAgICAgICB1cmw6IGBodHRwOi8vbG9jYWxob3N0OjgxODEvd2QvaHViL3Nlc3Npb24vJHtzZXNzaW9uSWR9L3VybGAsXG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBqc29uOiB7dXJsOiAnaHR0cDovL2dvb2dsZS5jb20nfSxcbiAgICAgICAgcmVzb2x2ZVdpdGhGdWxsUmVzcG9uc2U6IHRydWUsXG4gICAgICAgIHNpbXBsZTogZmFsc2VcbiAgICAgIH0pO1xuXG4gICAgICByZXMuc3RhdHVzQ29kZS5zaG91bGQuZXF1YWwoMjAwKTtcbiAgICAgIHJlcy5ib2R5LnNob3VsZC5lcWwoe2N1c3RvbTogJ2RhdGEnfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGF2b2lkIGpzb253cCBwcm94eWluZyB3aGVuIHBhdGggbWF0Y2hlcyBhdm9pZGFuY2UgbGlzdCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGRyaXZlci5nZXRQcm94eUF2b2lkTGlzdCA9ICgpID0+IHsgcmV0dXJuIFtbJ1BPU1QnLCBuZXcgUmVnRXhwKCdeL3Nlc3Npb24vW14vXSsvdXJsJCcpXV07IH07XG4gICAgICBsZXQgcmVzID0gYXdhaXQgcmVxdWVzdCh7XG4gICAgICAgIHVybDogYGh0dHA6Ly9sb2NhbGhvc3Q6ODE4MS93ZC9odWIvc2Vzc2lvbi8ke3Nlc3Npb25JZH0vdXJsYCxcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGpzb246IHt1cmw6ICdodHRwOi8vZ29vZ2xlLmNvbSd9LFxuICAgICAgICByZXNvbHZlV2l0aEZ1bGxSZXNwb25zZTogdHJ1ZSxcbiAgICAgICAgc2ltcGxlOiBmYWxzZVxuICAgICAgfSk7XG5cbiAgICAgIHJlcy5zdGF0dXNDb2RlLnNob3VsZC5lcXVhbCgyMDApO1xuICAgICAgcmVzLmJvZHkuc2hvdWxkLmVxbCh7XG4gICAgICAgIHN0YXR1czogMCxcbiAgICAgICAgdmFsdWU6IFwiTmF2aWdhdGVkIHRvOiBodHRwOi8vZ29vZ2xlLmNvbVwiLFxuICAgICAgICBzZXNzaW9uSWRcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBmYWlsIGlmIGF2b2lkIHByb3h5IGxpc3QgaXMgbWFsZm9ybWVkIGluIHNvbWUgd2F5JywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgYXN5bmMgZnVuY3Rpb24gYmFkUHJveHlBdm9pZGFuY2VMaXN0IChsaXN0KSB7XG4gICAgICAgIGRyaXZlci5nZXRQcm94eUF2b2lkTGlzdCA9ICgpID0+IHsgcmV0dXJuIGxpc3Q7IH07XG4gICAgICAgIGxldCByZXMgPSBhd2FpdCByZXF1ZXN0KHtcbiAgICAgICAgICB1cmw6IGBodHRwOi8vbG9jYWxob3N0OjgxODEvd2QvaHViL3Nlc3Npb24vJHtzZXNzaW9uSWR9L3VybGAsXG4gICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAganNvbjoge3VybDogJ2h0dHA6Ly9nb29nbGUuY29tJ30sXG4gICAgICAgICAgcmVzb2x2ZVdpdGhGdWxsUmVzcG9uc2U6IHRydWUsXG4gICAgICAgICAgc2ltcGxlOiBmYWxzZVxuICAgICAgICB9KTtcblxuICAgICAgICByZXMuc3RhdHVzQ29kZS5zaG91bGQuZXF1YWwoNTAwKTtcbiAgICAgICAgcmVzLmJvZHkuc3RhdHVzLnNob3VsZC5lcXVhbCgxMyk7XG4gICAgICAgIHJlcy5ib2R5LnZhbHVlLm1lc3NhZ2Uuc2hvdWxkLmNvbnRhaW4oXCJyb3h5XCIpO1xuICAgICAgfVxuICAgICAgY29uc3QgbGlzdHMgPSBbXG4gICAgICAgICdmb28nLFxuICAgICAgICBbWydmb28nXV0sXG4gICAgICAgIFtbJ0JBUicsIC9sb2wvXV0sXG4gICAgICAgIFtbJ0dFVCcsICdmb28nXV1cbiAgICAgIF07XG4gICAgICBmb3IgKGxldCBsaXN0IG9mIGxpc3RzKSB7XG4gICAgICAgIGF3YWl0IGJhZFByb3h5QXZvaWRhbmNlTGlzdChsaXN0KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgYXZvaWQgcHJveHlpbmcgbm9uLXNlc3Npb24gY29tbWFuZHMgZXZlbiBpZiBub3QgaW4gdGhlIGxpc3QnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBkcml2ZXIuZ2V0UHJveHlBdm9pZExpc3QgPSAoKSA9PiB7IHJldHVybiBbWydQT1NUJywgbmV3IFJlZ0V4cCgnJyldXTsgfTtcblxuICAgICAgbGV0IHJlcyA9IGF3YWl0IHJlcXVlc3Qoe1xuICAgICAgICB1cmw6IGBodHRwOi8vbG9jYWxob3N0OjgxODEvd2QvaHViL3N0YXR1c2AsXG4gICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgIGpzb246IHRydWUsXG4gICAgICAgIHJlc29sdmVXaXRoRnVsbFJlc3BvbnNlOiB0cnVlLFxuICAgICAgICBzaW1wbGU6IGZhbHNlXG4gICAgICB9KTtcblxuICAgICAgcmVzLnN0YXR1c0NvZGUuc2hvdWxkLmVxdWFsKDIwMCk7XG4gICAgICByZXMuYm9keS5zaG91bGQuZXFsKHtcbiAgICAgICAgc3RhdHVzOiAwLFxuICAgICAgICB2YWx1ZTogXCJJJ20gZmluZVwiLFxuICAgICAgICBzZXNzaW9uSWQ6IG51bGxcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBhdm9pZCBwcm94eWluZyBkZWxldGVTZXNzaW9uIGNvbW1hbmRzJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgZHJpdmVyLmdldFByb3h5QXZvaWRMaXN0ID0gKCkgPT4geyByZXR1cm4gW1snUE9TVCcsIG5ldyBSZWdFeHAoJycpXV07IH07XG5cbiAgICAgIGRyaXZlci5zZXNzaW9uSWQuc2hvdWxkLmVxdWFsKHNlc3Npb25JZCk7XG4gICAgICBsZXQgcmVzID0gYXdhaXQgcmVxdWVzdCh7XG4gICAgICAgIHVybDogYGh0dHA6Ly9sb2NhbGhvc3Q6ODE4MS93ZC9odWIvc2Vzc2lvbi8ke3Nlc3Npb25JZH1gLFxuICAgICAgICBtZXRob2Q6ICdERUxFVEUnLFxuICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICByZXNvbHZlV2l0aEZ1bGxSZXNwb25zZTogdHJ1ZSxcbiAgICAgICAgc2ltcGxlOiBmYWxzZVxuICAgICAgfSk7XG5cbiAgICAgIHJlcy5zdGF0dXNDb2RlLnNob3VsZC5lcXVhbCgyMDApO1xuICAgICAgc2hvdWxkLm5vdC5leGlzdChkcml2ZXIuc2Vzc2lvbklkKTtcbiAgICAgIGRyaXZlci5qd3BQcm94eUFjdGl2ZS5zaG91bGQuYmUuZmFsc2U7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
