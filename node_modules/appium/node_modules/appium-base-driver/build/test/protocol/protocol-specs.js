require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

require('../..');

// NOTE: For some reason this file needs to be imported to prevent a babel error

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _libProtocolProtocol = require('../../lib/protocol/protocol');

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('Protocol', function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:

        describe('#parseProtocol', function () {
          it('should parse {protocol: "MJSONWP"} as MJSONWP', function () {
            (0, _libProtocolProtocol.parseProtocol)({ protocol: 'MJSONWP', value: undefined }).should.eql({ isW3C: false, isMJSONWP: true, value: undefined });
          });
          it('should parse {protocol: "W3C"} as W3C', function () {
            (0, _libProtocolProtocol.parseProtocol)({ protocol: 'W3C', value: undefined }).should.eql({ isW3C: true, isMJSONWP: false, value: undefined });
          });
          it('should parse {protocol: "MJSONWP", value: false} as MJSONWP with value: false', function () {
            (0, _libProtocolProtocol.parseProtocol)({ protocol: 'MJSONWP', value: false }).should.eql({ isW3C: false, isMJSONWP: true, value: false });
          });
          it('should parse {protocol: "W3C", value: 0} as W3C with value: 0', function () {
            (0, _libProtocolProtocol.parseProtocol)({ protocol: 'W3C', value: 0 }).should.eql({ isW3C: true, isMJSONWP: false, value: 0 });
          });
          it('should parse {protocol: "MJSONWP", value: "string"}', function () {
            (0, _libProtocolProtocol.parseProtocol)({ protocol: 'MJSONWP', value: "string" }).should.eql({ isW3C: false, isMJSONWP: true, value: "string" });
          });
          it('should parse {protocol: "W3C", value: {obj}}', function () {
            var value = { hello: 'world', goodbye: 'whirl' };
            (0, _libProtocolProtocol.parseProtocol)({ protocol: 'MJSONWP', value: value }).should.eql({ isW3C: false, isMJSONWP: true, value: value });
          });
          it('should throw if {protocol: "MJSONWP", error}', function () {
            (function () {
              return (0, _libProtocolProtocol.parseProtocol)({ protocol: 'W3C', error: new Error('some error') });
            }).should['throw'](/some error/);
          });
        });

      case 1:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvcHJvdG9jb2wvcHJvdG9jb2wtc3BlY3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7UUFFTyxPQUFPOzs7O29CQUNHLE1BQU07Ozs7OEJBQ0ksa0JBQWtCOzs7O21DQUNmLDZCQUE2Qjs7QUFFM0Qsa0JBQUssTUFBTSxFQUFFLENBQUM7QUFDZCxrQkFBSyxHQUFHLDZCQUFnQixDQUFDOztBQUV6QixRQUFRLENBQUMsVUFBVSxFQUFFOzs7OztBQUVuQixnQkFBUSxDQUFDLGdCQUFnQixFQUFFLFlBQVk7QUFDckMsWUFBRSxDQUFDLCtDQUErQyxFQUFFLFlBQVk7QUFDOUQsb0RBQWMsRUFBQyxRQUFRLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBQyxDQUFDLENBQUM7V0FDdEgsQ0FBQyxDQUFDO0FBQ0gsWUFBRSxDQUFDLHVDQUF1QyxFQUFFLFlBQVk7QUFDdEQsb0RBQWMsRUFBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBQyxDQUFDLENBQUM7V0FDbEgsQ0FBQyxDQUFDO0FBQ0gsWUFBRSxDQUFDLCtFQUErRSxFQUFFLFlBQVk7QUFDOUYsb0RBQWMsRUFBQyxRQUFRLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQyxDQUFDLENBQUM7V0FDOUcsQ0FBQyxDQUFDO0FBQ0gsWUFBRSxDQUFDLCtEQUErRCxFQUFFLFlBQVk7QUFDOUUsb0RBQWMsRUFBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBQyxDQUFDLENBQUM7V0FDbEcsQ0FBQyxDQUFDO0FBQ0gsWUFBRSxDQUFDLHFEQUFxRCxFQUFFLFlBQVk7QUFDcEUsb0RBQWMsRUFBQyxRQUFRLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBQyxDQUFDLENBQUM7V0FDcEgsQ0FBQyxDQUFDO0FBQ0gsWUFBRSxDQUFDLDhDQUE4QyxFQUFFLFlBQVk7QUFDN0QsZ0JBQU0sS0FBSyxHQUFHLEVBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFDLENBQUM7QUFDakQsb0RBQWMsRUFBQyxRQUFRLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBTCxLQUFLLEVBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFMLEtBQUssRUFBQyxDQUFDLENBQUM7V0FDaEcsQ0FBQyxDQUFDO0FBQ0gsWUFBRSxDQUFDLDhDQUE4QyxFQUFFLFlBQVk7QUFDN0QsYUFBQztxQkFBTSx3Q0FBYyxFQUFDLFFBQVEsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksS0FBSyxDQUFDLFlBQVksQ0FBQyxFQUFDLENBQUM7Y0FBQSxDQUFFLE1BQU0sU0FBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO1dBQ3JHLENBQUMsQ0FBQztTQUNKLENBQUMsQ0FBQzs7Ozs7OztDQUNKLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L3Byb3RvY29sL3Byb3RvY29sLXNwZWNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHJhbnNwaWxlOm1vY2hhXG5cbmltcG9ydCAnLi4vLi4nOyAvLyBOT1RFOiBGb3Igc29tZSByZWFzb24gdGhpcyBmaWxlIG5lZWRzIHRvIGJlIGltcG9ydGVkIHRvIHByZXZlbnQgYSBiYWJlbCBlcnJvclxuaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XG5pbXBvcnQgY2hhaUFzUHJvbWlzZWQgZnJvbSAnY2hhaS1hcy1wcm9taXNlZCc7XG5pbXBvcnQgeyBwYXJzZVByb3RvY29sIH0gZnJvbSAnLi4vLi4vbGliL3Byb3RvY29sL3Byb3RvY29sJztcblxuY2hhaS5zaG91bGQoKTtcbmNoYWkudXNlKGNoYWlBc1Byb21pc2VkKTtcblxuZGVzY3JpYmUoJ1Byb3RvY29sJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuXG4gIGRlc2NyaWJlKCcjcGFyc2VQcm90b2NvbCcsIGZ1bmN0aW9uICgpIHtcbiAgICBpdCgnc2hvdWxkIHBhcnNlIHtwcm90b2NvbDogXCJNSlNPTldQXCJ9IGFzIE1KU09OV1AnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBwYXJzZVByb3RvY29sKHtwcm90b2NvbDogJ01KU09OV1AnLCB2YWx1ZTogdW5kZWZpbmVkfSkuc2hvdWxkLmVxbCh7aXNXM0M6IGZhbHNlLCBpc01KU09OV1A6IHRydWUsIHZhbHVlOiB1bmRlZmluZWR9KTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHBhcnNlIHtwcm90b2NvbDogXCJXM0NcIn0gYXMgVzNDJywgZnVuY3Rpb24gKCkge1xuICAgICAgcGFyc2VQcm90b2NvbCh7cHJvdG9jb2w6ICdXM0MnLCB2YWx1ZTogdW5kZWZpbmVkfSkuc2hvdWxkLmVxbCh7aXNXM0M6IHRydWUsIGlzTUpTT05XUDogZmFsc2UsIHZhbHVlOiB1bmRlZmluZWR9KTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHBhcnNlIHtwcm90b2NvbDogXCJNSlNPTldQXCIsIHZhbHVlOiBmYWxzZX0gYXMgTUpTT05XUCB3aXRoIHZhbHVlOiBmYWxzZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHBhcnNlUHJvdG9jb2woe3Byb3RvY29sOiAnTUpTT05XUCcsIHZhbHVlOiBmYWxzZX0pLnNob3VsZC5lcWwoe2lzVzNDOiBmYWxzZSwgaXNNSlNPTldQOiB0cnVlLCB2YWx1ZTogZmFsc2V9KTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHBhcnNlIHtwcm90b2NvbDogXCJXM0NcIiwgdmFsdWU6IDB9IGFzIFczQyB3aXRoIHZhbHVlOiAwJywgZnVuY3Rpb24gKCkge1xuICAgICAgcGFyc2VQcm90b2NvbCh7cHJvdG9jb2w6ICdXM0MnLCB2YWx1ZTogMH0pLnNob3VsZC5lcWwoe2lzVzNDOiB0cnVlLCBpc01KU09OV1A6IGZhbHNlLCB2YWx1ZTogMH0pO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgcGFyc2Uge3Byb3RvY29sOiBcIk1KU09OV1BcIiwgdmFsdWU6IFwic3RyaW5nXCJ9JywgZnVuY3Rpb24gKCkge1xuICAgICAgcGFyc2VQcm90b2NvbCh7cHJvdG9jb2w6ICdNSlNPTldQJywgdmFsdWU6IFwic3RyaW5nXCJ9KS5zaG91bGQuZXFsKHtpc1czQzogZmFsc2UsIGlzTUpTT05XUDogdHJ1ZSwgdmFsdWU6IFwic3RyaW5nXCJ9KTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHBhcnNlIHtwcm90b2NvbDogXCJXM0NcIiwgdmFsdWU6IHtvYmp9fScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0ge2hlbGxvOiAnd29ybGQnLCBnb29kYnllOiAnd2hpcmwnfTtcbiAgICAgIHBhcnNlUHJvdG9jb2woe3Byb3RvY29sOiAnTUpTT05XUCcsIHZhbHVlfSkuc2hvdWxkLmVxbCh7aXNXM0M6IGZhbHNlLCBpc01KU09OV1A6IHRydWUsIHZhbHVlfSk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCB0aHJvdyBpZiB7cHJvdG9jb2w6IFwiTUpTT05XUFwiLCBlcnJvcn0nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAoKCkgPT4gcGFyc2VQcm90b2NvbCh7cHJvdG9jb2w6ICdXM0MnLCBlcnJvcjogbmV3IEVycm9yKCdzb21lIGVycm9yJyl9KSkuc2hvdWxkLnRocm93KC9zb21lIGVycm9yLyk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
