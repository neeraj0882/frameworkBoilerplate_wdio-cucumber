require('source-map-support').install();

'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _lodash = require('lodash');

var _libProtocolRoutes = require('../../lib/protocol/routes');

var _crypto = require('crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

_chai2['default'].should();

describe('Protocol', function () {

  // TODO test against an explicit protocol rather than a hash of a previous
  // protocol

  describe('ensure protocol consistency', function () {
    it('should not change protocol between patch versions', function callee$2$0() {
      var shasum, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step$value, url, urlMapping, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _step2$value, method, methodMapping, allParams, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, param, hash;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            shasum = _crypto2['default'].createHash('sha1');
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            context$3$0.prev = 4;
            _iterator = _getIterator(_lodash._.toPairs(_libProtocolRoutes.METHOD_MAP));

          case 6:
            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
              context$3$0.next = 65;
              break;
            }

            _step$value = _slicedToArray(_step.value, 2);
            url = _step$value[0];
            urlMapping = _step$value[1];

            shasum.update(url);
            _iteratorNormalCompletion2 = true;
            _didIteratorError2 = false;
            _iteratorError2 = undefined;
            context$3$0.prev = 14;
            _iterator2 = _getIterator(_lodash._.toPairs(urlMapping));

          case 16:
            if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
              context$3$0.next = 48;
              break;
            }

            _step2$value = _slicedToArray(_step2.value, 2);
            method = _step2$value[0];
            methodMapping = _step2$value[1];

            shasum.update(method);
            if (methodMapping.command) {
              shasum.update(methodMapping.command);
            }

            if (!methodMapping.payloadParams) {
              context$3$0.next = 45;
              break;
            }

            allParams = _lodash._.flatten(methodMapping.payloadParams.required);

            if (methodMapping.payloadParams.optional) {
              allParams = allParams.concat(_lodash._.flatten(methodMapping.payloadParams.optional));
            }
            _iteratorNormalCompletion3 = true;
            _didIteratorError3 = false;
            _iteratorError3 = undefined;
            context$3$0.prev = 28;
            for (_iterator3 = _getIterator(allParams); !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              param = _step3.value;

              shasum.update(param);
            }
            context$3$0.next = 36;
            break;

          case 32:
            context$3$0.prev = 32;
            context$3$0.t0 = context$3$0['catch'](28);
            _didIteratorError3 = true;
            _iteratorError3 = context$3$0.t0;

          case 36:
            context$3$0.prev = 36;
            context$3$0.prev = 37;

            if (!_iteratorNormalCompletion3 && _iterator3['return']) {
              _iterator3['return']();
            }

          case 39:
            context$3$0.prev = 39;

            if (!_didIteratorError3) {
              context$3$0.next = 42;
              break;
            }

            throw _iteratorError3;

          case 42:
            return context$3$0.finish(39);

          case 43:
            return context$3$0.finish(36);

          case 44:
            if (methodMapping.payloadParams.wrap) {
              shasum.update('skip');
              shasum.update(methodMapping.payloadParams.wrap);
            }

          case 45:
            _iteratorNormalCompletion2 = true;
            context$3$0.next = 16;
            break;

          case 48:
            context$3$0.next = 54;
            break;

          case 50:
            context$3$0.prev = 50;
            context$3$0.t1 = context$3$0['catch'](14);
            _didIteratorError2 = true;
            _iteratorError2 = context$3$0.t1;

          case 54:
            context$3$0.prev = 54;
            context$3$0.prev = 55;

            if (!_iteratorNormalCompletion2 && _iterator2['return']) {
              _iterator2['return']();
            }

          case 57:
            context$3$0.prev = 57;

            if (!_didIteratorError2) {
              context$3$0.next = 60;
              break;
            }

            throw _iteratorError2;

          case 60:
            return context$3$0.finish(57);

          case 61:
            return context$3$0.finish(54);

          case 62:
            _iteratorNormalCompletion = true;
            context$3$0.next = 6;
            break;

          case 65:
            context$3$0.next = 71;
            break;

          case 67:
            context$3$0.prev = 67;
            context$3$0.t2 = context$3$0['catch'](4);
            _didIteratorError = true;
            _iteratorError = context$3$0.t2;

          case 71:
            context$3$0.prev = 71;
            context$3$0.prev = 72;

            if (!_iteratorNormalCompletion && _iterator['return']) {
              _iterator['return']();
            }

          case 74:
            context$3$0.prev = 74;

            if (!_didIteratorError) {
              context$3$0.next = 77;
              break;
            }

            throw _iteratorError;

          case 77:
            return context$3$0.finish(74);

          case 78:
            return context$3$0.finish(71);

          case 79:
            hash = shasum.digest('hex').substring(0, 8);

            // Modify the hash whenever the protocol has intentionally been modified.
            hash.should.equal('28048f99');

          case 81:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this, [[4, 67, 71, 79], [14, 50, 54, 62], [28, 32, 36, 44], [37,, 39, 43], [55,, 57, 61], [72,, 74, 78]]);
    });
  });

  describe('check route to command name conversion', function () {
    it('should properly lookup correct command name for endpoint with session', function () {
      var cmdName = (0, _libProtocolRoutes.routeToCommandName)('/timeouts', 'POST');
      cmdName.should.equal('timeouts');
    });

    it('should properly lookup correct command name for endpoint with session', function () {
      var cmdName = (0, _libProtocolRoutes.routeToCommandName)('/timeouts/implicit_wait', 'POST');
      cmdName.should.equal('implicitWait');
    });

    it('should properly lookup correct command name for endpoint without session', function () {
      var cmdName = (0, _libProtocolRoutes.routeToCommandName)('/status', 'GET');
      cmdName.should.equal('getStatus');
    });

    it('should properly lookup correct command name for endpoint without leading slash', function () {
      var cmdName = (0, _libProtocolRoutes.routeToCommandName)('status', 'GET');
      cmdName.should.equal('getStatus');
    });

    it('should properly lookup correct command name for fully specified endpoint', function () {
      var cmdName = (0, _libProtocolRoutes.routeToCommandName)('/wd/hub/status', 'GET');
      cmdName.should.equal('getStatus');
    });

    it('should not find command name if incorrect input data has been specified', function () {
      var _arr = [['/wd/hub/status', 'POST'], ['/xstatus', 'GET'], ['status', 'POST']];

      for (var _i = 0; _i < _arr.length; _i++) {
        var _arr$_i = _slicedToArray(_arr[_i], 2);

        var route = _arr$_i[0];
        var method = _arr$_i[1];

        var cmdName = (0, _libProtocolRoutes.routeToCommandName)(route, method);
        _chai2['default'].should().equal(cmdName, undefined);
      }
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvcHJvdG9jb2wvcm91dGVzLXNwZWNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztzQkFFa0IsUUFBUTs7aUNBQ3FCLDJCQUEyQjs7c0JBQ3ZELFFBQVE7Ozs7b0JBQ1YsTUFBTTs7OztBQUd2QixrQkFBSyxNQUFNLEVBQUUsQ0FBQzs7QUFFZCxRQUFRLENBQUMsVUFBVSxFQUFFLFlBQVk7Ozs7O0FBSy9CLFVBQVEsQ0FBQyw2QkFBNkIsRUFBRSxZQUFZO0FBQ2xELE1BQUUsQ0FBQyxtREFBbUQsRUFBRTtVQUNsRCxNQUFNLCtGQUNBLEdBQUcsRUFBRSxVQUFVLHFHQUViLE1BQU0sRUFBRSxhQUFhLEVBTXZCLFNBQVMsdUZBSUosS0FBSyxFQVVoQixJQUFJOzs7OztBQXZCSixrQkFBTSxHQUFHLG9CQUFPLFVBQVUsQ0FBQyxNQUFNLENBQUM7Ozs7O3FDQUNSLFVBQUUsT0FBTywrQkFBWTs7Ozs7Ozs7O0FBQXpDLGVBQUc7QUFBRSxzQkFBVTs7QUFDdkIsa0JBQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7Ozs7O3NDQUNpQixVQUFFLE9BQU8sQ0FBQyxVQUFVLENBQUM7Ozs7Ozs7OztBQUEvQyxrQkFBTTtBQUFFLHlCQUFhOztBQUM3QixrQkFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN0QixnQkFBSSxhQUFhLENBQUMsT0FBTyxFQUFFO0FBQ3pCLG9CQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUN0Qzs7aUJBQ0csYUFBYSxDQUFDLGFBQWE7Ozs7O0FBQ3pCLHFCQUFTLEdBQUcsVUFBRSxPQUFPLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUM7O0FBQy9ELGdCQUFJLGFBQWEsQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFO0FBQ3hDLHVCQUFTLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxVQUFFLE9BQU8sQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7YUFDL0U7Ozs7O0FBQ0QsMkNBQWtCLFNBQVMseUdBQUU7QUFBcEIsbUJBQUs7O0FBQ1osb0JBQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDdEI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0QsZ0JBQUksYUFBYSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUU7QUFDcEMsb0JBQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDdEIsb0JBQU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNqRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBSUgsZ0JBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDOzs7QUFFL0MsZ0JBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDOzs7Ozs7O0tBQy9CLENBQUMsQ0FBQztHQUNKLENBQUMsQ0FBQzs7QUFFSCxVQUFRLENBQUMsd0NBQXdDLEVBQUUsWUFBWTtBQUM3RCxNQUFFLENBQUMsdUVBQXVFLEVBQUUsWUFBWTtBQUN0RixVQUFNLE9BQU8sR0FBRywyQ0FBbUIsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3hELGFBQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0tBQ2xDLENBQUMsQ0FBQzs7QUFFSCxNQUFFLENBQUMsdUVBQXVFLEVBQUUsWUFBWTtBQUN0RixVQUFNLE9BQU8sR0FBRywyQ0FBbUIseUJBQXlCLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDdEUsYUFBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7S0FDdEMsQ0FBQyxDQUFDOztBQUVILE1BQUUsQ0FBQywwRUFBMEUsRUFBRSxZQUFZO0FBQ3pGLFVBQU0sT0FBTyxHQUFHLDJDQUFtQixTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDckQsYUFBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7S0FDbkMsQ0FBQyxDQUFDOztBQUVILE1BQUUsQ0FBQyxnRkFBZ0YsRUFBRSxZQUFZO0FBQy9GLFVBQU0sT0FBTyxHQUFHLDJDQUFtQixRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDcEQsYUFBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7S0FDbkMsQ0FBQyxDQUFDOztBQUVILE1BQUUsQ0FBQywwRUFBMEUsRUFBRSxZQUFZO0FBQ3pGLFVBQU0sT0FBTyxHQUFHLDJDQUFtQixnQkFBZ0IsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUM1RCxhQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztLQUNuQyxDQUFDLENBQUM7O0FBRUgsTUFBRSxDQUFDLHlFQUF5RSxFQUFFLFlBQVk7aUJBQzVELENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxNQUFNLENBQUMsRUFDMUIsQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLEVBQ25CLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDOztBQUZoRCwrQ0FFa0Q7OztZQUZ4QyxLQUFLO1lBQUUsTUFBTTs7QUFHckIsWUFBTSxPQUFPLEdBQUcsMkNBQW1CLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNsRCwwQkFBSyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDO09BQ3pDO0tBQ0YsQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDO0NBRUosQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3QvcHJvdG9jb2wvcm91dGVzLXNwZWNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHJhbnNwaWxlOm1vY2hhXG5cbmltcG9ydCB7IF8gfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgTUVUSE9EX01BUCwgcm91dGVUb0NvbW1hbmROYW1lIH0gZnJvbSAnLi4vLi4vbGliL3Byb3RvY29sL3JvdXRlcyc7XG5pbXBvcnQgY3J5cHRvIGZyb20gJ2NyeXB0byc7XG5pbXBvcnQgY2hhaSBmcm9tICdjaGFpJztcblxuXG5jaGFpLnNob3VsZCgpO1xuXG5kZXNjcmliZSgnUHJvdG9jb2wnLCBmdW5jdGlvbiAoKSB7XG5cbiAgLy8gVE9ETyB0ZXN0IGFnYWluc3QgYW4gZXhwbGljaXQgcHJvdG9jb2wgcmF0aGVyIHRoYW4gYSBoYXNoIG9mIGEgcHJldmlvdXNcbiAgLy8gcHJvdG9jb2xcblxuICBkZXNjcmliZSgnZW5zdXJlIHByb3RvY29sIGNvbnNpc3RlbmN5JywgZnVuY3Rpb24gKCkge1xuICAgIGl0KCdzaG91bGQgbm90IGNoYW5nZSBwcm90b2NvbCBiZXR3ZWVuIHBhdGNoIHZlcnNpb25zJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IHNoYXN1bSA9IGNyeXB0by5jcmVhdGVIYXNoKCdzaGExJyk7XG4gICAgICBmb3IgKGxldCBbdXJsLCB1cmxNYXBwaW5nXSBvZiBfLnRvUGFpcnMoTUVUSE9EX01BUCkpIHtcbiAgICAgICAgc2hhc3VtLnVwZGF0ZSh1cmwpO1xuICAgICAgICBmb3IgKGxldCBbbWV0aG9kLCBtZXRob2RNYXBwaW5nXSBvZiBfLnRvUGFpcnModXJsTWFwcGluZykpIHtcbiAgICAgICAgICBzaGFzdW0udXBkYXRlKG1ldGhvZCk7XG4gICAgICAgICAgaWYgKG1ldGhvZE1hcHBpbmcuY29tbWFuZCkge1xuICAgICAgICAgICAgc2hhc3VtLnVwZGF0ZShtZXRob2RNYXBwaW5nLmNvbW1hbmQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobWV0aG9kTWFwcGluZy5wYXlsb2FkUGFyYW1zKSB7XG4gICAgICAgICAgICBsZXQgYWxsUGFyYW1zID0gXy5mbGF0dGVuKG1ldGhvZE1hcHBpbmcucGF5bG9hZFBhcmFtcy5yZXF1aXJlZCk7XG4gICAgICAgICAgICBpZiAobWV0aG9kTWFwcGluZy5wYXlsb2FkUGFyYW1zLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICAgIGFsbFBhcmFtcyA9IGFsbFBhcmFtcy5jb25jYXQoXy5mbGF0dGVuKG1ldGhvZE1hcHBpbmcucGF5bG9hZFBhcmFtcy5vcHRpb25hbCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChsZXQgcGFyYW0gb2YgYWxsUGFyYW1zKSB7XG4gICAgICAgICAgICAgIHNoYXN1bS51cGRhdGUocGFyYW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1ldGhvZE1hcHBpbmcucGF5bG9hZFBhcmFtcy53cmFwKSB7XG4gICAgICAgICAgICAgIHNoYXN1bS51cGRhdGUoJ3NraXAnKTtcbiAgICAgICAgICAgICAgc2hhc3VtLnVwZGF0ZShtZXRob2RNYXBwaW5nLnBheWxvYWRQYXJhbXMud3JhcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsZXQgaGFzaCA9IHNoYXN1bS5kaWdlc3QoJ2hleCcpLnN1YnN0cmluZygwLCA4KTtcbiAgICAgIC8vIE1vZGlmeSB0aGUgaGFzaCB3aGVuZXZlciB0aGUgcHJvdG9jb2wgaGFzIGludGVudGlvbmFsbHkgYmVlbiBtb2RpZmllZC5cbiAgICAgIGhhc2guc2hvdWxkLmVxdWFsKCcyODA0OGY5OScpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnY2hlY2sgcm91dGUgdG8gY29tbWFuZCBuYW1lIGNvbnZlcnNpb24nLCBmdW5jdGlvbiAoKSB7XG4gICAgaXQoJ3Nob3VsZCBwcm9wZXJseSBsb29rdXAgY29ycmVjdCBjb21tYW5kIG5hbWUgZm9yIGVuZHBvaW50IHdpdGggc2Vzc2lvbicsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGNtZE5hbWUgPSByb3V0ZVRvQ29tbWFuZE5hbWUoJy90aW1lb3V0cycsICdQT1NUJyk7XG4gICAgICBjbWROYW1lLnNob3VsZC5lcXVhbCgndGltZW91dHMnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcHJvcGVybHkgbG9va3VwIGNvcnJlY3QgY29tbWFuZCBuYW1lIGZvciBlbmRwb2ludCB3aXRoIHNlc3Npb24nLCBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBjbWROYW1lID0gcm91dGVUb0NvbW1hbmROYW1lKCcvdGltZW91dHMvaW1wbGljaXRfd2FpdCcsICdQT1NUJyk7XG4gICAgICBjbWROYW1lLnNob3VsZC5lcXVhbCgnaW1wbGljaXRXYWl0Jyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHByb3Blcmx5IGxvb2t1cCBjb3JyZWN0IGNvbW1hbmQgbmFtZSBmb3IgZW5kcG9pbnQgd2l0aG91dCBzZXNzaW9uJywgZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgY21kTmFtZSA9IHJvdXRlVG9Db21tYW5kTmFtZSgnL3N0YXR1cycsICdHRVQnKTtcbiAgICAgIGNtZE5hbWUuc2hvdWxkLmVxdWFsKCdnZXRTdGF0dXMnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcHJvcGVybHkgbG9va3VwIGNvcnJlY3QgY29tbWFuZCBuYW1lIGZvciBlbmRwb2ludCB3aXRob3V0IGxlYWRpbmcgc2xhc2gnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBjbWROYW1lID0gcm91dGVUb0NvbW1hbmROYW1lKCdzdGF0dXMnLCAnR0VUJyk7XG4gICAgICBjbWROYW1lLnNob3VsZC5lcXVhbCgnZ2V0U3RhdHVzJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHByb3Blcmx5IGxvb2t1cCBjb3JyZWN0IGNvbW1hbmQgbmFtZSBmb3IgZnVsbHkgc3BlY2lmaWVkIGVuZHBvaW50JywgZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgY21kTmFtZSA9IHJvdXRlVG9Db21tYW5kTmFtZSgnL3dkL2h1Yi9zdGF0dXMnLCAnR0VUJyk7XG4gICAgICBjbWROYW1lLnNob3VsZC5lcXVhbCgnZ2V0U3RhdHVzJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIG5vdCBmaW5kIGNvbW1hbmQgbmFtZSBpZiBpbmNvcnJlY3QgaW5wdXQgZGF0YSBoYXMgYmVlbiBzcGVjaWZpZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKGxldCBbcm91dGUsIG1ldGhvZF0gb2YgW1snL3dkL2h1Yi9zdGF0dXMnLCAnUE9TVCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJy94c3RhdHVzJywgJ0dFVCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJ3N0YXR1cycsICdQT1NUJ11dKSB7XG4gICAgICAgIGNvbnN0IGNtZE5hbWUgPSByb3V0ZVRvQ29tbWFuZE5hbWUocm91dGUsIG1ldGhvZCk7XG4gICAgICAgIGNoYWkuc2hvdWxkKCkuZXF1YWwoY21kTmFtZSwgdW5kZWZpbmVkKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
