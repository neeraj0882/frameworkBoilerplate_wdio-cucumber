'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var commands = {},
    helpers = {},
    extensions = {};

// override in sub-classes, with appropriate logs
// in the form of
//   {
//     type: {
//       description: 'some useful text',
//       getter: () => {}, // some function that will be called to get the logs
//     }
//   }
extensions.supportedLogTypes = {};

commands.getLogTypes = function () {
  _logger2['default'].debug('Retrieving supported log types');
  return _lodash2['default'].keys(this.supportedLogTypes);
};

commands.getLog = function callee$0$0(logType) {
  var logsTypesWithDescriptions;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Retrieving \'' + logType + '\' logs');

        if (this.getLogTypes().includes(logType)) {
          context$1$0.next = 4;
          break;
        }

        logsTypesWithDescriptions = _lodash2['default'].reduce(this.supportedLogTypes, function (result, value, key) {
          result[key] = value.description;
          return result;
        }, {});
        throw new Error('Unsupported log type \'' + logType + '\'. ' + ('Supported types: ' + JSON.stringify(logsTypesWithDescriptions)));

      case 4:
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.supportedLogTypes[logType].getter(this));

      case 6:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

_Object$assign(extensions, commands, helpers);
exports.commands = commands;
exports.helpers = helpers;
exports['default'] = extensions;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9iYXNlZHJpdmVyL2NvbW1hbmRzL2xvZy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7c0JBQWdCLFdBQVc7Ozs7c0JBQ2IsUUFBUTs7OztBQUd0QixJQUFNLFFBQVEsR0FBRyxFQUFFO0lBQUUsT0FBTyxHQUFHLEVBQUU7SUFBRSxVQUFVLEdBQUcsRUFBRSxDQUFDOzs7Ozs7Ozs7O0FBVW5ELFVBQVUsQ0FBQyxpQkFBaUIsR0FBRyxFQUFFLENBQUM7O0FBRWxDLFFBQVEsQ0FBQyxXQUFXLEdBQUcsWUFBWTtBQUNqQyxzQkFBSSxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztBQUM1QyxTQUFPLG9CQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztDQUN2QyxDQUFDOztBQUVGLFFBQVEsQ0FBQyxNQUFNLEdBQUcsb0JBQWdCLE9BQU87TUFJL0IseUJBQXlCOzs7O0FBSGpDLDRCQUFJLEtBQUssbUJBQWdCLE9BQU8sYUFBUyxDQUFDOztZQUVyQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQzs7Ozs7QUFDakMsaUNBQXlCLEdBQUcsb0JBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxVQUFVLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFO0FBQy9GLGdCQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQztBQUNoQyxpQkFBTyxNQUFNLENBQUM7U0FDZixFQUFFLEVBQUUsQ0FBQztjQUNBLElBQUksS0FBSyxDQUFDLDRCQUF5QixPQUFPLG1DQUMxQixJQUFJLENBQUMsU0FBUyxDQUFDLHlCQUF5QixDQUFDLENBQUUsQ0FBQzs7Ozt5Q0FHdkQsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7Ozs7Ozs7Ozs7Q0FDMUQsQ0FBQzs7QUFFRixlQUFjLFVBQVUsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDcEMsUUFBUSxHQUFSLFFBQVE7UUFBRSxPQUFPLEdBQVAsT0FBTztxQkFDWCxVQUFVIiwiZmlsZSI6ImxpYi9iYXNlZHJpdmVyL2NvbW1hbmRzL2xvZy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cblxuY29uc3QgY29tbWFuZHMgPSB7fSwgaGVscGVycyA9IHt9LCBleHRlbnNpb25zID0ge307XG5cbi8vIG92ZXJyaWRlIGluIHN1Yi1jbGFzc2VzLCB3aXRoIGFwcHJvcHJpYXRlIGxvZ3Ncbi8vIGluIHRoZSBmb3JtIG9mXG4vLyAgIHtcbi8vICAgICB0eXBlOiB7XG4vLyAgICAgICBkZXNjcmlwdGlvbjogJ3NvbWUgdXNlZnVsIHRleHQnLFxuLy8gICAgICAgZ2V0dGVyOiAoKSA9PiB7fSwgLy8gc29tZSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIHRvIGdldCB0aGUgbG9nc1xuLy8gICAgIH1cbi8vICAgfVxuZXh0ZW5zaW9ucy5zdXBwb3J0ZWRMb2dUeXBlcyA9IHt9O1xuXG5jb21tYW5kcy5nZXRMb2dUeXBlcyA9IGZ1bmN0aW9uICgpIHtcbiAgbG9nLmRlYnVnKCdSZXRyaWV2aW5nIHN1cHBvcnRlZCBsb2cgdHlwZXMnKTtcbiAgcmV0dXJuIF8ua2V5cyh0aGlzLnN1cHBvcnRlZExvZ1R5cGVzKTtcbn07XG5cbmNvbW1hbmRzLmdldExvZyA9IGFzeW5jIGZ1bmN0aW9uIChsb2dUeXBlKSB7XG4gIGxvZy5kZWJ1ZyhgUmV0cmlldmluZyAnJHtsb2dUeXBlfScgbG9nc2ApO1xuXG4gIGlmICghdGhpcy5nZXRMb2dUeXBlcygpLmluY2x1ZGVzKGxvZ1R5cGUpKSB7XG4gICAgY29uc3QgbG9nc1R5cGVzV2l0aERlc2NyaXB0aW9ucyA9IF8ucmVkdWNlKHRoaXMuc3VwcG9ydGVkTG9nVHlwZXMsIGZ1bmN0aW9uIChyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsdWUuZGVzY3JpcHRpb247XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sIHt9KTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIGxvZyB0eXBlICcke2xvZ1R5cGV9Jy4gYCArXG4gICAgICBgU3VwcG9ydGVkIHR5cGVzOiAke0pTT04uc3RyaW5naWZ5KGxvZ3NUeXBlc1dpdGhEZXNjcmlwdGlvbnMpfWApO1xuICB9XG5cbiAgcmV0dXJuIGF3YWl0IHRoaXMuc3VwcG9ydGVkTG9nVHlwZXNbbG9nVHlwZV0uZ2V0dGVyKHRoaXMpO1xufTtcblxuT2JqZWN0LmFzc2lnbihleHRlbnNpb25zLCBjb21tYW5kcywgaGVscGVycyk7XG5leHBvcnQgeyBjb21tYW5kcywgaGVscGVyc307XG5leHBvcnQgZGVmYXVsdCBleHRlbnNpb25zO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLiJ9
