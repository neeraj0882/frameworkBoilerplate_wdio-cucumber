'use strict';

var _extends = require('babel-runtime/helpers/extends')['default'];

var _defineProperty = require('babel-runtime/helpers/define-property')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _fs2 = require('fs');

var _fs3 = _interopRequireDefault(_fs2);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _appiumSupport = require('appium-support');

var _teen_process = require('teen_process');

var _request = require('request');

var _request2 = _interopRequireDefault(_request);

var ZIP_EXTS = ['.zip', '.ipa'];
var ZIP_MIME_TYPE = 'application/zip';
var DOWNLOADS_CACHE = {};

function getModificationDate(url) {
  var response, value;
  return _regeneratorRuntime.async(function getModificationDate$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        response = undefined;
        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(_request2['default'].head(url));

      case 4:
        response = context$1$0.sent;
        context$1$0.next = 11;
        break;

      case 7:
        context$1$0.prev = 7;
        context$1$0.t0 = context$1$0['catch'](1);

        _logger2['default'].debug('Cannot send HEAD request to \'' + url + '\'. Original error: ' + context$1$0.t0.message);
        return context$1$0.abrupt('return', null);

      case 11:
        value = response.headers['Last-Modified'];

        _logger2['default'].debug('Got \'' + value + '\' as \'Last-Modified\' HEAD response header value of \'' + url + '\'');
        return context$1$0.abrupt('return', value ? new Date(value) : null);

      case 14:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 7]]);
}

function getCachedApplicationPath(url) {
  var appInfo, lastModified, fullPath, currentModified;
  return _regeneratorRuntime.async(function getCachedApplicationPath$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        appInfo = DOWNLOADS_CACHE[url];

        if (appInfo) {
          context$1$0.next = 3;
          break;
        }

        return context$1$0.abrupt('return', null);

      case 3:
        lastModified = appInfo.lastModified;
        fullPath = appInfo.fullPath;
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(getModificationDate(url));

      case 7:
        currentModified = context$1$0.sent;

        if (currentModified) {
          context$1$0.next = 10;
          break;
        }

        return context$1$0.abrupt('return', null);

      case 10:
        if (!(currentModified <= lastModified)) {
          context$1$0.next = 13;
          break;
        }

        _logger2['default'].debug('\'Last-Modified\' response header value of \'' + url + '\' is less or equal in comparison to the ' + ('cached value \'' + lastModified + '\''));
        return context$1$0.abrupt('return', fullPath);

      case 13:
        _logger2['default'].debug('\'Last-Modified\' response header value of \'' + url + '\' is greater in comparison to the ' + ('cached value \'' + lastModified + '\''));
        return context$1$0.abrupt('return', null);

      case 15:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function configureApp(app, appExt) {
  var mountRoot = arguments.length <= 2 || arguments[2] === undefined ? "Volumes" : arguments[2];
  var windowsShareUserName = arguments.length <= 3 || arguments[3] === undefined ? "" : arguments[3];
  var windowsSharePassword = arguments.length <= 4 || arguments[4] === undefined ? "" : arguments[4];

  var newApp, shouldUnzipApp, _url$parse, protocol, isUrl, cachedPath, _ref, targetPath, contentType, errorMessage, archivePath, lastModified;

  return _regeneratorRuntime.async(function configureApp$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (_lodash2['default'].isString(app)) {
          context$1$0.next = 2;
          break;
        }

        return context$1$0.abrupt('return');

      case 2:
        newApp = app;
        shouldUnzipApp = false;
        _url$parse = _url2['default'].parse(newApp);
        protocol = _url$parse.protocol;
        isUrl = ['http:', 'https:'].includes(protocol);

        if (!newApp.startsWith('\\\\')) {
          context$1$0.next = 19;
          break;
        }

        // Use the app from Windows network share
        _logger2['default'].info('Downloading the application \'' + newApp + '\' from SMB share...');
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(copyFromWindowsNetworkShare(newApp, appExt, mountRoot, windowsShareUserName, windowsSharePassword));

      case 11:
        newApp = context$1$0.sent;
        context$1$0.next = 14;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(newApp));

      case 14:
        if (context$1$0.sent) {
          context$1$0.next = 16;
          break;
        }

        throw new Error('The application at \'' + app + '\' does not exist or is not accessible for download');

      case 16:
        _logger2['default'].info('Downloaded the app to \'' + newApp + '\'');
        context$1$0.next = 60;
        break;

      case 19:
        if (!isUrl) {
          context$1$0.next = 42;
          break;
        }

        context$1$0.next = 22;
        return _regeneratorRuntime.awrap(getCachedApplicationPath(newApp));

      case 22:
        cachedPath = context$1$0.sent;

        if (!cachedPath) {
          context$1$0.next = 31;
          break;
        }

        context$1$0.next = 26;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(cachedPath));

      case 26:
        if (!context$1$0.sent) {
          context$1$0.next = 29;
          break;
        }

        _logger2['default'].info('Reusing the previously downloaded application at \'' + cachedPath + '\'');
        return context$1$0.abrupt('return', cachedPath);

      case 29:
        _logger2['default'].info('The application at \'' + cachedPath + '\' does not exist anymore. Deleting it from the cache');
        delete DOWNLOADS_CACHE[newApp];

      case 31:
        _logger2['default'].info('Using downloadable app \'' + newApp + '\'');
        context$1$0.next = 34;
        return _regeneratorRuntime.awrap(downloadApp(newApp, appExt));

      case 34:
        _ref = context$1$0.sent;
        targetPath = _ref.targetPath;
        contentType = _ref.contentType;

        newApp = targetPath;
        // the filetype may not be obvious for certain urls, so check the mime type too
        shouldUnzipApp = _lodash2['default'].includes(ZIP_EXTS, _path2['default'].extname(newApp)) || contentType === ZIP_MIME_TYPE;
        _logger2['default'].info('Downloaded the app to \'' + newApp + '\'');
        context$1$0.next = 60;
        break;

      case 42:
        context$1$0.next = 44;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(newApp));

      case 44:
        if (!context$1$0.sent) {
          context$1$0.next = 57;
          break;
        }

        // Use the local app
        _logger2['default'].info('Using local app \'' + newApp + '\'');
        shouldUnzipApp = _lodash2['default'].includes(ZIP_EXTS, _path2['default'].extname(newApp));

        if (!shouldUnzipApp) {
          context$1$0.next = 53;
          break;
        }

        context$1$0.next = 50;
        return _regeneratorRuntime.awrap(copyLocalZip(newApp));

      case 50:
        context$1$0.t0 = context$1$0.sent;
        context$1$0.next = 54;
        break;

      case 53:
        context$1$0.t0 = newApp;

      case 54:
        newApp = context$1$0.t0;
        context$1$0.next = 60;
        break;

      case 57:
        errorMessage = 'The application at \'' + newApp + '\' does not exist or is not accessible';

        // protocol value for 'C:\\temp' is 'c:', so we check the length as well
        if (_lodash2['default'].isString(protocol) && protocol.length > 2) {
          errorMessage = 'The protocol \'' + protocol + '\' used in \'' + newApp + '\' is not supported. ' + 'Only http: and https: protocols are supported';
        }
        throw new Error(errorMessage);

      case 60:
        if (!shouldUnzipApp) {
          context$1$0.next = 72;
          break;
        }

        _logger2['default'].info('Unzipping local app \'' + newApp + '\'...');
        archivePath = newApp;
        context$1$0.prev = 63;
        context$1$0.next = 66;
        return _regeneratorRuntime.awrap(unzipApp(archivePath, appExt));

      case 66:
        newApp = context$1$0.sent;

      case 67:
        context$1$0.prev = 67;
        context$1$0.next = 70;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(archivePath));

      case 70:
        return context$1$0.finish(67);

      case 71:
        _logger2['default'].info('Unzipped local app to \'' + newApp + '\'');

      case 72:
        if (!(_path2['default'].extname(newApp) !== appExt)) {
          context$1$0.next = 77;
          break;
        }

        if (!(newApp !== app)) {
          context$1$0.next = 76;
          break;
        }

        context$1$0.next = 76;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(newApp));

      case 76:
        throw new Error('New app path \'' + newApp + '\' did not have extension \'' + appExt + '\'');

      case 77:
        if (!isUrl) {
          context$1$0.next = 82;
          break;
        }

        context$1$0.next = 80;
        return _regeneratorRuntime.awrap(getModificationDate(app));

      case 80:
        lastModified = context$1$0.sent;

        if (lastModified) {
          DOWNLOADS_CACHE[_url2['default']] = {
            lastModified: lastModified,
            fullPath: newApp
          };
        } else {
          _logger2['default'].info('Skipping \'' + app + '\' caching, because the HEAD response didn\'t return' + ' any valid Last-Modified headers');
        }

      case 82:
        return context$1$0.abrupt('return', newApp);

      case 83:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[63,, 67, 71]]);
}

function downloadApp(app, appExt) {
  var appUrl, isZipFile, downloadedApp;
  return _regeneratorRuntime.async(function downloadApp$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        appUrl = undefined;
        context$1$0.prev = 1;

        appUrl = _url2['default'].parse(app);
        context$1$0.next = 8;
        break;

      case 5:
        context$1$0.prev = 5;
        context$1$0.t0 = context$1$0['catch'](1);
        throw new Error('Invalid App URL (' + app + ')');

      case 8:
        isZipFile = _lodash2['default'].includes(ZIP_EXTS, _path2['default'].extname(appUrl.pathname));

        appExt = isZipFile ? '.zip' : appExt;

        downloadedApp = undefined;
        context$1$0.prev = 11;
        context$1$0.next = 14;
        return _regeneratorRuntime.awrap(downloadFile(_url2['default'].format(appUrl), appExt));

      case 14:
        downloadedApp = context$1$0.sent;
        context$1$0.next = 20;
        break;

      case 17:
        context$1$0.prev = 17;
        context$1$0.t1 = context$1$0['catch'](11);
        throw new Error('Problem downloading app from url ' + app + ': ' + context$1$0.t1);

      case 20:
        return context$1$0.abrupt('return', downloadedApp);

      case 21:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 5], [11, 17]]);
}

function downloadFile(sourceUrl, suffix) {
  var targetPath, contentType;
  return _regeneratorRuntime.async(function downloadFile$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_appiumSupport.tempDir.path({ prefix: 'appium-app', suffix: suffix }));

      case 2:
        targetPath = context$1$0.sent;
        contentType = undefined;
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(new _bluebird2['default'](function (resolve, reject) {
          (0, _request2['default'])(sourceUrl).on('error', reject) // handle real errors, like connection errors
          .on('response', function (res) {
            // handle responses that fail, like 404s
            if (res.statusCode >= 400) {
              reject('Error downloading file: ' + res.statusCode);
            }
            contentType = res.headers['content-type'];
          }).pipe(_fs3['default'].createWriteStream(targetPath)).on('error', reject).on('close', resolve);
        }));

      case 6:
        _logger2['default'].debug(sourceUrl + ' downloaded to ' + targetPath);
        _logger2['default'].debug('Downloaded file type \'' + contentType + '\'');
        return context$1$0.abrupt('return', { targetPath: targetPath, contentType: contentType });

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function copyLocalZip(localZipPath) {
  var fileInfo, infile, outfile;
  return _regeneratorRuntime.async(function copyLocalZip$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Copying local zip to tmp dir');
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(localZipPath));

      case 3:
        if (context$1$0.sent) {
          context$1$0.next = 5;
          break;
        }

        throw new Error('Local zip did not exist');

      case 5:
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(_appiumSupport.tempDir.open({ prefix: 'appium-app', suffix: '.zip' }));

      case 7:
        fileInfo = context$1$0.sent;
        infile = _fs3['default'].createReadStream(localZipPath);
        outfile = _fs3['default'].createWriteStream(fileInfo.path);
        return context$1$0.abrupt('return', new _bluebird2['default'](function (resolve, reject) {
          infile.pipe(outfile).on('close', function () {
            resolve(fileInfo.path);
          }).on('error', function (err) {
            // eslint-disable-line promise/prefer-await-to-callbacks
            reject(err);
          });
        }));

      case 11:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function unzipApp(zipPath, appExt) {
  var _ref2,
  // first delete any existing apps that might be in our tmp dir
  stdout, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, line, output, relaxedRegStr, strictReg, relaxedReg, strictMatch, relaxedMatch, getAppPath;

  return _regeneratorRuntime.async(function unzipApp$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('find', [_path2['default'].dirname(zipPath), '-type', 'd', '-name', '*' + appExt]));

      case 2:
        _ref2 = context$1$0.sent;
        stdout = _ref2.stdout;
        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 7;
        _iterator = _getIterator(stdout.trim().split('\n').filter(Boolean));

      case 9:
        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
          context$1$0.next = 16;
          break;
        }

        line = _step.value;
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(line));

      case 13:
        _iteratorNormalCompletion = true;
        context$1$0.next = 9;
        break;

      case 16:
        context$1$0.next = 22;
        break;

      case 18:
        context$1$0.prev = 18;
        context$1$0.t0 = context$1$0['catch'](7);
        _didIteratorError = true;
        _iteratorError = context$1$0.t0;

      case 22:
        context$1$0.prev = 22;
        context$1$0.prev = 23;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 25:
        context$1$0.prev = 25;

        if (!_didIteratorError) {
          context$1$0.next = 28;
          break;
        }

        throw _iteratorError;

      case 28:
        return context$1$0.finish(25);

      case 29:
        return context$1$0.finish(22);

      case 30:
        context$1$0.next = 32;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(_path2['default'].resolve(_path2['default'].dirname(zipPath), 'Payload*')));

      case 32:
        context$1$0.next = 34;
        return _regeneratorRuntime.awrap(unzipFile(zipPath));

      case 34:
        output = context$1$0.sent;
        relaxedRegStr = '(?:creating|inflating|extracting): (.+' + appExt + ')/?';
        strictReg = new RegExp(relaxedRegStr + '$', 'm');
        relaxedReg = new RegExp(relaxedRegStr, 'm');
        strictMatch = strictReg.exec(output);
        relaxedMatch = relaxedReg.exec(output);

        getAppPath = function getAppPath(match) {
          return _path2['default'].resolve(_path2['default'].dirname(zipPath), match[1]);
        };

        if (!strictMatch) {
          context$1$0.next = 43;
          break;
        }

        return context$1$0.abrupt('return', getAppPath(strictMatch));

      case 43:
        if (!relaxedMatch) {
          context$1$0.next = 46;
          break;
        }

        _logger2['default'].debug('Got a relaxed match for app in zip, be careful for app match errors');
        return context$1$0.abrupt('return', getAppPath(relaxedMatch));

      case 46:
        throw new Error('App zip unzipped OK, but we could not find a ' + appExt + ' bundle ' + ('in it. Make sure your archive contains the ' + appExt + ' package ') + 'and nothing else');

      case 47:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[7, 18, 22, 30], [23,, 25, 29]]);
}

function unzipFile(zipPath) {
  var valid, execEnv, execOpts, _ref3, stdout;

  return _regeneratorRuntime.async(function unzipFile$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Unzipping ' + zipPath);
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(testZipArchive(zipPath));

      case 3:
        valid = context$1$0.sent;

        if (valid) {
          context$1$0.next = 6;
          break;
        }

        throw new Error('Zip archive ' + zipPath + ' did not test valid');

      case 6:
        if (!_appiumSupport.system.isWindows()) {
          context$1$0.next = 11;
          break;
        }

        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(_appiumSupport.zip.extractAllTo(zipPath, _path2['default'].dirname(zipPath)));

      case 9:
        _logger2['default'].debug('Unzip successful');
        return context$1$0.abrupt('return');

      case 11:
        execEnv = _lodash2['default'].clone(process.env);

        delete execEnv.UNZIP;
        execOpts = { cwd: _path2['default'].dirname(zipPath), env: execEnv };
        context$1$0.prev = 14;
        context$1$0.next = 17;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('unzip', ['-o', zipPath], execOpts));

      case 17:
        _ref3 = context$1$0.sent;
        stdout = _ref3.stdout;
        return context$1$0.abrupt('return', stdout);

      case 22:
        context$1$0.prev = 22;
        context$1$0.t0 = context$1$0['catch'](14);

        _logger2['default'].error('Unzip threw error ' + context$1$0.t0);
        _logger2['default'].error('Stderr: ' + context$1$0.t0.stderr);
        _logger2['default'].error('Stdout: ' + context$1$0.t0.stdout);
        throw new Error('Archive could not be unzipped, check appium logs.');

      case 28:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[14, 22]]);
}

function testZipArchive(zipPath) {
  var execEnv, execOpts, output;
  return _regeneratorRuntime.async(function testZipArchive$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Testing zip archive: ' + zipPath);

        if (!_appiumSupport.system.isWindows()) {
          context$1$0.next = 11;
          break;
        }

        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(zipPath));

      case 4:
        if (!context$1$0.sent) {
          context$1$0.next = 9;
          break;
        }

        _logger2['default'].debug('Zip archive tested clean');
        return context$1$0.abrupt('return', true);

      case 9:
        _logger2['default'].debug('Zip archive not found');
        return context$1$0.abrupt('return', false);

      case 11:
        execEnv = _lodash2['default'].clone(process.env);

        delete execEnv.UNZIP;
        execOpts = { cwd: _path2['default'].dirname(zipPath), env: execEnv };
        output = undefined;
        context$1$0.prev = 15;
        context$1$0.next = 18;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('unzip', ['-tq', zipPath], execOpts));

      case 18:
        output = context$1$0.sent;

        if (!/No errors detected/.exec(output.stdout)) {
          context$1$0.next = 21;
          break;
        }

        return context$1$0.abrupt('return', true);

      case 21:
        _logger2['default'].error('Zip file ' + zipPath + ' was not valid');
        _logger2['default'].error('Stderr: ' + output.stderr);
        _logger2['default'].error('Stdout: ' + output.stdout);
        _logger2['default'].error('Zip archive did not test successfully, check appium server ' + 'logs for output');
        return context$1$0.abrupt('return', false);

      case 28:
        context$1$0.prev = 28;
        context$1$0.t0 = context$1$0['catch'](15);

        _logger2['default'].error('Test zip archive threw error ' + context$1$0.t0);
        _logger2['default'].error('Stderr: ' + context$1$0.t0.stderr);
        _logger2['default'].error('Stdout: ' + context$1$0.t0.stdout);
        throw new Error('Error testing zip archive, are you sure this is a zip file?');

      case 34:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[15, 28]]);
}

function copyFromWindowsNetworkShare(app, appExt, mountRoot, windowsUserName, windowsPassword) {
  return _regeneratorRuntime.async(function copyFromWindowsNetworkShare$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!_appiumSupport.system.isWindows()) {
          context$1$0.next = 6;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(copyLocallyFromWindowsShare(app, appExt));

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 6:
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(mountWindowsShareOnMac(app, mountRoot, windowsUserName, windowsPassword));

      case 8:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function mountWindowsShareOnMac(app, mountRoot, windowsUserName, windowsPassword) {
  var pathSplit, networkShare, rootFolder, mountPath, mountNetworkShare, umountArgs;
  return _regeneratorRuntime.async(function mountWindowsShareOnMac$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        pathSplit = app.split("\\");
        networkShare = pathSplit[2];
        rootFolder = pathSplit[3];

        app = app.replace(/\\/g, "/");
        app = app.replace('/' + networkShare, mountRoot);
        mountPath = '/' + mountRoot + '/' + rootFolder;

        mountNetworkShare = function mountNetworkShare() {
          var mountArgs;
          return _regeneratorRuntime.async(function mountNetworkShare$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(_appiumSupport.fs.mkdir(mountPath));

              case 2:
                mountArgs = ['-t', 'smbfs', '//' + windowsUserName + ':' + windowsPassword + '@' + networkShare + '/' + rootFolder, mountPath];
                context$2$0.prev = 3;
                context$2$0.next = 6;
                return _regeneratorRuntime.awrap((0, _teen_process.exec)('mount', mountArgs));

              case 6:
                context$2$0.next = 11;
                break;

              case 8:
                context$2$0.prev = 8;
                context$2$0.t0 = context$2$0['catch'](3);

                _logger2['default'].errorAndThrow('Error mounting: ' + context$2$0.t0.message);

              case 11:
              case 'end':
                return context$2$0.stop();
            }
          }, null, this, [[3, 8]]);
        };

        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(mountPath));

      case 9:
        if (!context$1$0.sent) {
          context$1$0.next = 25;
          break;
        }

        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(app));

      case 12:
        if (!context$1$0.sent) {
          context$1$0.next = 14;
          break;
        }

        return context$1$0.abrupt('return', app);

      case 14:
        umountArgs = [mountPath];
        context$1$0.prev = 15;
        context$1$0.next = 18;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('umount', umountArgs));

      case 18:
        context$1$0.next = 23;
        break;

      case 20:
        context$1$0.prev = 20;
        context$1$0.t0 = context$1$0['catch'](15);

        _logger2['default'].error('Error Unmounting :' + context$1$0.t0.message);

      case 23:
        context$1$0.next = 25;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(mountRoot));

      case 25:
        context$1$0.next = 27;
        return _regeneratorRuntime.awrap(mountNetworkShare());

      case 27:
        return context$1$0.abrupt('return', app);

      case 28:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[15, 20]]);
}

function copyLocallyFromWindowsShare(app, appExt) {
  var fileInfo;
  return _regeneratorRuntime.async(function copyLocallyFromWindowsShare$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_appiumSupport.tempDir.open({ prefix: 'appium-app', suffix: appExt }));

      case 2:
        fileInfo = context$1$0.sent;
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.copyFile(app, fileInfo.path));

      case 5:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 6:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function isPackageOrBundle(app) {
  return (/^([a-zA-Z0-9\-_]+\.[a-zA-Z0-9\-_]+)+$/.test(app)
  );
}

function getCoordDefault(val) {
  // going the long way and checking for undefined and null since
  // we can't be assured `elId` is a string and not an int. Same
  // thing with destElement below.
  return _appiumSupport.util.hasValue(val) ? val : 0.5;
}

function getSwipeTouchDuration(waitGesture) {
  // the touch action api uses ms, we want seconds
  // 0.8 is the default time for the operation
  var duration = 0.8;
  if (typeof waitGesture.options.ms !== 'undefined' && waitGesture.options.ms) {
    duration = waitGesture.options.ms / 1000;
    if (duration === 0) {
      // set to a very low number, since they wanted it fast
      // but below 0.1 becomes 0 steps, which causes errors
      duration = 0.1;
    }
  }
  return duration;
}

/**
 * Recursively find all instances of the key 'inKey' and rename them 'outKey'
 * @param {*} input Any type of input
 * @param {String} inKey The key name to replace
 * @param {String} outKey The key name to replace it with
 */
function renameKey(input, inKey, outKey) {
  if (_lodash2['default'].isArray(input)) {
    return input.map(function (item) {
      return renameKey(item, inKey, outKey);
    });
  } else if (_lodash2['default'].isPlainObject(input)) {
    return _lodash2['default'].reduce(input, function (resultObj, value, key) {
      return _extends({}, resultObj, _defineProperty({}, key === inKey ? outKey : key, renameKey(value, inKey, outKey)));
    }, {});
  }

  return input;
}

exports['default'] = { configureApp: configureApp, downloadApp: downloadApp, downloadFile: downloadFile, copyLocalZip: copyLocalZip,
  unzipApp: unzipApp, unzipFile: unzipFile, testZipArchive: testZipArchive, isPackageOrBundle: isPackageOrBundle,
  getCoordDefault: getCoordDefault, getSwipeTouchDuration: getSwipeTouchDuration, copyFromWindowsNetworkShare: copyFromWindowsNetworkShare, renameKey: renameKey };
module.exports = exports['default'];

// immediately shortcircuit if not given an app

// Use the app from remote URL

// check if this is zipped

// We will be downloading the files to a directory, so make sure it's there
// This step is not required if you have manually created the directory

// don't use request-promise here, we need streams

// now delete any existing zip payload

// in the strict regex, we check for an entry which ends with the
// extension

// otherwise, we allow an entry which contains the extension, but we
// need to be careful, because it might be a false positive
//# sourceMappingURL=data:application/json;charset=utf8;base64,
