'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _es6Error = require('es6-error');

var _es6Error2 = _interopRequireDefault(_es6Error);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumSupport = require('appium-support');

var _httpStatusCodes = require('http-status-codes');

var _httpStatusCodes2 = _interopRequireDefault(_httpStatusCodes);

var mjsonwpLog = _appiumSupport.logger.getLogger('MJSONWP');
var w3cLog = _appiumSupport.logger.getLogger('W3C');

// base error class for all of our errors

var ProtocolError = (function (_ES6Error) {
  _inherits(ProtocolError, _ES6Error);

  function ProtocolError(msg, jsonwpCode, w3cStatus, error) {
    _classCallCheck(this, ProtocolError);

    _get(Object.getPrototypeOf(ProtocolError.prototype), 'constructor', this).call(this, msg);
    this.jsonwpCode = jsonwpCode;
    this.error = error || 'An unknown error has occurred';
    if (this.jsonwpCode === null) {
      this.jsonwpCode = 13;
    }
    this.w3cStatus = w3cStatus || _httpStatusCodes2['default'].BAD_REQUEST;
  }

  // https://github.com/SeleniumHQ/selenium/blob/176b4a9e3082ac1926f2a436eb346760c37a5998/java/client/src/org/openqa/selenium/remote/ErrorCodes.java#L215
  // https://github.com/SeleniumHQ/selenium/issues/5562#issuecomment-370379470
  // https://w3c.github.io/webdriver/webdriver-spec.html#dfn-error-code

  return ProtocolError;
})(_es6Error2['default']);

var NoSuchDriverError = (function (_ProtocolError) {
  _inherits(NoSuchDriverError, _ProtocolError);

  _createClass(NoSuchDriverError, null, [{
    key: 'code',
    value: function code() {
      return 6;
    }

    // W3C Error is called InvalidSessionID
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].NOT_FOUND;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'invalid session id';
    }
  }]);

  function NoSuchDriverError(err) {
    _classCallCheck(this, NoSuchDriverError);

    _get(Object.getPrototypeOf(NoSuchDriverError.prototype), 'constructor', this).call(this, err || 'A session is either terminated or not started', NoSuchDriverError.code(), NoSuchDriverError.w3cStatus(), NoSuchDriverError.error());
  }

  return NoSuchDriverError;
})(ProtocolError);

var NoSuchElementError = (function (_ProtocolError2) {
  _inherits(NoSuchElementError, _ProtocolError2);

  _createClass(NoSuchElementError, null, [{
    key: 'code',
    value: function code() {
      return 7;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].NOT_FOUND;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'no such element';
    }
  }]);

  function NoSuchElementError(err) {
    _classCallCheck(this, NoSuchElementError);

    _get(Object.getPrototypeOf(NoSuchElementError.prototype), 'constructor', this).call(this, err || 'An element could not be located on the page using the given ' + 'search parameters.', NoSuchElementError.code(), NoSuchElementError.w3cStatus(), NoSuchElementError.error());
  }

  return NoSuchElementError;
})(ProtocolError);

var NoSuchFrameError = (function (_ProtocolError3) {
  _inherits(NoSuchFrameError, _ProtocolError3);

  _createClass(NoSuchFrameError, null, [{
    key: 'code',
    value: function code() {
      return 8;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'no such frame';
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].NOT_FOUND;
    }
  }]);

  function NoSuchFrameError(err) {
    _classCallCheck(this, NoSuchFrameError);

    _get(Object.getPrototypeOf(NoSuchFrameError.prototype), 'constructor', this).call(this, err || 'A request to switch to a frame could not be satisfied because ' + 'the frame could not be found.', NoSuchFrameError.code(), NoSuchFrameError.w3cStatus(), NoSuchFrameError.error());
  }

  return NoSuchFrameError;
})(ProtocolError);

var UnknownCommandError = (function (_ProtocolError4) {
  _inherits(UnknownCommandError, _ProtocolError4);

  _createClass(UnknownCommandError, null, [{
    key: 'code',
    value: function code() {
      return 9;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].NOT_FOUND;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'unknown command';
    }
  }]);

  function UnknownCommandError(err) {
    _classCallCheck(this, UnknownCommandError);

    _get(Object.getPrototypeOf(UnknownCommandError.prototype), 'constructor', this).call(this, err || 'The requested resource could not be found, or a request was ' + 'received using an HTTP method that is not supported by the mapped ' + 'resource.', UnknownCommandError.code(), UnknownCommandError.w3cStatus(), UnknownCommandError.error());
  }

  return UnknownCommandError;
})(ProtocolError);

var StaleElementReferenceError = (function (_ProtocolError5) {
  _inherits(StaleElementReferenceError, _ProtocolError5);

  _createClass(StaleElementReferenceError, null, [{
    key: 'code',
    value: function code() {
      return 10;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].NOT_FOUND;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'stale element reference';
    }
  }]);

  function StaleElementReferenceError(err) {
    _classCallCheck(this, StaleElementReferenceError);

    _get(Object.getPrototypeOf(StaleElementReferenceError.prototype), 'constructor', this).call(this, err || 'An element command failed because the referenced element is no ' + 'longer attached to the DOM.', StaleElementReferenceError.code(), StaleElementReferenceError.w3cStatus(), StaleElementReferenceError.error());
  }

  return StaleElementReferenceError;
})(ProtocolError);

var ElementNotVisibleError = (function (_ProtocolError6) {
  _inherits(ElementNotVisibleError, _ProtocolError6);

  _createClass(ElementNotVisibleError, null, [{
    key: 'code',
    value: function code() {
      return 11;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].BAD_REQUEST;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'element not visible';
    }
  }]);

  function ElementNotVisibleError(err) {
    _classCallCheck(this, ElementNotVisibleError);

    _get(Object.getPrototypeOf(ElementNotVisibleError.prototype), 'constructor', this).call(this, err || 'An element command could not be completed because the element is ' + 'not visible on the page.', ElementNotVisibleError.code(), ElementNotVisibleError.w3cStatus(), ElementNotVisibleError.error());
  }

  return ElementNotVisibleError;
})(ProtocolError);

var InvalidElementStateError = (function (_ProtocolError7) {
  _inherits(InvalidElementStateError, _ProtocolError7);

  _createClass(InvalidElementStateError, null, [{
    key: 'code',
    value: function code() {
      return 12;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].BAD_REQUEST;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'invalid element state';
    }
  }]);

  function InvalidElementStateError(err) {
    _classCallCheck(this, InvalidElementStateError);

    _get(Object.getPrototypeOf(InvalidElementStateError.prototype), 'constructor', this).call(this, err || 'An element command could not be completed because the element is ' + 'in an invalid state (e.g. attempting to click a disabled element).', InvalidElementStateError.code(), InvalidElementStateError.w3cStatus(), InvalidElementStateError.error());
  }

  return InvalidElementStateError;
})(ProtocolError);

var UnknownError = (function (_ProtocolError8) {
  _inherits(UnknownError, _ProtocolError8);

  _createClass(UnknownError, null, [{
    key: 'code',
    value: function code() {
      return 13;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].INTERNAL_SERVER_ERROR;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'unknown error';
    }
  }]);

  function UnknownError(originalError) {
    _classCallCheck(this, UnknownError);

    var origMessage = originalError;
    if (originalError instanceof Error) {
      origMessage = originalError.message;
    }
    var message = 'An unknown server-side error occurred while processing ' + 'the command.';
    if (originalError) {
      message = message + ' Original error: ' + origMessage;
    }

    _get(Object.getPrototypeOf(UnknownError.prototype), 'constructor', this).call(this, message, UnknownError.code(), UnknownError.w3cStatus(), UnknownError.error());
  }

  return UnknownError;
})(ProtocolError);

var UnknownMethodError = (function (_ProtocolError9) {
  _inherits(UnknownMethodError, _ProtocolError9);

  _createClass(UnknownMethodError, null, [{
    key: 'code',
    value: function code() {
      return 405;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].METHOD_NOT_ALLOWED;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'unknown method';
    }
  }]);

  function UnknownMethodError(err) {
    _classCallCheck(this, UnknownMethodError);

    _get(Object.getPrototypeOf(UnknownMethodError.prototype), 'constructor', this).call(this, err || 'The requested command matched a known URL but did not match an method for that URL', UnknownMethodError.code(), UnknownMethodError.w3cStatus(), UnknownMethodError.error());
  }

  return UnknownMethodError;
})(ProtocolError);

var UnsupportedOperationError = (function (_ProtocolError10) {
  _inherits(UnsupportedOperationError, _ProtocolError10);

  _createClass(UnsupportedOperationError, null, [{
    key: 'code',
    value: function code() {
      return 405;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].INTERNAL_SERVER_ERROR;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'unsupported operation';
    }
  }]);

  function UnsupportedOperationError(err) {
    _classCallCheck(this, UnsupportedOperationError);

    _get(Object.getPrototypeOf(UnsupportedOperationError.prototype), 'constructor', this).call(this, err || 'A server-side error occurred. Command cannot be supported.', UnsupportedOperationError.code(), UnsupportedOperationError.w3cStatus(), UnsupportedOperationError.error());
  }

  return UnsupportedOperationError;
})(ProtocolError);

var ElementIsNotSelectableError = (function (_ProtocolError11) {
  _inherits(ElementIsNotSelectableError, _ProtocolError11);

  _createClass(ElementIsNotSelectableError, null, [{
    key: 'code',
    value: function code() {
      return 15;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'element not selectable';
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].BAD_REQUEST;
    }
  }]);

  function ElementIsNotSelectableError(err) {
    _classCallCheck(this, ElementIsNotSelectableError);

    _get(Object.getPrototypeOf(ElementIsNotSelectableError.prototype), 'constructor', this).call(this, err || 'An attempt was made to select an element that cannot be selected.', ElementIsNotSelectableError.code(), ElementIsNotSelectableError.w3cStatus(), ElementIsNotSelectableError.error());
  }

  return ElementIsNotSelectableError;
})(ProtocolError);

var ElementClickInterceptedError = (function (_ProtocolError12) {
  _inherits(ElementClickInterceptedError, _ProtocolError12);

  _createClass(ElementClickInterceptedError, null, [{
    key: 'code',
    value: function code() {
      return 64;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'element click intercepted';
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].BAD_REQUEST;
    }
  }]);

  function ElementClickInterceptedError(err) {
    _classCallCheck(this, ElementClickInterceptedError);

    _get(Object.getPrototypeOf(ElementClickInterceptedError.prototype), 'constructor', this).call(this, err || 'The Element Click command could not be completed because the element receiving ' + 'the events is obscuring the element that was requested clicked', ElementClickInterceptedError.code(), ElementClickInterceptedError.w3cStatus(), ElementClickInterceptedError.error());
  }

  return ElementClickInterceptedError;
})(ProtocolError);

var ElementNotInteractableError = (function (_ProtocolError13) {
  _inherits(ElementNotInteractableError, _ProtocolError13);

  _createClass(ElementNotInteractableError, null, [{
    key: 'code',
    value: function code() {
      return 60;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'element not interactable';
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].BAD_REQUEST;
    }
  }]);

  function ElementNotInteractableError(err) {
    _classCallCheck(this, ElementNotInteractableError);

    _get(Object.getPrototypeOf(ElementNotInteractableError.prototype), 'constructor', this).call(this, err || 'A command could not be completed because the element is not pointer- or keyboard interactable', ElementNotInteractableError.code(), ElementNotInteractableError.w3cStatus(), ElementNotInteractableError.error());
  }

  return ElementNotInteractableError;
})(ProtocolError);

var InsecureCertificateError = (function (_ProtocolError14) {
  _inherits(InsecureCertificateError, _ProtocolError14);

  _createClass(InsecureCertificateError, null, [{
    key: 'error',
    value: function error() {
      return 'insecure certificate';
    }
  }]);

  function InsecureCertificateError(err) {
    _classCallCheck(this, InsecureCertificateError);

    _get(Object.getPrototypeOf(InsecureCertificateError.prototype), 'constructor', this).call(this, err || 'Navigation caused the user agent to hit a certificate warning, which is usually the result of an expired or invalid TLS certificate', ElementIsNotSelectableError.code(), null, InsecureCertificateError.error());
  }

  return InsecureCertificateError;
})(ProtocolError);

var JavaScriptError = (function (_ProtocolError15) {
  _inherits(JavaScriptError, _ProtocolError15);

  _createClass(JavaScriptError, null, [{
    key: 'code',
    value: function code() {
      return 17;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].INTERNAL_SERVER_ERROR;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'javascript error';
    }
  }]);

  function JavaScriptError(err) {
    _classCallCheck(this, JavaScriptError);

    _get(Object.getPrototypeOf(JavaScriptError.prototype), 'constructor', this).call(this, err || 'An error occurred while executing user supplied JavaScript.', JavaScriptError.code(), JavaScriptError.w3cStatus(), JavaScriptError.error());
  }

  return JavaScriptError;
})(ProtocolError);

var XPathLookupError = (function (_ProtocolError16) {
  _inherits(XPathLookupError, _ProtocolError16);

  _createClass(XPathLookupError, null, [{
    key: 'code',
    value: function code() {
      return 19;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].BAD_REQUEST;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'invalid selector';
    }
  }]);

  function XPathLookupError(err) {
    _classCallCheck(this, XPathLookupError);

    _get(Object.getPrototypeOf(XPathLookupError.prototype), 'constructor', this).call(this, err || 'An error occurred while searching for an element by XPath.', XPathLookupError.code(), XPathLookupError.w3cStatus(), XPathLookupError.error());
  }

  return XPathLookupError;
})(ProtocolError);

var TimeoutError = (function (_ProtocolError17) {
  _inherits(TimeoutError, _ProtocolError17);

  _createClass(TimeoutError, null, [{
    key: 'code',
    value: function code() {
      return 21;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].REQUEST_TIMEOUT;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'timeout';
    }
  }]);

  function TimeoutError(err) {
    _classCallCheck(this, TimeoutError);

    _get(Object.getPrototypeOf(TimeoutError.prototype), 'constructor', this).call(this, err || 'An operation did not complete before its timeout expired.', TimeoutError.code(), TimeoutError.w3cStatus(), TimeoutError.error());
  }

  return TimeoutError;
})(ProtocolError);

var NoSuchWindowError = (function (_ProtocolError18) {
  _inherits(NoSuchWindowError, _ProtocolError18);

  _createClass(NoSuchWindowError, null, [{
    key: 'code',
    value: function code() {
      return 23;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'no such window';
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].NOT_FOUND;
    }
  }]);

  function NoSuchWindowError(err) {
    _classCallCheck(this, NoSuchWindowError);

    _get(Object.getPrototypeOf(NoSuchWindowError.prototype), 'constructor', this).call(this, err || 'A request to switch to a different window could not be satisfied ' + 'because the window could not be found.', NoSuchWindowError.code(), NoSuchWindowError.w3cStatus(), NoSuchWindowError.error());
  }

  return NoSuchWindowError;
})(ProtocolError);

var InvalidArgumentError = (function (_ProtocolError19) {
  _inherits(InvalidArgumentError, _ProtocolError19);

  _createClass(InvalidArgumentError, null, [{
    key: 'code',
    value: function code() {
      return 61;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'invalid argument';
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].BAD_REQUEST;
    }
  }]);

  function InvalidArgumentError(err) {
    _classCallCheck(this, InvalidArgumentError);

    _get(Object.getPrototypeOf(InvalidArgumentError.prototype), 'constructor', this).call(this, err || 'The arguments passed to the command are either invalid or malformed', InvalidArgumentError.code(), InvalidArgumentError.w3cStatus(), InvalidArgumentError.error());
  }

  return InvalidArgumentError;
})(ProtocolError);

var InvalidCookieDomainError = (function (_ProtocolError20) {
  _inherits(InvalidCookieDomainError, _ProtocolError20);

  _createClass(InvalidCookieDomainError, null, [{
    key: 'code',
    value: function code() {
      return 24;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'invalid cookie domain';
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].BAD_REQUEST;
    }
  }]);

  function InvalidCookieDomainError(err) {
    _classCallCheck(this, InvalidCookieDomainError);

    _get(Object.getPrototypeOf(InvalidCookieDomainError.prototype), 'constructor', this).call(this, err || 'An illegal attempt was made to set a cookie under a different ' + 'domain than the current page.', InvalidCookieDomainError.code(), InvalidCookieDomainError.w3cStatus(), InvalidCookieDomainError.error());
  }

  return InvalidCookieDomainError;
})(ProtocolError);

var NoSuchCookieError = (function (_ProtocolError21) {
  _inherits(NoSuchCookieError, _ProtocolError21);

  _createClass(NoSuchCookieError, null, [{
    key: 'code',
    value: function code() {
      return 62;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].NOT_FOUND;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'no such cookie';
    }
  }]);

  function NoSuchCookieError(err) {
    _classCallCheck(this, NoSuchCookieError);

    _get(Object.getPrototypeOf(NoSuchCookieError.prototype), 'constructor', this).call(this, err || 'No cookie matching the given path name was found amongst the associated cookies of the current browsing context’s active document', NoSuchCookieError.code(), NoSuchCookieError.w3cStatus(), NoSuchCookieError.error());
  }

  return NoSuchCookieError;
})(ProtocolError);

var UnableToSetCookieError = (function (_ProtocolError22) {
  _inherits(UnableToSetCookieError, _ProtocolError22);

  _createClass(UnableToSetCookieError, null, [{
    key: 'code',
    value: function code() {
      return 25;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].INTERNAL_SERVER_ERROR;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'unable to set cookie';
    }
  }]);

  function UnableToSetCookieError(err) {
    _classCallCheck(this, UnableToSetCookieError);

    _get(Object.getPrototypeOf(UnableToSetCookieError.prototype), 'constructor', this).call(this, err || 'A request to set a cookie\'s value could not be satisfied.', UnableToSetCookieError.code(), UnableToSetCookieError.w3cStatus(), UnableToSetCookieError.error());
  }

  return UnableToSetCookieError;
})(ProtocolError);

var UnexpectedAlertOpenError = (function (_ProtocolError23) {
  _inherits(UnexpectedAlertOpenError, _ProtocolError23);

  _createClass(UnexpectedAlertOpenError, null, [{
    key: 'code',
    value: function code() {
      return 26;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].INTERNAL_SERVER_ERROR;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'unexpected alert open';
    }
  }]);

  function UnexpectedAlertOpenError(err) {
    _classCallCheck(this, UnexpectedAlertOpenError);

    _get(Object.getPrototypeOf(UnexpectedAlertOpenError.prototype), 'constructor', this).call(this, err || 'A modal dialog was open, blocking this operation', UnexpectedAlertOpenError.code(), UnexpectedAlertOpenError.w3cStatus(), UnexpectedAlertOpenError.error());
  }

  return UnexpectedAlertOpenError;
})(ProtocolError);

var NoAlertOpenError = (function (_ProtocolError24) {
  _inherits(NoAlertOpenError, _ProtocolError24);

  _createClass(NoAlertOpenError, null, [{
    key: 'code',
    value: function code() {
      return 27;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].NOT_FOUND;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'no such alert';
    }
  }]);

  function NoAlertOpenError(err) {
    _classCallCheck(this, NoAlertOpenError);

    _get(Object.getPrototypeOf(NoAlertOpenError.prototype), 'constructor', this).call(this, err || 'An attempt was made to operate on a modal dialog when one ' + 'was not open.', NoAlertOpenError.code(), NoAlertOpenError.w3cStatus(), NoAlertOpenError.error());
  }

  return NoAlertOpenError;
})(ProtocolError);

var NoSuchAlertError = (function (_NoAlertOpenError) {
  _inherits(NoSuchAlertError, _NoAlertOpenError);

  function NoSuchAlertError() {
    _classCallCheck(this, NoSuchAlertError);

    _get(Object.getPrototypeOf(NoSuchAlertError.prototype), 'constructor', this).apply(this, arguments);
  }

  return NoSuchAlertError;
})(NoAlertOpenError);

var ScriptTimeoutError = (function (_ProtocolError25) {
  _inherits(ScriptTimeoutError, _ProtocolError25);

  _createClass(ScriptTimeoutError, null, [{
    key: 'code',
    value: function code() {
      return 28;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].REQUEST_TIMEOUT;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'script timeout';
    }
  }]);

  function ScriptTimeoutError(err) {
    _classCallCheck(this, ScriptTimeoutError);

    _get(Object.getPrototypeOf(ScriptTimeoutError.prototype), 'constructor', this).call(this, err || 'A script did not complete before its timeout expired.', ScriptTimeoutError.code(), ScriptTimeoutError.w3cStatus(), ScriptTimeoutError.error());
  }

  return ScriptTimeoutError;
})(ProtocolError);

var InvalidElementCoordinatesError = (function (_ProtocolError26) {
  _inherits(InvalidElementCoordinatesError, _ProtocolError26);

  _createClass(InvalidElementCoordinatesError, null, [{
    key: 'code',
    value: function code() {
      return 29;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].BAD_REQUEST;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'invalid coordinates';
    }
  }]);

  function InvalidElementCoordinatesError(err) {
    _classCallCheck(this, InvalidElementCoordinatesError);

    _get(Object.getPrototypeOf(InvalidElementCoordinatesError.prototype), 'constructor', this).call(this, err || 'The coordinates provided to an interactions operation are invalid.', InvalidElementCoordinatesError.code(), InvalidElementCoordinatesError.w3cStatus(), InvalidElementCoordinatesError.error());
  }

  return InvalidElementCoordinatesError;
})(ProtocolError);

var InvalidCoordinatesError = (function (_InvalidElementCoordinatesError) {
  _inherits(InvalidCoordinatesError, _InvalidElementCoordinatesError);

  function InvalidCoordinatesError() {
    _classCallCheck(this, InvalidCoordinatesError);

    _get(Object.getPrototypeOf(InvalidCoordinatesError.prototype), 'constructor', this).apply(this, arguments);
  }

  return InvalidCoordinatesError;
})(InvalidElementCoordinatesError);

var IMENotAvailableError = (function (_ProtocolError27) {
  _inherits(IMENotAvailableError, _ProtocolError27);

  _createClass(IMENotAvailableError, null, [{
    key: 'code',
    value: function code() {
      return 30;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].INTERNAL_SERVER_ERROR;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'unsupported operation';
    }
  }]);

  function IMENotAvailableError(err) {
    _classCallCheck(this, IMENotAvailableError);

    _get(Object.getPrototypeOf(IMENotAvailableError.prototype), 'constructor', this).call(this, err || 'IME was not available.', IMENotAvailableError.code(), IMENotAvailableError.w3cStatus(), IMENotAvailableError.error());
  }

  return IMENotAvailableError;
})(ProtocolError);

var IMEEngineActivationFailedError = (function (_ProtocolError28) {
  _inherits(IMEEngineActivationFailedError, _ProtocolError28);

  _createClass(IMEEngineActivationFailedError, null, [{
    key: 'code',
    value: function code() {
      return 31;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].INTERNAL_SERVER_ERROR;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'unsupported operation';
    }
  }]);

  function IMEEngineActivationFailedError(err) {
    _classCallCheck(this, IMEEngineActivationFailedError);

    _get(Object.getPrototypeOf(IMEEngineActivationFailedError.prototype), 'constructor', this).call(this, err || 'An IME engine could not be started.', IMEEngineActivationFailedError.code(), IMEEngineActivationFailedError.w3cStatus(), IMEEngineActivationFailedError.error());
  }

  return IMEEngineActivationFailedError;
})(ProtocolError);

var InvalidSelectorError = (function (_ProtocolError29) {
  _inherits(InvalidSelectorError, _ProtocolError29);

  _createClass(InvalidSelectorError, null, [{
    key: 'code',
    value: function code() {
      return 32;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].BAD_REQUEST;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'invalid selector';
    }
  }]);

  function InvalidSelectorError(err) {
    _classCallCheck(this, InvalidSelectorError);

    _get(Object.getPrototypeOf(InvalidSelectorError.prototype), 'constructor', this).call(this, err || 'Argument was an invalid selector (e.g. XPath/CSS).', InvalidSelectorError.code(), InvalidSelectorError.w3cStatus(), InvalidSelectorError.error());
  }

  return InvalidSelectorError;
})(ProtocolError);

var SessionNotCreatedError = (function (_ProtocolError30) {
  _inherits(SessionNotCreatedError, _ProtocolError30);

  _createClass(SessionNotCreatedError, null, [{
    key: 'code',
    value: function code() {
      return 33;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].INTERNAL_SERVER_ERROR;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'session not created';
    }
  }]);

  function SessionNotCreatedError(details) {
    _classCallCheck(this, SessionNotCreatedError);

    var message = 'A new session could not be created.';
    if (details) {
      message += ' Details: ' + details;
    }

    _get(Object.getPrototypeOf(SessionNotCreatedError.prototype), 'constructor', this).call(this, message, SessionNotCreatedError.code(), SessionNotCreatedError.w3cStatus(), SessionNotCreatedError.error());
  }

  return SessionNotCreatedError;
})(ProtocolError);

var MoveTargetOutOfBoundsError = (function (_ProtocolError31) {
  _inherits(MoveTargetOutOfBoundsError, _ProtocolError31);

  _createClass(MoveTargetOutOfBoundsError, null, [{
    key: 'code',
    value: function code() {
      return 34;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].INTERNAL_SERVER_ERROR;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'move target out of bounds';
    }
  }]);

  function MoveTargetOutOfBoundsError(err) {
    _classCallCheck(this, MoveTargetOutOfBoundsError);

    _get(Object.getPrototypeOf(MoveTargetOutOfBoundsError.prototype), 'constructor', this).call(this, err || 'Target provided for a move action is out of bounds.', MoveTargetOutOfBoundsError.code(), MoveTargetOutOfBoundsError.w3cStatus(), MoveTargetOutOfBoundsError.error());
  }

  return MoveTargetOutOfBoundsError;
})(ProtocolError);

var NoSuchContextError = (function (_ProtocolError32) {
  _inherits(NoSuchContextError, _ProtocolError32);

  _createClass(NoSuchContextError, null, [{
    key: 'code',
    value: function code() {
      return 35;
    }
  }]);

  function NoSuchContextError(err) {
    _classCallCheck(this, NoSuchContextError);

    _get(Object.getPrototypeOf(NoSuchContextError.prototype), 'constructor', this).call(this, err || 'No such context found.', NoSuchContextError.code());
  }

  return NoSuchContextError;
})(ProtocolError);

var InvalidContextError = (function (_ProtocolError33) {
  _inherits(InvalidContextError, _ProtocolError33);

  _createClass(InvalidContextError, null, [{
    key: 'code',
    value: function code() {
      return 36;
    }
  }]);

  function InvalidContextError(err) {
    _classCallCheck(this, InvalidContextError);

    _get(Object.getPrototypeOf(InvalidContextError.prototype), 'constructor', this).call(this, err || 'That command could not be executed in the current context.', InvalidContextError.code());
  }

  // This is an alias for UnknownMethodError
  return InvalidContextError;
})(ProtocolError);

var NotYetImplementedError = (function (_ProtocolError34) {
  _inherits(NotYetImplementedError, _ProtocolError34);

  _createClass(NotYetImplementedError, null, [{
    key: 'code',
    value: function code() {
      return 13;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].NOT_FOUND; // W3C equivalent is called 'Unknown Command' (A command could not be executed because the remote end is not aware of it)
    }
  }, {
    key: 'error',
    value: function error() {
      return 'unknown method';
    }
  }]);

  function NotYetImplementedError(err) {
    _classCallCheck(this, NotYetImplementedError);

    _get(Object.getPrototypeOf(NotYetImplementedError.prototype), 'constructor', this).call(this, err || 'Method has not yet been implemented', NotYetImplementedError.code(), NotYetImplementedError.w3cStatus(), NotYetImplementedError.error());
  }

  return NotYetImplementedError;
})(ProtocolError);

var NotImplementedError = (function (_ProtocolError35) {
  _inherits(NotImplementedError, _ProtocolError35);

  _createClass(NotImplementedError, null, [{
    key: 'code',
    value: function code() {
      return 13;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].METHOD_NOT_ALLOWED; // W3C equivalent is 'Unknown Method' (The requested command matched a known URL but did not match an method for that URL)
    }
  }]);

  function NotImplementedError(err) {
    _classCallCheck(this, NotImplementedError);

    _get(Object.getPrototypeOf(NotImplementedError.prototype), 'constructor', this).call(this, err || 'Method is not implemented', NotImplementedError.code());
  }

  return NotImplementedError;
})(ProtocolError);

var UnableToCaptureScreen = (function (_ProtocolError36) {
  _inherits(UnableToCaptureScreen, _ProtocolError36);

  _createClass(UnableToCaptureScreen, null, [{
    key: 'code',
    value: function code() {
      return 63;
    }
  }, {
    key: 'w3cStatus',
    value: function w3cStatus() {
      return _httpStatusCodes2['default'].INTERNAL_SERVER_ERROR;
    }
  }, {
    key: 'error',
    value: function error() {
      return 'unable to capture screen';
    }
  }]);

  function UnableToCaptureScreen(err) {
    _classCallCheck(this, UnableToCaptureScreen);

    _get(Object.getPrototypeOf(UnableToCaptureScreen.prototype), 'constructor', this).call(this, err || 'A screen capture was made impossible', UnableToCaptureScreen.code(), UnableToCaptureScreen.w3cStatus(), UnableToCaptureScreen.error());
  }

  // Equivalent to W3C InvalidArgumentError
  return UnableToCaptureScreen;
})(ProtocolError);

var BadParametersError = (function (_ES6Error2) {
  _inherits(BadParametersError, _ES6Error2);

  _createClass(BadParametersError, null, [{
    key: 'error',
    value: function error() {
      return 'invalid argument';
    }
  }]);

  function BadParametersError(requiredParams, actualParams, errMessage) {
    _classCallCheck(this, BadParametersError);

    var message = undefined;
    if (!errMessage) {
      message = 'Parameters were incorrect. We wanted ' + (JSON.stringify(requiredParams) + ' and you ') + ('sent ' + JSON.stringify(actualParams));
    } else {
      message = 'Parameters were incorrect. You sent ' + JSON.stringify(actualParams) + ', ' + errMessage;
    }
    _get(Object.getPrototypeOf(BadParametersError.prototype), 'constructor', this).call(this, message);
    this.w3cStatus = _httpStatusCodes2['default'].BAD_REQUEST;
  }

  /**
   * ProxyRequestError is a custom error and will be thrown up on unsuccessful proxy request and
   * will contain information about the proxy failure.
   * In case of ProxyRequestError should fetch the actual error by calling `getActualError()`
   * for proxy failure to generate the client response.
   */
  return BadParametersError;
})(_es6Error2['default']);

var ProxyRequestError = (function (_ES6Error3) {
  _inherits(ProxyRequestError, _ES6Error3);

  function ProxyRequestError(err, responseError, httpStatus) {
    _classCallCheck(this, ProxyRequestError);

    var origMessage = '';
    if (_appiumSupport.util.hasValue(responseError)) {
      if (_lodash2['default'].isString(responseError.value)) {
        origMessage = responseError.value;
      } else if (_lodash2['default'].isPlainObject(responseError.value) && _lodash2['default'].isString(responseError.value.message)) {
        origMessage = responseError.value.message;
      }
    }
    var message = 'Proxy request unsuccessful. ' + origMessage;
    _get(Object.getPrototypeOf(ProxyRequestError.prototype), 'constructor', this).call(this, err || message);

    this.w3cStatus = _httpStatusCodes2['default'].BAD_REQUEST;

    // If a string was provided, parse the string
    if (_lodash2['default'].isString(responseError)) {
      responseError = JSON.parse(responseError);
    }

    // If the response error is an object and value is an object, it's a W3C error (for JSONWP value is a string)
    if (_lodash2['default'].isPlainObject(responseError) && _lodash2['default'].isPlainObject(responseError.value)) {
      this.w3c = responseError.value;
      this.w3cStatus = httpStatus || _httpStatusCodes2['default'].BAD_REQUEST;
    } else {
      this.jsonwp = responseError;
    }
  }

  // map of error class name to error class

  _createClass(ProxyRequestError, [{
    key: 'getActualError',
    value: function getActualError() {
      // If it's MJSONWP error, returns actual error cause for request failure based on `jsonwp.status`
      if (_appiumSupport.util.hasValue(this.jsonwp) && _appiumSupport.util.hasValue(this.jsonwp.status) && _appiumSupport.util.hasValue(this.jsonwp.value)) {
        return errorFromMJSONWPStatusCode(this.jsonwp.status, this.jsonwp.value);
      } else if (_appiumSupport.util.hasValue(this.w3c) && _lodash2['default'].isNumber(this.w3cStatus) && this.w3cStatus >= 300) {
        return errorFromW3CJsonCode(this.w3c.error, this.message);
      }
      return new UnknownError(this.message);
    }
  }]);

  return ProxyRequestError;
})(_es6Error2['default']);

var errors = { NotYetImplementedError: NotYetImplementedError,
  NotImplementedError: NotImplementedError,
  BadParametersError: BadParametersError,
  InvalidArgumentError: InvalidArgumentError,
  NoSuchDriverError: NoSuchDriverError,
  NoSuchElementError: NoSuchElementError,
  UnknownCommandError: UnknownCommandError,
  StaleElementReferenceError: StaleElementReferenceError,
  ElementNotVisibleError: ElementNotVisibleError,
  InvalidElementStateError: InvalidElementStateError,
  UnknownError: UnknownError,
  ElementIsNotSelectableError: ElementIsNotSelectableError,
  ElementClickInterceptedError: ElementClickInterceptedError,
  ElementNotInteractableError: ElementNotInteractableError,
  InsecureCertificateError: InsecureCertificateError,
  JavaScriptError: JavaScriptError,
  XPathLookupError: XPathLookupError,
  TimeoutError: TimeoutError,
  NoSuchWindowError: NoSuchWindowError,
  NoSuchCookieError: NoSuchCookieError,
  InvalidCookieDomainError: InvalidCookieDomainError,
  InvalidCoordinatesError: InvalidCoordinatesError,
  UnableToSetCookieError: UnableToSetCookieError,
  UnexpectedAlertOpenError: UnexpectedAlertOpenError,
  NoAlertOpenError: NoAlertOpenError,
  ScriptTimeoutError: ScriptTimeoutError,
  InvalidElementCoordinatesError: InvalidElementCoordinatesError,
  IMENotAvailableError: IMENotAvailableError,
  IMEEngineActivationFailedError: IMEEngineActivationFailedError,
  InvalidSelectorError: InvalidSelectorError,
  SessionNotCreatedError: SessionNotCreatedError,
  MoveTargetOutOfBoundsError: MoveTargetOutOfBoundsError,
  NoSuchAlertError: NoSuchAlertError,
  NoSuchContextError: NoSuchContextError,
  InvalidContextError: InvalidContextError,
  NoSuchFrameError: NoSuchFrameError,
  UnableToCaptureScreen: UnableToCaptureScreen,
  UnknownMethodError: UnknownMethodError,
  UnsupportedOperationError: UnsupportedOperationError,
  ProxyRequestError: ProxyRequestError };

// map of error code to error class
var jsonwpErrorCodeMap = {};
var _iteratorNormalCompletion = true;
var _didIteratorError = false;
var _iteratorError = undefined;

try {
  for (var _iterator = _getIterator(_lodash2['default'].values(errors)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
    var ErrorClass = _step.value;

    if (ErrorClass.code) {
      jsonwpErrorCodeMap[ErrorClass.code()] = ErrorClass;
    }
  }
} catch (err) {
  _didIteratorError = true;
  _iteratorError = err;
} finally {
  try {
    if (!_iteratorNormalCompletion && _iterator['return']) {
      _iterator['return']();
    }
  } finally {
    if (_didIteratorError) {
      throw _iteratorError;
    }
  }
}

var w3cErrorCodeMap = {};
var _iteratorNormalCompletion2 = true;
var _didIteratorError2 = false;
var _iteratorError2 = undefined;

try {
  for (var _iterator2 = _getIterator(_lodash2['default'].values(errors)), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
    var ErrorClass = _step2.value;

    if (ErrorClass.error) {
      w3cErrorCodeMap[ErrorClass.error()] = ErrorClass;
    }
  }
} catch (err) {
  _didIteratorError2 = true;
  _iteratorError2 = err;
} finally {
  try {
    if (!_iteratorNormalCompletion2 && _iterator2['return']) {
      _iterator2['return']();
    }
  } finally {
    if (_didIteratorError2) {
      throw _iteratorError2;
    }
  }
}

function isErrorType(err, type) {
  // `name` property is the constructor name
  if (type.name === ProtocolError.name) {
    // `jsonwpCode` is `0` on success
    return !!err.jsonwpCode;
  } else if (type.name === ProxyRequestError.name) {
    // `status` is `0` on success
    if (err.jsonwp) {
      return !!err.jsonwp.status;
    }

    if (_lodash2['default'].isPlainObject(err.w3c)) {
      return _lodash2['default'].isNumber(err.w3cStatus) && err.w3cStatus >= 300;
    }

    return false;
  }
  return err.constructor.name === type.name;
}

/**
 * Retrieve an error derived from MJSONWP status
 * @param {number} code JSONWP status code
 * @param {string} message The error message
 * @return {ProtocolError} The error that is associated with provided JSONWP status code
 */
function errorFromMJSONWPStatusCode(code, message) {
  if (code !== UnknownError.code() && jsonwpErrorCodeMap[code]) {
    mjsonwpLog.debug('Matched JSONWP error code ' + code + ' to ' + jsonwpErrorCodeMap[code].name);
    return new jsonwpErrorCodeMap[code](message);
  }
  mjsonwpLog.debug('Matched JSONWP error code ' + code + ' to UnknownError');
  return new UnknownError(message);
}

/**
 * Retrieve an error derived from W3C JSON Code
 * @param {string} code W3C error string (see https://www.w3.org/TR/webdriver/#handling-errors `JSON Error Code` column)
 * @param {string} the error message
 * @return {ProtocolError}  The error that is associated with the W3C error string
 */
function errorFromW3CJsonCode(code, message) {
  if (code && w3cErrorCodeMap[code.toLowerCase()]) {
    w3cLog.debug('Matched W3C error code \'' + code + '\' to ' + w3cErrorCodeMap[code.toLowerCase()].name);
    return new (w3cErrorCodeMap[code.toLowerCase()])(message);
  }
  w3cLog.debug('Matched W3C error code \'' + code + '\' to UnknownError');
  return new UnknownError(message);
}

function getResponseForW3CError(err) {
  var httpStatus = undefined;
  var error = undefined;

  if (!err.w3cStatus) {
    if (_appiumSupport.util.hasValue(err.status)) {
      // If it's a JSONWP error, find corresponding error
      err = errorFromMJSONWPStatusCode(err.status, err.value);
    } else {
      w3cLog.error('Encountered internal error running command: ' + err.stack);
      err = new errors.UnknownError(err.message);
    }
  }

  if (isErrorType(err, errors.BadParametersError)) {
    // respond with a 400 if we have bad parameters
    w3cLog.debug('Bad parameters: ' + err);
    error = BadParametersError.error();
  } else {
    error = err.error;
  }

  httpStatus = err.w3cStatus;

  var httpResBody = {
    value: {
      error: error,
      message: err.message,
      stacktrace: err.stack
    }
  };
  return [httpStatus, httpResBody];
}

function getResponseForJsonwpError(err) {
  var httpStatus = _httpStatusCodes2['default'].INTERNAL_SERVER_ERROR;
  var httpResBody = {
    status: err.jsonwpCode,
    value: {
      message: err.message
    }
  };

  if (isErrorType(err, errors.BadParametersError)) {
    // respond with a 400 if we have bad parameters
    mjsonwpLog.debug('Bad parameters: ' + err);
    httpStatus = _httpStatusCodes2['default'].BAD_REQUEST;
    httpResBody = err.message;
  } else if (isErrorType(err, errors.NotYetImplementedError) || isErrorType(err, errors.NotImplementedError)) {
    // respond with a 501 if the method is not implemented
    httpStatus = _httpStatusCodes2['default'].NOT_IMPLEMENTED;
  } else if (isErrorType(err, errors.NoSuchDriverError)) {
    // respond with a 404 if there is no driver for the session
    httpStatus = _httpStatusCodes2['default'].NOT_FOUND;
  }

  return [httpStatus, httpResBody];
}

exports.ProtocolError = ProtocolError;
exports.errors = errors;
exports.isErrorType = isErrorType;
exports.errorFromMJSONWPStatusCode = errorFromMJSONWPStatusCode;
exports.errorFromW3CJsonCode = errorFromW3CJsonCode;
exports.getResponseForW3CError = getResponseForW3CError;
exports.getResponseForJsonwpError = getResponseForJsonwpError;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9wcm90b2NvbC9lcnJvcnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O3dCQUFxQixXQUFXOzs7O3NCQUNsQixRQUFROzs7OzZCQUNPLGdCQUFnQjs7K0JBQ2pCLG1CQUFtQjs7OztBQUUvQyxJQUFNLFVBQVUsR0FBRyxzQkFBTyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDL0MsSUFBTSxNQUFNLEdBQUcsc0JBQU8sU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDOzs7O0lBR2pDLGFBQWE7WUFBYixhQUFhOztBQUNMLFdBRFIsYUFBYSxDQUNKLEdBQUcsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRTswQkFENUMsYUFBYTs7QUFFZiwrQkFGRSxhQUFhLDZDQUVULEdBQUcsRUFBRTtBQUNYLFFBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO0FBQzdCLFFBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxJQUFJLCtCQUErQixDQUFDO0FBQ3RELFFBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyxJQUFJLEVBQUU7QUFDNUIsVUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUM7S0FDdEI7QUFDRCxRQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsSUFBSSw2QkFBZ0IsV0FBVyxDQUFDO0dBQzNEOzs7Ozs7U0FURyxhQUFhOzs7SUFnQmIsaUJBQWlCO1lBQWpCLGlCQUFpQjs7ZUFBakIsaUJBQWlCOztXQUNULGdCQUFHO0FBQ2IsYUFBTyxDQUFDLENBQUM7S0FDVjs7Ozs7V0FFZ0IscUJBQUc7QUFDbEIsYUFBTyw2QkFBZ0IsU0FBUyxDQUFDO0tBQ2xDOzs7V0FDWSxpQkFBRztBQUNkLGFBQU8sb0JBQW9CLENBQUM7S0FDN0I7OztBQUNXLFdBWFIsaUJBQWlCLENBV1IsR0FBRyxFQUFFOzBCQVhkLGlCQUFpQjs7QUFZbkIsK0JBWkUsaUJBQWlCLDZDQVliLEdBQUcsSUFBSSwrQ0FBK0MsRUFBRSxpQkFBaUIsQ0FB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QUN0QixTQUFLLEVBQUU7QUFDTCxhQUFPLEVBQUUsR0FBRyxDQUFDLE9BQU87S0FDckI7R0FDRixDQUFDOztBQUVGLE1BQUksV0FBVyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsa0JBQWtCLENBQUMsRUFBRTs7QUFFL0MsY0FBVSxDQUFDLEtBQUssc0JBQW9CLEdBQUcsQ0FBRyxDQUFDO0FBQzNDLGNBQVUsR0FBRyw2QkFBZ0IsV0FBVyxDQUFDO0FBQ3pDLGVBQVcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDO0dBQzNCLE1BQU0sSUFBSSxXQUFXLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxJQUMvQyxXQUFXLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFOztBQUV2RCxjQUFVLEdBQUcsNkJBQWdCLGVBQWUsQ0FBQztHQUM5QyxNQUFNLElBQUksV0FBVyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsaUJBQWlCLENBQUMsRUFBRTs7QUFFckQsY0FBVSxHQUFHLDZCQUFnQixTQUFTLENBQUM7R0FDeEM7O0FBR0QsU0FBTyxDQUFDLFVBQVUsRUFBRSxXQUFXLENBQUMsQ0FBQztDQUNsQzs7UUFFUSxhQUFhLEdBQWIsYUFBYTtRQUFFLE1BQU0sR0FBTixNQUFNO1FBQUUsV0FBVyxHQUFYLFdBQVc7UUFBRSwwQkFBMEIsR0FBMUIsMEJBQTBCO1FBQUUsb0JBQW9CLEdBQXBCLG9CQUFvQjtRQUFFLHNCQUFzQixHQUF0QixzQkFBc0I7UUFBRSx5QkFBeUIsR0FBekIseUJBQXlCIiwiZmlsZSI6ImxpYi9wcm90b2NvbC9lcnJvcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRVM2RXJyb3IgZnJvbSAnZXM2LWVycm9yJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyB1dGlsLCBsb2dnZXIgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgSFRUUFN0YXR1c0NvZGVzIGZyb20gJ2h0dHAtc3RhdHVzLWNvZGVzJztcblxuY29uc3QgbWpzb253cExvZyA9IGxvZ2dlci5nZXRMb2dnZXIoJ01KU09OV1AnKTtcbmNvbnN0IHczY0xvZyA9IGxvZ2dlci5nZXRMb2dnZXIoJ1czQycpO1xuXG4vLyBiYXNlIGVycm9yIGNsYXNzIGZvciBhbGwgb2Ygb3VyIGVycm9yc1xuY2xhc3MgUHJvdG9jb2xFcnJvciBleHRlbmRzIEVTNkVycm9yIHtcbiAgY29uc3RydWN0b3IgKG1zZywganNvbndwQ29kZSwgdzNjU3RhdHVzLCBlcnJvcikge1xuICAgIHN1cGVyKG1zZyk7XG4gICAgdGhpcy5qc29ud3BDb2RlID0ganNvbndwQ29kZTtcbiAgICB0aGlzLmVycm9yID0gZXJyb3IgfHwgJ0FuIHVua25vd24gZXJyb3IgaGFzIG9jY3VycmVkJztcbiAgICBpZiAodGhpcy5qc29ud3BDb2RlID09PSBudWxsKSB7XG4gICAgICB0aGlzLmpzb253cENvZGUgPSAxMztcbiAgICB9XG4gICAgdGhpcy53M2NTdGF0dXMgPSB3M2NTdGF0dXMgfHwgSFRUUFN0YXR1c0NvZGVzLkJBRF9SRVFVRVNUO1xuICB9XG59XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9TZWxlbml1bUhRL3NlbGVuaXVtL2Jsb2IvMTc2YjRhOWUzMDgyYWMxOTI2ZjJhNDM2ZWIzNDY3NjBjMzdhNTk5OC9qYXZhL2NsaWVudC9zcmMvb3JnL29wZW5xYS9zZWxlbml1bS9yZW1vdGUvRXJyb3JDb2Rlcy5qYXZhI0wyMTVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9TZWxlbml1bUhRL3NlbGVuaXVtL2lzc3Vlcy81NTYyI2lzc3VlY29tbWVudC0zNzAzNzk0NzBcbi8vIGh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJkcml2ZXIvd2ViZHJpdmVyLXNwZWMuaHRtbCNkZm4tZXJyb3ItY29kZVxuXG5jbGFzcyBOb1N1Y2hEcml2ZXJFcnJvciBleHRlbmRzIFByb3RvY29sRXJyb3Ige1xuICBzdGF0aWMgY29kZSAoKSB7XG4gICAgcmV0dXJuIDY7XG4gIH1cbiAgLy8gVzNDIEVycm9yIGlzIGNhbGxlZCBJbnZhbGlkU2Vzc2lvbklEXG4gIHN0YXRpYyB3M2NTdGF0dXMgKCkge1xuICAgIHJldHVybiBIVFRQU3RhdHVzQ29kZXMuTk9UX0ZPVU5EO1xuICB9XG4gIHN0YXRpYyBlcnJvciAoKSB7XG4gICAgcmV0dXJuICdpbnZhbGlkIHNlc3Npb24gaWQnO1xuICB9XG4gIGNvbnN0cnVjdG9yIChlcnIpIHtcbiAgICBzdXBlcihlcnIgfHwgJ0Egc2Vzc2lvbiBpcyBlaXRoZXIgdGVybWluYXRlZCBvciBub3Qgc3RhcnRlZCcsIE5vU3VjaERyaXZlckVycm9yLmNvZGUoKSxcbiAgICAgICAgICBOb1N1Y2hEcml2ZXJFcnJvci53M2NTdGF0dXMoKSwgTm9TdWNoRHJpdmVyRXJyb3IuZXJyb3IoKSk7XG4gIH1cbn1cblxuY2xhc3MgTm9TdWNoRWxlbWVudEVycm9yIGV4dGVuZHMgUHJvdG9jb2xFcnJvciB7XG4gIHN0YXRpYyBjb2RlICgpIHtcbiAgICByZXR1cm4gNztcbiAgfVxuICBzdGF0aWMgdzNjU3RhdHVzICgpIHtcbiAgICByZXR1cm4gSFRUUFN0YXR1c0NvZGVzLk5PVF9GT1VORDtcbiAgfVxuICBzdGF0aWMgZXJyb3IgKCkge1xuICAgIHJldHVybiAnbm8gc3VjaCBlbGVtZW50JztcbiAgfVxuICBjb25zdHJ1Y3RvciAoZXJyKSB7XG4gICAgc3VwZXIoZXJyIHx8ICdBbiBlbGVtZW50IGNvdWxkIG5vdCBiZSBsb2NhdGVkIG9uIHRoZSBwYWdlIHVzaW5nIHRoZSBnaXZlbiAnICtcbiAgICAgICAgICAnc2VhcmNoIHBhcmFtZXRlcnMuJywgTm9TdWNoRWxlbWVudEVycm9yLmNvZGUoKSwgTm9TdWNoRWxlbWVudEVycm9yLnczY1N0YXR1cygpLFxuICAgICAgICAgIE5vU3VjaEVsZW1lbnRFcnJvci5lcnJvcigpKTtcbiAgfVxufVxuXG5jbGFzcyBOb1N1Y2hGcmFtZUVycm9yIGV4dGVuZHMgUHJvdG9jb2xFcnJvciB7XG4gIHN0YXRpYyBjb2RlICgpIHtcbiAgICByZXR1cm4gODtcbiAgfVxuICBzdGF0aWMgZXJyb3IgKCkge1xuICAgIHJldHVybiAnbm8gc3VjaCBmcmFtZSc7XG4gIH1cbiAgc3RhdGljIHczY1N0YXR1cyAoKSB7XG4gICAgcmV0dXJuIEhUVFBTdGF0dXNDb2Rlcy5OT1RfRk9VTkQ7XG4gIH1cbiAgY29uc3RydWN0b3IgKGVycikge1xuICAgIHN1cGVyKGVyciB8fCAnQSByZXF1ZXN0IHRvIHN3aXRjaCB0byBhIGZyYW1lIGNvdWxkIG5vdCBiZSBzYXRpc2ZpZWQgYmVjYXVzZSAnICtcbiAgICAgICAgICAndGhlIGZyYW1lIGNvdWxkIG5vdCBiZSBmb3VuZC4nLCBOb1N1Y2hGcmFtZUVycm9yLmNvZGUoKSxcbiAgICAgICAgICBOb1N1Y2hGcmFtZUVycm9yLnczY1N0YXR1cygpLCBOb1N1Y2hGcmFtZUVycm9yLmVycm9yKCkpO1xuICB9XG59XG5cbmNsYXNzIFVua25vd25Db21tYW5kRXJyb3IgZXh0ZW5kcyBQcm90b2NvbEVycm9yIHtcbiAgc3RhdGljIGNvZGUgKCkge1xuICAgIHJldHVybiA5O1xuICB9XG4gIHN0YXRpYyB3M2NTdGF0dXMgKCkge1xuICAgIHJldHVybiBIVFRQU3RhdHVzQ29kZXMuTk9UX0ZPVU5EO1xuICB9XG4gIHN0YXRpYyBlcnJvciAoKSB7XG4gICAgcmV0dXJuICd1bmtub3duIGNvbW1hbmQnO1xuICB9XG4gIGNvbnN0cnVjdG9yIChlcnIpIHtcbiAgICBzdXBlcihlcnIgfHwgJ1RoZSByZXF1ZXN0ZWQgcmVzb3VyY2UgY291bGQgbm90IGJlIGZvdW5kLCBvciBhIHJlcXVlc3Qgd2FzICcgK1xuICAgICAgICAgICdyZWNlaXZlZCB1c2luZyBhbiBIVFRQIG1ldGhvZCB0aGF0IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIG1hcHBlZCAnICtcbiAgICAgICAgICAncmVzb3VyY2UuJywgVW5rbm93bkNvbW1hbmRFcnJvci5jb2RlKCksIFVua25vd25Db21tYW5kRXJyb3IudzNjU3RhdHVzKCksIFVua25vd25Db21tYW5kRXJyb3IuZXJyb3IoKSk7XG4gIH1cbn1cblxuY2xhc3MgU3RhbGVFbGVtZW50UmVmZXJlbmNlRXJyb3IgZXh0ZW5kcyBQcm90b2NvbEVycm9yIHtcbiAgc3RhdGljIGNvZGUgKCkge1xuICAgIHJldHVybiAxMDtcbiAgfVxuICBzdGF0aWMgdzNjU3RhdHVzICgpIHtcbiAgICByZXR1cm4gSFRUUFN0YXR1c0NvZGVzLk5PVF9GT1VORDtcbiAgfVxuICBzdGF0aWMgZXJyb3IgKCkge1xuICAgIHJldHVybiAnc3RhbGUgZWxlbWVudCByZWZlcmVuY2UnO1xuICB9XG4gIGNvbnN0cnVjdG9yIChlcnIpIHtcbiAgICBzdXBlcihlcnIgfHwgJ0FuIGVsZW1lbnQgY29tbWFuZCBmYWlsZWQgYmVjYXVzZSB0aGUgcmVmZXJlbmNlZCBlbGVtZW50IGlzIG5vICcgK1xuICAgICAgICAgICdsb25nZXIgYXR0YWNoZWQgdG8gdGhlIERPTS4nLCBTdGFsZUVsZW1lbnRSZWZlcmVuY2VFcnJvci5jb2RlKCksXG4gICAgICAgICAgU3RhbGVFbGVtZW50UmVmZXJlbmNlRXJyb3IudzNjU3RhdHVzKCksIFN0YWxlRWxlbWVudFJlZmVyZW5jZUVycm9yLmVycm9yKCkpO1xuICB9XG59XG5cbmNsYXNzIEVsZW1lbnROb3RWaXNpYmxlRXJyb3IgZXh0ZW5kcyBQcm90b2NvbEVycm9yIHtcbiAgc3RhdGljIGNvZGUgKCkge1xuICAgIHJldHVybiAxMTtcbiAgfVxuICBzdGF0aWMgdzNjU3RhdHVzICgpIHtcbiAgICByZXR1cm4gSFRUUFN0YXR1c0NvZGVzLkJBRF9SRVFVRVNUO1xuICB9XG4gIHN0YXRpYyBlcnJvciAoKSB7XG4gICAgcmV0dXJuICdlbGVtZW50IG5vdCB2aXNpYmxlJztcbiAgfVxuICBjb25zdHJ1Y3RvciAoZXJyKSB7XG4gICAgc3VwZXIoZXJyIHx8ICdBbiBlbGVtZW50IGNvbW1hbmQgY291bGQgbm90IGJlIGNvbXBsZXRlZCBiZWNhdXNlIHRoZSBlbGVtZW50IGlzICcgK1xuICAgICAgICAgICdub3QgdmlzaWJsZSBvbiB0aGUgcGFnZS4nLCBFbGVtZW50Tm90VmlzaWJsZUVycm9yLmNvZGUoKSxcbiAgICAgICAgICBFbGVtZW50Tm90VmlzaWJsZUVycm9yLnczY1N0YXR1cygpLCBFbGVtZW50Tm90VmlzaWJsZUVycm9yLmVycm9yKCkpO1xuICB9XG59XG5cbmNsYXNzIEludmFsaWRFbGVtZW50U3RhdGVFcnJvciBleHRlbmRzIFByb3RvY29sRXJyb3Ige1xuICBzdGF0aWMgY29kZSAoKSB7XG4gICAgcmV0dXJuIDEyO1xuICB9XG4gIHN0YXRpYyB3M2NTdGF0dXMgKCkge1xuICAgIHJldHVybiBIVFRQU3RhdHVzQ29kZXMuQkFEX1JFUVVFU1Q7XG4gIH1cbiAgc3RhdGljIGVycm9yICgpIHtcbiAgICByZXR1cm4gJ2ludmFsaWQgZWxlbWVudCBzdGF0ZSc7XG4gIH1cbiAgY29uc3RydWN0b3IgKGVycikge1xuICAgIHN1cGVyKGVyciB8fCAnQW4gZWxlbWVudCBjb21tYW5kIGNvdWxkIG5vdCBiZSBjb21wbGV0ZWQgYmVjYXVzZSB0aGUgZWxlbWVudCBpcyAnICtcbiAgICAgICAgICAnaW4gYW4gaW52YWxpZCBzdGF0ZSAoZS5nLiBhdHRlbXB0aW5nIHRvIGNsaWNrIGEgZGlzYWJsZWQgZWxlbWVudCkuJyxcbiAgICAgICAgICBJbnZhbGlkRWxlbWVudFN0YXRlRXJyb3IuY29kZSgpLCBJbnZhbGlkRWxlbWVudFN0YXRlRXJyb3IudzNjU3RhdHVzKCksXG4gICAgICAgICAgSW52YWxpZEVsZW1lbnRTdGF0ZUVycm9yLmVycm9yKCkpO1xuICB9XG59XG5cbmNsYXNzIFVua25vd25FcnJvciBleHRlbmRzIFByb3RvY29sRXJyb3Ige1xuICBzdGF0aWMgY29kZSAoKSB7XG4gICAgcmV0dXJuIDEzO1xuICB9XG4gIHN0YXRpYyB3M2NTdGF0dXMgKCkge1xuICAgIHJldHVybiBIVFRQU3RhdHVzQ29kZXMuSU5URVJOQUxfU0VSVkVSX0VSUk9SO1xuICB9XG4gIHN0YXRpYyBlcnJvciAoKSB7XG4gICAgcmV0dXJuICd1bmtub3duIGVycm9yJztcbiAgfVxuICBjb25zdHJ1Y3RvciAob3JpZ2luYWxFcnJvcikge1xuICAgIGxldCBvcmlnTWVzc2FnZSA9IG9yaWdpbmFsRXJyb3I7XG4gICAgaWYgKG9yaWdpbmFsRXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgb3JpZ01lc3NhZ2UgPSBvcmlnaW5hbEVycm9yLm1lc3NhZ2U7XG4gICAgfVxuICAgIGxldCBtZXNzYWdlID0gJ0FuIHVua25vd24gc2VydmVyLXNpZGUgZXJyb3Igb2NjdXJyZWQgd2hpbGUgcHJvY2Vzc2luZyAnICtcbiAgICAgICAgICAgICAgICAgICd0aGUgY29tbWFuZC4nO1xuICAgIGlmIChvcmlnaW5hbEVycm9yKSB7XG4gICAgICBtZXNzYWdlID0gYCR7bWVzc2FnZX0gT3JpZ2luYWwgZXJyb3I6ICR7b3JpZ01lc3NhZ2V9YDtcbiAgICB9XG5cbiAgICBzdXBlcihtZXNzYWdlLCBVbmtub3duRXJyb3IuY29kZSgpLCBVbmtub3duRXJyb3IudzNjU3RhdHVzKCksIFVua25vd25FcnJvci5lcnJvcigpKTtcbiAgfVxufVxuXG5jbGFzcyBVbmtub3duTWV0aG9kRXJyb3IgZXh0ZW5kcyBQcm90b2NvbEVycm9yIHtcbiAgc3RhdGljIGNvZGUgKCkge1xuICAgIHJldHVybiA0MDU7XG4gIH1cbiAgc3RhdGljIHczY1N0YXR1cyAoKSB7XG4gICAgcmV0dXJuIEhUVFBTdGF0dXNDb2Rlcy5NRVRIT0RfTk9UX0FMTE9XRUQ7XG4gIH1cbiAgc3RhdGljIGVycm9yICgpIHtcbiAgICByZXR1cm4gJ3Vua25vd24gbWV0aG9kJztcbiAgfVxuICBjb25zdHJ1Y3RvciAoZXJyKSB7XG4gICAgc3VwZXIoZXJyIHx8ICdUaGUgcmVxdWVzdGVkIGNvbW1hbmQgbWF0Y2hlZCBhIGtub3duIFVSTCBidXQgZGlkIG5vdCBtYXRjaCBhbiBtZXRob2QgZm9yIHRoYXQgVVJMJyxcbiAgICAgICAgICBVbmtub3duTWV0aG9kRXJyb3IuY29kZSgpLCBVbmtub3duTWV0aG9kRXJyb3IudzNjU3RhdHVzKCksIFVua25vd25NZXRob2RFcnJvci5lcnJvcigpKTtcbiAgfVxufVxuXG5jbGFzcyBVbnN1cHBvcnRlZE9wZXJhdGlvbkVycm9yIGV4dGVuZHMgUHJvdG9jb2xFcnJvciB7XG4gIHN0YXRpYyBjb2RlICgpIHtcbiAgICByZXR1cm4gNDA1O1xuICB9XG4gIHN0YXRpYyB3M2NTdGF0dXMgKCkge1xuICAgIHJldHVybiBIVFRQU3RhdHVzQ29kZXMuSU5URVJOQUxfU0VSVkVSX0VSUk9SO1xuICB9XG4gIHN0YXRpYyBlcnJvciAoKSB7XG4gICAgcmV0dXJuICd1bnN1cHBvcnRlZCBvcGVyYXRpb24nO1xuICB9XG4gIGNvbnN0cnVjdG9yIChlcnIpIHtcbiAgICBzdXBlcihlcnIgfHwgJ0Egc2VydmVyLXNpZGUgZXJyb3Igb2NjdXJyZWQuIENvbW1hbmQgY2Fubm90IGJlIHN1cHBvcnRlZC4nLFxuICAgICAgICAgIFVuc3VwcG9ydGVkT3BlcmF0aW9uRXJyb3IuY29kZSgpLCBVbnN1cHBvcnRlZE9wZXJhdGlvbkVycm9yLnczY1N0YXR1cygpLFxuICAgICAgICAgIFVuc3VwcG9ydGVkT3BlcmF0aW9uRXJyb3IuZXJyb3IoKSk7XG4gIH1cbn1cblxuY2xhc3MgRWxlbWVudElzTm90U2VsZWN0YWJsZUVycm9yIGV4dGVuZHMgUHJvdG9jb2xFcnJvciB7XG4gIHN0YXRpYyBjb2RlICgpIHtcbiAgICByZXR1cm4gMTU7XG4gIH1cbiAgc3RhdGljIGVycm9yICgpIHtcbiAgICByZXR1cm4gJ2VsZW1lbnQgbm90IHNlbGVjdGFibGUnO1xuICB9XG4gIHN0YXRpYyB3M2NTdGF0dXMgKCkge1xuICAgIHJldHVybiBIVFRQU3RhdHVzQ29kZXMuQkFEX1JFUVVFU1Q7XG4gIH1cbiAgY29uc3RydWN0b3IgKGVycikge1xuICAgIHN1cGVyKGVyciB8fCAnQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBzZWxlY3QgYW4gZWxlbWVudCB0aGF0IGNhbm5vdCBiZSBzZWxlY3RlZC4nLFxuICAgICAgICAgIEVsZW1lbnRJc05vdFNlbGVjdGFibGVFcnJvci5jb2RlKCksIEVsZW1lbnRJc05vdFNlbGVjdGFibGVFcnJvci53M2NTdGF0dXMoKSxcbiAgICAgICAgICBFbGVtZW50SXNOb3RTZWxlY3RhYmxlRXJyb3IuZXJyb3IoKSk7XG4gIH1cbn1cblxuY2xhc3MgRWxlbWVudENsaWNrSW50ZXJjZXB0ZWRFcnJvciBleHRlbmRzIFByb3RvY29sRXJyb3Ige1xuICBzdGF0aWMgY29kZSAoKSB7XG4gICAgcmV0dXJuIDY0O1xuICB9XG4gIHN0YXRpYyBlcnJvciAoKSB7XG4gICAgcmV0dXJuICdlbGVtZW50IGNsaWNrIGludGVyY2VwdGVkJztcbiAgfVxuICBzdGF0aWMgdzNjU3RhdHVzICgpIHtcbiAgICByZXR1cm4gSFRUUFN0YXR1c0NvZGVzLkJBRF9SRVFVRVNUO1xuICB9XG4gIGNvbnN0cnVjdG9yIChlcnIpIHtcbiAgICBzdXBlcihlcnIgfHwgJ1RoZSBFbGVtZW50IENsaWNrIGNvbW1hbmQgY291bGQgbm90IGJlIGNvbXBsZXRlZCBiZWNhdXNlIHRoZSBlbGVtZW50IHJlY2VpdmluZyAnICtcbiAgICAgICAgICAndGhlIGV2ZW50cyBpcyBvYnNjdXJpbmcgdGhlIGVsZW1lbnQgdGhhdCB3YXMgcmVxdWVzdGVkIGNsaWNrZWQnLFxuICAgICAgICAgIEVsZW1lbnRDbGlja0ludGVyY2VwdGVkRXJyb3IuY29kZSgpLCBFbGVtZW50Q2xpY2tJbnRlcmNlcHRlZEVycm9yLnczY1N0YXR1cygpLFxuICAgICAgICAgIEVsZW1lbnRDbGlja0ludGVyY2VwdGVkRXJyb3IuZXJyb3IoKSk7XG4gIH1cbn1cblxuY2xhc3MgRWxlbWVudE5vdEludGVyYWN0YWJsZUVycm9yIGV4dGVuZHMgUHJvdG9jb2xFcnJvciB7XG4gIHN0YXRpYyBjb2RlICgpIHtcbiAgICByZXR1cm4gNjA7XG4gIH1cbiAgc3RhdGljIGVycm9yICgpIHtcbiAgICByZXR1cm4gJ2VsZW1lbnQgbm90IGludGVyYWN0YWJsZSc7XG4gIH1cbiAgc3RhdGljIHczY1N0YXR1cyAoKSB7XG4gICAgcmV0dXJuIEhUVFBTdGF0dXNDb2Rlcy5CQURfUkVRVUVTVDtcbiAgfVxuICBjb25zdHJ1Y3RvciAoZXJyKSB7XG4gICAgc3VwZXIoZXJyIHx8ICdBIGNvbW1hbmQgY291bGQgbm90IGJlIGNvbXBsZXRlZCBiZWNhdXNlIHRoZSBlbGVtZW50IGlzIG5vdCBwb2ludGVyLSBvciBrZXlib2FyZCBpbnRlcmFjdGFibGUnLFxuICAgICAgICAgIEVsZW1lbnROb3RJbnRlcmFjdGFibGVFcnJvci5jb2RlKCksIEVsZW1lbnROb3RJbnRlcmFjdGFibGVFcnJvci53M2NTdGF0dXMoKSxcbiAgICAgICAgICBFbGVtZW50Tm90SW50ZXJhY3RhYmxlRXJyb3IuZXJyb3IoKSk7XG4gIH1cbn1cblxuY2xhc3MgSW5zZWN1cmVDZXJ0aWZpY2F0ZUVycm9yIGV4dGVuZHMgUHJvdG9jb2xFcnJvciB7XG4gIHN0YXRpYyBlcnJvciAoKSB7XG4gICAgcmV0dXJuICdpbnNlY3VyZSBjZXJ0aWZpY2F0ZSc7XG4gIH1cbiAgY29uc3RydWN0b3IgKGVycikge1xuICAgIHN1cGVyKGVyciB8fCAnTmF2aWdhdGlvbiBjYXVzZWQgdGhlIHVzZXIgYWdlbnQgdG8gaGl0IGEgY2VydGlmaWNhdGUgd2FybmluZywgd2hpY2ggaXMgdXN1YWxseSB0aGUgcmVzdWx0IG9mIGFuIGV4cGlyZWQgb3IgaW52YWxpZCBUTFMgY2VydGlmaWNhdGUnLCBFbGVtZW50SXNOb3RTZWxlY3RhYmxlRXJyb3IuY29kZSgpLCBudWxsLCBJbnNlY3VyZUNlcnRpZmljYXRlRXJyb3IuZXJyb3IoKSk7XG4gIH1cbn1cblxuY2xhc3MgSmF2YVNjcmlwdEVycm9yIGV4dGVuZHMgUHJvdG9jb2xFcnJvciB7XG4gIHN0YXRpYyBjb2RlICgpIHtcbiAgICByZXR1cm4gMTc7XG4gIH1cbiAgc3RhdGljIHczY1N0YXR1cyAoKSB7XG4gICAgcmV0dXJuIEhUVFBTdGF0dXNDb2Rlcy5JTlRFUk5BTF9TRVJWRVJfRVJST1I7XG4gIH1cbiAgc3RhdGljIGVycm9yICgpIHtcbiAgICByZXR1cm4gJ2phdmFzY3JpcHQgZXJyb3InO1xuICB9XG4gIGNvbnN0cnVjdG9yIChlcnIpIHtcbiAgICBzdXBlcihlcnIgfHwgJ0FuIGVycm9yIG9jY3VycmVkIHdoaWxlIGV4ZWN1dGluZyB1c2VyIHN1cHBsaWVkIEphdmFTY3JpcHQuJyxcbiAgICAgICAgICBKYXZhU2NyaXB0RXJyb3IuY29kZSgpLCBKYXZhU2NyaXB0RXJyb3IudzNjU3RhdHVzKCksIEphdmFTY3JpcHRFcnJvci5lcnJvcigpKTtcbiAgfVxufVxuXG5jbGFzcyBYUGF0aExvb2t1cEVycm9yIGV4dGVuZHMgUHJvdG9jb2xFcnJvciB7XG4gIHN0YXRpYyBjb2RlICgpIHtcbiAgICByZXR1cm4gMTk7XG4gIH1cbiAgc3RhdGljIHczY1N0YXR1cyAoKSB7XG4gICAgcmV0dXJuIEhUVFBTdGF0dXNDb2Rlcy5CQURfUkVRVUVTVDtcbiAgfVxuICBzdGF0aWMgZXJyb3IgKCkge1xuICAgIHJldHVybiAnaW52YWxpZCBzZWxlY3Rvcic7XG4gIH1cbiAgY29uc3RydWN0b3IgKGVycikge1xuICAgIHN1cGVyKGVyciB8fCAnQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgc2VhcmNoaW5nIGZvciBhbiBlbGVtZW50IGJ5IFhQYXRoLicsXG4gICAgICAgICAgWFBhdGhMb29rdXBFcnJvci5jb2RlKCksIFhQYXRoTG9va3VwRXJyb3IudzNjU3RhdHVzKCksXG4gICAgICAgICAgWFBhdGhMb29rdXBFcnJvci5lcnJvcigpKTtcbiAgfVxufVxuXG5jbGFzcyBUaW1lb3V0RXJyb3IgZXh0ZW5kcyBQcm90b2NvbEVycm9yIHtcbiAgc3RhdGljIGNvZGUgKCkge1xuICAgIHJldHVybiAyMTtcbiAgfVxuICBzdGF0aWMgdzNjU3RhdHVzICgpIHtcbiAgICByZXR1cm4gSFRUUFN0YXR1c0NvZGVzLlJFUVVFU1RfVElNRU9VVDtcbiAgfVxuICBzdGF0aWMgZXJyb3IgKCkge1xuICAgIHJldHVybiAndGltZW91dCc7XG4gIH1cbiAgY29uc3RydWN0b3IgKGVycikge1xuICAgIHN1cGVyKGVyciB8fCAnQW4gb3BlcmF0aW9uIGRpZCBub3QgY29tcGxldGUgYmVmb3JlIGl0cyB0aW1lb3V0IGV4cGlyZWQuJyxcbiAgICAgICAgICBUaW1lb3V0RXJyb3IuY29kZSgpLCBUaW1lb3V0RXJyb3IudzNjU3RhdHVzKCksIFRpbWVvdXRFcnJvci5lcnJvcigpKTtcbiAgfVxufVxuXG5jbGFzcyBOb1N1Y2hXaW5kb3dFcnJvciBleHRlbmRzIFByb3RvY29sRXJyb3Ige1xuICBzdGF0aWMgY29kZSAoKSB7XG4gICAgcmV0dXJuIDIzO1xuICB9XG4gIHN0YXRpYyBlcnJvciAoKSB7XG4gICAgcmV0dXJuICdubyBzdWNoIHdpbmRvdyc7XG4gIH1cbiAgc3RhdGljIHczY1N0YXR1cyAoKSB7XG4gICAgcmV0dXJuIEhUVFBTdGF0dXNDb2Rlcy5OT1RfRk9VTkQ7XG4gIH1cbiAgY29uc3RydWN0b3IgKGVycikge1xuICAgIHN1cGVyKGVyciB8fCAnQSByZXF1ZXN0IHRvIHN3aXRjaCB0byBhIGRpZmZlcmVudCB3aW5kb3cgY291bGQgbm90IGJlIHNhdGlzZmllZCAnICtcbiAgICAgICAgICAnYmVjYXVzZSB0aGUgd2luZG93IGNvdWxkIG5vdCBiZSBmb3VuZC4nLCBOb1N1Y2hXaW5kb3dFcnJvci5jb2RlKCksXG4gICAgICAgICAgTm9TdWNoV2luZG93RXJyb3IudzNjU3RhdHVzKCksIE5vU3VjaFdpbmRvd0Vycm9yLmVycm9yKCkpO1xuICB9XG59XG5cbmNsYXNzIEludmFsaWRBcmd1bWVudEVycm9yIGV4dGVuZHMgUHJvdG9jb2xFcnJvciB7XG4gIHN0YXRpYyBjb2RlICgpIHtcbiAgICByZXR1cm4gNjE7XG4gIH1cbiAgc3RhdGljIGVycm9yICgpIHtcbiAgICByZXR1cm4gJ2ludmFsaWQgYXJndW1lbnQnO1xuICB9XG4gIHN0YXRpYyB3M2NTdGF0dXMgKCkge1xuICAgIHJldHVybiBIVFRQU3RhdHVzQ29kZXMuQkFEX1JFUVVFU1Q7XG4gIH1cbiAgY29uc3RydWN0b3IgKGVycikge1xuICAgIHN1cGVyKGVyciB8fCAnVGhlIGFyZ3VtZW50cyBwYXNzZWQgdG8gdGhlIGNvbW1hbmQgYXJlIGVpdGhlciBpbnZhbGlkIG9yIG1hbGZvcm1lZCcsXG4gICAgICAgICAgSW52YWxpZEFyZ3VtZW50RXJyb3IuY29kZSgpLCBJbnZhbGlkQXJndW1lbnRFcnJvci53M2NTdGF0dXMoKSxcbiAgICAgICAgICBJbnZhbGlkQXJndW1lbnRFcnJvci5lcnJvcigpKTtcbiAgfVxufVxuXG5jbGFzcyBJbnZhbGlkQ29va2llRG9tYWluRXJyb3IgZXh0ZW5kcyBQcm90b2NvbEVycm9yIHtcbiAgc3RhdGljIGNvZGUgKCkge1xuICAgIHJldHVybiAyNDtcbiAgfVxuICBzdGF0aWMgZXJyb3IgKCkge1xuICAgIHJldHVybiAnaW52YWxpZCBjb29raWUgZG9tYWluJztcbiAgfVxuICBzdGF0aWMgdzNjU3RhdHVzICgpIHtcbiAgICByZXR1cm4gSFRUUFN0YXR1c0NvZGVzLkJBRF9SRVFVRVNUO1xuICB9XG4gIGNvbnN0cnVjdG9yIChlcnIpIHtcbiAgICBzdXBlcihlcnIgfHwgJ0FuIGlsbGVnYWwgYXR0ZW1wdCB3YXMgbWFkZSB0byBzZXQgYSBjb29raWUgdW5kZXIgYSBkaWZmZXJlbnQgJyArXG4gICAgICAgICAgJ2RvbWFpbiB0aGFuIHRoZSBjdXJyZW50IHBhZ2UuJywgSW52YWxpZENvb2tpZURvbWFpbkVycm9yLmNvZGUoKSxcbiAgICAgICAgICBJbnZhbGlkQ29va2llRG9tYWluRXJyb3IudzNjU3RhdHVzKCksIEludmFsaWRDb29raWVEb21haW5FcnJvci5lcnJvcigpKTtcbiAgfVxufVxuXG5jbGFzcyBOb1N1Y2hDb29raWVFcnJvciBleHRlbmRzIFByb3RvY29sRXJyb3Ige1xuICBzdGF0aWMgY29kZSAoKSB7XG4gICAgcmV0dXJuIDYyO1xuICB9XG4gIHN0YXRpYyB3M2NTdGF0dXMgKCkge1xuICAgIHJldHVybiBIVFRQU3RhdHVzQ29kZXMuTk9UX0ZPVU5EO1xuICB9XG4gIHN0YXRpYyBlcnJvciAoKSB7XG4gICAgcmV0dXJuICdubyBzdWNoIGNvb2tpZSc7XG4gIH1cbiAgY29uc3RydWN0b3IgKGVycikge1xuICAgIHN1cGVyKGVyciB8fCAnTm8gY29va2llIG1hdGNoaW5nIHRoZSBnaXZlbiBwYXRoIG5hbWUgd2FzIGZvdW5kIGFtb25nc3QgdGhlIGFzc29jaWF0ZWQgY29va2llcyBvZiB0aGUgY3VycmVudCBicm93c2luZyBjb250ZXh04oCZcyBhY3RpdmUgZG9jdW1lbnQnLFxuICAgICAgICAgIE5vU3VjaENvb2tpZUVycm9yLmNvZGUoKSwgTm9TdWNoQ29va2llRXJyb3IudzNjU3RhdHVzKCksIE5vU3VjaENvb2tpZUVycm9yLmVycm9yKCkpO1xuICB9XG59XG5cbmNsYXNzIFVuYWJsZVRvU2V0Q29va2llRXJyb3IgZXh0ZW5kcyBQcm90b2NvbEVycm9yIHtcbiAgc3RhdGljIGNvZGUgKCkge1xuICAgIHJldHVybiAyNTtcbiAgfVxuICBzdGF0aWMgdzNjU3RhdHVzICgpIHtcbiAgICByZXR1cm4gSFRUUFN0YXR1c0NvZGVzLklOVEVSTkFMX1NFUlZFUl9FUlJPUjtcbiAgfVxuICBzdGF0aWMgZXJyb3IgKCkge1xuICAgIHJldHVybiAndW5hYmxlIHRvIHNldCBjb29raWUnO1xuICB9XG4gIGNvbnN0cnVjdG9yIChlcnIpIHtcbiAgICBzdXBlcihlcnIgfHwgJ0EgcmVxdWVzdCB0byBzZXQgYSBjb29raWVcXCdzIHZhbHVlIGNvdWxkIG5vdCBiZSBzYXRpc2ZpZWQuJyxcbiAgICAgICAgICBVbmFibGVUb1NldENvb2tpZUVycm9yLmNvZGUoKSwgVW5hYmxlVG9TZXRDb29raWVFcnJvci53M2NTdGF0dXMoKSwgVW5hYmxlVG9TZXRDb29raWVFcnJvci5lcnJvcigpKTtcbiAgfVxufVxuXG5jbGFzcyBVbmV4cGVjdGVkQWxlcnRPcGVuRXJyb3IgZXh0ZW5kcyBQcm90b2NvbEVycm9yIHtcbiAgc3RhdGljIGNvZGUgKCkge1xuICAgIHJldHVybiAyNjtcbiAgfVxuICBzdGF0aWMgdzNjU3RhdHVzICgpIHtcbiAgICByZXR1cm4gSFRUUFN0YXR1c0NvZGVzLklOVEVSTkFMX1NFUlZFUl9FUlJPUjtcbiAgfVxuICBzdGF0aWMgZXJyb3IgKCkge1xuICAgIHJldHVybiAndW5leHBlY3RlZCBhbGVydCBvcGVuJztcbiAgfVxuICBjb25zdHJ1Y3RvciAoZXJyKSB7XG4gICAgc3VwZXIoZXJyIHx8ICdBIG1vZGFsIGRpYWxvZyB3YXMgb3BlbiwgYmxvY2tpbmcgdGhpcyBvcGVyYXRpb24nLFxuICAgICAgICAgIFVuZXhwZWN0ZWRBbGVydE9wZW5FcnJvci5jb2RlKCksIFVuZXhwZWN0ZWRBbGVydE9wZW5FcnJvci53M2NTdGF0dXMoKSwgVW5leHBlY3RlZEFsZXJ0T3BlbkVycm9yLmVycm9yKCkpO1xuICB9XG59XG5cbmNsYXNzIE5vQWxlcnRPcGVuRXJyb3IgZXh0ZW5kcyBQcm90b2NvbEVycm9yIHtcbiAgc3RhdGljIGNvZGUgKCkge1xuICAgIHJldHVybiAyNztcbiAgfVxuICBzdGF0aWMgdzNjU3RhdHVzICgpIHtcbiAgICByZXR1cm4gSFRUUFN0YXR1c0NvZGVzLk5PVF9GT1VORDtcbiAgfVxuICBzdGF0aWMgZXJyb3IgKCkge1xuICAgIHJldHVybiAnbm8gc3VjaCBhbGVydCc7XG4gIH1cbiAgY29uc3RydWN0b3IgKGVycikge1xuICAgIHN1cGVyKGVyciB8fCAnQW4gYXR0ZW1wdCB3YXMgbWFkZSB0byBvcGVyYXRlIG9uIGEgbW9kYWwgZGlhbG9nIHdoZW4gb25lICcgK1xuICAgICAgICAgICd3YXMgbm90IG9wZW4uJywgTm9BbGVydE9wZW5FcnJvci5jb2RlKCksIE5vQWxlcnRPcGVuRXJyb3IudzNjU3RhdHVzKCksIE5vQWxlcnRPcGVuRXJyb3IuZXJyb3IoKSk7XG4gIH1cbn1cblxuY2xhc3MgTm9TdWNoQWxlcnRFcnJvciBleHRlbmRzIE5vQWxlcnRPcGVuRXJyb3Ige31cblxuY2xhc3MgU2NyaXB0VGltZW91dEVycm9yIGV4dGVuZHMgUHJvdG9jb2xFcnJvciB7XG4gIHN0YXRpYyBjb2RlICgpIHtcbiAgICByZXR1cm4gMjg7XG4gIH1cbiAgc3RhdGljIHczY1N0YXR1cyAoKSB7XG4gICAgcmV0dXJuIEhUVFBTdGF0dXNDb2Rlcy5SRVFVRVNUX1RJTUVPVVQ7XG4gIH1cbiAgc3RhdGljIGVycm9yICgpIHtcbiAgICByZXR1cm4gJ3NjcmlwdCB0aW1lb3V0JztcbiAgfVxuICBjb25zdHJ1Y3RvciAoZXJyKSB7XG4gICAgc3VwZXIoZXJyIHx8ICdBIHNjcmlwdCBkaWQgbm90IGNvbXBsZXRlIGJlZm9yZSBpdHMgdGltZW91dCBleHBpcmVkLicsXG4gICAgICAgICAgU2NyaXB0VGltZW91dEVycm9yLmNvZGUoKSwgU2NyaXB0VGltZW91dEVycm9yLnczY1N0YXR1cygpLCBTY3JpcHRUaW1lb3V0RXJyb3IuZXJyb3IoKSk7XG4gIH1cbn1cblxuY2xhc3MgSW52YWxpZEVsZW1lbnRDb29yZGluYXRlc0Vycm9yIGV4dGVuZHMgUHJvdG9jb2xFcnJvciB7XG4gIHN0YXRpYyBjb2RlICgpIHtcbiAgICByZXR1cm4gMjk7XG4gIH1cbiAgc3RhdGljIHczY1N0YXR1cyAoKSB7XG4gICAgcmV0dXJuIEhUVFBTdGF0dXNDb2Rlcy5CQURfUkVRVUVTVDtcbiAgfVxuICBzdGF0aWMgZXJyb3IgKCkge1xuICAgIHJldHVybiAnaW52YWxpZCBjb29yZGluYXRlcyc7XG4gIH1cbiAgY29uc3RydWN0b3IgKGVycikge1xuICAgIHN1cGVyKGVyciB8fCAnVGhlIGNvb3JkaW5hdGVzIHByb3ZpZGVkIHRvIGFuIGludGVyYWN0aW9ucyBvcGVyYXRpb24gYXJlIGludmFsaWQuJyxcbiAgICAgICAgICBJbnZhbGlkRWxlbWVudENvb3JkaW5hdGVzRXJyb3IuY29kZSgpLCBJbnZhbGlkRWxlbWVudENvb3JkaW5hdGVzRXJyb3IudzNjU3RhdHVzKCksXG4gICAgICAgICAgSW52YWxpZEVsZW1lbnRDb29yZGluYXRlc0Vycm9yLmVycm9yKCkpO1xuICB9XG59XG5cbmNsYXNzIEludmFsaWRDb29yZGluYXRlc0Vycm9yIGV4dGVuZHMgSW52YWxpZEVsZW1lbnRDb29yZGluYXRlc0Vycm9yIHt9XG5cbmNsYXNzIElNRU5vdEF2YWlsYWJsZUVycm9yIGV4dGVuZHMgUHJvdG9jb2xFcnJvciB7XG4gIHN0YXRpYyBjb2RlICgpIHtcbiAgICByZXR1cm4gMzA7XG4gIH1cbiAgc3RhdGljIHczY1N0YXR1cyAoKSB7XG4gICAgcmV0dXJuIEhUVFBTdGF0dXNDb2Rlcy5JTlRFUk5BTF9TRVJWRVJfRVJST1I7XG4gIH1cbiAgc3RhdGljIGVycm9yICgpIHtcbiAgICByZXR1cm4gJ3Vuc3VwcG9ydGVkIG9wZXJhdGlvbic7XG4gIH1cbiAgY29uc3RydWN0b3IgKGVycikge1xuICAgIHN1cGVyKGVyciB8fCAnSU1FIHdhcyBub3QgYXZhaWxhYmxlLicsIElNRU5vdEF2YWlsYWJsZUVycm9yLmNvZGUoKSxcbiAgICAgICAgICBJTUVOb3RBdmFpbGFibGVFcnJvci53M2NTdGF0dXMoKSwgSU1FTm90QXZhaWxhYmxlRXJyb3IuZXJyb3IoKSk7XG4gIH1cbn1cblxuY2xhc3MgSU1FRW5naW5lQWN0aXZhdGlvbkZhaWxlZEVycm9yIGV4dGVuZHMgUHJvdG9jb2xFcnJvciB7XG4gIHN0YXRpYyBjb2RlICgpIHtcbiAgICByZXR1cm4gMzE7XG4gIH1cbiAgc3RhdGljIHczY1N0YXR1cyAoKSB7XG4gICAgcmV0dXJuIEhUVFBTdGF0dXNDb2Rlcy5JTlRFUk5BTF9TRVJWRVJfRVJST1I7XG4gIH1cbiAgc3RhdGljIGVycm9yICgpIHtcbiAgICByZXR1cm4gJ3Vuc3VwcG9ydGVkIG9wZXJhdGlvbic7XG4gIH1cbiAgY29uc3RydWN0b3IgKGVycikge1xuICAgIHN1cGVyKGVyciB8fCAnQW4gSU1FIGVuZ2luZSBjb3VsZCBub3QgYmUgc3RhcnRlZC4nLFxuICAgICAgICAgIElNRUVuZ2luZUFjdGl2YXRpb25GYWlsZWRFcnJvci5jb2RlKCksIElNRUVuZ2luZUFjdGl2YXRpb25GYWlsZWRFcnJvci53M2NTdGF0dXMoKSxcbiAgICAgICAgICBJTUVFbmdpbmVBY3RpdmF0aW9uRmFpbGVkRXJyb3IuZXJyb3IoKSk7XG4gIH1cbn1cblxuY2xhc3MgSW52YWxpZFNlbGVjdG9yRXJyb3IgZXh0ZW5kcyBQcm90b2NvbEVycm9yIHtcbiAgc3RhdGljIGNvZGUgKCkge1xuICAgIHJldHVybiAzMjtcbiAgfVxuICBzdGF0aWMgdzNjU3RhdHVzICgpIHtcbiAgICByZXR1cm4gSFRUUFN0YXR1c0NvZGVzLkJBRF9SRVFVRVNUO1xuICB9XG4gIHN0YXRpYyBlcnJvciAoKSB7XG4gICAgcmV0dXJuICdpbnZhbGlkIHNlbGVjdG9yJztcbiAgfVxuICBjb25zdHJ1Y3RvciAoZXJyKSB7XG4gICAgc3VwZXIoZXJyIHx8ICdBcmd1bWVudCB3YXMgYW4gaW52YWxpZCBzZWxlY3RvciAoZS5nLiBYUGF0aC9DU1MpLicsXG4gICAgICAgICAgSW52YWxpZFNlbGVjdG9yRXJyb3IuY29kZSgpLCBJbnZhbGlkU2VsZWN0b3JFcnJvci53M2NTdGF0dXMoKSxcbiAgICAgICAgICBJbnZhbGlkU2VsZWN0b3JFcnJvci5lcnJvcigpKTtcbiAgfVxufVxuXG5jbGFzcyBTZXNzaW9uTm90Q3JlYXRlZEVycm9yIGV4dGVuZHMgUHJvdG9jb2xFcnJvciB7XG4gIHN0YXRpYyBjb2RlICgpIHtcbiAgICByZXR1cm4gMzM7XG4gIH1cbiAgc3RhdGljIHczY1N0YXR1cyAoKSB7XG4gICAgcmV0dXJuIEhUVFBTdGF0dXNDb2Rlcy5JTlRFUk5BTF9TRVJWRVJfRVJST1I7XG4gIH1cbiAgc3RhdGljIGVycm9yICgpIHtcbiAgICByZXR1cm4gJ3Nlc3Npb24gbm90IGNyZWF0ZWQnO1xuICB9XG4gIGNvbnN0cnVjdG9yIChkZXRhaWxzKSB7XG4gICAgbGV0IG1lc3NhZ2UgPSAnQSBuZXcgc2Vzc2lvbiBjb3VsZCBub3QgYmUgY3JlYXRlZC4nO1xuICAgIGlmIChkZXRhaWxzKSB7XG4gICAgICBtZXNzYWdlICs9IGAgRGV0YWlsczogJHtkZXRhaWxzfWA7XG4gICAgfVxuXG4gICAgc3VwZXIobWVzc2FnZSwgU2Vzc2lvbk5vdENyZWF0ZWRFcnJvci5jb2RlKCksIFNlc3Npb25Ob3RDcmVhdGVkRXJyb3IudzNjU3RhdHVzKCksIFNlc3Npb25Ob3RDcmVhdGVkRXJyb3IuZXJyb3IoKSk7XG4gIH1cbn1cblxuY2xhc3MgTW92ZVRhcmdldE91dE9mQm91bmRzRXJyb3IgZXh0ZW5kcyBQcm90b2NvbEVycm9yIHtcbiAgc3RhdGljIGNvZGUgKCkge1xuICAgIHJldHVybiAzNDtcbiAgfVxuICBzdGF0aWMgdzNjU3RhdHVzICgpIHtcbiAgICByZXR1cm4gSFRUUFN0YXR1c0NvZGVzLklOVEVSTkFMX1NFUlZFUl9FUlJPUjtcbiAgfVxuICBzdGF0aWMgZXJyb3IgKCkge1xuICAgIHJldHVybiAnbW92ZSB0YXJnZXQgb3V0IG9mIGJvdW5kcyc7XG4gIH1cbiAgY29uc3RydWN0b3IgKGVycikge1xuICAgIHN1cGVyKGVyciB8fCAnVGFyZ2V0IHByb3ZpZGVkIGZvciBhIG1vdmUgYWN0aW9uIGlzIG91dCBvZiBib3VuZHMuJyxcbiAgICAgICAgICBNb3ZlVGFyZ2V0T3V0T2ZCb3VuZHNFcnJvci5jb2RlKCksIE1vdmVUYXJnZXRPdXRPZkJvdW5kc0Vycm9yLnczY1N0YXR1cygpLCBNb3ZlVGFyZ2V0T3V0T2ZCb3VuZHNFcnJvci5lcnJvcigpKTtcbiAgfVxufVxuXG5jbGFzcyBOb1N1Y2hDb250ZXh0RXJyb3IgZXh0ZW5kcyBQcm90b2NvbEVycm9yIHtcbiAgc3RhdGljIGNvZGUgKCkge1xuICAgIHJldHVybiAzNTtcbiAgfVxuICBjb25zdHJ1Y3RvciAoZXJyKSB7XG4gICAgc3VwZXIoZXJyIHx8ICdObyBzdWNoIGNvbnRleHQgZm91bmQuJywgTm9TdWNoQ29udGV4dEVycm9yLmNvZGUoKSk7XG4gIH1cbn1cblxuY2xhc3MgSW52YWxpZENvbnRleHRFcnJvciBleHRlbmRzIFByb3RvY29sRXJyb3Ige1xuICBzdGF0aWMgY29kZSAoKSB7XG4gICAgcmV0dXJuIDM2O1xuICB9XG4gIGNvbnN0cnVjdG9yIChlcnIpIHtcbiAgICBzdXBlcihlcnIgfHwgJ1RoYXQgY29tbWFuZCBjb3VsZCBub3QgYmUgZXhlY3V0ZWQgaW4gdGhlIGN1cnJlbnQgY29udGV4dC4nLFxuICAgICAgICAgIEludmFsaWRDb250ZXh0RXJyb3IuY29kZSgpKTtcbiAgfVxufVxuXG4vLyBUaGlzIGlzIGFuIGFsaWFzIGZvciBVbmtub3duTWV0aG9kRXJyb3JcbmNsYXNzIE5vdFlldEltcGxlbWVudGVkRXJyb3IgZXh0ZW5kcyBQcm90b2NvbEVycm9yIHtcbiAgc3RhdGljIGNvZGUgKCkge1xuICAgIHJldHVybiAxMztcbiAgfVxuICBzdGF0aWMgdzNjU3RhdHVzICgpIHtcbiAgICByZXR1cm4gSFRUUFN0YXR1c0NvZGVzLk5PVF9GT1VORDsgLy8gVzNDIGVxdWl2YWxlbnQgaXMgY2FsbGVkICdVbmtub3duIENvbW1hbmQnIChBIGNvbW1hbmQgY291bGQgbm90IGJlIGV4ZWN1dGVkIGJlY2F1c2UgdGhlIHJlbW90ZSBlbmQgaXMgbm90IGF3YXJlIG9mIGl0KVxuICB9XG4gIHN0YXRpYyBlcnJvciAoKSB7XG4gICAgcmV0dXJuICd1bmtub3duIG1ldGhvZCc7XG4gIH1cbiAgY29uc3RydWN0b3IgKGVycikge1xuICAgIHN1cGVyKGVyciB8fCAnTWV0aG9kIGhhcyBub3QgeWV0IGJlZW4gaW1wbGVtZW50ZWQnLFxuICAgICAgTm90WWV0SW1wbGVtZW50ZWRFcnJvci5jb2RlKCksIE5vdFlldEltcGxlbWVudGVkRXJyb3IudzNjU3RhdHVzKCksIE5vdFlldEltcGxlbWVudGVkRXJyb3IuZXJyb3IoKSk7XG4gIH1cbn1cblxuY2xhc3MgTm90SW1wbGVtZW50ZWRFcnJvciBleHRlbmRzIFByb3RvY29sRXJyb3Ige1xuICBzdGF0aWMgY29kZSAoKSB7XG4gICAgcmV0dXJuIDEzO1xuICB9XG4gIHN0YXRpYyB3M2NTdGF0dXMgKCkge1xuICAgIHJldHVybiBIVFRQU3RhdHVzQ29kZXMuTUVUSE9EX05PVF9BTExPV0VEOyAvLyBXM0MgZXF1aXZhbGVudCBpcyAnVW5rbm93biBNZXRob2QnIChUaGUgcmVxdWVzdGVkIGNvbW1hbmQgbWF0Y2hlZCBhIGtub3duIFVSTCBidXQgZGlkIG5vdCBtYXRjaCBhbiBtZXRob2QgZm9yIHRoYXQgVVJMKVxuICB9XG4gIGNvbnN0cnVjdG9yIChlcnIpIHtcbiAgICBzdXBlcihlcnIgfHwgJ01ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQnLCBOb3RJbXBsZW1lbnRlZEVycm9yLmNvZGUoKSk7XG4gIH1cbn1cblxuY2xhc3MgVW5hYmxlVG9DYXB0dXJlU2NyZWVuIGV4dGVuZHMgUHJvdG9jb2xFcnJvciB7XG4gIHN0YXRpYyBjb2RlICgpIHtcbiAgICByZXR1cm4gNjM7XG4gIH1cbiAgc3RhdGljIHczY1N0YXR1cyAoKSB7XG4gICAgcmV0dXJuIEhUVFBTdGF0dXNDb2Rlcy5JTlRFUk5BTF9TRVJWRVJfRVJST1I7XG4gIH1cbiAgc3RhdGljIGVycm9yICgpIHtcbiAgICByZXR1cm4gJ3VuYWJsZSB0byBjYXB0dXJlIHNjcmVlbic7XG4gIH1cbiAgY29uc3RydWN0b3IgKGVycikge1xuICAgIHN1cGVyKGVyciB8fCAnQSBzY3JlZW4gY2FwdHVyZSB3YXMgbWFkZSBpbXBvc3NpYmxlJyxcbiAgICAgICAgICBVbmFibGVUb0NhcHR1cmVTY3JlZW4uY29kZSgpLCBVbmFibGVUb0NhcHR1cmVTY3JlZW4udzNjU3RhdHVzKCksIFVuYWJsZVRvQ2FwdHVyZVNjcmVlbi5lcnJvcigpKTtcbiAgfVxufVxuXG5cbi8vIEVxdWl2YWxlbnQgdG8gVzNDIEludmFsaWRBcmd1bWVudEVycm9yXG5jbGFzcyBCYWRQYXJhbWV0ZXJzRXJyb3IgZXh0ZW5kcyBFUzZFcnJvciB7XG4gIHN0YXRpYyBlcnJvciAoKSB7XG4gICAgcmV0dXJuICdpbnZhbGlkIGFyZ3VtZW50JztcbiAgfVxuICBjb25zdHJ1Y3RvciAocmVxdWlyZWRQYXJhbXMsIGFjdHVhbFBhcmFtcywgZXJyTWVzc2FnZSkge1xuICAgIGxldCBtZXNzYWdlO1xuICAgIGlmICghZXJyTWVzc2FnZSkge1xuICAgICAgbWVzc2FnZSA9IGBQYXJhbWV0ZXJzIHdlcmUgaW5jb3JyZWN0LiBXZSB3YW50ZWQgYCArXG4gICAgICAgICAgYCR7SlNPTi5zdHJpbmdpZnkocmVxdWlyZWRQYXJhbXMpfSBhbmQgeW91IGAgK1xuICAgICAgICAgIGBzZW50ICR7SlNPTi5zdHJpbmdpZnkoYWN0dWFsUGFyYW1zKX1gO1xuICAgIH0gZWxzZSB7XG4gICAgICBtZXNzYWdlID0gYFBhcmFtZXRlcnMgd2VyZSBpbmNvcnJlY3QuIFlvdSBzZW50ICR7SlNPTi5zdHJpbmdpZnkoYWN0dWFsUGFyYW1zKX0sICR7ZXJyTWVzc2FnZX1gO1xuICAgIH1cbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgICB0aGlzLnczY1N0YXR1cyA9IEhUVFBTdGF0dXNDb2Rlcy5CQURfUkVRVUVTVDtcbiAgfVxufVxuXG4vKipcbiAqIFByb3h5UmVxdWVzdEVycm9yIGlzIGEgY3VzdG9tIGVycm9yIGFuZCB3aWxsIGJlIHRocm93biB1cCBvbiB1bnN1Y2Nlc3NmdWwgcHJveHkgcmVxdWVzdCBhbmRcbiAqIHdpbGwgY29udGFpbiBpbmZvcm1hdGlvbiBhYm91dCB0aGUgcHJveHkgZmFpbHVyZS5cbiAqIEluIGNhc2Ugb2YgUHJveHlSZXF1ZXN0RXJyb3Igc2hvdWxkIGZldGNoIHRoZSBhY3R1YWwgZXJyb3IgYnkgY2FsbGluZyBgZ2V0QWN0dWFsRXJyb3IoKWBcbiAqIGZvciBwcm94eSBmYWlsdXJlIHRvIGdlbmVyYXRlIHRoZSBjbGllbnQgcmVzcG9uc2UuXG4gKi9cbmNsYXNzIFByb3h5UmVxdWVzdEVycm9yIGV4dGVuZHMgRVM2RXJyb3Ige1xuICBjb25zdHJ1Y3RvciAoZXJyLCByZXNwb25zZUVycm9yLCBodHRwU3RhdHVzKSB7XG4gICAgbGV0IG9yaWdNZXNzYWdlID0gJyc7XG4gICAgaWYgKHV0aWwuaGFzVmFsdWUocmVzcG9uc2VFcnJvcikpIHtcbiAgICAgIGlmIChfLmlzU3RyaW5nKHJlc3BvbnNlRXJyb3IudmFsdWUpKSB7XG4gICAgICAgIG9yaWdNZXNzYWdlID0gcmVzcG9uc2VFcnJvci52YWx1ZTtcbiAgICAgIH0gZWxzZSBpZiAoXy5pc1BsYWluT2JqZWN0KHJlc3BvbnNlRXJyb3IudmFsdWUpICYmIF8uaXNTdHJpbmcocmVzcG9uc2VFcnJvci52YWx1ZS5tZXNzYWdlKSkge1xuICAgICAgICBvcmlnTWVzc2FnZSA9IHJlc3BvbnNlRXJyb3IudmFsdWUubWVzc2FnZTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGV0IG1lc3NhZ2UgPSBgUHJveHkgcmVxdWVzdCB1bnN1Y2Nlc3NmdWwuICR7b3JpZ01lc3NhZ2V9YDtcbiAgICBzdXBlcihlcnIgfHwgbWVzc2FnZSk7XG5cbiAgICB0aGlzLnczY1N0YXR1cyA9IEhUVFBTdGF0dXNDb2Rlcy5CQURfUkVRVUVTVDtcblxuICAgIC8vIElmIGEgc3RyaW5nIHdhcyBwcm92aWRlZCwgcGFyc2UgdGhlIHN0cmluZ1xuICAgIGlmIChfLmlzU3RyaW5nKHJlc3BvbnNlRXJyb3IpKSB7XG4gICAgICByZXNwb25zZUVycm9yID0gSlNPTi5wYXJzZShyZXNwb25zZUVycm9yKTtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGUgcmVzcG9uc2UgZXJyb3IgaXMgYW4gb2JqZWN0IGFuZCB2YWx1ZSBpcyBhbiBvYmplY3QsIGl0J3MgYSBXM0MgZXJyb3IgKGZvciBKU09OV1AgdmFsdWUgaXMgYSBzdHJpbmcpXG4gICAgaWYgKF8uaXNQbGFpbk9iamVjdChyZXNwb25zZUVycm9yKSAmJiBfLmlzUGxhaW5PYmplY3QocmVzcG9uc2VFcnJvci52YWx1ZSkpIHtcbiAgICAgIHRoaXMudzNjID0gcmVzcG9uc2VFcnJvci52YWx1ZTtcbiAgICAgIHRoaXMudzNjU3RhdHVzID0gaHR0cFN0YXR1cyB8fCBIVFRQU3RhdHVzQ29kZXMuQkFEX1JFUVVFU1Q7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuanNvbndwID0gcmVzcG9uc2VFcnJvcjtcbiAgICB9XG4gIH1cblxuICBnZXRBY3R1YWxFcnJvciAoKSB7XG4gICAgLy8gSWYgaXQncyBNSlNPTldQIGVycm9yLCByZXR1cm5zIGFjdHVhbCBlcnJvciBjYXVzZSBmb3IgcmVxdWVzdCBmYWlsdXJlIGJhc2VkIG9uIGBqc29ud3Auc3RhdHVzYFxuICAgIGlmICh1dGlsLmhhc1ZhbHVlKHRoaXMuanNvbndwKSAmJiB1dGlsLmhhc1ZhbHVlKHRoaXMuanNvbndwLnN0YXR1cykgJiYgdXRpbC5oYXNWYWx1ZSh0aGlzLmpzb253cC52YWx1ZSkpIHtcbiAgICAgIHJldHVybiBlcnJvckZyb21NSlNPTldQU3RhdHVzQ29kZSh0aGlzLmpzb253cC5zdGF0dXMsIHRoaXMuanNvbndwLnZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWwuaGFzVmFsdWUodGhpcy53M2MpICYmIF8uaXNOdW1iZXIodGhpcy53M2NTdGF0dXMpICYmIHRoaXMudzNjU3RhdHVzID49IDMwMCkge1xuICAgICAgcmV0dXJuIGVycm9yRnJvbVczQ0pzb25Db2RlKHRoaXMudzNjLmVycm9yLCB0aGlzLm1lc3NhZ2UpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFVua25vd25FcnJvcih0aGlzLm1lc3NhZ2UpO1xuICB9XG59XG4vLyBtYXAgb2YgZXJyb3IgY2xhc3MgbmFtZSB0byBlcnJvciBjbGFzc1xuY29uc3QgZXJyb3JzID0ge05vdFlldEltcGxlbWVudGVkRXJyb3IsXG4gICAgICAgICAgICAgICAgTm90SW1wbGVtZW50ZWRFcnJvcixcbiAgICAgICAgICAgICAgICBCYWRQYXJhbWV0ZXJzRXJyb3IsXG4gICAgICAgICAgICAgICAgSW52YWxpZEFyZ3VtZW50RXJyb3IsXG4gICAgICAgICAgICAgICAgTm9TdWNoRHJpdmVyRXJyb3IsXG4gICAgICAgICAgICAgICAgTm9TdWNoRWxlbWVudEVycm9yLFxuICAgICAgICAgICAgICAgIFVua25vd25Db21tYW5kRXJyb3IsXG4gICAgICAgICAgICAgICAgU3RhbGVFbGVtZW50UmVmZXJlbmNlRXJyb3IsXG4gICAgICAgICAgICAgICAgRWxlbWVudE5vdFZpc2libGVFcnJvcixcbiAgICAgICAgICAgICAgICBJbnZhbGlkRWxlbWVudFN0YXRlRXJyb3IsXG4gICAgICAgICAgICAgICAgVW5rbm93bkVycm9yLFxuICAgICAgICAgICAgICAgIEVsZW1lbnRJc05vdFNlbGVjdGFibGVFcnJvcixcbiAgICAgICAgICAgICAgICBFbGVtZW50Q2xpY2tJbnRlcmNlcHRlZEVycm9yLFxuICAgICAgICAgICAgICAgIEVsZW1lbnROb3RJbnRlcmFjdGFibGVFcnJvcixcbiAgICAgICAgICAgICAgICBJbnNlY3VyZUNlcnRpZmljYXRlRXJyb3IsXG4gICAgICAgICAgICAgICAgSmF2YVNjcmlwdEVycm9yLFxuICAgICAgICAgICAgICAgIFhQYXRoTG9va3VwRXJyb3IsXG4gICAgICAgICAgICAgICAgVGltZW91dEVycm9yLFxuICAgICAgICAgICAgICAgIE5vU3VjaFdpbmRvd0Vycm9yLFxuICAgICAgICAgICAgICAgIE5vU3VjaENvb2tpZUVycm9yLFxuICAgICAgICAgICAgICAgIEludmFsaWRDb29raWVEb21haW5FcnJvcixcbiAgICAgICAgICAgICAgICBJbnZhbGlkQ29vcmRpbmF0ZXNFcnJvcixcbiAgICAgICAgICAgICAgICBVbmFibGVUb1NldENvb2tpZUVycm9yLFxuICAgICAgICAgICAgICAgIFVuZXhwZWN0ZWRBbGVydE9wZW5FcnJvcixcbiAgICAgICAgICAgICAgICBOb0FsZXJ0T3BlbkVycm9yLFxuICAgICAgICAgICAgICAgIFNjcmlwdFRpbWVvdXRFcnJvcixcbiAgICAgICAgICAgICAgICBJbnZhbGlkRWxlbWVudENvb3JkaW5hdGVzRXJyb3IsXG4gICAgICAgICAgICAgICAgSU1FTm90QXZhaWxhYmxlRXJyb3IsXG4gICAgICAgICAgICAgICAgSU1FRW5naW5lQWN0aXZhdGlvbkZhaWxlZEVycm9yLFxuICAgICAgICAgICAgICAgIEludmFsaWRTZWxlY3RvckVycm9yLFxuICAgICAgICAgICAgICAgIFNlc3Npb25Ob3RDcmVhdGVkRXJyb3IsXG4gICAgICAgICAgICAgICAgTW92ZVRhcmdldE91dE9mQm91bmRzRXJyb3IsXG4gICAgICAgICAgICAgICAgTm9TdWNoQWxlcnRFcnJvcixcbiAgICAgICAgICAgICAgICBOb1N1Y2hDb250ZXh0RXJyb3IsXG4gICAgICAgICAgICAgICAgSW52YWxpZENvbnRleHRFcnJvcixcbiAgICAgICAgICAgICAgICBOb1N1Y2hGcmFtZUVycm9yLFxuICAgICAgICAgICAgICAgIFVuYWJsZVRvQ2FwdHVyZVNjcmVlbixcbiAgICAgICAgICAgICAgICBVbmtub3duTWV0aG9kRXJyb3IsXG4gICAgICAgICAgICAgICAgVW5zdXBwb3J0ZWRPcGVyYXRpb25FcnJvcixcbiAgICAgICAgICAgICAgICBQcm94eVJlcXVlc3RFcnJvcn07XG5cbi8vIG1hcCBvZiBlcnJvciBjb2RlIHRvIGVycm9yIGNsYXNzXG5jb25zdCBqc29ud3BFcnJvckNvZGVNYXAgPSB7fTtcbmZvciAobGV0IEVycm9yQ2xhc3Mgb2YgXy52YWx1ZXMoZXJyb3JzKSkge1xuICBpZiAoRXJyb3JDbGFzcy5jb2RlKSB7XG4gICAganNvbndwRXJyb3JDb2RlTWFwW0Vycm9yQ2xhc3MuY29kZSgpXSA9IEVycm9yQ2xhc3M7XG4gIH1cbn1cblxuY29uc3QgdzNjRXJyb3JDb2RlTWFwID0ge307XG5mb3IgKGxldCBFcnJvckNsYXNzIG9mIF8udmFsdWVzKGVycm9ycykpIHtcbiAgaWYgKEVycm9yQ2xhc3MuZXJyb3IpIHtcbiAgICB3M2NFcnJvckNvZGVNYXBbRXJyb3JDbGFzcy5lcnJvcigpXSA9IEVycm9yQ2xhc3M7XG4gIH1cbn1cblxuXG5cbmZ1bmN0aW9uIGlzRXJyb3JUeXBlIChlcnIsIHR5cGUpIHtcbiAgLy8gYG5hbWVgIHByb3BlcnR5IGlzIHRoZSBjb25zdHJ1Y3RvciBuYW1lXG4gIGlmICh0eXBlLm5hbWUgPT09IFByb3RvY29sRXJyb3IubmFtZSkge1xuICAgIC8vIGBqc29ud3BDb2RlYCBpcyBgMGAgb24gc3VjY2Vzc1xuICAgIHJldHVybiAhIWVyci5qc29ud3BDb2RlO1xuICB9IGVsc2UgaWYgKHR5cGUubmFtZSA9PT0gUHJveHlSZXF1ZXN0RXJyb3IubmFtZSkge1xuICAgIC8vIGBzdGF0dXNgIGlzIGAwYCBvbiBzdWNjZXNzXG4gICAgaWYgKGVyci5qc29ud3ApIHtcbiAgICAgIHJldHVybiAhIWVyci5qc29ud3Auc3RhdHVzO1xuICAgIH1cblxuICAgIGlmIChfLmlzUGxhaW5PYmplY3QoZXJyLnczYykpIHtcbiAgICAgIHJldHVybiBfLmlzTnVtYmVyKGVyci53M2NTdGF0dXMpICYmIGVyci53M2NTdGF0dXMgPj0gMzAwO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gZXJyLmNvbnN0cnVjdG9yLm5hbWUgPT09IHR5cGUubmFtZTtcbn1cblxuLyoqXG4gKiBSZXRyaWV2ZSBhbiBlcnJvciBkZXJpdmVkIGZyb20gTUpTT05XUCBzdGF0dXNcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2RlIEpTT05XUCBzdGF0dXMgY29kZVxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2VcbiAqIEByZXR1cm4ge1Byb3RvY29sRXJyb3J9IFRoZSBlcnJvciB0aGF0IGlzIGFzc29jaWF0ZWQgd2l0aCBwcm92aWRlZCBKU09OV1Agc3RhdHVzIGNvZGVcbiAqL1xuZnVuY3Rpb24gZXJyb3JGcm9tTUpTT05XUFN0YXR1c0NvZGUgKGNvZGUsIG1lc3NhZ2UpIHtcbiAgaWYgKGNvZGUgIT09IFVua25vd25FcnJvci5jb2RlKCkgJiYganNvbndwRXJyb3JDb2RlTWFwW2NvZGVdKSB7XG4gICAgbWpzb253cExvZy5kZWJ1ZyhgTWF0Y2hlZCBKU09OV1AgZXJyb3IgY29kZSAke2NvZGV9IHRvICR7anNvbndwRXJyb3JDb2RlTWFwW2NvZGVdLm5hbWV9YCk7XG4gICAgcmV0dXJuIG5ldyBqc29ud3BFcnJvckNvZGVNYXBbY29kZV0obWVzc2FnZSk7XG4gIH1cbiAgbWpzb253cExvZy5kZWJ1ZyhgTWF0Y2hlZCBKU09OV1AgZXJyb3IgY29kZSAke2NvZGV9IHRvIFVua25vd25FcnJvcmApO1xuICByZXR1cm4gbmV3IFVua25vd25FcnJvcihtZXNzYWdlKTtcbn1cblxuLyoqXG4gKiBSZXRyaWV2ZSBhbiBlcnJvciBkZXJpdmVkIGZyb20gVzNDIEpTT04gQ29kZVxuICogQHBhcmFtIHtzdHJpbmd9IGNvZGUgVzNDIGVycm9yIHN0cmluZyAoc2VlIGh0dHBzOi8vd3d3LnczLm9yZy9UUi93ZWJkcml2ZXIvI2hhbmRsaW5nLWVycm9ycyBgSlNPTiBFcnJvciBDb2RlYCBjb2x1bW4pXG4gKiBAcGFyYW0ge3N0cmluZ30gdGhlIGVycm9yIG1lc3NhZ2VcbiAqIEByZXR1cm4ge1Byb3RvY29sRXJyb3J9ICBUaGUgZXJyb3IgdGhhdCBpcyBhc3NvY2lhdGVkIHdpdGggdGhlIFczQyBlcnJvciBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gZXJyb3JGcm9tVzNDSnNvbkNvZGUgKGNvZGUsIG1lc3NhZ2UpIHtcbiAgaWYgKGNvZGUgJiYgdzNjRXJyb3JDb2RlTWFwW2NvZGUudG9Mb3dlckNhc2UoKV0pIHtcbiAgICB3M2NMb2cuZGVidWcoYE1hdGNoZWQgVzNDIGVycm9yIGNvZGUgJyR7Y29kZX0nIHRvICR7dzNjRXJyb3JDb2RlTWFwW2NvZGUudG9Mb3dlckNhc2UoKV0ubmFtZX1gKTtcbiAgICByZXR1cm4gbmV3IHczY0Vycm9yQ29kZU1hcFtjb2RlLnRvTG93ZXJDYXNlKCldKG1lc3NhZ2UpO1xuICB9XG4gIHczY0xvZy5kZWJ1ZyhgTWF0Y2hlZCBXM0MgZXJyb3IgY29kZSAnJHtjb2RlfScgdG8gVW5rbm93bkVycm9yYCk7XG4gIHJldHVybiBuZXcgVW5rbm93bkVycm9yKG1lc3NhZ2UpO1xufVxuXG5mdW5jdGlvbiBnZXRSZXNwb25zZUZvclczQ0Vycm9yIChlcnIpIHtcbiAgbGV0IGh0dHBTdGF0dXM7XG4gIGxldCBlcnJvcjtcblxuICBpZiAoIWVyci53M2NTdGF0dXMpIHtcbiAgICBpZiAodXRpbC5oYXNWYWx1ZShlcnIuc3RhdHVzKSkge1xuICAgICAgLy8gSWYgaXQncyBhIEpTT05XUCBlcnJvciwgZmluZCBjb3JyZXNwb25kaW5nIGVycm9yXG4gICAgICBlcnIgPSBlcnJvckZyb21NSlNPTldQU3RhdHVzQ29kZShlcnIuc3RhdHVzLCBlcnIudmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3M2NMb2cuZXJyb3IoYEVuY291bnRlcmVkIGludGVybmFsIGVycm9yIHJ1bm5pbmcgY29tbWFuZDogJHtlcnIuc3RhY2t9YCk7XG4gICAgICBlcnIgPSBuZXcgZXJyb3JzLlVua25vd25FcnJvcihlcnIubWVzc2FnZSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGlzRXJyb3JUeXBlKGVyciwgZXJyb3JzLkJhZFBhcmFtZXRlcnNFcnJvcikpIHtcbiAgICAvLyByZXNwb25kIHdpdGggYSA0MDAgaWYgd2UgaGF2ZSBiYWQgcGFyYW1ldGVyc1xuICAgIHczY0xvZy5kZWJ1ZyhgQmFkIHBhcmFtZXRlcnM6ICR7ZXJyfWApO1xuICAgIGVycm9yID0gQmFkUGFyYW1ldGVyc0Vycm9yLmVycm9yKCk7XG4gIH0gZWxzZSB7XG4gICAgZXJyb3IgPSBlcnIuZXJyb3I7XG4gIH1cblxuICBodHRwU3RhdHVzID0gZXJyLnczY1N0YXR1cztcblxuICBsZXQgaHR0cFJlc0JvZHkgPSB7XG4gICAgdmFsdWU6IHtcbiAgICAgIGVycm9yLFxuICAgICAgbWVzc2FnZTogZXJyLm1lc3NhZ2UsXG4gICAgICBzdGFja3RyYWNlOiBlcnIuc3RhY2ssXG4gICAgfVxuICB9O1xuICByZXR1cm4gW2h0dHBTdGF0dXMsIGh0dHBSZXNCb2R5XTtcbn1cblxuZnVuY3Rpb24gZ2V0UmVzcG9uc2VGb3JKc29ud3BFcnJvciAoZXJyKSB7XG4gIGxldCBodHRwU3RhdHVzID0gSFRUUFN0YXR1c0NvZGVzLklOVEVSTkFMX1NFUlZFUl9FUlJPUjtcbiAgbGV0IGh0dHBSZXNCb2R5ID0ge1xuICAgIHN0YXR1czogZXJyLmpzb253cENvZGUsXG4gICAgdmFsdWU6IHtcbiAgICAgIG1lc3NhZ2U6IGVyci5tZXNzYWdlXG4gICAgfVxuICB9O1xuXG4gIGlmIChpc0Vycm9yVHlwZShlcnIsIGVycm9ycy5CYWRQYXJhbWV0ZXJzRXJyb3IpKSB7XG4gICAgLy8gcmVzcG9uZCB3aXRoIGEgNDAwIGlmIHdlIGhhdmUgYmFkIHBhcmFtZXRlcnNcbiAgICBtanNvbndwTG9nLmRlYnVnKGBCYWQgcGFyYW1ldGVyczogJHtlcnJ9YCk7XG4gICAgaHR0cFN0YXR1cyA9IEhUVFBTdGF0dXNDb2Rlcy5CQURfUkVRVUVTVDtcbiAgICBodHRwUmVzQm9keSA9IGVyci5tZXNzYWdlO1xuICB9IGVsc2UgaWYgKGlzRXJyb3JUeXBlKGVyciwgZXJyb3JzLk5vdFlldEltcGxlbWVudGVkRXJyb3IpIHx8XG4gICAgICAgICAgICAgaXNFcnJvclR5cGUoZXJyLCBlcnJvcnMuTm90SW1wbGVtZW50ZWRFcnJvcikpIHtcbiAgICAvLyByZXNwb25kIHdpdGggYSA1MDEgaWYgdGhlIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWRcbiAgICBodHRwU3RhdHVzID0gSFRUUFN0YXR1c0NvZGVzLk5PVF9JTVBMRU1FTlRFRDtcbiAgfSBlbHNlIGlmIChpc0Vycm9yVHlwZShlcnIsIGVycm9ycy5Ob1N1Y2hEcml2ZXJFcnJvcikpIHtcbiAgICAvLyByZXNwb25kIHdpdGggYSA0MDQgaWYgdGhlcmUgaXMgbm8gZHJpdmVyIGZvciB0aGUgc2Vzc2lvblxuICAgIGh0dHBTdGF0dXMgPSBIVFRQU3RhdHVzQ29kZXMuTk9UX0ZPVU5EO1xuICB9XG5cblxuICByZXR1cm4gW2h0dHBTdGF0dXMsIGh0dHBSZXNCb2R5XTtcbn1cblxuZXhwb3J0IHsgUHJvdG9jb2xFcnJvciwgZXJyb3JzLCBpc0Vycm9yVHlwZSwgZXJyb3JGcm9tTUpTT05XUFN0YXR1c0NvZGUsIGVycm9yRnJvbVczQ0pzb25Db2RlLCBnZXRSZXNwb25zZUZvclczQ0Vycm9yLCBnZXRSZXNwb25zZUZvckpzb253cEVycm9yIH07XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
