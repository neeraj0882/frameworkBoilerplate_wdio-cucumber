'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _http = require('http');

var _http2 = _interopRequireDefault(_http);

var _serveFavicon = require('serve-favicon');

var _serveFavicon2 = _interopRequireDefault(_serveFavicon);

var _bodyParser = require('body-parser');

var _bodyParser2 = _interopRequireDefault(_bodyParser);

var _methodOverride = require('method-override');

var _methodOverride2 = _interopRequireDefault(_methodOverride);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _expressLogging = require('./express-logging');

var _middleware = require('./middleware');

var _static = require('./static');

var _crash = require('./crash');

var _websocket = require('./websocket');

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

function server(configureRoutes, port) {
  var hostname = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];
  var app, httpServer, close;
  return _regeneratorRuntime.async(function server$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        app = (0, _express2['default'])();
        httpServer = _http2['default'].createServer(app);

        httpServer.addWebSocketHandler = _websocket.addWebSocketHandler;
        httpServer.removeWebSocketHandler = _websocket.removeWebSocketHandler;
        httpServer.removeAllWebSocketHandlers = _websocket.removeAllWebSocketHandlers;
        httpServer.getWebSocketHandlers = _websocket.getWebSocketHandlers;

        // http.Server.close() only stops new connections, but we need to wait until
        // all connections are closed and the `close` event is emitted
        close = httpServer.close.bind(httpServer);

        httpServer.close = function callee$1$0() {
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(new _bluebird2['default'](function (resolve, reject) {
                  httpServer.on('close', resolve);
                  close(function (err) {
                    if (err) reject(err); // eslint-disable-line curly
                  });
                }));

              case 2:
                return context$2$0.abrupt('return', context$2$0.sent);

              case 3:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        };

        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(new _bluebird2['default'](function (resolve, reject) {
          httpServer.on('error', function (err) {
            if (err.code === 'EADDRNOTAVAIL') {
              _logger2['default'].error('Could not start REST http interface listener. ' + 'Requested address is not available.');
            } else {
              _logger2['default'].error('Could not start REST http interface listener. The requested ' + 'port may already be in use. Please make sure there is no ' + 'other instance of this server running already.');
            }
            reject(err);
          });
          httpServer.on('connection', function (socket) {
            socket.setTimeout(600 * 1000); // 10 minute timeout
            socket.on('error', reject);
          });
          configureServer(app, configureRoutes);

          var serverArgs = [port];
          if (hostname) {
            // If the hostname is omitted, the server will accept
            // connections on any IP address
            serverArgs.push(hostname);
          }
          httpServer.listen.apply(httpServer, serverArgs.concat([function (err) {
            if (err) {
              reject(err);
            }
            resolve(httpServer);
          }]));
        }));

      case 10:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 11:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function configureServer(app, configureRoutes) {
  app.use(_expressLogging.endLogFormatter);

  // set up static assets
  app.use((0, _serveFavicon2['default'])(_path2['default'].resolve(_static.STATIC_DIR, 'favicon.ico')));
  app.use(_express2['default']['static'](_static.STATIC_DIR));

  // crash routes, for testing
  app.use('/wd/hub/produce_error', _crash.produceError);
  app.use('/wd/hub/crash', _crash.produceCrash);

  // add middlewares
  app.use(_middleware.allowCrossDomain);
  app.use(_middleware.fixPythonContentType);
  app.use(_middleware.defaultToJSONContentType);
  app.use(_bodyParser2['default'].urlencoded({ extended: true }));
  app.use((0, _methodOverride2['default'])());
  app.use(_middleware.catch4XXHandler);
  app.use(_middleware.catchAllHandler);

  // make sure appium never fails because of a file size upload limit
  app.use(_bodyParser2['default'].json({ limit: '1gb' }));

  // set up start logging (which depends on bodyParser doing its thing)
  app.use(_expressLogging.startLogFormatter);

  configureRoutes(app);

  // dynamic routes for testing, etc.
  app.all('/welcome', _static.welcome);
  app.all('/test/guinea-pig', _static.guineaPig);
  app.all('/test/guinea-pig-scrollable', _static.guineaPigScrollable);
  app.all('/test/guinea-pig-app-banner', _static.guineaPigAppBanner);

  // catch this last, so anything that falls through is 404ed
  app.use(_middleware.catch404Handler);
}

exports.server = server;
exports.configureServer = configureServer;

// create the actual http server
//# sourceMappingURL=data:application/json;charset=utf8;base64,
