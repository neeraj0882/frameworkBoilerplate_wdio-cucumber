'use strict';

var _defineProperty = require('babel-runtime/helpers/define-property')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _appiumSupport = require('appium-support');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var rootDir = _path2['default'].resolve(__dirname, '..', '..', '..', 'uiauto');
if (!__dirname.match(/build\/lib\/uiauto/)) {
  rootDir = _path2['default'].resolve(__dirname, 'uiauto');
}

// this regex helps us get the file path of an import
var importRe = /^#import ('|")([^('|")]+)('|")$/mg;

function getDepsForFile(file, filesExamined) {
  var extraImports = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];

  var data, deps, imports, match, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, importedFile, importedPath, importedDeps;

  return _regeneratorRuntime.async(function getDepsForFile$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!_lodash2['default'].includes(filesExamined, file)) {
          context$1$0.next = 2;
          break;
        }

        throw new Error('Re-examining file ' + file + '; you need to make sure ' + 'the graph is set up so we do not require files twice');

      case 2:

        // save the file so we don't look at it again
        filesExamined.push(file);
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(file, 'utf8'));

      case 5:
        data = context$1$0.sent;
        deps = _defineProperty({}, file, []);
        imports = [];
        match = importRe.exec(data);

        while (match) {
          if (match) {
            imports.push(match[2]);
          }
          match = importRe.exec(data);
        }
        // add in any extra imports sent in
        imports = extraImports.concat(imports);

        // go through all the imports for the file, and do the same process
        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 14;
        _iterator = _getIterator(imports);

      case 16:
        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
          context$1$0.next = 26;
          break;
        }

        importedFile = _step.value;
        importedPath = _path2['default'].resolve(_path2['default'].dirname(file), importedFile);
        context$1$0.next = 21;
        return _regeneratorRuntime.awrap(getDepsForFile(importedPath, filesExamined));

      case 21:
        importedDeps = context$1$0.sent;

        deps[file].push(importedDeps);

      case 23:
        _iteratorNormalCompletion = true;
        context$1$0.next = 16;
        break;

      case 26:
        context$1$0.next = 32;
        break;

      case 28:
        context$1$0.prev = 28;
        context$1$0.t0 = context$1$0['catch'](14);
        _didIteratorError = true;
        _iteratorError = context$1$0.t0;

      case 32:
        context$1$0.prev = 32;
        context$1$0.prev = 33;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 35:
        context$1$0.prev = 35;

        if (!_didIteratorError) {
          context$1$0.next = 38;
          break;
        }

        throw _iteratorError;

      case 38:
        return context$1$0.finish(35);

      case 39:
        return context$1$0.finish(32);

      case 40:
        return context$1$0.abrupt('return', deps);

      case 41:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[14, 28, 32, 40], [33,, 35, 39]]);
}

function buildScriptFromDeps(deps) {
  var script, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _step2$value, file, subDepsArray, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, subDeps, fileContents, newFileData, fileWithoutRoot;

  return _regeneratorRuntime.async(function buildScriptFromDeps$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        script = '';
        _iteratorNormalCompletion2 = true;
        _didIteratorError2 = false;
        _iteratorError2 = undefined;
        context$1$0.prev = 4;
        _iterator2 = _getIterator(_lodash2['default'].toPairs(deps));

      case 6:
        if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
          context$1$0.next = 48;
          break;
        }

        _step2$value = _slicedToArray(_step2.value, 2);
        file = _step2$value[0];
        subDepsArray = _step2$value[1];
        _iteratorNormalCompletion3 = true;
        _didIteratorError3 = false;
        _iteratorError3 = undefined;
        context$1$0.prev = 13;
        _iterator3 = _getIterator(subDepsArray);

      case 15:
        if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
          context$1$0.next = 23;
          break;
        }

        subDeps = _step3.value;
        context$1$0.next = 19;
        return _regeneratorRuntime.awrap(buildScriptFromDeps(subDeps));

      case 19:
        script += context$1$0.sent;

      case 20:
        _iteratorNormalCompletion3 = true;
        context$1$0.next = 15;
        break;

      case 23:
        context$1$0.next = 29;
        break;

      case 25:
        context$1$0.prev = 25;
        context$1$0.t0 = context$1$0['catch'](13);
        _didIteratorError3 = true;
        _iteratorError3 = context$1$0.t0;

      case 29:
        context$1$0.prev = 29;
        context$1$0.prev = 30;

        if (!_iteratorNormalCompletion3 && _iterator3['return']) {
          _iterator3['return']();
        }

      case 32:
        context$1$0.prev = 32;

        if (!_didIteratorError3) {
          context$1$0.next = 35;
          break;
        }

        throw _iteratorError3;

      case 35:
        return context$1$0.finish(32);

      case 36:
        return context$1$0.finish(29);

      case 37:
        context$1$0.next = 39;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(file, 'utf8'));

      case 39:
        fileContents = context$1$0.sent;
        newFileData = stripImports(fileContents);
        fileWithoutRoot = file.replace(rootDir + '/', '');

        script += '\n/* begin file: ' + fileWithoutRoot + ' */\n';
        script += newFileData;
        script += '\n/* end file: ' + fileWithoutRoot + ' */\n';

      case 45:
        _iteratorNormalCompletion2 = true;
        context$1$0.next = 6;
        break;

      case 48:
        context$1$0.next = 54;
        break;

      case 50:
        context$1$0.prev = 50;
        context$1$0.t1 = context$1$0['catch'](4);
        _didIteratorError2 = true;
        _iteratorError2 = context$1$0.t1;

      case 54:
        context$1$0.prev = 54;
        context$1$0.prev = 55;

        if (!_iteratorNormalCompletion2 && _iterator2['return']) {
          _iterator2['return']();
        }

      case 57:
        context$1$0.prev = 57;

        if (!_didIteratorError2) {
          context$1$0.next = 60;
          break;
        }

        throw _iteratorError2;

      case 60:
        return context$1$0.finish(57);

      case 61:
        return context$1$0.finish(54);

      case 62:
        return context$1$0.abrupt('return', script);

      case 63:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[4, 50, 54, 62], [13, 25, 29, 37], [30,, 32, 36], [55,, 57, 61]]);
}

function stripImports(data) {
  // get rid of the import statements from the string
  data = data.replace(importRe, '');
  data = data.trim();
  return data;
}

function buildScript(entryPoint) {
  var extraImports = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];
  var filesExamined, deps, script;
  return _regeneratorRuntime.async(function buildScript$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        filesExamined = [];
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(getDepsForFile(entryPoint, filesExamined, extraImports));

      case 3:
        deps = context$1$0.sent;
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(buildScriptFromDeps(deps));

      case 6:
        script = context$1$0.sent;
        return context$1$0.abrupt('return', script);

      case 8:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

exports['default'] = buildScript;
module.exports = exports['default'];

// make sure we don't have a cycle in our dependencies

// check for import statements in the file, and make a list of them

// recursively get dependencies for imported files

// go through all the dependencies and recursively
// add them to our script string

// keep a list of files we examine for the purposes of making sure we're
// not adding the same file to the collated version twice
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi91aWF1dG8vYnVpbGQtc2NyaXB0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQWlCLE1BQU07Ozs7NkJBQ0osZ0JBQWdCOztzQkFDckIsUUFBUTs7OztBQUd0QixJQUFJLE9BQU8sR0FBRyxrQkFBSyxPQUFPLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ2xFLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLG9CQUFvQixDQUFDLEVBQUU7QUFDMUMsU0FBTyxHQUFHLGtCQUFLLE9BQU8sQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUM7Q0FDN0M7OztBQUdELElBQU0sUUFBUSxHQUFHLG1DQUFtQyxDQUFDOztBQUVyRCxTQUFlLGNBQWMsQ0FBRSxJQUFJLEVBQUUsYUFBYTtNQUFFLFlBQVkseURBQUcsRUFBRTs7TUFTL0QsSUFBSSxFQUNKLElBQUksRUFLSixPQUFPLEVBQ1AsS0FBSyxrRkFXQSxZQUFZLEVBQ2YsWUFBWSxFQUVaLFlBQVk7Ozs7O2FBNUJkLG9CQUFFLFFBQVEsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDOzs7OztjQUMzQixJQUFJLEtBQUssQ0FBQyx1QkFBcUIsSUFBSSxzRkFDNkIsQ0FBQzs7Ozs7QUFJekUscUJBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7O3lDQUNSLGtCQUFHLFFBQVEsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDOzs7QUFBdEMsWUFBSTtBQUNKLFlBQUksdUJBQ0wsSUFBSSxFQUFHLEVBQUU7QUFJUixlQUFPLEdBQUcsRUFBRTtBQUNaLGFBQUssR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQzs7QUFDL0IsZUFBTyxLQUFLLEVBQUU7QUFDWixjQUFJLEtBQUssRUFBRTtBQUNULG1CQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1dBQ3hCO0FBQ0QsZUFBSyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDN0I7O0FBRUQsZUFBTyxHQUFHLFlBQVksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7Ozs7Ozs7aUNBR2QsT0FBTzs7Ozs7Ozs7QUFBdkIsb0JBQVk7QUFDZixvQkFBWSxHQUFHLGtCQUFLLE9BQU8sQ0FBQyxrQkFBSyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsWUFBWSxDQUFDOzt5Q0FFeEMsY0FBYyxDQUFDLFlBQVksRUFBRSxhQUFhLENBQUM7OztBQUFoRSxvQkFBWTs7QUFDaEIsWUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzRDQUd6QixJQUFJOzs7Ozs7O0NBQ1o7O0FBRUQsU0FBZSxtQkFBbUIsQ0FBRSxJQUFJO01BQ2xDLE1BQU0scUdBR0EsSUFBSSxFQUFFLFlBQVksdUZBQ2pCLE9BQU8sRUFHWixZQUFZLEVBQ1osV0FBVyxFQUVYLGVBQWU7Ozs7O0FBVmpCLGNBQU0sR0FBRyxFQUFFOzs7OztrQ0FHa0Isb0JBQUUsT0FBTyxDQUFDLElBQUksQ0FBQzs7Ozs7Ozs7O0FBQXRDLFlBQUk7QUFBRSxvQkFBWTs7Ozs7a0NBQ04sWUFBWTs7Ozs7Ozs7QUFBdkIsZUFBTzs7eUNBQ0UsbUJBQW1CLENBQUMsT0FBTyxDQUFDOzs7QUFBNUMsY0FBTTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt5Q0FFaUIsa0JBQUcsUUFBUSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUM7OztBQUE5QyxvQkFBWTtBQUNaLG1CQUFXLEdBQUcsWUFBWSxDQUFDLFlBQVksQ0FBQztBQUV4Qyx1QkFBZSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUksT0FBTyxRQUFLLEVBQUUsQ0FBQzs7QUFDckQsY0FBTSwwQkFBd0IsZUFBZSxVQUFPLENBQUM7QUFDckQsY0FBTSxJQUFJLFdBQVcsQ0FBQztBQUN0QixjQUFNLHdCQUFzQixlQUFlLFVBQU8sQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzRDQUU5QyxNQUFNOzs7Ozs7O0NBQ2Q7O0FBRUQsU0FBUyxZQUFZLENBQUUsSUFBSSxFQUFFOztBQUUzQixNQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDbEMsTUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNuQixTQUFPLElBQUksQ0FBQztDQUNiOztBQUVELFNBQWUsV0FBVyxDQUFFLFVBQVU7TUFBRSxZQUFZLHlEQUFHLEVBQUU7TUFHbkQsYUFBYSxFQUViLElBQUksRUFDSixNQUFNOzs7O0FBSE4scUJBQWEsR0FBRyxFQUFFOzt5Q0FFTCxjQUFjLENBQUMsVUFBVSxFQUFFLGFBQWEsRUFBRSxZQUFZLENBQUM7OztBQUFwRSxZQUFJOzt5Q0FDWSxtQkFBbUIsQ0FBQyxJQUFJLENBQUM7OztBQUF6QyxjQUFNOzRDQUNILE1BQU07Ozs7Ozs7Q0FDZDs7cUJBRWMsV0FBVyIsImZpbGUiOiJsaWIvdWlhdXRvL2J1aWxkLXNjcmlwdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgZnMgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5cbmxldCByb290RGlyID0gcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uJywgJy4uJywgJy4uJywgJ3VpYXV0bycpO1xuaWYgKCFfX2Rpcm5hbWUubWF0Y2goL2J1aWxkXFwvbGliXFwvdWlhdXRvLykpIHtcbiAgcm9vdERpciA9IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICd1aWF1dG8nKTtcbn1cblxuLy8gdGhpcyByZWdleCBoZWxwcyB1cyBnZXQgdGhlIGZpbGUgcGF0aCBvZiBhbiBpbXBvcnRcbmNvbnN0IGltcG9ydFJlID0gL14jaW1wb3J0ICgnfFwiKShbXignfFwiKV0rKSgnfFwiKSQvbWc7XG5cbmFzeW5jIGZ1bmN0aW9uIGdldERlcHNGb3JGaWxlIChmaWxlLCBmaWxlc0V4YW1pbmVkLCBleHRyYUltcG9ydHMgPSBbXSkge1xuICAvLyBtYWtlIHN1cmUgd2UgZG9uJ3QgaGF2ZSBhIGN5Y2xlIGluIG91ciBkZXBlbmRlbmNpZXNcbiAgaWYgKF8uaW5jbHVkZXMoZmlsZXNFeGFtaW5lZCwgZmlsZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFJlLWV4YW1pbmluZyBmaWxlICR7ZmlsZX07IHlvdSBuZWVkIHRvIG1ha2Ugc3VyZSBgICtcbiAgICAgICAgICAgICAgICAgICAgYHRoZSBncmFwaCBpcyBzZXQgdXAgc28gd2UgZG8gbm90IHJlcXVpcmUgZmlsZXMgdHdpY2VgKTtcbiAgfVxuXG4gIC8vIHNhdmUgdGhlIGZpbGUgc28gd2UgZG9uJ3QgbG9vayBhdCBpdCBhZ2FpblxuICBmaWxlc0V4YW1pbmVkLnB1c2goZmlsZSk7XG4gIGxldCBkYXRhID0gYXdhaXQgZnMucmVhZEZpbGUoZmlsZSwgJ3V0ZjgnKTtcbiAgbGV0IGRlcHMgPSB7XG4gICAgW2ZpbGVdOiBbXVxuICB9O1xuXG4gIC8vIGNoZWNrIGZvciBpbXBvcnQgc3RhdGVtZW50cyBpbiB0aGUgZmlsZSwgYW5kIG1ha2UgYSBsaXN0IG9mIHRoZW1cbiAgbGV0IGltcG9ydHMgPSBbXTtcbiAgbGV0IG1hdGNoID0gaW1wb3J0UmUuZXhlYyhkYXRhKTtcbiAgd2hpbGUgKG1hdGNoKSB7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICBpbXBvcnRzLnB1c2gobWF0Y2hbMl0pO1xuICAgIH1cbiAgICBtYXRjaCA9IGltcG9ydFJlLmV4ZWMoZGF0YSk7XG4gIH1cbiAgLy8gYWRkIGluIGFueSBleHRyYSBpbXBvcnRzIHNlbnQgaW5cbiAgaW1wb3J0cyA9IGV4dHJhSW1wb3J0cy5jb25jYXQoaW1wb3J0cyk7XG5cbiAgLy8gZ28gdGhyb3VnaCBhbGwgdGhlIGltcG9ydHMgZm9yIHRoZSBmaWxlLCBhbmQgZG8gdGhlIHNhbWUgcHJvY2Vzc1xuICBmb3IgKGxldCBpbXBvcnRlZEZpbGUgb2YgaW1wb3J0cykge1xuICAgIGxldCBpbXBvcnRlZFBhdGggPSBwYXRoLnJlc29sdmUocGF0aC5kaXJuYW1lKGZpbGUpLCBpbXBvcnRlZEZpbGUpO1xuICAgIC8vIHJlY3Vyc2l2ZWx5IGdldCBkZXBlbmRlbmNpZXMgZm9yIGltcG9ydGVkIGZpbGVzXG4gICAgbGV0IGltcG9ydGVkRGVwcyA9IGF3YWl0IGdldERlcHNGb3JGaWxlKGltcG9ydGVkUGF0aCwgZmlsZXNFeGFtaW5lZCk7XG4gICAgZGVwc1tmaWxlXS5wdXNoKGltcG9ydGVkRGVwcyk7XG4gIH1cblxuICByZXR1cm4gZGVwcztcbn1cblxuYXN5bmMgZnVuY3Rpb24gYnVpbGRTY3JpcHRGcm9tRGVwcyAoZGVwcykge1xuICBsZXQgc2NyaXB0ID0gJyc7XG4gIC8vIGdvIHRocm91Z2ggYWxsIHRoZSBkZXBlbmRlbmNpZXMgYW5kIHJlY3Vyc2l2ZWx5XG4gIC8vIGFkZCB0aGVtIHRvIG91ciBzY3JpcHQgc3RyaW5nXG4gIGZvciAobGV0IFtmaWxlLCBzdWJEZXBzQXJyYXldIG9mIF8udG9QYWlycyhkZXBzKSkge1xuICAgIGZvciAobGV0IHN1YkRlcHMgb2Ygc3ViRGVwc0FycmF5KSB7XG4gICAgICBzY3JpcHQgKz0gYXdhaXQgYnVpbGRTY3JpcHRGcm9tRGVwcyhzdWJEZXBzKTtcbiAgICB9XG4gICAgbGV0IGZpbGVDb250ZW50cyA9IGF3YWl0IGZzLnJlYWRGaWxlKGZpbGUsICd1dGY4Jyk7XG4gICAgbGV0IG5ld0ZpbGVEYXRhID0gc3RyaXBJbXBvcnRzKGZpbGVDb250ZW50cyk7XG5cbiAgICBsZXQgZmlsZVdpdGhvdXRSb290ID0gZmlsZS5yZXBsYWNlKGAke3Jvb3REaXJ9L2AsICcnKTtcbiAgICBzY3JpcHQgKz0gYFxcbi8qIGJlZ2luIGZpbGU6ICR7ZmlsZVdpdGhvdXRSb290fSAqL1xcbmA7XG4gICAgc2NyaXB0ICs9IG5ld0ZpbGVEYXRhO1xuICAgIHNjcmlwdCArPSBgXFxuLyogZW5kIGZpbGU6ICR7ZmlsZVdpdGhvdXRSb290fSAqL1xcbmA7XG4gIH1cbiAgcmV0dXJuIHNjcmlwdDtcbn1cblxuZnVuY3Rpb24gc3RyaXBJbXBvcnRzIChkYXRhKSB7XG4gIC8vIGdldCByaWQgb2YgdGhlIGltcG9ydCBzdGF0ZW1lbnRzIGZyb20gdGhlIHN0cmluZ1xuICBkYXRhID0gZGF0YS5yZXBsYWNlKGltcG9ydFJlLCAnJyk7XG4gIGRhdGEgPSBkYXRhLnRyaW0oKTtcbiAgcmV0dXJuIGRhdGE7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGJ1aWxkU2NyaXB0IChlbnRyeVBvaW50LCBleHRyYUltcG9ydHMgPSBbXSkge1xuICAvLyBrZWVwIGEgbGlzdCBvZiBmaWxlcyB3ZSBleGFtaW5lIGZvciB0aGUgcHVycG9zZXMgb2YgbWFraW5nIHN1cmUgd2UncmVcbiAgLy8gbm90IGFkZGluZyB0aGUgc2FtZSBmaWxlIHRvIHRoZSBjb2xsYXRlZCB2ZXJzaW9uIHR3aWNlXG4gIGxldCBmaWxlc0V4YW1pbmVkID0gW107XG5cbiAgbGV0IGRlcHMgPSBhd2FpdCBnZXREZXBzRm9yRmlsZShlbnRyeVBvaW50LCBmaWxlc0V4YW1pbmVkLCBleHRyYUltcG9ydHMpO1xuICBsZXQgc2NyaXB0ID0gIGF3YWl0IGJ1aWxkU2NyaXB0RnJvbURlcHMoZGVwcyk7XG4gIHJldHVybiBzY3JpcHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJ1aWxkU2NyaXB0O1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
