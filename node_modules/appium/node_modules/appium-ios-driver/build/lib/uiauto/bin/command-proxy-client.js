#!/usr/bin/env node


// This script is used by the UIAuto job, running on Instruments, to connect
// to the Command Proxy. It transmits the Instruments messages exactly as they
// come in. Because stderr is unreliable, we append logs and program output
// before sending them to the UIAuto script in the following form:
// ----- LOGS -----
// blah blah blah...
// blah blah blah...
// ----- OUTPUT -----
// <OUTPUT>

// This script is run on the device, and as such is not ES6. Problems can
// ensue if it is transpiled.

"use strict";

var net = require('net');

var output = '';

function exit(status) {
  console.log('----- OUTPUT -----');
  console.log(output);
  // chill out before exiting
  process.nextTick(function () {
    process.exit(status);
  });
}

function connect(sock, dataFromInstruments) {
  var client = net.connect({ path: sock }, function () {
    if (dataFromInstruments && dataFromInstruments.length > 0) {
      console.log('Data from instruments to command proxy:');
      console.log(dataFromInstruments.substring(0, 100));
    }
    client.end(dataFromInstruments, "utf8");
  });
  client.setEncoding('utf8');
  client.on('data', function (dataFromCommandProxy) {
    console.log('Data from command proxy to instruments: ' + dataFromCommandProxy);
    output += dataFromCommandProxy;
  });
  client.on('error', function (err) {
    console.log('Error from command proxy to instruments: ' + err);
  });
  client.on('end', function () {
    client.end();
    exit(0);
  });
}

try {
  console.log('----- LOGS -----');
  connect(process.argv[2], process.argv[3]);
} catch (err) {
  console.log('An error occured: ' + (err || "").toString());
  exit(1);
}
// });
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi91aWF1dG8vYmluL2NvbW1hbmQtcHJveHktY2xpZW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQWVBLFlBQVksQ0FBQzs7QUFFYixJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7O0FBRXpCLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQzs7QUFFaEIsU0FBUyxJQUFJLENBQUUsTUFBTSxFQUFFO0FBQ3JCLFNBQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUNsQyxTQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDOztBQUVwQixTQUFPLENBQUMsUUFBUSxDQUFDLFlBQVk7QUFDM0IsV0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztHQUN0QixDQUFDLENBQUM7Q0FDSjs7QUFFRCxTQUFTLE9BQU8sQ0FBRSxJQUFJLEVBQUUsbUJBQW1CLEVBQUU7QUFDM0MsTUFBSSxNQUFNLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFDLElBQUksRUFBRSxJQUFJLEVBQUMsRUFBRSxZQUFZO0FBQ2pELFFBQUksbUJBQW1CLElBQUksbUJBQW1CLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBQztBQUN4RCxhQUFPLENBQUMsR0FBRyxDQUFDLHlDQUF5QyxDQUFDLENBQUM7QUFDdkQsYUFBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7S0FDcEQ7QUFDRCxVQUFNLENBQUMsR0FBRyxDQUFDLG1CQUFtQixFQUFFLE1BQU0sQ0FBQyxDQUFDO0dBQ3pDLENBQUMsQ0FBQztBQUNILFFBQU0sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDM0IsUUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsVUFBVSxvQkFBb0IsRUFBRTtBQUNoRCxXQUFPLENBQUMsR0FBRyxDQUFDLDBDQUEwQyxHQUFHLG9CQUFvQixDQUFDLENBQUM7QUFDL0UsVUFBTSxJQUFJLG9CQUFvQixDQUFDO0dBQ2hDLENBQUMsQ0FBQztBQUNILFFBQU0sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLFVBQVUsR0FBRyxFQUFFO0FBQ2hDLFdBQU8sQ0FBQyxHQUFHLENBQUMsMkNBQTJDLEdBQUcsR0FBRyxDQUFDLENBQUM7R0FDaEUsQ0FBQyxDQUFDO0FBQ0gsUUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsWUFBWTtBQUMzQixVQUFNLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDYixRQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7R0FDVCxDQUFDLENBQUM7Q0FDSjs7QUFFRCxJQUFJO0FBQ0YsU0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBQ2hDLFNBQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUMzQyxDQUFDLE9BQU8sR0FBRyxFQUFFO0FBQ1osU0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsR0FBRyxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUEsQ0FBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO0FBQzNELE1BQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUNUIiwiZmlsZSI6ImxpYi91aWF1dG8vYmluL2NvbW1hbmQtcHJveHktY2xpZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5cbi8vIFRoaXMgc2NyaXB0IGlzIHVzZWQgYnkgdGhlIFVJQXV0byBqb2IsIHJ1bm5pbmcgb24gSW5zdHJ1bWVudHMsIHRvIGNvbm5lY3Rcbi8vIHRvIHRoZSBDb21tYW5kIFByb3h5LiBJdCB0cmFuc21pdHMgdGhlIEluc3RydW1lbnRzIG1lc3NhZ2VzIGV4YWN0bHkgYXMgdGhleVxuLy8gY29tZSBpbi4gQmVjYXVzZSBzdGRlcnIgaXMgdW5yZWxpYWJsZSwgd2UgYXBwZW5kIGxvZ3MgYW5kIHByb2dyYW0gb3V0cHV0XG4vLyBiZWZvcmUgc2VuZGluZyB0aGVtIHRvIHRoZSBVSUF1dG8gc2NyaXB0IGluIHRoZSBmb2xsb3dpbmcgZm9ybTpcbi8vIC0tLS0tIExPR1MgLS0tLS1cbi8vIGJsYWggYmxhaCBibGFoLi4uXG4vLyBibGFoIGJsYWggYmxhaC4uLlxuLy8gLS0tLS0gT1VUUFVUIC0tLS0tXG4vLyA8T1VUUFVUPlxuXG4vLyBUaGlzIHNjcmlwdCBpcyBydW4gb24gdGhlIGRldmljZSwgYW5kIGFzIHN1Y2ggaXMgbm90IEVTNi4gUHJvYmxlbXMgY2FuXG4vLyBlbnN1ZSBpZiBpdCBpcyB0cmFuc3BpbGVkLlxuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIG5ldCA9IHJlcXVpcmUoJ25ldCcpO1xuXG52YXIgb3V0cHV0ID0gJyc7XG5cbmZ1bmN0aW9uIGV4aXQgKHN0YXR1cykge1xuICBjb25zb2xlLmxvZygnLS0tLS0gT1VUUFVUIC0tLS0tJyk7XG4gIGNvbnNvbGUubG9nKG91dHB1dCk7XG4gIC8vIGNoaWxsIG91dCBiZWZvcmUgZXhpdGluZ1xuICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmV4aXQoc3RhdHVzKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNvbm5lY3QgKHNvY2ssIGRhdGFGcm9tSW5zdHJ1bWVudHMpIHtcbiAgdmFyIGNsaWVudCA9IG5ldC5jb25uZWN0KHtwYXRoOiBzb2NrfSwgZnVuY3Rpb24gKCkge1xuICAgIGlmIChkYXRhRnJvbUluc3RydW1lbnRzICYmIGRhdGFGcm9tSW5zdHJ1bWVudHMubGVuZ3RoID4gMCl7XG4gICAgICBjb25zb2xlLmxvZygnRGF0YSBmcm9tIGluc3RydW1lbnRzIHRvIGNvbW1hbmQgcHJveHk6Jyk7XG4gICAgICBjb25zb2xlLmxvZyhkYXRhRnJvbUluc3RydW1lbnRzLnN1YnN0cmluZygwLCAxMDApKTtcbiAgICB9XG4gICAgY2xpZW50LmVuZChkYXRhRnJvbUluc3RydW1lbnRzLCBcInV0ZjhcIik7XG4gIH0pO1xuICBjbGllbnQuc2V0RW5jb2RpbmcoJ3V0ZjgnKTtcbiAgY2xpZW50Lm9uKCdkYXRhJywgZnVuY3Rpb24gKGRhdGFGcm9tQ29tbWFuZFByb3h5KSB7XG4gICAgY29uc29sZS5sb2coJ0RhdGEgZnJvbSBjb21tYW5kIHByb3h5IHRvIGluc3RydW1lbnRzOiAnICsgZGF0YUZyb21Db21tYW5kUHJveHkpO1xuICAgIG91dHB1dCArPSBkYXRhRnJvbUNvbW1hbmRQcm94eTtcbiAgfSk7XG4gIGNsaWVudC5vbignZXJyb3InLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgY29uc29sZS5sb2coJ0Vycm9yIGZyb20gY29tbWFuZCBwcm94eSB0byBpbnN0cnVtZW50czogJyArIGVycik7XG4gIH0pO1xuICBjbGllbnQub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICBjbGllbnQuZW5kKCk7XG4gICAgZXhpdCgwKTtcbiAgfSk7XG59XG5cbnRyeSB7XG4gIGNvbnNvbGUubG9nKCctLS0tLSBMT0dTIC0tLS0tJyk7XG4gIGNvbm5lY3QocHJvY2Vzcy5hcmd2WzJdLCBwcm9jZXNzLmFyZ3ZbM10pO1xufSBjYXRjaCAoZXJyKSB7XG4gIGNvbnNvbGUubG9nKCdBbiBlcnJvciBvY2N1cmVkOiAnICsgKGVyciB8fCBcIlwiKS50b1N0cmluZygpKTtcbiAgZXhpdCgxKTtcbn1cbi8vIH0pO1xuXG4iXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uLy4uIn0=
