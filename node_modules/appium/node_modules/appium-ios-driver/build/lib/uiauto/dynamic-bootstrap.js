// Generate a bootstrap for the UIAuto Instruments script containing
// the environment variables we need.

'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _crypto = require('crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _appiumSupport = require('appium-support');

var _buildScript = require('./build-script');

var _buildScript2 = _interopRequireDefault(_buildScript);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _uiautoClient = require('./uiauto-client');

var BOOTSTRAP_JS_PATH = _path2['default'].resolve(__dirname, '..', '..', '..', 'uiauto', 'bootstrap.js');
var COMMAND_PROXY_CLIENT_PATH = _path2['default'].resolve(__dirname, 'bin', 'command-proxy-client.js');
if (!__dirname.match(/build\/lib\/uiauto$/)) {
  BOOTSTRAP_JS_PATH = _path2['default'].resolve(__dirname, '..', 'uiauto', 'bootstrap.js');
  COMMAND_PROXY_CLIENT_PATH = _path2['default'].resolve(__dirname, 'bin', 'command-proxy-client.js');
}

function getEnv() {
  var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  // build an object with the required properties for bootstrap
  return {
    nodePath: process.execPath,
    commandProxyClientPath: COMMAND_PROXY_CLIENT_PATH,
    instrumentsSock: opts.sock || _uiautoClient.DEFAULT_INSTRUMENTS_SOCKET,
    interKeyDelay: opts.interKeyDelay || null,
    justLoopInfinitely: opts.justLoopInfinitely,
    autoAcceptAlerts: opts.autoAcceptAlerts,
    autoDismissAlerts: opts.autoDismissAlerts,
    sendKeyStrategy: opts.sendKeyStrategy,
    initialLocation: opts.initialLocation
  };
}

function buildCode(opts) {
  var env, bootstrapJs, imports, bootstrapCode, lines, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step$value, key, value, quote;

  return _regeneratorRuntime.async(function buildCode$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!opts.code) {
          context$1$0.next = 2;
          break;
        }

        return context$1$0.abrupt('return', opts.code);

      case 2:
        env = getEnv(opts);

        _logger2['default'].debug('Dynamic env: ' + JSON.stringify(env));

        bootstrapJs = BOOTSTRAP_JS_PATH;
        imports = opts.imports && opts.imports.pre ? opts.imports.pre : [];
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap((0, _buildScript2['default'])(bootstrapJs, imports));

      case 8:
        bootstrapCode = context$1$0.sent;
        lines = [];

        lines.push('// This file is automatically generated. Do not manually modify!');
        lines.push('');
        lines.push(bootstrapCode);
        lines.push('');
        lines.push('bootstrap({');
        // add each defined variable to the environment
        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 18;
        for (_iterator = _getIterator(_lodash2['default'].toPairs(env)); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          _step$value = _slicedToArray(_step.value, 2);
          key = _step$value[0];
          value = _step$value[1];

          if (!_lodash2['default'].isUndefined(value)) {
            quote = _lodash2['default'].isString(value) ? '\"' : '';

            lines.push('  "' + key + '": ' + quote + value + quote + ',');
          }
        }
        // get rid of the last comma that was added
        context$1$0.next = 26;
        break;

      case 22:
        context$1$0.prev = 22;
        context$1$0.t0 = context$1$0['catch'](18);
        _didIteratorError = true;
        _iteratorError = context$1$0.t0;

      case 26:
        context$1$0.prev = 26;
        context$1$0.prev = 27;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 29:
        context$1$0.prev = 29;

        if (!_didIteratorError) {
          context$1$0.next = 32;
          break;
        }

        throw _iteratorError;

      case 32:
        return context$1$0.finish(29);

      case 33:
        return context$1$0.finish(26);

      case 34:
        lines[lines.length - 1] = lines[lines.length - 1].replace(/,$/, '');
        lines.push('});');
        return context$1$0.abrupt('return', lines.join('\r\n'));

      case 37:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[18, 22, 26, 34], [27,, 29, 33]]);
}

function computeHash(code) {
  return _crypto2['default'].createHash('md5').update(code).digest('hex').substring(0, 16);
}

function getDynamicBootstrapDir() {
  var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  // figuring out where to store dynamic bootstrap
  var dynamicBootstrapDir = undefined;
  if (process.env.APPIUM_BOOTSTRAP_DIR) {
    // mainly for test
    dynamicBootstrapDir = process.env.APPIUM_BOOTSTRAP_DIR;
  } else if (process.env.HOME) {
    dynamicBootstrapDir = _path2['default'].resolve(process.env.HOME, 'Library/Application Support/appium/bootstrap');
  } else {
    // no user dir, using tmp
    dynamicBootstrapDir = _path2['default'].resolve(opts.tmpDir || '/tmp', 'appium/bootstrap');
  }
  return dynamicBootstrapDir;
}

function writeDynamicBootstrapIfNecessary(dynamicBootstrapDir, dynamicBootstrapPath, code, hash) {
  var codeIsGood, existingCode;
  return _regeneratorRuntime.async(function writeDynamicBootstrapIfNecessary$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap((0, _appiumSupport.mkdirp)(dynamicBootstrapDir));

      case 2:
        codeIsGood = true;
        context$1$0.prev = 3;
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(dynamicBootstrapPath));

      case 6:
        existingCode = context$1$0.sent;

        codeIsGood = computeHash(existingCode) === hash;
        context$1$0.next = 13;
        break;

      case 10:
        context$1$0.prev = 10;
        context$1$0.t0 = context$1$0['catch'](3);

        codeIsGood = false;

      case 13:
        if (!codeIsGood) {
          context$1$0.next = 17;
          break;
        }

        _logger2['default'].debug('Reusing dynamic bootstrap: ' + dynamicBootstrapPath);
        context$1$0.next = 20;
        break;

      case 17:
        _logger2['default'].debug('Creating or overwriting dynamic bootstrap: ' + dynamicBootstrapPath);
        context$1$0.next = 20;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(dynamicBootstrapPath, code, { flag: 'w+' }));

      case 20:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[3, 10]]);
}

function prepareBootstrap() {
  var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  var dynamicBootstrapDir, code, hash, dynamicBootstrapPath;
  return _regeneratorRuntime.async(function prepareBootstrap$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Preparing bootstrap code');

        dynamicBootstrapDir = getDynamicBootstrapDir(opts);

        _logger2['default'].debug('Dynamic bootstrap dir: ' + dynamicBootstrapDir);

        // building code and hash
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(buildCode(opts));

      case 5:
        code = context$1$0.sent;
        hash = computeHash(code);
        dynamicBootstrapPath = _path2['default'].resolve(dynamicBootstrapDir, 'bootstrap-' + hash + '.js');

        _logger2['default'].debug('Dynamic bootstrap code: ' + code.split('\n')[0] + '...');
        _logger2['default'].debug('Dynamic bootstrap path: ' + dynamicBootstrapPath);
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(writeDynamicBootstrapIfNecessary(dynamicBootstrapDir, dynamicBootstrapPath, code, hash));

      case 12:
        return context$1$0.abrupt('return', dynamicBootstrapPath);

      case 13:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

exports.prepareBootstrap = prepareBootstrap;
exports.getEnv = getEnv;

// only build the code if it hasn't been done before

// if special imports were sent in, make use of them

// generate the dynamic part of the bootstrap code
// with the environment set up properly

// check if there is existing code and it has the same hash

// write file if the old code is not the same
//# sourceMappingURL=data:application/json;charset=utf8;base64,
