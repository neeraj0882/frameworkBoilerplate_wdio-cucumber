#!/usr/bin/env node


// This script is used by the UIAuto job, running on Instruments, to connect
// to the Command Proxy. It transmits the Instruments messages exactly as they
// come in. Because stderr is unreliable, we append logs and program output
// before sending them to the UIAuto script in the following form:
// ----- LOGS -----
// blah blah blah...
// blah blah blah...
// ----- OUTPUT -----
// <OUTPUT>

// This script is run on the device, and as such is not ES6. Problems can
// ensue if it is transpiled.

"use strict";

var net = require('net');

var output = '';

function exit(status) {
  console.log('----- OUTPUT -----');
  console.log(output);
  // chill out before exiting
  process.nextTick(function () {
    process.exit(status);
  });
}

function connect(sock, dataFromInstruments) {
  var client = net.connect({ path: sock }, function () {
    if (dataFromInstruments && dataFromInstruments.length > 0) {
      console.log('Data from instruments to command proxy:');
      console.log(dataFromInstruments.substring(0, 100));
    }
    client.end(dataFromInstruments, "utf8");
  });
  client.setEncoding('utf8');
  client.on('data', function (dataFromCommandProxy) {
    console.log('Data from command proxy to instruments: ' + dataFromCommandProxy);
    output += dataFromCommandProxy;
  });
  client.on('error', function (err) {
    console.log('Error from command proxy to instruments: ' + err);
  });
  client.on('end', function () {
    client.end();
    exit(0);
  });
}

try {
  console.log('----- LOGS -----');
  connect(process.argv[2], process.argv[3]);
} catch (err) {
  console.log('An error occured: ' + (err || "").toString());
  exit(1);
}
// });
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi91aWF1dG8vY29tbWFuZC1wcm94eS1jbGllbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBZUEsWUFBWSxDQUFDOztBQUViLElBQUksR0FBRyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQzs7QUFFekIsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDOztBQUVoQixTQUFTLElBQUksQ0FBRSxNQUFNLEVBQUU7QUFDckIsU0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBQ2xDLFNBQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7O0FBRXBCLFNBQU8sQ0FBQyxRQUFRLENBQUMsWUFBWTtBQUMzQixXQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0dBQ3RCLENBQUMsQ0FBQztDQUNKOztBQUVELFNBQVMsT0FBTyxDQUFFLElBQUksRUFBRSxtQkFBbUIsRUFBRTtBQUMzQyxNQUFJLE1BQU0sR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUMsSUFBSSxFQUFFLElBQUksRUFBQyxFQUFFLFlBQVk7QUFDakQsUUFBSSxtQkFBbUIsSUFBSSxtQkFBbUIsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFDO0FBQ3hELGFBQU8sQ0FBQyxHQUFHLENBQUMseUNBQXlDLENBQUMsQ0FBQztBQUN2RCxhQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztLQUNwRDtBQUNELFVBQU0sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLEVBQUUsTUFBTSxDQUFDLENBQUM7R0FDekMsQ0FBQyxDQUFDO0FBQ0gsUUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMzQixRQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxVQUFVLG9CQUFvQixFQUFFO0FBQ2hELFdBQU8sQ0FBQyxHQUFHLENBQUMsMENBQTBDLEdBQUcsb0JBQW9CLENBQUMsQ0FBQztBQUMvRSxVQUFNLElBQUksb0JBQW9CLENBQUM7R0FDaEMsQ0FBQyxDQUFDO0FBQ0gsUUFBTSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsVUFBVSxHQUFHLEVBQUU7QUFDaEMsV0FBTyxDQUFDLEdBQUcsQ0FBQywyQ0FBMkMsR0FBRyxHQUFHLENBQUMsQ0FBQztHQUNoRSxDQUFDLENBQUM7QUFDSCxRQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxZQUFZO0FBQzNCLFVBQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNiLFFBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztHQUNULENBQUMsQ0FBQztDQUNKOztBQUVELElBQUk7QUFDRixTQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFDaEMsU0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQzNDLENBQUMsT0FBTyxHQUFHLEVBQUU7QUFDWixTQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixHQUFHLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBQSxDQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7QUFDM0QsTUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ1QiLCJmaWxlIjoibGliL3VpYXV0by9jb21tYW5kLXByb3h5LWNsaWVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuXG4vLyBUaGlzIHNjcmlwdCBpcyB1c2VkIGJ5IHRoZSBVSUF1dG8gam9iLCBydW5uaW5nIG9uIEluc3RydW1lbnRzLCB0byBjb25uZWN0XG4vLyB0byB0aGUgQ29tbWFuZCBQcm94eS4gSXQgdHJhbnNtaXRzIHRoZSBJbnN0cnVtZW50cyBtZXNzYWdlcyBleGFjdGx5IGFzIHRoZXlcbi8vIGNvbWUgaW4uIEJlY2F1c2Ugc3RkZXJyIGlzIHVucmVsaWFibGUsIHdlIGFwcGVuZCBsb2dzIGFuZCBwcm9ncmFtIG91dHB1dFxuLy8gYmVmb3JlIHNlbmRpbmcgdGhlbSB0byB0aGUgVUlBdXRvIHNjcmlwdCBpbiB0aGUgZm9sbG93aW5nIGZvcm06XG4vLyAtLS0tLSBMT0dTIC0tLS0tXG4vLyBibGFoIGJsYWggYmxhaC4uLlxuLy8gYmxhaCBibGFoIGJsYWguLi5cbi8vIC0tLS0tIE9VVFBVVCAtLS0tLVxuLy8gPE9VVFBVVD5cblxuLy8gVGhpcyBzY3JpcHQgaXMgcnVuIG9uIHRoZSBkZXZpY2UsIGFuZCBhcyBzdWNoIGlzIG5vdCBFUzYuIFByb2JsZW1zIGNhblxuLy8gZW5zdWUgaWYgaXQgaXMgdHJhbnNwaWxlZC5cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBuZXQgPSByZXF1aXJlKCduZXQnKTtcblxudmFyIG91dHB1dCA9ICcnO1xuXG5mdW5jdGlvbiBleGl0IChzdGF0dXMpIHtcbiAgY29uc29sZS5sb2coJy0tLS0tIE9VVFBVVCAtLS0tLScpO1xuICBjb25zb2xlLmxvZyhvdXRwdXQpO1xuICAvLyBjaGlsbCBvdXQgYmVmb3JlIGV4aXRpbmdcbiAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5leGl0KHN0YXR1cyk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjb25uZWN0IChzb2NrLCBkYXRhRnJvbUluc3RydW1lbnRzKSB7XG4gIHZhciBjbGllbnQgPSBuZXQuY29ubmVjdCh7cGF0aDogc29ja30sIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZGF0YUZyb21JbnN0cnVtZW50cyAmJiBkYXRhRnJvbUluc3RydW1lbnRzLmxlbmd0aCA+IDApe1xuICAgICAgY29uc29sZS5sb2coJ0RhdGEgZnJvbSBpbnN0cnVtZW50cyB0byBjb21tYW5kIHByb3h5OicpO1xuICAgICAgY29uc29sZS5sb2coZGF0YUZyb21JbnN0cnVtZW50cy5zdWJzdHJpbmcoMCwgMTAwKSk7XG4gICAgfVxuICAgIGNsaWVudC5lbmQoZGF0YUZyb21JbnN0cnVtZW50cywgXCJ1dGY4XCIpO1xuICB9KTtcbiAgY2xpZW50LnNldEVuY29kaW5nKCd1dGY4Jyk7XG4gIGNsaWVudC5vbignZGF0YScsIGZ1bmN0aW9uIChkYXRhRnJvbUNvbW1hbmRQcm94eSkge1xuICAgIGNvbnNvbGUubG9nKCdEYXRhIGZyb20gY29tbWFuZCBwcm94eSB0byBpbnN0cnVtZW50czogJyArIGRhdGFGcm9tQ29tbWFuZFByb3h5KTtcbiAgICBvdXRwdXQgKz0gZGF0YUZyb21Db21tYW5kUHJveHk7XG4gIH0pO1xuICBjbGllbnQub24oJ2Vycm9yJywgZnVuY3Rpb24gKGVycikge1xuICAgIGNvbnNvbGUubG9nKCdFcnJvciBmcm9tIGNvbW1hbmQgcHJveHkgdG8gaW5zdHJ1bWVudHM6ICcgKyBlcnIpO1xuICB9KTtcbiAgY2xpZW50Lm9uKCdlbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgY2xpZW50LmVuZCgpO1xuICAgIGV4aXQoMCk7XG4gIH0pO1xufVxuXG50cnkge1xuICBjb25zb2xlLmxvZygnLS0tLS0gTE9HUyAtLS0tLScpO1xuICBjb25uZWN0KHByb2Nlc3MuYXJndlsyXSwgcHJvY2Vzcy5hcmd2WzNdKTtcbn0gY2F0Y2ggKGVycikge1xuICBjb25zb2xlLmxvZygnQW4gZXJyb3Igb2NjdXJlZDogJyArIChlcnIgfHwgXCJcIikudG9TdHJpbmcoKSk7XG4gIGV4aXQoMSk7XG59XG4vLyB9KTtcblxuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
