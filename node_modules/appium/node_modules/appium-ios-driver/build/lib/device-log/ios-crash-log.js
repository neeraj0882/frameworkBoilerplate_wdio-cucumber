'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumSupport = require('appium-support');

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var IOSCrashLog = (function () {
  function IOSCrashLog(logDir) {
    _classCallCheck(this, IOSCrashLog);

    this.logDir = logDir || _path2['default'].resolve(process.env.HOME || '/', 'Library', 'Logs', 'DiagnosticReports');
    this.prevLogs = [];
    this.logsSinceLastRequest = [];
  }

  _createClass(IOSCrashLog, [{
    key: 'getCrashes',
    value: function getCrashes() {
      return _regeneratorRuntime.async(function getCrashes$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.prev = 0;
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.glob(this.logDir + '/*.crash'));

          case 3:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 6:
            context$2$0.prev = 6;
            context$2$0.t0 = context$2$0['catch'](0);

            _logger2['default'].errorAndThrow('There was a problem getting the crash list: ' + context$2$0.t0);

          case 9:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[0, 6]]);
    }
  }, {
    key: 'filesToJSON',
    value: function filesToJSON(files) {
      return _regeneratorRuntime.async(function filesToJSON$(context$2$0) {
        var _this = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(_bluebird2['default'].map(files, function callee$2$0(file) {
              var filename, stat;
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    filename = _path2['default'].resolve(this.logDir, file);
                    context$3$0.next = 3;
                    return _regeneratorRuntime.awrap(_appiumSupport.fs.stat(filename));

                  case 3:
                    stat = context$3$0.sent;
                    context$3$0.t0 = stat.ctime.getTime();
                    context$3$0.next = 7;
                    return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(filename, 'utf8'));

                  case 7:
                    context$3$0.t1 = context$3$0.sent;
                    return context$3$0.abrupt('return', {
                      timestamp: context$3$0.t0,
                      level: 'ALL',
                      message: context$3$0.t1
                    });

                  case 9:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this);
            }));

          case 2:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'startCapture',
    value: function startCapture() {
      return _regeneratorRuntime.async(function startCapture$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.getCrashes());

          case 2:
            this.prevLogs = context$2$0.sent;

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'stopCapture',
    value: function stopCapture() {
      return _regeneratorRuntime.async(function stopCapture$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getLogs',

    // needed for consistent API with other logs
    value: function getLogs() {
      var crashFiles, diff;
      return _regeneratorRuntime.async(function getLogs$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.getCrashes());

          case 2:
            crashFiles = context$2$0.sent;
            diff = _lodash2['default'].difference(crashFiles, this.prevLogs, this.logsSinceLastRequest);

            this.logsSinceLastRequest = _lodash2['default'].union(this.logsSinceLastRequest, diff);
            context$2$0.next = 7;
            return _regeneratorRuntime.awrap(this.filesToJSON(diff));

          case 7:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 8:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getAllLogs',
    value: function getAllLogs() {
      var crashFiles, logFiles;
      return _regeneratorRuntime.async(function getAllLogs$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.getCrashes());

          case 2:
            crashFiles = context$2$0.sent;
            logFiles = _lodash2['default'].difference(crashFiles, this.prevLogs);
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.filesToJSON(logFiles));

          case 6:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 7:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }]);

  return IOSCrashLog;
})();

exports.IOSCrashLog = IOSCrashLog;
exports['default'] = IOSCrashLog;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9kZXZpY2UtbG9nL2lvcy1jcmFzaC1sb2cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7b0JBQWlCLE1BQU07Ozs7c0JBQ1QsUUFBUTs7Ozs2QkFDSCxnQkFBZ0I7O3NCQUNoQixVQUFVOzs7O3dCQUNmLFVBQVU7Ozs7SUFHbEIsV0FBVztBQUNILFdBRFIsV0FBVyxDQUNGLE1BQU0sRUFBRTswQkFEakIsV0FBVzs7QUFFYixRQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sSUFBSSxrQkFBSyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksR0FBRyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztBQUN0RyxRQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztBQUNuQixRQUFJLENBQUMsb0JBQW9CLEdBQUcsRUFBRSxDQUFDO0dBQ2hDOztlQUxHLFdBQVc7O1dBT0U7Ozs7Ozs2Q0FFQSxrQkFBRyxJQUFJLENBQUksSUFBSSxDQUFDLE1BQU0sY0FBVzs7Ozs7Ozs7O0FBRTlDLGdDQUFPLGFBQWEsaUVBQXNELENBQUM7Ozs7Ozs7S0FFOUU7OztXQUVpQixxQkFBQyxLQUFLOzs7Ozs7OzZDQUNULHNCQUFFLEdBQUcsQ0FBQyxLQUFLLEVBQUUsb0JBQU8sSUFBSTtrQkFDL0IsUUFBUSxFQUNSLElBQUk7Ozs7QUFESiw0QkFBUSxHQUFHLGtCQUFLLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQzs7cURBQzdCLGtCQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7OztBQUE5Qix3QkFBSTtxQ0FFSyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRTs7cURBRWhCLGtCQUFHLFFBQVEsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDOzs7OztBQUY1QywrQkFBUztBQUNULDJCQUFLLEVBQUUsS0FBSztBQUNaLDZCQUFPOzs7Ozs7OzthQUVWLENBQUM7Ozs7Ozs7Ozs7S0FDSDs7O1dBRWtCOzs7Ozs2Q0FDSyxJQUFJLENBQUMsVUFBVSxFQUFFOzs7QUFBdkMsZ0JBQUksQ0FBQyxRQUFROzs7Ozs7O0tBQ2Q7OztXQUVpQjs7Ozs7Ozs7S0FFakI7Ozs7O1dBRWE7VUFDUixVQUFVLEVBQ1YsSUFBSTs7Ozs7NkNBRGUsSUFBSSxDQUFDLFVBQVUsRUFBRTs7O0FBQXBDLHNCQUFVO0FBQ1YsZ0JBQUksR0FBRyxvQkFBRSxVQUFVLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLG9CQUFvQixDQUFDOztBQUM3RSxnQkFBSSxDQUFDLG9CQUFvQixHQUFHLG9CQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsSUFBSSxDQUFDLENBQUM7OzZDQUN4RCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQzs7Ozs7Ozs7OztLQUNwQzs7O1dBRWdCO1VBQ1gsVUFBVSxFQUNWLFFBQVE7Ozs7OzZDQURXLElBQUksQ0FBQyxVQUFVLEVBQUU7OztBQUFwQyxzQkFBVTtBQUNWLG9CQUFRLEdBQUcsb0JBQUUsVUFBVSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDOzs2Q0FDekMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUM7Ozs7Ozs7Ozs7S0FDeEM7OztTQTlDRyxXQUFXOzs7UUFpRFIsV0FBVyxHQUFYLFdBQVc7cUJBQ0wsV0FBVyIsImZpbGUiOiJsaWIvZGV2aWNlLWxvZy9pb3MtY3Jhc2gtbG9nLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgZnMgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcblxuXG5jbGFzcyBJT1NDcmFzaExvZyB7XG4gIGNvbnN0cnVjdG9yIChsb2dEaXIpIHtcbiAgICB0aGlzLmxvZ0RpciA9IGxvZ0RpciB8fCBwYXRoLnJlc29sdmUocHJvY2Vzcy5lbnYuSE9NRSB8fCAnLycsICdMaWJyYXJ5JywgJ0xvZ3MnLCAnRGlhZ25vc3RpY1JlcG9ydHMnKTtcbiAgICB0aGlzLnByZXZMb2dzID0gW107XG4gICAgdGhpcy5sb2dzU2luY2VMYXN0UmVxdWVzdCA9IFtdO1xuICB9XG5cbiAgYXN5bmMgZ2V0Q3Jhc2hlcyAoKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCBmcy5nbG9iKGAke3RoaXMubG9nRGlyfS8qLmNyYXNoYCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBsb2dnZXIuZXJyb3JBbmRUaHJvdyhgVGhlcmUgd2FzIGEgcHJvYmxlbSBnZXR0aW5nIHRoZSBjcmFzaCBsaXN0OiAke2Vycn1gKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBmaWxlc1RvSlNPTiAoZmlsZXMpIHtcbiAgICByZXR1cm4gYXdhaXQgQi5tYXAoZmlsZXMsIGFzeW5jIChmaWxlKSA9PiB7XG4gICAgICBsZXQgZmlsZW5hbWUgPSBwYXRoLnJlc29sdmUodGhpcy5sb2dEaXIsIGZpbGUpO1xuICAgICAgbGV0IHN0YXQgPSBhd2FpdCBmcy5zdGF0KGZpbGVuYW1lKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRpbWVzdGFtcDogc3RhdC5jdGltZS5nZXRUaW1lKCksXG4gICAgICAgIGxldmVsOiAnQUxMJyxcbiAgICAgICAgbWVzc2FnZTogYXdhaXQgZnMucmVhZEZpbGUoZmlsZW5hbWUsICd1dGY4JylcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBhc3luYyBzdGFydENhcHR1cmUgKCkge1xuICAgIHRoaXMucHJldkxvZ3MgPSBhd2FpdCB0aGlzLmdldENyYXNoZXMoKTtcbiAgfVxuXG4gIGFzeW5jIHN0b3BDYXB0dXJlICgpIHtcbiAgICAvLyBuZWVkZWQgZm9yIGNvbnNpc3RlbnQgQVBJIHdpdGggb3RoZXIgbG9nc1xuICB9XG5cbiAgYXN5bmMgZ2V0TG9ncyAoKSB7XG4gICAgbGV0IGNyYXNoRmlsZXMgPSBhd2FpdCB0aGlzLmdldENyYXNoZXMoKTtcbiAgICBsZXQgZGlmZiA9IF8uZGlmZmVyZW5jZShjcmFzaEZpbGVzLCB0aGlzLnByZXZMb2dzLCB0aGlzLmxvZ3NTaW5jZUxhc3RSZXF1ZXN0KTtcbiAgICB0aGlzLmxvZ3NTaW5jZUxhc3RSZXF1ZXN0ID0gXy51bmlvbih0aGlzLmxvZ3NTaW5jZUxhc3RSZXF1ZXN0LCBkaWZmKTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5maWxlc1RvSlNPTihkaWZmKTtcbiAgfVxuXG4gIGFzeW5jIGdldEFsbExvZ3MgKCkge1xuICAgIGxldCBjcmFzaEZpbGVzID0gYXdhaXQgdGhpcy5nZXRDcmFzaGVzKCk7XG4gICAgbGV0IGxvZ0ZpbGVzID0gXy5kaWZmZXJlbmNlKGNyYXNoRmlsZXMsIHRoaXMucHJldkxvZ3MpO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmZpbGVzVG9KU09OKGxvZ0ZpbGVzKTtcbiAgfVxufVxuXG5leHBvcnQgeyBJT1NDcmFzaExvZyB9O1xuZXhwb3J0IGRlZmF1bHQgSU9TQ3Jhc2hMb2c7XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
