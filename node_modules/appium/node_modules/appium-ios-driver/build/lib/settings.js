'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var SETTINGS_CAPS = ['locationServicesEnabled', 'locationServicesAuthorized'];
var SAFARI_SETTINGS_CAPS = ['safariAllowPopups', 'safariIgnoreFraudWarning', 'safariOpenLinksInBackground'];

function launchAndQuitSimulator(sim, safari) {
  return _regeneratorRuntime.async(function launchAndQuitSimulator$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('No simulator directories found.');
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(sim.launchAndQuit(safari));

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function checkPreferences(settings) {
  var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = _getIterator(settings), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var setting = _step.value;

      if (_lodash2['default'].has(opts, setting)) {
        return true;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator['return']) {
        _iterator['return']();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return false;
}

function setLocaleAndPreferences(sim, opts) {
  var safari = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];
  var shutdownFn = arguments.length <= 3 || arguments[3] === undefined ? _lodash2['default'].noop : arguments[3];
  var localConfig, prefsUpdated;
  return _regeneratorRuntime.async(function setLocaleAndPreferences$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(setLocale(sim, opts, {}, safari));

      case 2:
        localConfig = context$1$0.sent;
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(setPreferences(sim, opts, safari));

      case 5:
        prefsUpdated = context$1$0.sent;

        if (!(localConfig._updated || prefsUpdated)) {
          context$1$0.next = 10;
          break;
        }

        _logger2['default'].debug("Updated settings. Rebooting the simulator if it's already open");
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(shutdownFn(sim));

      case 10:
        delete localConfig._updated;
        return context$1$0.abrupt('return', localConfig);

      case 12:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

// pass in the simulator so that other systems that use the function can supply
// whatever they have
function setLocale(sim, opts) {
  var localeConfig = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
  var safari = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];
  var updated;
  return _regeneratorRuntime.async(function setLocale$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(!opts.language && !opts.locale && !opts.calendarFormat)) {
          context$1$0.next = 3;
          break;
        }

        _logger2['default'].debug("No reason to set locale");
        return context$1$0.abrupt('return', {
          _updated: false
        });

      case 3:
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(sim.isFresh());

      case 5:
        if (!context$1$0.sent) {
          context$1$0.next = 8;
          break;
        }

        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(launchAndQuitSimulator(sim, safari));

      case 8:

        _logger2['default'].debug('Setting locale information');
        localeConfig = {
          language: opts.language || localeConfig.language,
          locale: opts.locale || localeConfig.locale,
          calendarFormat: opts.calendarFormat || localeConfig.calendarFormat,
          _updated: false
        };

        context$1$0.prev = 10;
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap(sim.updateLocale(opts.language, opts.locale, opts.calendarFormat));

      case 13:
        updated = context$1$0.sent;

        if (updated) {
          localeConfig._updated = true;
        }
        context$1$0.next = 20;
        break;

      case 17:
        context$1$0.prev = 17;
        context$1$0.t0 = context$1$0['catch'](10);

        _logger2['default'].errorAndThrow('Appium was unable to set locale info: ' + context$1$0.t0);

      case 20:
        return context$1$0.abrupt('return', localeConfig);

      case 21:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[10, 17]]);
}

function setPreferences(sim, opts) {
  var safari = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];
  var needToSetPrefs, needToSetSafariPrefs;
  return _regeneratorRuntime.async(function setPreferences$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        needToSetPrefs = checkPreferences(SETTINGS_CAPS, opts);
        needToSetSafariPrefs = checkPreferences(SAFARI_SETTINGS_CAPS, opts);

        if (!(!needToSetPrefs && !needToSetSafariPrefs)) {
          context$1$0.next = 5;
          break;
        }

        _logger2['default'].debug("No iOS / app preferences to set");
        return context$1$0.abrupt('return', false);

      case 5:

        _logger2['default'].debug("Setting iOS and app preferences");

        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(sim.isFresh());

      case 8:
        if (!context$1$0.sent) {
          context$1$0.next = 11;
          break;
        }

        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(launchAndQuitSimulator(sim, safari));

      case 11:
        context$1$0.prev = 11;

        if (!needToSetPrefs) {
          context$1$0.next = 15;
          break;
        }

        context$1$0.next = 15;
        return _regeneratorRuntime.awrap(setLocServicesPrefs(sim, opts));

      case 15:
        context$1$0.next = 21;
        break;

      case 17:
        context$1$0.prev = 17;
        context$1$0.t0 = context$1$0['catch'](11);

        _logger2['default'].error("Error setting location services preferences, prefs will not work");
        _logger2['default'].error(context$1$0.t0);

      case 21:
        context$1$0.prev = 21;

        if (!needToSetSafariPrefs) {
          context$1$0.next = 25;
          break;
        }

        context$1$0.next = 25;
        return _regeneratorRuntime.awrap(setSafariPrefs(sim, opts));

      case 25:
        context$1$0.next = 31;
        break;

      case 27:
        context$1$0.prev = 27;
        context$1$0.t1 = context$1$0['catch'](21);

        _logger2['default'].error("Error setting safari preferences, prefs will not work");
        _logger2['default'].error(context$1$0.t1);

      case 31:
        return context$1$0.abrupt('return', true);

      case 32:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[11, 17], [21, 27]]);
}

function setLocServicesPrefs(sim) {
  var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
  var locServ, msg, locAuth;
  return _regeneratorRuntime.async(function setLocServicesPrefs$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        locServ = _lodash2['default'].find([opts.locationServicesEnabled, opts.locationServicesAuthorized], function (c) {
          return !_lodash2['default'].isUndefined(c);
        });

        if (_lodash2['default'].isUndefined(locServ)) {
          context$1$0.next = 6;
          break;
        }

        locServ = locServ ? 1 : 0;
        _logger2['default'].debug('Setting location services to ' + locServ);
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(sim.updateSettings('locationServices', {
          LocationServicesEnabled: locServ,
          'LocationServicesEnabledIn7.0': locServ,
          'LocationServicesEnabledIn8.0': locServ
        }));

      case 6:
        if (_lodash2['default'].isUndefined(opts.locationServicesAuthorized)) {
          context$1$0.next = 12;
          break;
        }

        if (!opts.bundleId) {
          msg = "Can't set location services for app without bundle ID";

          _logger2['default'].errorAndThrow(msg);
        }
        locAuth = !!opts.locationServicesAuthorized;

        if (locAuth) {
          _logger2['default'].debug("Authorizing location services for app");
        } else {
          _logger2['default'].debug("De-authorizing location services for app");
        }
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(sim.updateLocationSettings(opts.bundleId, locAuth));

      case 12:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function setSafariPrefs(sim) {
  var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
  var safariSettings, val;
  return _regeneratorRuntime.async(function setSafariPrefs$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        safariSettings = {};

        if (_lodash2['default'].has(opts, 'safariAllowPopups')) {
          val = !!opts.safariAllowPopups;

          _logger2['default'].debug('Setting javascript window opening to \'' + val + '\'');
          safariSettings.WebKitJavaScriptCanOpenWindowsAutomatically = val;
          safariSettings.JavaScriptCanOpenWindowsAutomatically = val;
        }
        if (_lodash2['default'].has(opts, 'safariIgnoreFraudWarning')) {
          val = !opts.safariIgnoreFraudWarning;

          _logger2['default'].debug('Setting fraudulent website warning to \'' + val + '\'');
          safariSettings.WarnAboutFraudulentWebsites = val;
        }
        if (_lodash2['default'].has(opts, 'safariOpenLinksInBackground')) {
          val = opts.safariOpenLinksInBackground ? 1 : 0;

          _logger2['default'].debug('Setting opening links in background to \'' + !!val + '\'');
          safariSettings.OpenLinksInBackground = val;
        }

        if (!(_lodash2['default'].size(safariSettings) > 0)) {
          context$1$0.next = 7;
          break;
        }

        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(sim.updateSafariSettings(safariSettings));

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

exports.setLocale = setLocale;
exports.setPreferences = setPreferences;
exports.setLocaleAndPreferences = setLocaleAndPreferences;

// we need the simulator to have its directories in place
//# sourceMappingURL=data:application/json;charset=utf8;base64,
