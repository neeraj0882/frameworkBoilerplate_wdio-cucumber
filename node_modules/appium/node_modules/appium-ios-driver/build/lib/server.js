'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _appiumBaseDriver = require('appium-base-driver');

var _driver = require('./driver');

var _https = require('https');

var _https2 = _interopRequireDefault(_https);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _requestPromise = require('request-promise');

var _requestPromise2 = _interopRequireDefault(_requestPromise);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _portfinder = require('portfinder');

var _portfinder2 = _interopRequireDefault(_portfinder);

var pem = _bluebird2['default'].promisifyAll(require('pem'));

function startServer(port, host) {
  var driver, router, server;
  return _regeneratorRuntime.async(function startServer$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        driver = new _driver.IosDriver();
        router = (0, _appiumBaseDriver.routeConfiguringFunction)(driver);
        server = (0, _appiumBaseDriver.server)(router, port, host);

        _logger2['default'].info('IosDriver server listening on http://' + host + ':' + port);
        return context$1$0.abrupt('return', server);

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function startHttpsServer(port, host) {
  var privateKey, keys, pemCertificate, httpsPort, serverOpts, sslServer;
  return _regeneratorRuntime.async(function startHttpsServer$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(pem.createPrivateKeyAsync());

      case 2:
        privateKey = context$1$0.sent;
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(pem.createCertificateAsync({ days: 1, selfSigned: true, serviceKey: privateKey.key }));

      case 5:
        keys = context$1$0.sent;
        pemCertificate = keys.certificate;
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(_portfinder2['default'].getPortPromise());

      case 9:
        httpsPort = context$1$0.sent;
        serverOpts = { key: keys.serviceKey, cert: pemCertificate };
        sslServer = _https2['default'].createServer(serverOpts, function callee$1$0(req, res) {
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                _logger2['default'].debug('Received HTTPS \'' + req.method + '\' request for \'' + req.url + '\'');
                if (req.method === 'OPTIONS') {
                  res.setHeader('Access-Control-Allow-Origin', '*');
                  res.setHeader('Access-Control-Allow-Methods', 'POST, GET, OPTIONS');
                  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
                  res.writeHead(200);
                  res.end();
                } else if (req.method === 'POST') {
                  (function () {
                    var body = '';
                    req.on('data', function (data) {
                      body += data;
                    });
                    req.on('end', function callee$3$0() {
                      var httpsUrl, uri, options;
                      return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                        while (1) switch (context$4$0.prev = context$4$0.next) {
                          case 0:
                            httpsUrl = _url2['default'].parse(req.url);
                            uri = 'http://' + host + ':' + port + httpsUrl.pathname;

                            _logger2['default'].debug('Passing \'' + body + '\' to \'' + uri + '\'');

                            // now we send to the right place
                            options = {
                              method: 'POST',
                              uri: uri,
                              body: body
                            };
                            context$4$0.next = 6;
                            return _regeneratorRuntime.awrap((0, _requestPromise2['default'])(options));

                          case 6:
                            res.writeHead(200);
                            res.end();

                          case 8:
                          case 'end':
                            return context$4$0.stop();
                        }
                      }, null, this);
                    });
                  })();
                }

              case 2:
              case 'end':
                return context$2$0.stop();
            }
          }, null, this);
        }).listen(httpsPort);
        return context$1$0.abrupt('return', {
          sslServer: sslServer,
          pemCertificate: pemCertificate,
          httpsPort: httpsPort
        });

      case 13:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

exports.startServer = startServer;
exports.startHttpsServer = startHttpsServer;

// Create a random pem certificate

// find a port

// Host an SSL server that uses that certificate
//# sourceMappingURL=data:application/json;charset=utf8;base64,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SSxFQUFKLElBQUk7NkJBQ0w7OzZEQUNLLGlDQUFRLE9BQU8sQ0FBQzs7O0FBQ3RCLCtCQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ25CLCtCQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7Ozs7Ozs7cUJBQ1gsQ0FBQyxDQUFDOztpQkFDSjs7Ozs7OztTQUNGLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDOzRDQUViO0FBQ0wsbUJBQVMsRUFBVCxTQUFTO0FBQ1Qsd0JBQWMsRUFBZCxjQUFjO0FBQ2QsbUJBQVMsRUFBVCxTQUFTO1NBQ1Y7Ozs7Ozs7Q0FDRjs7UUFFUSxXQUFXLEdBQVgsV0FBVztRQUFFLGdCQUFnQixHQUFoQixnQkFBZ0IiLCJmaWxlIjoibGliL3NlcnZlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBsb2cgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHsgc2VydmVyIGFzIGJhc2VTZXJ2ZXIsIHJvdXRlQ29uZmlndXJpbmdGdW5jdGlvbiB9IGZyb20gJ2FwcGl1bS1iYXNlLWRyaXZlcic7XG5pbXBvcnQgeyBJb3NEcml2ZXIgfSBmcm9tICcuL2RyaXZlcic7XG5pbXBvcnQgaHR0cHMgZnJvbSAnaHR0cHMnO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IHJlcXVlc3QgZnJvbSAncmVxdWVzdC1wcm9taXNlJztcbmltcG9ydCB1cmwgZnJvbSAndXJsJztcbmltcG9ydCBwb3J0ZmluZGVyIGZyb20gJ3BvcnRmaW5kZXInO1xuY29uc3QgcGVtID0gQi5wcm9taXNpZnlBbGwocmVxdWlyZSgncGVtJykpO1xuXG5cbmFzeW5jIGZ1bmN0aW9uIHN0YXJ0U2VydmVyIChwb3J0LCBob3N0KSB7XG4gIGxldCBkcml2ZXIgPSBuZXcgSW9zRHJpdmVyKCk7XG4gIGxldCByb3V0ZXIgPSByb3V0ZUNvbmZpZ3VyaW5nRnVuY3Rpb24oZHJpdmVyKTtcbiAgbGV0IHNlcnZlciA9IGJhc2VTZXJ2ZXIocm91dGVyLCBwb3J0LCBob3N0KTtcbiAgbG9nLmluZm8oYElvc0RyaXZlciBzZXJ2ZXIgbGlzdGVuaW5nIG9uIGh0dHA6Ly8ke2hvc3R9OiR7cG9ydH1gKTtcbiAgcmV0dXJuIHNlcnZlcjtcbn1cblxuYXN5bmMgZnVuY3Rpb24gc3RhcnRIdHRwc1NlcnZlciAocG9ydCwgaG9zdCkge1xuICAvLyBDcmVhdGUgYSByYW5kb20gcGVtIGNlcnRpZmljYXRlXG4gIGxldCBwcml2YXRlS2V5ID0gYXdhaXQgcGVtLmNyZWF0ZVByaXZhdGVLZXlBc3luYygpO1xuICBsZXQga2V5cyA9IGF3YWl0IHBlbS5jcmVhdGVDZXJ0aWZpY2F0ZUFzeW5jKHtkYXlzOjEsIHNlbGZTaWduZWQ6IHRydWUsIHNlcnZpY2VLZXk6IHByaXZhdGVLZXkua2V5fSk7XG4gIGxldCBwZW1DZXJ0aWZpY2F0ZSA9IGtleXMuY2VydGlmaWNhdGU7XG5cbiAgLy8gZmluZCBhIHBvcnRcbiAgbGV0IGh0dHBzUG9ydCA9IGF3YWl0IHBvcnRmaW5kZXIuZ2V0UG9ydFByb21pc2UoKTtcblxuICAvLyBIb3N0IGFuIFNTTCBzZXJ2ZXIgdGhhdCB1c2VzIHRoYXQgY2VydGlmaWNhdGVcbiAgY29uc3Qgc2VydmVyT3B0cyA9IHtrZXk6IGtleXMuc2VydmljZUtleSwgY2VydDogcGVtQ2VydGlmaWNhdGV9O1xuICBsZXQgc3NsU2VydmVyID0gaHR0cHMuY3JlYXRlU2VydmVyKHNlcnZlck9wdHMsIGFzeW5jIGZ1bmN0aW9uIChyZXEsIHJlcykge1xuICAgIGxvZy5kZWJ1ZyhgUmVjZWl2ZWQgSFRUUFMgJyR7cmVxLm1ldGhvZH0nIHJlcXVlc3QgZm9yICcke3JlcS51cmx9J2ApO1xuICAgIGlmIChyZXEubWV0aG9kID09PSAnT1BUSU9OUycpIHtcbiAgICAgIHJlcy5zZXRIZWFkZXIoJ0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbicsICcqJyk7XG4gICAgICByZXMuc2V0SGVhZGVyKCdBY2Nlc3MtQ29udHJvbC1BbGxvdy1NZXRob2RzJywgJ1BPU1QsIEdFVCwgT1BUSU9OUycpO1xuICAgICAgcmVzLnNldEhlYWRlcignQWNjZXNzLUNvbnRyb2wtQWxsb3ctSGVhZGVycycsICdDb250ZW50LVR5cGUnKTtcbiAgICAgIHJlcy53cml0ZUhlYWQoMjAwKTtcbiAgICAgIHJlcy5lbmQoKTtcbiAgICB9IGVsc2UgaWYgKHJlcS5tZXRob2QgPT09ICdQT1NUJykge1xuICAgICAgbGV0IGJvZHkgPSAnJztcbiAgICAgIHJlcS5vbignZGF0YScsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIGJvZHkgKz0gZGF0YTtcbiAgICAgIH0pO1xuICAgICAgcmVxLm9uKCdlbmQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxldCBodHRwc1VybCA9IHVybC5wYXJzZShyZXEudXJsKTtcbiAgICAgICAgbGV0IHVyaSA9IGBodHRwOi8vJHtob3N0fToke3BvcnR9JHtodHRwc1VybC5wYXRobmFtZX1gO1xuICAgICAgICBsb2cuZGVidWcoYFBhc3NpbmcgJyR7Ym9keX0nIHRvICcke3VyaX0nYCk7XG5cbiAgICAgICAgLy8gbm93IHdlIHNlbmQgdG8gdGhlIHJpZ2h0IHBsYWNlXG4gICAgICAgIGxldCBvcHRpb25zID0ge1xuICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgIHVyaSxcbiAgICAgICAgICBib2R5LFxuICAgICAgICB9O1xuICAgICAgICBhd2FpdCByZXF1ZXN0KG9wdGlvbnMpO1xuICAgICAgICByZXMud3JpdGVIZWFkKDIwMCk7XG4gICAgICAgIHJlcy5lbmQoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSkubGlzdGVuKGh0dHBzUG9ydCk7XG5cbiAgcmV0dXJuIHtcbiAgICBzc2xTZXJ2ZXIsXG4gICAgcGVtQ2VydGlmaWNhdGUsXG4gICAgaHR0cHNQb3J0LFxuICB9O1xufVxuXG5leHBvcnQgeyBzdGFydFNlcnZlciwgc3RhcnRIdHRwc1NlcnZlciB9O1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLiJ9
