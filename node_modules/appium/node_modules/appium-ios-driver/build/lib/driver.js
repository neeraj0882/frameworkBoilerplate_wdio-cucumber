'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _appiumBaseDriver = require('appium-base-driver');

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _appiumSupport = require('appium-support');

var _appiumIosSimulator = require('appium-ios-simulator');

var _uiautoUiauto = require('./uiauto/uiauto');

var _instruments = require('./instruments');

var _asyncbox = require('asyncbox');

var _commandsIndex = require('./commands/index');

var _commandsIndex2 = _interopRequireDefault(_commandsIndex);

var _desiredCaps = require('./desired-caps');

var _nodeIdevice = require('node-idevice');

var _nodeIdevice2 = _interopRequireDefault(_nodeIdevice);

var _commandsSafari = require('./commands/safari');

var _safariLauncher = require('./safari-launcher');

var _settings = require('./settings');

var _device = require('./device');

var _iwdp = require('./iwdp');

// promisify _iDevice
var iDevice = function iDevice() {
  var device = _nodeIdevice2['default'].apply(undefined, arguments);
  var promisified = {};
  var _arr = ['install', 'installAndWait', 'remove', 'isInstalled'];
  for (var _i = 0; _i < _arr.length; _i++) {
    var m = _arr[_i];
    promisified[m] = _bluebird2['default'].promisify(device[m].bind(device));
  }
  return promisified;
};

var defaultServerCaps = {
  webStorageEnabled: false,
  locationContextEnabled: false,
  browserName: '',
  platform: 'MAC',
  javascriptEnabled: true,
  databaseEnabled: false,
  takesScreenshot: true,
  networkConnectionEnabled: false
};

var LOG_LOCATIONS = [_path2['default'].resolve('/', 'Library', 'Caches', 'com.apple.dt.instruments')];
if (process.env.HOME) {
  LOG_LOCATIONS.push(_path2['default'].resolve(process.env.HOME, 'Library', 'Logs', 'CoreSimulator'));
}

var IosDriver = (function (_BaseDriver) {
  _inherits(IosDriver, _BaseDriver);

  _createClass(IosDriver, [{
    key: 'resetIos',
    value: function resetIos() {
      this.appExt = ".app";
      this.xcodeVersion = null;
      this.iosSdkVersion = null;
      this.logs = {};
      this.instruments = null;
      this.uiAutoClient = null;
      this.onInstrumentsDie = function () {};
      this.stopping = false;
      this.cbForCurrentCmd = null;
      this.remote = null;
      this.curContext = null;
      this.curWebFrames = [];
      this.selectingNewPage = false;
      this.windowHandleCache = [];
      this.webElementIds = [];
      this.implicitWaitMs = 0;
      this.asynclibWaitMs = 0;
      this.pageLoadMs = 6000;
      this.asynclibResponseCb = null;
      this.returnedFromExecuteAtom = {};
      this.executedAtomsCounter = 0;
      this.curCoords = null;
      this.curWebCoords = null;
      this.landscapeWebCoordsOffset = 0;
      this.keepAppToRetainPrefs = false;
      this.ready = false;
      this.asyncWaitMs = 0;

      this.settings = new _appiumBaseDriver.DeviceSettings({}, _lodash2['default'].noop);

      this.locatorStrategies = ['xpath', 'id', 'class name', '-ios uiautomation', 'accessibility id'];
      this.webLocatorStrategies = ['link text', 'css selector', 'tag name', 'partial link text'];
    }
  }]);

  function IosDriver(opts, shouldValidateCaps) {
    _classCallCheck(this, IosDriver);

    _get(Object.getPrototypeOf(IosDriver.prototype), 'constructor', this).call(this, opts, shouldValidateCaps);

    this.desiredCapConstraints = _desiredCaps.desiredCapConstraints;
    this.resetIos();
    this.getDevicePixelRatio = _lodash2['default'].memoize(this.getDevicePixelRatio);
  }

  _createClass(IosDriver, [{
    key: 'validateLocatorStrategy',
    value: function validateLocatorStrategy(strategy) {
      _get(Object.getPrototypeOf(IosDriver.prototype), 'validateLocatorStrategy', this).call(this, strategy, this.isWebContext());
    }
  }, {
    key: 'start',
    value: function start() {
      return _regeneratorRuntime.async(function start$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!this.isRealDevice()) {
              context$2$0.next = 5;
              break;
            }

            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.startRealDevice());

          case 3:
            context$2$0.next = 7;
            break;

          case 5:
            context$2$0.next = 7;
            return _regeneratorRuntime.awrap(this.startSimulator());

          case 7:
            this.ready = true;

          case 8:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'createSession',
    value: function createSession() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var _ref, _ref2, sessionId, caps, msg;

      return _regeneratorRuntime.async(function createSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(_get(Object.getPrototypeOf(IosDriver.prototype), 'createSession', this).apply(this, args));

          case 2:
            _ref = context$2$0.sent;
            _ref2 = _slicedToArray(_ref, 2);
            sessionId = _ref2[0];
            caps = _ref2[1];
            context$2$0.next = 8;
            return _regeneratorRuntime.awrap(_utils2['default'].getAndCheckXcodeVersion(this.opts));

          case 8:
            this.xcodeVersion = context$2$0.sent;

            _logger2['default'].debug('Xcode version set to ' + this.xcodeVersion.versionString);
            if (this.xcodeVersion.major >= 8) {
              msg = 'Appium\'s IosDriver does not support Xcode version ' + this.xcodeVersion.versionString + '. ' + 'Apple has deprecated UIAutomation. Use the "XCUITest" automationName capability instead.';

              _logger2['default'].errorAndThrow(new _appiumBaseDriver.errors.SessionNotCreatedError(msg));
            }

            // merge server capabilities + desired capabilities
            this.caps = _Object$assign({}, defaultServerCaps, this.caps);
            this.caps.desired = caps;

            context$2$0.next = 15;
            return _regeneratorRuntime.awrap(_utils2['default'].detectUdid(this.opts));

          case 15:
            context$2$0.next = 17;
            return _regeneratorRuntime.awrap(_utils2['default'].prepareIosOpts(this.opts));

          case 17:
            this.realDevice = null;
            this.useRobot = this.opts.useRobot;
            this.safari = this.opts.safari;
            this.opts.curOrientation = this.opts.initialOrientation;

            this.sock = _path2['default'].resolve(this.opts.tmpDir || '/tmp', 'instruments_sock');

            context$2$0.prev = 22;
            context$2$0.next = 25;
            return _regeneratorRuntime.awrap(this.configureApp());

          case 25:
            context$2$0.next = 31;
            break;

          case 27:
            context$2$0.prev = 27;
            context$2$0.t0 = context$2$0['catch'](22);

            _logger2['default'].error('Bad app: \'' + this.opts.app + '\'. App paths need to ' + 'be absolute, or relative to the appium server ' + 'install dir, or a URL to compressed file, or a ' + 'special app name.');
            throw context$2$0.t0;

          case 31:
            context$2$0.next = 33;
            return _regeneratorRuntime.awrap(this.start());

          case 33:

            // TODO: this should be in BaseDriver.postCreateSession
            this.startNewCommandTimeout('createSession');
            return context$2$0.abrupt('return', [sessionId, this.caps]);

          case 35:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[22, 27]]);
    }
  }, {
    key: 'stop',
    value: function stop() {
      return _regeneratorRuntime.async(function stop$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            this.ready = false;

            if (!this.uiAutoClient) {
              context$2$0.next = 4;
              break;
            }

            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.uiAutoClient.shutdown());

          case 4:
            if (!this.instruments) {
              context$2$0.next = 13;
              break;
            }

            context$2$0.prev = 5;
            context$2$0.next = 8;
            return _regeneratorRuntime.awrap(this.instruments.shutdown());

          case 8:
            context$2$0.next = 13;
            break;

          case 10:
            context$2$0.prev = 10;
            context$2$0.t0 = context$2$0['catch'](5);

            _logger2['default'].error('Instruments didn\'t shut down. ' + context$2$0.t0);

          case 13:
            if (!(this.caps && this.caps.customSSLCert && !this.isRealDevice())) {
              context$2$0.next = 17;
              break;
            }

            _logger2['default'].debug('Uninstalling ssl certificate for udid \'' + this.sim.udid + '\'');
            context$2$0.next = 17;
            return _regeneratorRuntime.awrap((0, _appiumIosSimulator.uninstallSSLCert)(this.caps.customSSLCert, this.sim.udid));

          case 17:
            if (!(this.opts.enableAsyncExecuteFromHttps && !this.isRealDevice())) {
              context$2$0.next = 20;
              break;
            }

            context$2$0.next = 20;
            return _regeneratorRuntime.awrap(this.stopHttpsAsyncServer());

          case 20:

            this.uiAutoClient = null;
            this.instruments = null;
            this.realDevice = null;

            // postcleanup
            this.curCoords = null;
            this.opts.curOrientation = null;

            if (_lodash2['default'].isEmpty(this.logs)) {
              context$2$0.next = 29;
              break;
            }

            context$2$0.next = 28;
            return _regeneratorRuntime.awrap(this.logs.syslog.stopCapture());

          case 28:
            this.logs = {};

          case 29:
            if (!this.remote) {
              context$2$0.next = 32;
              break;
            }

            context$2$0.next = 32;
            return _regeneratorRuntime.awrap(this.stopRemote());

          case 32:
            context$2$0.next = 34;
            return _regeneratorRuntime.awrap(this.stopIWDP());

          case 34:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[5, 10]]);
    }
  }, {
    key: 'deleteSession',
    value: function deleteSession() {
      return _regeneratorRuntime.async(function deleteSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug("Deleting ios session");

            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.stop());

          case 3:
            if (!this.opts.clearSystemFiles) {
              context$2$0.next = 8;
              break;
            }

            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(_utils2['default'].clearLogs(LOG_LOCATIONS));

          case 6:
            context$2$0.next = 9;
            break;

          case 8:
            _logger2['default'].debug('Not clearing log files. Use `clearSystemFiles` capability to turn on.');

          case 9:
            if (!this.isRealDevice()) {
              context$2$0.next = 14;
              break;
            }

            context$2$0.next = 12;
            return _regeneratorRuntime.awrap((0, _device.runRealDeviceReset)(this.realDevice, this.opts));

          case 12:
            context$2$0.next = 16;
            break;

          case 14:
            context$2$0.next = 16;
            return _regeneratorRuntime.awrap((0, _device.runSimulatorReset)(this.sim, this.opts, this.keepAppToRetainPrefs));

          case 16:
            context$2$0.next = 18;
            return _regeneratorRuntime.awrap(_get(Object.getPrototypeOf(IosDriver.prototype), 'deleteSession', this).call(this));

          case 18:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getSession',
    value: function getSession() {
      var caps, viewportRect, pixelRatio, statBarHeight;
      return _regeneratorRuntime.async(function getSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(_get(Object.getPrototypeOf(IosDriver.prototype), 'getSession', this).call(this));

          case 2:
            caps = context$2$0.sent;
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap(this.getViewportRect());

          case 5:
            viewportRect = context$2$0.sent;
            context$2$0.next = 8;
            return _regeneratorRuntime.awrap(this.getDevicePixelRatio());

          case 8:
            pixelRatio = context$2$0.sent;
            context$2$0.next = 11;
            return _regeneratorRuntime.awrap(this.getStatusBarHeight());

          case 11:
            statBarHeight = context$2$0.sent;

            caps.viewportRect = viewportRect;
            caps.pixelRatio = pixelRatio;
            caps.statBarHeight = statBarHeight;

            return context$2$0.abrupt('return', caps);

          case 16:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'executeCommand',
    value: function executeCommand(cmd) {
      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      var _get2;

      return _regeneratorRuntime.async(function executeCommand$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Executing iOS command \'' + cmd + '\'');

            if (!(cmd === 'receiveAsyncResponse')) {
              context$2$0.next = 7;
              break;
            }

            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.receiveAsyncResponse.apply(this, args));

          case 4:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 7:
            if (!(this.ready || _lodash2['default'].includes(['launchApp'], cmd))) {
              context$2$0.next = 11;
              break;
            }

            context$2$0.next = 10;
            return _regeneratorRuntime.awrap((_get2 = _get(Object.getPrototypeOf(IosDriver.prototype), 'executeCommand', this)).call.apply(_get2, [this, cmd].concat(args)));

          case 10:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 11:
            throw new _appiumBaseDriver.errors.NoSuchDriverError('Driver is not ready, cannot execute ' + cmd + '.');

          case 12:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    // TODO: reformat this.helpers + configureApp
  }, {
    key: 'configureApp',
    value: function configureApp() {
      return _regeneratorRuntime.async(function configureApp$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.prev = 0;

            // if the app name is a bundleId assign it to the bundleId property
            if (!this.opts.bundleId && _utils2['default'].appIsPackageOrBundle(this.opts.app)) {
              this.opts.bundleId = this.opts.app;
            }

            if (!(this.opts.app && this.opts.app.toLowerCase() === "settings")) {
              context$2$0.next = 6;
              break;
            }

            if (parseFloat(this.opts.platformVersion) >= 8) {
              _logger2['default'].debug("We are on iOS8+ so not copying preferences app");
              this.opts.bundleId = "com.apple.Preferences";
              this.opts.app = null;
            }
            context$2$0.next = 34;
            break;

          case 6:
            if (!(this.opts.app && this.opts.app.toLowerCase() === "calendar")) {
              context$2$0.next = 10;
              break;
            }

            if (parseFloat(this.opts.platformVersion) >= 8) {
              _logger2['default'].debug("We are on iOS8+ so not copying calendar app");
              this.opts.bundleId = "com.apple.mobilecal";
              this.opts.app = null;
            }
            context$2$0.next = 34;
            break;

          case 10:
            if (!this.isSafari()) {
              context$2$0.next = 27;
              break;
            }

            if (this.isRealDevice()) {
              context$2$0.next = 15;
              break;
            }

            if (parseFloat(this.opts.platformVersion) >= 8) {
              _logger2['default'].debug("We are on iOS8+ so not copying Safari app");
              this.opts.bundleId = _commandsSafari.SAFARI_BUNDLE;
              this.opts.app = null;
            }
            context$2$0.next = 25;
            break;

          case 15:
            context$2$0.next = 17;
            return _regeneratorRuntime.awrap(this.realDevice.isInstalled(this.opts.bundleId));

          case 17:
            if (context$2$0.sent) {
              context$2$0.next = 25;
              break;
            }

            context$2$0.next = 20;
            return _regeneratorRuntime.awrap((0, _safariLauncher.needsInstall)());

          case 20:
            if (!context$2$0.sent) {
              context$2$0.next = 24;
              break;
            }

            _logger2['default'].debug('SafariLauncher not found, building...');
            context$2$0.next = 24;
            return _regeneratorRuntime.awrap((0, _safariLauncher.install)());

          case 24:
            this.opts.bundleId = _safariLauncher.SAFARI_LAUNCHER_BUNDLE;

          case 25:
            context$2$0.next = 34;
            break;

          case 27:
            if (!(this.opts.bundleId && _utils2['default'].appIsPackageOrBundle(this.opts.bundleId) && (this.opts.app === "" || _utils2['default'].appIsPackageOrBundle(this.opts.app)))) {
              context$2$0.next = 31;
              break;
            }

            // we have a bundle ID, but no app, or app is also a bundle
            _logger2['default'].debug("App is an iOS bundle, will attempt to run as pre-existing");
            context$2$0.next = 34;
            break;

          case 31:
            context$2$0.next = 33;
            return _regeneratorRuntime.awrap(this.helpers.configureApp(this.opts.app, '.app'));

          case 33:
            this.opts.app = context$2$0.sent;

          case 34:
            context$2$0.next = 40;
            break;

          case 36:
            context$2$0.prev = 36;
            context$2$0.t0 = context$2$0['catch'](0);

            _logger2['default'].error(context$2$0.t0);
            throw new Error('Bad app: ' + this.opts.app + '. App paths need to be absolute, or relative to the appium ' + "server install dir, or a URL to compressed file, or a special app name.");

          case 40:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[0, 36]]);
    }
  }, {
    key: 'startSimulator',
    value: function startSimulator() {
      var timeout, availableDevices, iosSimUdid, dString;
      return _regeneratorRuntime.async(function startSimulator$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(_utils2['default'].removeInstrumentsSocket(this.sock));

          case 2:
            if (this.xcodeVersion) {
              context$2$0.next = 8;
              break;
            }

            _logger2['default'].debug("Setting Xcode version");
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(_utils2['default'].getAndCheckXcodeVersion(this.opts));

          case 6:
            this.xcodeVersion = context$2$0.sent;

            _logger2['default'].debug('Xcode version set to ' + this.xcodeVersion.versionString);

          case 8:

            _logger2['default'].debug("Setting iOS SDK Version");
            context$2$0.next = 11;
            return _regeneratorRuntime.awrap(_utils2['default'].getAndCheckIosSdkVersion());

          case 11:
            this.iosSdkVersion = context$2$0.sent;

            _logger2['default'].debug('iOS SDK Version set to ' + this.iosSdkVersion);

            timeout = _lodash2['default'].isObject(this.opts.launchTimeout) ? this.opts.launchTimeout.global : this.opts.launchTimeout;
            context$2$0.next = 16;
            return _regeneratorRuntime.awrap((0, _asyncbox.retry)(3, _instruments.instrumentsUtils.getAvailableDevices, timeout));

          case 16:
            availableDevices = context$2$0.sent;
            context$2$0.next = 19;
            return _regeneratorRuntime.awrap((0, _device.checkSimulatorAvailable)(this.opts, this.iosSdkVersion, availableDevices));

          case 19:
            iosSimUdid = context$2$0.sent;
            context$2$0.next = 22;
            return _regeneratorRuntime.awrap((0, _appiumIosSimulator.getSimulator)(iosSimUdid, this.xcodeVersion.versionString));

          case 22:
            this.sim = context$2$0.sent;
            context$2$0.next = 25;
            return _regeneratorRuntime.awrap((0, _device.moveBuiltInApp)(this.sim));

          case 25:
            context$2$0.next = 27;
            return _regeneratorRuntime.awrap(_utils2['default'].parseLocalizableStrings(this.opts));

          case 27:
            context$2$0.next = 29;
            return _regeneratorRuntime.awrap(_utils2['default'].setBundleIdFromApp(this.opts));

          case 29:
            context$2$0.next = 31;
            return _regeneratorRuntime.awrap(this.createInstruments());

          case 31:
            // previously setDeviceInfo()
            this.shouldPrelaunchSimulator = _utils2['default'].shouldPrelaunchSimulator(this.opts, this.iosSdkVersion);
            context$2$0.next = 34;
            return _regeneratorRuntime.awrap((0, _device.getAdjustedDeviceName)(this.opts));

          case 34:
            dString = context$2$0.sent;

            if (!this.caps.app) {
              context$2$0.next = 38;
              break;
            }

            context$2$0.next = 38;
            return _regeneratorRuntime.awrap(_utils2['default'].setDeviceTypeInInfoPlist(this.opts.app, dString));

          case 38:
            context$2$0.next = 40;
            return _regeneratorRuntime.awrap((0, _device.runSimulatorReset)(this.sim, this.opts, this.keepAppToRetainPrefs));

          case 40:
            if (!(this.caps.customSSLCert && !this.isRealDevice())) {
              context$2$0.next = 43;
              break;
            }

            context$2$0.next = 43;
            return _regeneratorRuntime.awrap((0, _appiumIosSimulator.installSSLCert)(this.caps.customSSLCert, this.sim.udid));

          case 43:
            if (!(this.opts.enableAsyncExecuteFromHttps && !this.isRealDevice())) {
              context$2$0.next = 46;
              break;
            }

            context$2$0.next = 46;
            return _regeneratorRuntime.awrap(this.startHttpsAsyncServer());

          case 46:
            context$2$0.next = 48;
            return _regeneratorRuntime.awrap((0, _device.isolateSimulatorDevice)(this.sim, this.opts));

          case 48:
            context$2$0.next = 50;
            return _regeneratorRuntime.awrap((0, _settings.setLocaleAndPreferences)(this.sim, this.opts, this.isSafari(), _device.endSimulator));

          case 50:
            this.localConfig = context$2$0.sent;
            context$2$0.next = 53;
            return _regeneratorRuntime.awrap(this.startLogCapture(this.sim));

          case 53:
            context$2$0.next = 55;
            return _regeneratorRuntime.awrap(this.prelaunchSimulator());

          case 55:
            context$2$0.next = 57;
            return _regeneratorRuntime.awrap(this.startInstruments());

          case 57:
            context$2$0.next = 59;
            return _regeneratorRuntime.awrap(this.onInstrumentsLaunch());

          case 59:
            context$2$0.next = 61;
            return _regeneratorRuntime.awrap(this.configureBootstrap());

          case 61:
            context$2$0.next = 63;
            return _regeneratorRuntime.awrap(this.setBundleId());

          case 63:
            context$2$0.next = 65;
            return _regeneratorRuntime.awrap(this.setInitialOrientation());

          case 65:
            context$2$0.next = 67;
            return _regeneratorRuntime.awrap(this.initAutoWebview());

          case 67:
            context$2$0.next = 69;
            return _regeneratorRuntime.awrap(this.waitForAppLaunched());

          case 69:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'startRealDevice',
    value: function startRealDevice() {
      return _regeneratorRuntime.async(function startRealDevice$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(_utils2['default'].removeInstrumentsSocket(this.sock));

          case 2:
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(_utils2['default'].parseLocalizableStrings(this.opts));

          case 4:
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(_utils2['default'].setBundleIdFromApp(this.opts));

          case 6:
            context$2$0.next = 8;
            return _regeneratorRuntime.awrap(this.createInstruments());

          case 8:
            context$2$0.next = 10;
            return _regeneratorRuntime.awrap((0, _device.runRealDeviceReset)(this.realDevice, this.opts));

          case 10:
            context$2$0.next = 12;
            return _regeneratorRuntime.awrap(this.startLogCapture());

          case 12:
            context$2$0.next = 14;
            return _regeneratorRuntime.awrap(this.installToRealDevice());

          case 14:
            context$2$0.next = 16;
            return _regeneratorRuntime.awrap(this.startInstruments());

          case 16:
            context$2$0.next = 18;
            return _regeneratorRuntime.awrap(this.onInstrumentsLaunch());

          case 18:
            context$2$0.next = 20;
            return _regeneratorRuntime.awrap(this.configureBootstrap());

          case 20:
            context$2$0.next = 22;
            return _regeneratorRuntime.awrap(this.setBundleId());

          case 22:
            context$2$0.next = 24;
            return _regeneratorRuntime.awrap(this.setInitialOrientation());

          case 24:
            context$2$0.next = 26;
            return _regeneratorRuntime.awrap(this.initAutoWebview());

          case 26:
            context$2$0.next = 28;
            return _regeneratorRuntime.awrap(this.waitForAppLaunched());

          case 28:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'installToRealDevice',
    value: function installToRealDevice() {
      var ext, msg;
      return _regeneratorRuntime.async(function installToRealDevice$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!(this.opts.autoLaunch === false)) {
              context$2$0.next = 2;
              break;
            }

            return context$2$0.abrupt('return');

          case 2:

            // if we have an ipa file, set it in opts
            if (this.opts.app) {
              ext = this.opts.app.substring(this.opts.app.length - 3).toLowerCase();

              if (ext === 'ipa') {
                this.opts.ipa = this.opts.app;
              }
            }

            if (!this.opts.udid) {
              context$2$0.next = 38;
              break;
            }

            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.realDevice.isInstalled(this.opts.bundleId));

          case 6:
            if (!context$2$0.sent) {
              context$2$0.next = 16;
              break;
            }

            _logger2['default'].debug("App is installed.");

            if (!this.opts.fullReset) {
              context$2$0.next = 12;
              break;
            }

            _logger2['default'].debug("fullReset requested. Forcing app install.");
            context$2$0.next = 14;
            break;

          case 12:
            _logger2['default'].debug("fullReset not requested. No need to install.");
            return context$2$0.abrupt('return');

          case 14:
            context$2$0.next = 17;
            break;

          case 16:
            _logger2['default'].debug("App is not installed. Will try to install.");

          case 17:
            if (!(this.opts.ipa && this.opts.bundleId)) {
              context$2$0.next = 23;
              break;
            }

            context$2$0.next = 20;
            return _regeneratorRuntime.awrap(this.installIpa());

          case 20:
            _logger2['default'].debug('App installed.');
            context$2$0.next = 36;
            break;

          case 23:
            if (!this.opts.ipa) {
              context$2$0.next = 29;
              break;
            }

            msg = "You specified a UDID and ipa but did not include the bundle id";

            _logger2['default'].warn(msg);
            throw new _appiumBaseDriver.errors.UnknownError(msg);

          case 29:
            if (!this.opts.app) {
              context$2$0.next = 35;
              break;
            }

            context$2$0.next = 32;
            return _regeneratorRuntime.awrap(this.realDevice.install(this.opts.app));

          case 32:
            _logger2['default'].debug('App installed.');
            context$2$0.next = 36;
            break;

          case 35:
            _logger2['default'].debug("Real device specified but no ipa or app path, assuming bundle ID is " + "on device");

          case 36:
            context$2$0.next = 39;
            break;

          case 38:
            _logger2['default'].debug("No device id or app, not installing to real device.");

          case 39:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getIDeviceObj',
    value: function getIDeviceObj() {
      var idiPath = _path2['default'].resolve(__dirname, "../../../build/", "libimobiledevice-macosx/ideviceinstaller");
      _logger2['default'].debug('Creating iDevice object with udid ' + this.opts.udid);
      try {
        return iDevice(this.opts.udid);
      } catch (e1) {
        _logger2['default'].debug('Couldn\'t find ideviceinstaller, trying built-in at ' + idiPath);
        try {
          return iDevice(this.opts.udid, { cmd: idiPath });
        } catch (e2) {
          var msg = "Could not initialize ideviceinstaller; make sure it is " + "installed and works on your system";
          _logger2['default'].error(msg);
          throw new Error(msg);
        }
      }
    }
  }, {
    key: 'installIpa',
    value: function installIpa() {
      return _regeneratorRuntime.async(function installIpa$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Installing ipa found at ' + this.opts.ipa);
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.realDevice.isInstalled(this.opts.bundleId));

          case 3:
            if (!context$2$0.sent) {
              context$2$0.next = 9;
              break;
            }

            _logger2['default'].debug("Bundle found on device, removing before reinstalling.");
            context$2$0.next = 7;
            return _regeneratorRuntime.awrap(this.realDevice.remove(this.opts.bundleId));

          case 7:
            context$2$0.next = 10;
            break;

          case 9:
            _logger2['default'].debug("Nothing found on device, going ahead and installing.");

          case 10:
            context$2$0.next = 12;
            return _regeneratorRuntime.awrap(this.realDevice.installAndWait(this.opts.ipa, this.opts.bundleId));

          case 12:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'validateDesiredCaps',
    value: function validateDesiredCaps(caps) {
      // check with the base class, and return if it fails
      var res = _get(Object.getPrototypeOf(IosDriver.prototype), 'validateDesiredCaps', this).call(this, caps);
      if (!res) return res; // eslint-disable-line curly

      return (0, _desiredCaps.desiredCapValidation)(caps);
    }
  }, {
    key: 'prelaunchSimulator',
    value: function prelaunchSimulator() {
      return _regeneratorRuntime.async(function prelaunchSimulator$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (this.shouldPrelaunchSimulator) {
              context$2$0.next = 3;
              break;
            }

            _logger2['default'].debug("Not pre-launching simulator");
            return context$2$0.abrupt('return');

          case 3:
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap((0, _device.endSimulator)(this.sim));

          case 5:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'onInstrumentsLaunch',

    // TODO: implement prelaunch sim in simulator package
    value: function onInstrumentsLaunch() {
      return _regeneratorRuntime.async(function onInstrumentsLaunch$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Instruments launched. Starting poll loop for new commands.');

            if (!this.opts.origAppPath) {
              context$2$0.next = 6;
              break;
            }

            _logger2['default'].debug("Copying app back to its original place");
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.copyFile(this.opts.app, this.opts.origAppPath));

          case 5:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 6:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'setBundleId',
    value: function setBundleId() {
      var bId;
      return _regeneratorRuntime.async(function setBundleId$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!this.opts.bundleId) {
              context$2$0.next = 4;
              break;
            }

            return context$2$0.abrupt('return');

          case 4:
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand('au.bundleId()'));

          case 6:
            bId = context$2$0.sent;

            _logger2['default'].debug('Bundle ID for open app is ' + bId.value);
            this.opts.bundleId = bId.value;

          case 9:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'startIWDP',
    value: function startIWDP() {
      return _regeneratorRuntime.async(function startIWDP$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!this.opts.startIWDP) {
              context$2$0.next = 4;
              break;
            }

            this.iwdpServer = new _iwdp.IWDP(this.opts.webkitDebugProxyPort, this.opts.udid);
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.iwdpServer.start());

          case 4:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'stopIWDP',
    value: function stopIWDP() {
      return _regeneratorRuntime.async(function stopIWDP$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!this.iwdpServer) {
              context$2$0.next = 4;
              break;
            }

            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.iwdpServer.stop());

          case 3:
            delete this.iwdpServer;

          case 4:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'setInitialOrientation',
    value: function setInitialOrientation() {
      var command;
      return _regeneratorRuntime.async(function setInitialOrientation$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!(typeof this.opts.initialOrientation === "string" && _lodash2['default'].includes(["LANDSCAPE", "PORTRAIT"], this.opts.initialOrientation.toUpperCase()))) {
              context$2$0.next = 12;
              break;
            }

            _logger2['default'].debug('Setting initial orientation to ' + this.opts.initialOrientation);
            command = 'au.setScreenOrientation(\'' + this.opts.initialOrientation.toUpperCase() + '\')';
            context$2$0.prev = 3;
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand(command));

          case 6:
            this.opts.curOrientation = this.opts.initialOrientation;
            context$2$0.next = 12;
            break;

          case 9:
            context$2$0.prev = 9;
            context$2$0.t0 = context$2$0['catch'](3);

            _logger2['default'].warn('Setting initial orientation failed with: ' + context$2$0.t0);

          case 12:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[3, 9]]);
    }
  }, {
    key: 'isRealDevice',
    value: function isRealDevice() {
      return !!this.opts.udid;
    }
  }, {
    key: 'isSafari',
    value: function isSafari() {
      return this.opts.safari;
    }
  }, {
    key: 'waitForAppLaunched',
    value: function waitForAppLaunched() {
      var condFn;
      return _regeneratorRuntime.async(function waitForAppLaunched$(context$2$0) {
        var _this = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            condFn = undefined;

            if (!this.opts.waitForAppScript) {
              context$2$0.next = 6;
              break;
            }

            // the default getSourceForElementForXML does not fit some use case, so making this customizable.
            // TODO: collect script from customer and propose several options, please comment in issue #4190.
            _logger2['default'].debug('Using custom script to wait for app start: ' + this.opts.waitForAppScript);
            condFn = function callee$2$0() {
              var res;
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    res = undefined;
                    context$3$0.prev = 1;
                    context$3$0.next = 4;
                    return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand('try{\n' + this.opts.waitForAppScript + '\n} catch(err) { $.log("waitForAppScript err: " + error); false; };'));

                  case 4:
                    res = context$3$0.sent;
                    context$3$0.next = 11;
                    break;

                  case 7:
                    context$3$0.prev = 7;
                    context$3$0.t0 = context$3$0['catch'](1);

                    _logger2['default'].debug('Cannot eval waitForAppScript script, err: ' + context$3$0.t0);
                    return context$3$0.abrupt('return', false);

                  case 11:
                    if (!(typeof res !== 'boolean')) {
                      context$3$0.next = 14;
                      break;
                    }

                    _logger2['default'].debug('Unexpected return type in waitForAppScript script');
                    return context$3$0.abrupt('return', false);

                  case 14:
                    return context$3$0.abrupt('return', res);

                  case 15:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this, [[1, 7]]);
            };
            context$2$0.next = 18;
            break;

          case 6:
            if (!this.isSafari()) {
              context$2$0.next = 16;
              break;
            }

            if (!this.isRealDevice()) {
              context$2$0.next = 10;
              break;
            }

            context$2$0.next = 10;
            return _regeneratorRuntime.awrap(this.clickButtonToLaunchSafari());

          case 10:
            _logger2['default'].debug('Waiting for initial webview');
            context$2$0.next = 13;
            return _regeneratorRuntime.awrap(this.navToInitialWebview());

          case 13:
            condFn = function callee$2$0() {
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    return context$3$0.abrupt('return', true);

                  case 1:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this);
            };
            context$2$0.next = 18;
            break;

          case 16:
            _logger2['default'].debug("Waiting for app source to contain elements");
            condFn = function callee$2$0() {
              var source, appEls;
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    context$3$0.prev = 0;
                    context$3$0.next = 3;
                    return _regeneratorRuntime.awrap(this.getSourceForElementForXML());

                  case 3:
                    source = context$3$0.sent;

                    source = JSON.parse(source || "{}");
                    appEls = (source.UIAApplication || {})['>'];
                    return context$3$0.abrupt('return', appEls && appEls.length > 0 && !IosDriver.isSpringBoard(source.UIAApplication));

                  case 9:
                    context$3$0.prev = 9;
                    context$3$0.t0 = context$3$0['catch'](0);

                    _logger2['default'].warn('Couldn\'t extract app element from source, error was: ' + context$3$0.t0);
                    return context$3$0.abrupt('return', false);

                  case 13:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this, [[0, 9]]);
            };

          case 18:
            context$2$0.prev = 18;
            context$2$0.next = 21;
            return _regeneratorRuntime.awrap((0, _asyncbox.waitForCondition)(condFn, { logger: _logger2['default'], waitMs: 10000, intervalMs: 500 }));

          case 21:
            context$2$0.next = 31;
            break;

          case 23:
            context$2$0.prev = 23;
            context$2$0.t0 = context$2$0['catch'](18);

            if (!(context$2$0.t0.message && context$2$0.t0.message.match(/Condition unmet/))) {
              context$2$0.next = 30;
              break;
            }

            _logger2['default'].warn('Initial spin timed out, continuing but the app might not be ready.');
            _logger2['default'].debug('Initial spin error was: ' + context$2$0.t0);
            context$2$0.next = 31;
            break;

          case 30:
            throw context$2$0.t0;

          case 31:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[18, 23]]);
    }
  }, {
    key: 'createInstruments',
    value: function createInstruments() {
      return _regeneratorRuntime.async(function createInstruments$(context$2$0) {
        var _this2 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug("Creating instruments");
            this.uiAutoClient = new _uiautoUiauto.UIAutoClient(this.sock);
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.makeInstruments());

          case 4:
            this.instruments = context$2$0.sent;

            this.instruments.onShutdown['catch'](function callee$2$0() {
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    context$3$0.next = 2;
                    return _regeneratorRuntime.awrap(this.startUnexpectedShutdown(new _appiumBaseDriver.errors.UnknownError('Abnormal Instruments termination!')));

                  case 2:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this2);
            }).done();

          case 6:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'shouldIgnoreInstrumentsExit',
    value: function shouldIgnoreInstrumentsExit() {
      return this.safari && this.isRealDevice();
    }
  }, {
    key: 'makeInstruments',
    value: function makeInstruments() {
      var bootstrapPath, instruments;
      return _regeneratorRuntime.async(function makeInstruments$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap((0, _uiautoUiauto.prepareBootstrap)({
              sock: this.sock,
              interKeyDelay: this.opts.interKeyDelay,
              justLoopInfinitely: false,
              autoAcceptAlerts: this.opts.autoAcceptAlerts,
              autoDismissAlerts: this.opts.autoDismissAlerts,
              sendKeyStrategy: this.opts.sendKeyStrategy || (this.isRealDevice() ? 'grouped' : 'oneByOne')
            }));

          case 2:
            bootstrapPath = context$2$0.sent;
            context$2$0.t0 = _instruments.Instruments;
            context$2$0.t1 = (!this.isRealDevice() ? this.opts.app : null) || this.opts.bundleId;
            context$2$0.t2 = this.opts.udid;
            context$2$0.t3 = this.opts.processArguments;
            context$2$0.t4 = this.shouldIgnoreInstrumentsExit();
            context$2$0.t5 = bootstrapPath;
            context$2$0.t6 = this.opts.automationTraceTemplatePath;
            context$2$0.t7 = this.opts.instrumentsPath;
            context$2$0.t8 = this.opts.withoutDelay;
            context$2$0.t9 = this.opts.platformVersion;
            context$2$0.t10 = this.opts.webSocket;
            context$2$0.t11 = this.opts.launchTimeout;
            context$2$0.t12 = this.opts.backendRetries;
            context$2$0.t13 = this.isRealDevice();

            if (!(this.iosSdkVersion >= 7.1)) {
              context$2$0.next = 23;
              break;
            }

            context$2$0.next = 20;
            return _regeneratorRuntime.awrap((0, _device.getAdjustedDeviceName)(this.opts));

          case 20:
            context$2$0.t14 = context$2$0.sent;
            context$2$0.next = 24;
            break;

          case 23:
            context$2$0.t14 = null;

          case 24:
            context$2$0.t15 = context$2$0.t14;
            context$2$0.t16 = _path2['default'].resolve(this.opts.tmpDir || '/tmp', 'appium-instruments');
            context$2$0.t17 = this.opts.traceDir;
            context$2$0.t18 = this.opts.locale;
            context$2$0.t19 = this.opts.language;
            context$2$0.t20 = {
              app: context$2$0.t1,
              udid: context$2$0.t2,
              processArguments: context$2$0.t3,
              ignoreStartupExit: context$2$0.t4,
              bootstrap: context$2$0.t5,
              template: context$2$0.t6,
              instrumentsPath: context$2$0.t7,
              withoutDelay: context$2$0.t8,
              platformVersion: context$2$0.t9,
              webSocket: context$2$0.t10,
              launchTimeout: context$2$0.t11,
              flakeyRetries: context$2$0.t12,
              realDevice: context$2$0.t13,
              simulatorSdkAndDevice: context$2$0.t15,
              tmpDir: context$2$0.t16,
              traceDir: context$2$0.t17,
              locale: context$2$0.t18,
              language: context$2$0.t19
            };
            instruments = new context$2$0.t0(context$2$0.t20);
            return context$2$0.abrupt('return', instruments);

          case 32:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'startInstruments',
    value: function startInstruments() {
      return _regeneratorRuntime.async(function startInstruments$(context$2$0) {
        var _this3 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug("Starting UIAutoClient, and launching Instruments.");

            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(_bluebird2['default'].all([this.uiAutoClient.start().then(function () {
              _this3.instruments.registerLaunch();
            }), this.instruments.launch()]));

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'configureBootstrap',
    value: function configureBootstrap() {
      var isVerbose, cmd;
      return _regeneratorRuntime.async(function configureBootstrap$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug("Setting bootstrap config keys/values");
            isVerbose = true;
            cmd = 'target = $.target();\n';

            cmd += 'au = $;\n';
            cmd += '$.isVerbose = ' + isVerbose + ';\n';
            // Not using uiauto grace period because of bug.
            // cmd += '$.target().setTimeout(1);\n';
            context$2$0.next = 7;
            return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand(cmd));

          case 7:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getSourceForElementForXML',
    value: function getSourceForElementForXML(ctx) {
      var source;
      return _regeneratorRuntime.async(function getSourceForElementForXML$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            source = undefined;

            if (ctx) {
              context$2$0.next = 7;
              break;
            }

            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand("au.mainApp().getTreeForXML()"));

          case 4:
            source = context$2$0.sent;
            context$2$0.next = 10;
            break;

          case 7:
            context$2$0.next = 9;
            return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand('au.getElement(\'' + ctx + '\').getTreeForXML()'));

          case 9:
            source = context$2$0.sent;

          case 10:
            if (!source) {
              context$2$0.next = 14;
              break;
            }

            return context$2$0.abrupt('return', JSON.stringify(source));

          case 14:
            throw new Error('Bad response from getTreeForXML. res was ' + JSON.stringify(source));

          case 15:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'realDevice',
    get: function get() {
      this._realDevice = this._realDevice || this.getIDeviceObj();
      return this._realDevice;
    },
    set: function set(rd) {
      this._realDevice = rd;
    }
  }], [{
    key: 'isSpringBoard',
    value: function isSpringBoard(uiAppObj) {
      // TODO: move to helpers
      // Test for iOS homescreen (SpringBoard). AUT occassionally start the sim, but fails to load
      // the app. If that occurs, getSourceForElementFoXML will return a doc object that meets our
      // app-check conditions, resulting in a false positive. This function tests the UiApplication
      // property's meta data to ensure that the Appium doesn't confuse SpringBoard with the app
      // under test.
      return _lodash2['default'].propertyOf(uiAppObj['@'])('name') === 'SpringBoard';
    }
  }]);

  return IosDriver;
})(_appiumBaseDriver.BaseDriver);

var _iteratorNormalCompletion = true;
var _didIteratorError = false;
var _iteratorError = undefined;

try {

  for (var _iterator = _getIterator(_lodash2['default'].toPairs(_commandsIndex2['default'])), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
    var _step$value = _slicedToArray(_step.value, 2);

    var cmd = _step$value[0];
    var fn = _step$value[1];

    IosDriver.prototype[cmd] = fn;
  }
} catch (err) {
  _didIteratorError = true;
  _iteratorError = err;
} finally {
  try {
    if (!_iteratorNormalCompletion && _iterator['return']) {
      _iterator['return']();
    }
  } finally {
    if (_didIteratorError) {
      throw _iteratorError;
    }
  }
}

exports.IosDriver = IosDriver;
exports.defaultServerCaps = defaultServerCaps;
exports['default'] = IosDriver;

// appium-ios-driver uses Instruments to automate the device
// but Xcode 8 does not have Instruments, so short circuit

// on real device, need to check if safari launcher exists
// first check if it is already on the device

// it's not on the device, so check if we need to build

// await this.sim.shutdown();

// if user has passed in desiredCaps.autoLaunch = false
// meaning they will manage app install / launching

// We already have a bundle Id

// on iOS8 in particular, we can get a working session before the app
// is ready to respond to commands; in that case the source will be empty
// so we just spin until it's not
// eslint-disable-line promise/catch-or-return
// unexpected exit

// at the moment all the logging in uiauto is at debug level

// on real devices bundleId is always used
// TODO: level was configured according to logger

// TODO: all this json/xml logic is very expensive, we need
// to use a SAX parser instead.

// this should never happen but we've received bug reports; this will help us track down
// what's wrong in getTreeForXML
//# sourceMappingURL=data:application/json;charset=utf8;base64,
