/*
 * derived from jQuery Cookie Plugin v1.4.1
 * https://github.com/carhartl/jquery-cookie
 */

// needed to communicate/translate between JSONWire cookies and regular JavaScript cookies

'use strict';

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumSupport = require('appium-support');

var log = _appiumSupport.logger.getLogger('Cookie');

// parses the value if needed and converts the value if a converter is provided
// internal function, not exported
function convertCookie(value, converter) {
  if (value.indexOf('"') === 0) {
    // this is a quoted cookied according to RFC2068
    // remove enclosing quotes and internal quotes and backslashes
    value = value.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
  }

  var parsedValue = undefined;
  try {
    parsedValue = decodeURIComponent(value.replace(/\+/g, ' '));
  } catch (e) {
    // no need to fail if we can't decode
    log.warn(e);
  }

  return converter ? converter(parsedValue) : parsedValue;
}

// takes arguments given and creates a JavaScript Cookie
function createJSCookie(key, value) {
  var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

  return [encodeURIComponent(key), '=', value, options.expires ? '; expires=' + options.expires : '', options.path ? '; path=' + options.path : '', options.domain ? '; domain=' + options.domain : '', options.secure ? '; secure' : ''].join('');
}

// takes the JavaScript cookieString and translates it into a JSONWire formatted cookie
function createJWPCookie(key, cookieString) {
  var converter = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

  var result = {};
  var cookies = cookieString ? cookieString.split('; ') : [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = _getIterator(cookies), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var cookie = _step.value;

      var parts = cookie.split('=');

      // get the first and second element as name and value
      var _name = decodeURIComponent(parts.shift());
      var val = parts[0];

      // if name is key, this is the central element of the cookie, so add as `name`
      // otherwise it is an optional element
      if (key && key === _name) {
        result.name = key;
        result.value = convertCookie(val, converter);
      } else {
        result[_name] = convertCookie(val, converter);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator['return']) {
        _iterator['return']();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return result;
}

// takes a JavaScript cookiestring and parses it for the value given the key
function getValue(key, cookieString) {
  var converter = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

  var result = createJWPCookie(key, cookieString, converter);

  // if `key` is undefined we want the entire cookie
  return _lodash2['default'].isUndefined(key) ? result : result.value;
}

// returns a cookie that expires on 01 Jan 1970
// assign the returned cookie to an existing cookie to delete that cookie
function expireCookie(key, options) {
  // override `expires` in `options`, and then make the cookie
  return createJSCookie(key, '', _lodash2['default'].assign({}, options, {
    expires: 'Thu, 01 Jan 1970 00:00:00 GMT'
  }));
}

// export individually and also (as default) as an object
exports.createJSCookie = createJSCookie;
exports.createJWPCookie = createJWPCookie;
exports.getValue = getValue;
exports.expireCookie = expireCookie;
exports['default'] = { createJSCookie: createJSCookie, createJWPCookie: createJWPCookie, getValue: getValue, expireCookie: expireCookie };
//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUczRCxTQUFPLG9CQUFFLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQztDQUNuRDs7OztBQUtELFNBQVMsWUFBWSxDQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUU7O0FBRW5DLFNBQU8sY0FBYyxDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsb0JBQUUsTUFBTSxDQUFDLEVBQUUsRUFBRSxPQUFPLEVBQUU7QUFDbkQsV0FBTyxFQUFFLCtCQUErQjtHQUN6QyxDQUFDLENBQUMsQ0FBQztDQUNMOzs7UUFHUSxjQUFjLEdBQWQsY0FBYztRQUFFLGVBQWUsR0FBZixlQUFlO1FBQUUsUUFBUSxHQUFSLFFBQVE7UUFBRSxZQUFZLEdBQVosWUFBWTtxQkFDakQsRUFBRSxjQUFjLEVBQWQsY0FBYyxFQUFFLGVBQWUsRUFBZixlQUFlLEVBQUUsUUFBUSxFQUFSLFFBQVEsRUFBRSxZQUFZLEVBQVosWUFBWSxFQUFFIiwiZmlsZSI6ImxpYi9jb29raWVzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIGRlcml2ZWQgZnJvbSBqUXVlcnkgQ29va2llIFBsdWdpbiB2MS40LjFcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jYXJoYXJ0bC9qcXVlcnktY29va2llXG4gKi9cblxuIC8vIG5lZWRlZCB0byBjb21tdW5pY2F0ZS90cmFuc2xhdGUgYmV0d2VlbiBKU09OV2lyZSBjb29raWVzIGFuZCByZWd1bGFyIEphdmFTY3JpcHQgY29va2llc1xuXG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuXG5cbmNvbnN0IGxvZyA9IGxvZ2dlci5nZXRMb2dnZXIoJ0Nvb2tpZScpO1xuXG4vLyBwYXJzZXMgdGhlIHZhbHVlIGlmIG5lZWRlZCBhbmQgY29udmVydHMgdGhlIHZhbHVlIGlmIGEgY29udmVydGVyIGlzIHByb3ZpZGVkXG4vLyBpbnRlcm5hbCBmdW5jdGlvbiwgbm90IGV4cG9ydGVkXG5mdW5jdGlvbiBjb252ZXJ0Q29va2llICh2YWx1ZSwgY29udmVydGVyKSB7XG4gIGlmICh2YWx1ZS5pbmRleE9mKCdcIicpID09PSAwKSB7XG4gICAgLy8gdGhpcyBpcyBhIHF1b3RlZCBjb29raWVkIGFjY29yZGluZyB0byBSRkMyMDY4XG4gICAgLy8gcmVtb3ZlIGVuY2xvc2luZyBxdW90ZXMgYW5kIGludGVybmFsIHF1b3RlcyBhbmQgYmFja3NsYXNoZXNcbiAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDEsIC0xKS5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJykucmVwbGFjZSgvXFxcXFxcXFwvZywgJ1xcXFwnKTtcbiAgfVxuXG4gIGxldCBwYXJzZWRWYWx1ZTtcbiAgdHJ5IHtcbiAgICBwYXJzZWRWYWx1ZSA9IGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZS5yZXBsYWNlKC9cXCsvZywgJyAnKSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBubyBuZWVkIHRvIGZhaWwgaWYgd2UgY2FuJ3QgZGVjb2RlXG4gICAgbG9nLndhcm4oZSk7XG4gIH1cblxuICByZXR1cm4gY29udmVydGVyID8gY29udmVydGVyKHBhcnNlZFZhbHVlKSA6IHBhcnNlZFZhbHVlO1xufVxuXG4vLyB0YWtlcyBhcmd1bWVudHMgZ2l2ZW4gYW5kIGNyZWF0ZXMgYSBKYXZhU2NyaXB0IENvb2tpZVxuZnVuY3Rpb24gY3JlYXRlSlNDb29raWUgKGtleSwgdmFsdWUsIG9wdGlvbnMgPSB7fSkge1xuICByZXR1cm4gW1xuICAgIGVuY29kZVVSSUNvbXBvbmVudChrZXkpLCAnPScsIHZhbHVlLFxuICAgIG9wdGlvbnMuZXhwaXJlcyA/IGA7IGV4cGlyZXM9JHtvcHRpb25zLmV4cGlyZXN9YCA6ICcnLFxuICAgIG9wdGlvbnMucGF0aCAgICA/IGA7IHBhdGg9JHtvcHRpb25zLnBhdGh9YCAgICAgICA6ICcnLFxuICAgIG9wdGlvbnMuZG9tYWluICA/IGA7IGRvbWFpbj0ke29wdGlvbnMuZG9tYWlufWAgICA6ICcnLFxuICAgIG9wdGlvbnMuc2VjdXJlICA/ICc7IHNlY3VyZScgOiAnJ1xuICBdLmpvaW4oJycpO1xufVxuXG4vLyB0YWtlcyB0aGUgSmF2YVNjcmlwdCBjb29raWVTdHJpbmcgYW5kIHRyYW5zbGF0ZXMgaXQgaW50byBhIEpTT05XaXJlIGZvcm1hdHRlZCBjb29raWVcbmZ1bmN0aW9uIGNyZWF0ZUpXUENvb2tpZSAoa2V5LCBjb29raWVTdHJpbmcsIGNvbnZlcnRlciA9IG51bGwpIHtcbiAgbGV0IHJlc3VsdCA9IHt9O1xuICBsZXQgY29va2llcyA9IGNvb2tpZVN0cmluZyA/IGNvb2tpZVN0cmluZy5zcGxpdCgnOyAnKSA6IFtdO1xuICBmb3IgKGxldCBjb29raWUgb2YgY29va2llcykge1xuICAgIGxldCBwYXJ0cyA9IGNvb2tpZS5zcGxpdCgnPScpO1xuXG4gICAgLy8gZ2V0IHRoZSBmaXJzdCBhbmQgc2Vjb25kIGVsZW1lbnQgYXMgbmFtZSBhbmQgdmFsdWVcbiAgICBsZXQgbmFtZSA9IGRlY29kZVVSSUNvbXBvbmVudChwYXJ0cy5zaGlmdCgpKTtcbiAgICBsZXQgdmFsID0gcGFydHNbMF07XG5cbiAgICAvLyBpZiBuYW1lIGlzIGtleSwgdGhpcyBpcyB0aGUgY2VudHJhbCBlbGVtZW50IG9mIHRoZSBjb29raWUsIHNvIGFkZCBhcyBgbmFtZWBcbiAgICAvLyBvdGhlcndpc2UgaXQgaXMgYW4gb3B0aW9uYWwgZWxlbWVudFxuICAgIGlmIChrZXkgJiYga2V5ID09PSBuYW1lKSB7XG4gICAgICByZXN1bHQubmFtZSA9IGtleTtcbiAgICAgIHJlc3VsdC52YWx1ZSA9IGNvbnZlcnRDb29raWUodmFsLCBjb252ZXJ0ZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRbbmFtZV0gPSBjb252ZXJ0Q29va2llKHZhbCwgY29udmVydGVyKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gdGFrZXMgYSBKYXZhU2NyaXB0IGNvb2tpZXN0cmluZyBhbmQgcGFyc2VzIGl0IGZvciB0aGUgdmFsdWUgZ2l2ZW4gdGhlIGtleVxuZnVuY3Rpb24gZ2V0VmFsdWUgKGtleSwgY29va2llU3RyaW5nLCBjb252ZXJ0ZXIgPSBudWxsKSB7XG4gIGxldCByZXN1bHQgPSBjcmVhdGVKV1BDb29raWUoa2V5LCBjb29raWVTdHJpbmcsIGNvbnZlcnRlcik7XG5cbiAgLy8gaWYgYGtleWAgaXMgdW5kZWZpbmVkIHdlIHdhbnQgdGhlIGVudGlyZSBjb29raWVcbiAgcmV0dXJuIF8uaXNVbmRlZmluZWQoa2V5KSA/IHJlc3VsdCA6IHJlc3VsdC52YWx1ZTtcbn1cblxuXG4vLyByZXR1cm5zIGEgY29va2llIHRoYXQgZXhwaXJlcyBvbiAwMSBKYW4gMTk3MFxuLy8gYXNzaWduIHRoZSByZXR1cm5lZCBjb29raWUgdG8gYW4gZXhpc3RpbmcgY29va2llIHRvIGRlbGV0ZSB0aGF0IGNvb2tpZVxuZnVuY3Rpb24gZXhwaXJlQ29va2llIChrZXksIG9wdGlvbnMpIHtcbiAgLy8gb3ZlcnJpZGUgYGV4cGlyZXNgIGluIGBvcHRpb25zYCwgYW5kIHRoZW4gbWFrZSB0aGUgY29va2llXG4gIHJldHVybiBjcmVhdGVKU0Nvb2tpZShrZXksICcnLCBfLmFzc2lnbih7fSwgb3B0aW9ucywge1xuICAgIGV4cGlyZXM6ICdUaHUsIDAxIEphbiAxOTcwIDAwOjAwOjAwIEdNVCdcbiAgfSkpO1xufVxuXG4vLyBleHBvcnQgaW5kaXZpZHVhbGx5IGFuZCBhbHNvIChhcyBkZWZhdWx0KSBhcyBhbiBvYmplY3RcbmV4cG9ydCB7IGNyZWF0ZUpTQ29va2llLCBjcmVhdGVKV1BDb29raWUsIGdldFZhbHVlLCBleHBpcmVDb29raWUgfTtcbmV4cG9ydCBkZWZhdWx0IHsgY3JlYXRlSlNDb29raWUsIGNyZWF0ZUpXUENvb2tpZSwgZ2V0VmFsdWUsIGV4cGlyZUNvb2tpZSB9O1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLiJ9
