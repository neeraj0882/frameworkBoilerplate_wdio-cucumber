'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _this = this;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _deviceLogIosLog = require('../device-log/ios-log');

var _deviceLogIosLog2 = _interopRequireDefault(_deviceLogIosLog);

var _deviceLogIosCrashLog = require('../device-log/ios-crash-log');

var _deviceLogIosCrashLog2 = _interopRequireDefault(_deviceLogIosCrashLog);

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var commands = {},
    helpers = {},
    extensions = {};

function extractLogs(logType) {
  var logsContainer = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
  var logObject, logs;
  return _regeneratorRuntime.async(function extractLogs$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!_lodash2['default'].isEmpty(logsContainer)) {
          context$1$0.next = 2;
          break;
        }

        throw new Error('No logs currently available. Is the device/simulator started?');

      case 2:
        logObject = logsContainer[logType];

        if (!logObject) {
          context$1$0.next = 9;
          break;
        }

        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(logObject.getLogs());

      case 6:
        context$1$0.t0 = context$1$0.sent;
        context$1$0.next = 10;
        break;

      case 9:
        context$1$0.t0 = null;

      case 10:
        logs = context$1$0.t0;

        if (!logs) {
          context$1$0.next = 13;
          break;
        }

        return context$1$0.abrupt('return', logs);

      case 13:
        throw new Error('No logs of type \'' + logType + '\' found.');

      case 14:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

extensions.supportedLogTypes = {
  syslog: {
    description: 'System Logs - Device logs for iOS applications on real devices and simulators',
    getter: function getter(self) {
      return _regeneratorRuntime.async(function getter$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
          case 0:
            context$1$0.next = 2;
            return _regeneratorRuntime.awrap(extractLogs('syslog', self.logs));

          case 2:
            return context$1$0.abrupt('return', context$1$0.sent);

          case 3:
          case 'end':
            return context$1$0.stop();
        }
      }, null, _this);
    }
  },
  crashlog: {
    description: 'Crash Logs - Crash reports for iOS applications on real devices and simulators',
    getter: function getter(self) {
      return _regeneratorRuntime.async(function getter$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
          case 0:
            context$1$0.next = 2;
            return _regeneratorRuntime.awrap(extractLogs('crashlog', self.logs));

          case 2:
            return context$1$0.abrupt('return', context$1$0.sent);

          case 3:
          case 'end':
            return context$1$0.stop();
        }
      }, null, _this);
    }
  },
  performance: {
    description: 'Performance Logs - Debug Timelines on real devices and simulators',
    getter: function getter(self) {
      return _regeneratorRuntime.async(function getter$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
          case 0:
            context$1$0.next = 2;
            return _regeneratorRuntime.awrap(extractLogs('performance', self.logs));

          case 2:
            return context$1$0.abrupt('return', context$1$0.sent);

          case 3:
          case 'end':
            return context$1$0.stop();
        }
      }, null, _this);
    }
  },
  server: {
    description: 'Appium server logs',
    getter: function getter(self) {
      if (!self.relaxedSecurityEnabled) {
        throw new Error('Appium server must have relaxed security flag set ' + 'in order to retrieve server logs');
      }
      return _logger2['default'].unwrap().record.map(function (x) {
        return {
          // npmlog does not keep timestamps in the history
          timestamp: Date.now(),
          level: 'ALL',
          message: _lodash2['default'].isEmpty(x.prefix) ? x.message : '[' + x.prefix + '] ' + x.message
        };
      });
    }
  }
};

helpers.startLogCapture = function callee$0$0(sim) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (_lodash2['default'].isEmpty(this.logs)) {
          context$1$0.next = 3;
          break;
        }

        _logger2['default'].warn("Trying to start iOS log capture but it's already started!");
        return context$1$0.abrupt('return');

      case 3:
        this.logs.crashlog = new _deviceLogIosCrashLog2['default']();
        this.logs.syslog = new _deviceLogIosLog2['default']({
          sim: sim,
          udid: this.opts.udid,
          showLogs: this.opts.showIOSLog,
          realDeviceLogger: this.opts.realDeviceLogger,
          xcodeVersion: this.xcodeVersion
        });
        context$1$0.prev = 5;
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.logs.syslog.startCapture());

      case 8:
        context$1$0.next = 14;
        break;

      case 10:
        context$1$0.prev = 10;
        context$1$0.t0 = context$1$0['catch'](5);

        _logger2['default'].warn("Could not capture logs from device. Continuing without capturing logs.");
        return context$1$0.abrupt('return');

      case 14:
        context$1$0.next = 16;
        return _regeneratorRuntime.awrap(this.logs.crashlog.startCapture());

      case 16:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[5, 10]]);
};

_Object$assign(extensions, commands, helpers);
exports.commands = commands;
exports.helpers = helpers;
exports['default'] = extensions;

// make sure that we have logs at all
// otherwise it's not been initialized

// If logs captured successfully send response with data, else send error
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9sb2dnaW5nLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O3NCQUFjLFFBQVE7Ozs7K0JBQ0gsdUJBQXVCOzs7O29DQUNsQiw2QkFBNkI7Ozs7c0JBQ2xDLFdBQVc7Ozs7QUFHOUIsSUFBSSxRQUFRLEdBQUcsRUFBRTtJQUFFLE9BQU8sR0FBRyxFQUFFO0lBQUUsVUFBVSxHQUFHLEVBQUUsQ0FBQzs7QUFFakQsU0FBZSxXQUFXLENBQUUsT0FBTztNQUFFLGFBQWEseURBQUcsRUFBRTtNQVEvQyxTQUFTLEVBQ1QsSUFBSTs7OzthQU5OLG9CQUFFLE9BQU8sQ0FBQyxhQUFhLENBQUM7Ozs7O2NBQ3BCLElBQUksS0FBSyxDQUFDLCtEQUErRCxDQUFDOzs7QUFJNUUsaUJBQVMsR0FBRyxhQUFhLENBQUMsT0FBTyxDQUFDOzthQUMzQixTQUFTOzs7Ozs7eUNBQVMsU0FBUyxDQUFDLE9BQU8sRUFBRTs7Ozs7Ozs7eUJBQUcsSUFBSTs7O0FBQW5ELFlBQUk7O2FBQ04sSUFBSTs7Ozs7NENBQ0MsSUFBSTs7O2NBRVAsSUFBSSxLQUFLLHdCQUFxQixPQUFPLGVBQVc7Ozs7Ozs7Q0FDdkQ7O0FBRUQsVUFBVSxDQUFDLGlCQUFpQixHQUFHO0FBQzdCLFFBQU0sRUFBRTtBQUNOLGVBQVcsRUFBRSwrRUFBK0U7QUFDNUYsVUFBTSxFQUFFLGdCQUFPLElBQUk7Ozs7OzZDQUFXLFdBQVcsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQzs7Ozs7Ozs7OztLQUFBO0dBQy9EO0FBQ0QsVUFBUSxFQUFFO0FBQ1IsZUFBVyxFQUFFLGdGQUFnRjtBQUM3RixVQUFNLEVBQUUsZ0JBQU8sSUFBSTs7Ozs7NkNBQVcsV0FBVyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDOzs7Ozs7Ozs7O0tBQUE7R0FDakU7QUFDRCxhQUFXLEVBQUU7QUFDWCxlQUFXLEVBQUUsbUVBQW1FO0FBQ2hGLFVBQU0sRUFBRSxnQkFBTyxJQUFJOzs7Ozs2Q0FBVyxXQUFXLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUM7Ozs7Ozs7Ozs7S0FBQTtHQUNwRTtBQUNELFFBQU0sRUFBRTtBQUNOLGVBQVcsRUFBRSxvQkFBb0I7QUFDakMsVUFBTSxFQUFFLGdCQUFDLElBQUksRUFBSztBQUNoQixVQUFJLENBQUMsSUFBSSxDQUFDLHNCQUFzQixFQUFFO0FBQ2hDLGNBQU0sSUFBSSxLQUFLLENBQUMsb0RBQW9ELEdBQ3BELGtDQUFrQyxDQUFDLENBQUM7T0FDckQ7QUFDRCxhQUFPLG9CQUFPLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FDMUIsR0FBRyxDQUFDLFVBQUMsQ0FBQyxFQUFLO0FBQ1YsZUFBTzs7QUFFTCxtQkFBUyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUU7QUFDckIsZUFBSyxFQUFFLEtBQUs7QUFDWixpQkFBTyxFQUFFLG9CQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sU0FBTyxDQUFDLENBQUMsTUFBTSxVQUFLLENBQUMsQ0FBQyxPQUFPLEFBQUU7U0FDeEUsQ0FBQztPQUNILENBQUMsQ0FBQztLQUNOO0dBQ0Y7Q0FDRixDQUFDOztBQUVGLE9BQU8sQ0FBQyxlQUFlLEdBQUcsb0JBQWdCLEdBQUc7Ozs7WUFDdEMsb0JBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7Ozs7O0FBQ3ZCLDRCQUFPLElBQUksQ0FBQywyREFBMkQsQ0FBQyxDQUFDOzs7O0FBRzNFLFlBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLHVDQUFpQixDQUFDO0FBQ3ZDLFlBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLGlDQUFXO0FBQzVCLGFBQUcsRUFBSCxHQUFHO0FBQ0gsY0FBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSTtBQUNwQixrQkFBUSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVTtBQUM5QiwwQkFBZ0IsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQjtBQUM1QyxzQkFBWSxFQUFFLElBQUksQ0FBQyxZQUFZO1NBQ2hDLENBQUMsQ0FBQzs7O3lDQUVLLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRTs7Ozs7Ozs7OztBQUVyQyw0QkFBTyxJQUFJLENBQUMsd0VBQXdFLENBQUMsQ0FBQzs7Ozs7eUNBR2xGLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksRUFBRTs7Ozs7OztDQUN4QyxDQUFDOztBQUdGLGVBQWMsVUFBVSxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNwQyxRQUFRLEdBQVIsUUFBUTtRQUFFLE9BQU8sR0FBUCxPQUFPO3FCQUNYLFVBQVUiLCJmaWxlIjoibGliL2NvbW1hbmRzL2xvZ2dpbmcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IElPU0xvZyBmcm9tICcuLi9kZXZpY2UtbG9nL2lvcy1sb2cnO1xuaW1wb3J0IElPU0NyYXNoTG9nIGZyb20gJy4uL2RldmljZS1sb2cvaW9zLWNyYXNoLWxvZyc7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4uL2xvZ2dlcic7XG5cblxubGV0IGNvbW1hbmRzID0ge30sIGhlbHBlcnMgPSB7fSwgZXh0ZW5zaW9ucyA9IHt9O1xuXG5hc3luYyBmdW5jdGlvbiBleHRyYWN0TG9ncyAobG9nVHlwZSwgbG9nc0NvbnRhaW5lciA9IHt9KSB7XG4gIC8vIG1ha2Ugc3VyZSB0aGF0IHdlIGhhdmUgbG9ncyBhdCBhbGxcbiAgLy8gb3RoZXJ3aXNlIGl0J3Mgbm90IGJlZW4gaW5pdGlhbGl6ZWRcbiAgaWYgKF8uaXNFbXB0eShsb2dzQ29udGFpbmVyKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignTm8gbG9ncyBjdXJyZW50bHkgYXZhaWxhYmxlLiBJcyB0aGUgZGV2aWNlL3NpbXVsYXRvciBzdGFydGVkPycpO1xuICB9XG5cbiAgLy8gSWYgbG9ncyBjYXB0dXJlZCBzdWNjZXNzZnVsbHkgc2VuZCByZXNwb25zZSB3aXRoIGRhdGEsIGVsc2Ugc2VuZCBlcnJvclxuICBjb25zdCBsb2dPYmplY3QgPSBsb2dzQ29udGFpbmVyW2xvZ1R5cGVdO1xuICBjb25zdCBsb2dzID0gbG9nT2JqZWN0ID8gYXdhaXQgbG9nT2JqZWN0LmdldExvZ3MoKSA6IG51bGw7XG4gIGlmIChsb2dzKSB7XG4gICAgcmV0dXJuIGxvZ3M7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKGBObyBsb2dzIG9mIHR5cGUgJyR7bG9nVHlwZX0nIGZvdW5kLmApO1xufVxuXG5leHRlbnNpb25zLnN1cHBvcnRlZExvZ1R5cGVzID0ge1xuICBzeXNsb2c6IHtcbiAgICBkZXNjcmlwdGlvbjogJ1N5c3RlbSBMb2dzIC0gRGV2aWNlIGxvZ3MgZm9yIGlPUyBhcHBsaWNhdGlvbnMgb24gcmVhbCBkZXZpY2VzIGFuZCBzaW11bGF0b3JzJyxcbiAgICBnZXR0ZXI6IGFzeW5jIChzZWxmKSA9PiBhd2FpdCBleHRyYWN0TG9ncygnc3lzbG9nJywgc2VsZi5sb2dzKSxcbiAgfSxcbiAgY3Jhc2hsb2c6IHtcbiAgICBkZXNjcmlwdGlvbjogJ0NyYXNoIExvZ3MgLSBDcmFzaCByZXBvcnRzIGZvciBpT1MgYXBwbGljYXRpb25zIG9uIHJlYWwgZGV2aWNlcyBhbmQgc2ltdWxhdG9ycycsXG4gICAgZ2V0dGVyOiBhc3luYyAoc2VsZikgPT4gYXdhaXQgZXh0cmFjdExvZ3MoJ2NyYXNobG9nJywgc2VsZi5sb2dzKSxcbiAgfSxcbiAgcGVyZm9ybWFuY2U6IHtcbiAgICBkZXNjcmlwdGlvbjogJ1BlcmZvcm1hbmNlIExvZ3MgLSBEZWJ1ZyBUaW1lbGluZXMgb24gcmVhbCBkZXZpY2VzIGFuZCBzaW11bGF0b3JzJyxcbiAgICBnZXR0ZXI6IGFzeW5jIChzZWxmKSA9PiBhd2FpdCBleHRyYWN0TG9ncygncGVyZm9ybWFuY2UnLCBzZWxmLmxvZ3MpLFxuICB9LFxuICBzZXJ2ZXI6IHtcbiAgICBkZXNjcmlwdGlvbjogJ0FwcGl1bSBzZXJ2ZXIgbG9ncycsXG4gICAgZ2V0dGVyOiAoc2VsZikgPT4ge1xuICAgICAgaWYgKCFzZWxmLnJlbGF4ZWRTZWN1cml0eUVuYWJsZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBcHBpdW0gc2VydmVyIG11c3QgaGF2ZSByZWxheGVkIHNlY3VyaXR5IGZsYWcgc2V0ICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2luIG9yZGVyIHRvIHJldHJpZXZlIHNlcnZlciBsb2dzJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbG9nZ2VyLnVud3JhcCgpLnJlY29yZFxuICAgICAgICAubWFwKCh4KSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC8vIG5wbWxvZyBkb2VzIG5vdCBrZWVwIHRpbWVzdGFtcHMgaW4gdGhlIGhpc3RvcnlcbiAgICAgICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcbiAgICAgICAgICAgIGxldmVsOiAnQUxMJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6IF8uaXNFbXB0eSh4LnByZWZpeCkgPyB4Lm1lc3NhZ2UgOiBgWyR7eC5wcmVmaXh9XSAke3gubWVzc2FnZX1gLFxuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH0sXG4gIH0sXG59O1xuXG5oZWxwZXJzLnN0YXJ0TG9nQ2FwdHVyZSA9IGFzeW5jIGZ1bmN0aW9uIChzaW0pIHtcbiAgaWYgKCFfLmlzRW1wdHkodGhpcy5sb2dzKSkge1xuICAgIGxvZ2dlci53YXJuKFwiVHJ5aW5nIHRvIHN0YXJ0IGlPUyBsb2cgY2FwdHVyZSBidXQgaXQncyBhbHJlYWR5IHN0YXJ0ZWQhXCIpO1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLmxvZ3MuY3Jhc2hsb2cgPSBuZXcgSU9TQ3Jhc2hMb2coKTtcbiAgdGhpcy5sb2dzLnN5c2xvZyA9IG5ldyBJT1NMb2coe1xuICAgIHNpbSxcbiAgICB1ZGlkOiB0aGlzLm9wdHMudWRpZCxcbiAgICBzaG93TG9nczogdGhpcy5vcHRzLnNob3dJT1NMb2csXG4gICAgcmVhbERldmljZUxvZ2dlcjogdGhpcy5vcHRzLnJlYWxEZXZpY2VMb2dnZXIsXG4gICAgeGNvZGVWZXJzaW9uOiB0aGlzLnhjb2RlVmVyc2lvbixcbiAgfSk7XG4gIHRyeSB7XG4gICAgYXdhaXQgdGhpcy5sb2dzLnN5c2xvZy5zdGFydENhcHR1cmUoKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nZ2VyLndhcm4oXCJDb3VsZCBub3QgY2FwdHVyZSBsb2dzIGZyb20gZGV2aWNlLiBDb250aW51aW5nIHdpdGhvdXQgY2FwdHVyaW5nIGxvZ3MuXCIpO1xuICAgIHJldHVybjtcbiAgfVxuICBhd2FpdCB0aGlzLmxvZ3MuY3Jhc2hsb2cuc3RhcnRDYXB0dXJlKCk7XG59O1xuXG5cbk9iamVjdC5hc3NpZ24oZXh0ZW5zaW9ucywgY29tbWFuZHMsIGhlbHBlcnMpO1xuZXhwb3J0IHsgY29tbWFuZHMsIGhlbHBlcnMgfTtcbmV4cG9ydCBkZWZhdWx0IGV4dGVuc2lvbnM7XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
