'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
var commands = {},
    helpers = {},
    extensions = {};

// this function is memoized in IOSDriver's constructor
commands.getDevicePixelRatio = function callee$0$0() {
  var screenHeight, screenHeightOfPlusDevices;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.getWindowSize());

      case 2:
        screenHeight = context$1$0.sent.height;
        screenHeightOfPlusDevices = 736;
        return context$1$0.abrupt('return', screenHeight === screenHeightOfPlusDevices ? 3.0 : 2.0);

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getViewportRect = function callee$0$0() {
  var scale, statusBarHeight, windowSize;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.getDevicePixelRatio());

      case 2:
        scale = context$1$0.sent;
        context$1$0.t0 = Math;
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.getStatusBarHeight());

      case 6:
        context$1$0.t1 = context$1$0.sent;
        context$1$0.t2 = scale;
        context$1$0.t3 = context$1$0.t1 * context$1$0.t2;
        statusBarHeight = context$1$0.t0.round.call(context$1$0.t0, context$1$0.t3);
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(this.getWindowSize());

      case 12:
        windowSize = context$1$0.sent;
        return context$1$0.abrupt('return', {
          left: 0,
          top: statusBarHeight,
          width: windowSize.width * scale,
          height: windowSize.height * scale - statusBarHeight
        });

      case 14:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getStatusBarHeight = function callee$0$0() {
  var command;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        command = 'UIATarget.localTarget().frontMostApp().statusBar().rect().size.height;';
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand(command));

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

_Object$assign(extensions, commands, helpers);
exports.commands = commands;
exports.helpers = helpers;
exports['default'] = extensions;

// There is no way to grab scale from UIAutomation. All devices have scale 2.0 except iPhone 6+, iPhone 6s+, iPhone7+ - 3.0.

// status bar height comes in unscaled, so scale it

// ios returns coordinates/dimensions in logical pixels, not device pixels,
// so scale up to device pixels. status bar height is already scaled.
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9kZXZpY2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsSUFBSSxRQUFRLEdBQUcsRUFBRTtJQUFFLE9BQU8sR0FBRyxFQUFFO0lBQUUsVUFBVSxHQUFHLEVBQUUsQ0FBQzs7O0FBR2pELFFBQVEsQ0FBQyxtQkFBbUIsR0FBRztNQUN2QixZQUFZLEVBRVoseUJBQXlCOzs7Ozt5Q0FGSCxJQUFJLENBQUMsYUFBYSxFQUFFOzs7QUFBMUMsb0JBQVksb0JBQWdDLE1BQU07QUFFbEQsaUNBQXlCLEdBQUcsR0FBRzs0Q0FDOUIsWUFBWSxLQUFLLHlCQUF5QixHQUFHLEdBQUcsR0FBRyxHQUFHOzs7Ozs7O0NBQzlELENBQUM7O0FBRUYsUUFBUSxDQUFDLGVBQWUsR0FBRztNQUNuQixLQUFLLEVBRUwsZUFBZSxFQUNmLFVBQVU7Ozs7O3lDQUhJLElBQUksQ0FBQyxtQkFBbUIsRUFBRTs7O0FBQXhDLGFBQUs7eUJBRWEsSUFBSTs7eUNBQWEsSUFBSSxDQUFDLGtCQUFrQixFQUFFOzs7O3lCQUFHLEtBQUs7O0FBQXBFLHVCQUFlLGtCQUFRLEtBQUs7O3lDQUNULElBQUksQ0FBQyxhQUFhLEVBQUU7OztBQUF2QyxrQkFBVTs0Q0FJVDtBQUNMLGNBQUksRUFBRSxDQUFDO0FBQ1AsYUFBRyxFQUFFLGVBQWU7QUFDcEIsZUFBSyxFQUFFLFVBQVUsQ0FBQyxLQUFLLEdBQUcsS0FBSztBQUMvQixnQkFBTSxFQUFHLEFBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxLQUFLLEdBQUksZUFBZSxBQUFDO1NBQ3hEOzs7Ozs7O0NBQ0YsQ0FBQzs7QUFFRixRQUFRLENBQUMsa0JBQWtCLEdBQUc7TUFDdEIsT0FBTzs7OztBQUFQLGVBQU8sR0FBRyx3RUFBd0U7O3lDQUMzRSxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUM7Ozs7Ozs7Ozs7Q0FDcEQsQ0FBQzs7QUFFRixlQUFjLFVBQVUsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDcEMsUUFBUSxHQUFSLFFBQVE7UUFBRSxPQUFPLEdBQVAsT0FBTztxQkFDWCxVQUFVIiwiZmlsZSI6ImxpYi9jb21tYW5kcy9kZXZpY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgY29tbWFuZHMgPSB7fSwgaGVscGVycyA9IHt9LCBleHRlbnNpb25zID0ge307XG5cbi8vIHRoaXMgZnVuY3Rpb24gaXMgbWVtb2l6ZWQgaW4gSU9TRHJpdmVyJ3MgY29uc3RydWN0b3JcbmNvbW1hbmRzLmdldERldmljZVBpeGVsUmF0aW8gPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IHNjcmVlbkhlaWdodCA9IChhd2FpdCB0aGlzLmdldFdpbmRvd1NpemUoKSkuaGVpZ2h0O1xuICAvLyBUaGVyZSBpcyBubyB3YXkgdG8gZ3JhYiBzY2FsZSBmcm9tIFVJQXV0b21hdGlvbi4gQWxsIGRldmljZXMgaGF2ZSBzY2FsZSAyLjAgZXhjZXB0IGlQaG9uZSA2KywgaVBob25lIDZzKywgaVBob25lNysgLSAzLjAuXG4gIGNvbnN0IHNjcmVlbkhlaWdodE9mUGx1c0RldmljZXMgPSA3MzY7XG4gIHJldHVybiBzY3JlZW5IZWlnaHQgPT09IHNjcmVlbkhlaWdodE9mUGx1c0RldmljZXMgPyAzLjAgOiAyLjA7XG59O1xuXG5jb21tYW5kcy5nZXRWaWV3cG9ydFJlY3QgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IHNjYWxlID0gYXdhaXQgdGhpcy5nZXREZXZpY2VQaXhlbFJhdGlvKCk7XG4gIC8vIHN0YXR1cyBiYXIgaGVpZ2h0IGNvbWVzIGluIHVuc2NhbGVkLCBzbyBzY2FsZSBpdFxuICBjb25zdCBzdGF0dXNCYXJIZWlnaHQgPSBNYXRoLnJvdW5kKGF3YWl0IHRoaXMuZ2V0U3RhdHVzQmFySGVpZ2h0KCkgKiBzY2FsZSk7XG4gIGNvbnN0IHdpbmRvd1NpemUgPSBhd2FpdCB0aGlzLmdldFdpbmRvd1NpemUoKTtcblxuICAvLyBpb3MgcmV0dXJucyBjb29yZGluYXRlcy9kaW1lbnNpb25zIGluIGxvZ2ljYWwgcGl4ZWxzLCBub3QgZGV2aWNlIHBpeGVscyxcbiAgLy8gc28gc2NhbGUgdXAgdG8gZGV2aWNlIHBpeGVscy4gc3RhdHVzIGJhciBoZWlnaHQgaXMgYWxyZWFkeSBzY2FsZWQuXG4gIHJldHVybiB7XG4gICAgbGVmdDogMCxcbiAgICB0b3A6IHN0YXR1c0JhckhlaWdodCxcbiAgICB3aWR0aDogd2luZG93U2l6ZS53aWR0aCAqIHNjYWxlLFxuICAgIGhlaWdodDogKCh3aW5kb3dTaXplLmhlaWdodCAqIHNjYWxlKSAtIHN0YXR1c0JhckhlaWdodCksXG4gIH07XG59O1xuXG5jb21tYW5kcy5nZXRTdGF0dXNCYXJIZWlnaHQgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IGNvbW1hbmQgPSAnVUlBVGFyZ2V0LmxvY2FsVGFyZ2V0KCkuZnJvbnRNb3N0QXBwKCkuc3RhdHVzQmFyKCkucmVjdCgpLnNpemUuaGVpZ2h0Oyc7XG4gIHJldHVybiBhd2FpdCB0aGlzLnVpQXV0b0NsaWVudC5zZW5kQ29tbWFuZChjb21tYW5kKTtcbn07XG5cbk9iamVjdC5hc3NpZ24oZXh0ZW5zaW9ucywgY29tbWFuZHMsIGhlbHBlcnMpO1xuZXhwb3J0IHsgY29tbWFuZHMsIGhlbHBlcnMgfTtcbmV4cG9ydCBkZWZhdWx0IGV4dGVuc2lvbnM7XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
