'use strict';

var _toConsumableArray = require('babel-runtime/helpers/to-consumable-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var _appiumSupport = require('appium-support');

var _appiumBaseDriver = require('appium-base-driver');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _js2xmlparser2 = require('js2xmlparser2');

var _js2xmlparser22 = _interopRequireDefault(_js2xmlparser2);

var _xmldom = require('xmldom');

var _xmldom2 = _interopRequireDefault(_xmldom);

var _xpath = require('xpath');

var _xpath2 = _interopRequireDefault(_xpath);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _utils = require('../utils');

// we override the xpath search for this first-visible-child selector, which
// looks like /*[@firstVisible="true"]
var MAGIC_FIRST_VIS_CHILD_SEL = /\/\*\[@firstVisible ?= ?('|")true\1\]/;

// we likewise override xpath search to provide a shortcut for finding all
// scrollable elements
var MAGIC_SCROLLABLE_SEL = /\/\/\*\[@scrollable ?= ?('|")true\1\]/;

var commands = {},
    helpers = {},
    extensions = {};

helpers.findElOrEls = function callee$0$0(strategy, selector, mult, context) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context = (0, _utils.unwrapEl)(context);

        if (!this.isWebContext()) {
          context$1$0.next = 7;
          break;
        }

        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.findWebElementOrElements(strategy, selector, mult, context));

      case 4:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 7:
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(this.findUIElementOrElements(strategy, selector, mult, context));

      case 9:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 10:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.findUIElementOrElements = function callee$0$0(strategy, selector, mult, context) {
  var createGetElementCommand, getLocalizedStringForSelector, res, doFind;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (strategy !== "xpath") {
          selector = _appiumSupport.util.escapeSpecialChars(selector, "'");
        }

        if (typeof context === "undefined" || !context) {
          context = '';
        } else if (typeof context === "string") {
          context = _appiumSupport.util.escapeSpecialChars(context, "'");
        }

        if (!(strategy === 'xpath' && MAGIC_SCROLLABLE_SEL.test(selector))) {
          context$1$0.next = 6;
          break;
        }

        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.findScrollableElOrEls(mult, context));

      case 5:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 6:
        if (!(strategy === 'xpath' && MAGIC_FIRST_VIS_CHILD_SEL.test(selector))) {
          context$1$0.next = 12;
          break;
        }

        if (!mult) {
          context$1$0.next = 9;
          break;
        }

        throw new Error("Cannot get multiple first children");

      case 9:
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(this.getFirstVisibleChild(context));

      case 11:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 12:
        if (!(strategy === 'class name' && selector.indexOf('UIA') !== 0)) {
          context$1$0.next = 14;
          break;
        }

        throw new _appiumBaseDriver.errors.InvalidSelectorError('The class name selector must use full UIA class names. Try \'UIA' + selector + '\' instead.');

      case 14:

        if (!selector) new _appiumBaseDriver.errors.InvalidSelectorError('Missing selector'); // eslint-disable-line curly

        createGetElementCommand = function createGetElementCommand(strategy, selector, mult, context) {
          var ext = mult ? 's' : '';
          var command = "";
          context = !context ? context : ', \'' + context + '\'';
          switch (strategy) {
            case "name":
              command = 'au.getElement' + ext + 'ByName(\'' + selector + '\'' + context + ')';
              break;
            case "accessibility id":
              command = 'au.getElement' + ext + 'ByAccessibilityId(\'' + selector + '\'' + context + ')';
              break;
            case "id":
              command = 'au.getElement' + ext + 'ById(\'' + selector + '\')';
              break;
            case "-ios uiautomation":
              command = 'au.getElement' + ext + 'ByUIAutomation(\'' + selector + '\'' + context + ')';
              break;
            default:
              command = 'au.getElement' + ext + 'ByType(\'' + selector + '\'' + context + ')';
          }

          return command;
        };

        getLocalizedStringForSelector = function getLocalizedStringForSelector(selector, strings) {
          var newSelector = selector;
          if (strings) {
            var localizedSelector = strings[selector];
            if (localizedSelector) {
              newSelector = localizedSelector;
            } else {
              _logger2['default'].debug('Id selector, \'' + selector + '\', not found in Localizable.strings.');
            }
          }

          return newSelector;
        };

        res = undefined;

        doFind = function doFind() {
          var findByAxIdCmd, findByIdCmd, command;
          return _regeneratorRuntime.async(function doFind$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                if (!(strategy === "xpath")) {
                  context$2$0.next = 6;
                  break;
                }

                context$2$0.next = 3;
                return _regeneratorRuntime.awrap(this.findUIElementsByXpath(selector, mult, context));

              case 3:
                res = context$2$0.sent;
                context$2$0.next = 22;
                break;

              case 6:
                if (!(strategy === "id")) {
                  context$2$0.next = 18;
                  break;
                }

                findByAxIdCmd = createGetElementCommand("accessibility id", selector, mult, context);
                context$2$0.next = 10;
                return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand(findByAxIdCmd));

              case 10:
                res = context$2$0.sent;

                if (res && _lodash2['default'].size(res) > 0) {
                  context$2$0.next = 16;
                  break;
                }

                findByIdCmd = createGetElementCommand("id", getLocalizedStringForSelector(selector, this.opts.localizableStrings), mult, context);
                context$2$0.next = 15;
                return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand(findByIdCmd));

              case 15:
                res = context$2$0.sent;

              case 16:
                context$2$0.next = 22;
                break;

              case 18:
                command = createGetElementCommand(strategy, selector, mult, context);
                context$2$0.next = 21;
                return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand(command));

              case 21:
                res = context$2$0.sent;

              case 22:
                return context$2$0.abrupt('return', _lodash2['default'].size(res) > 0);

              case 23:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        };

        context$1$0.prev = 19;
        context$1$0.next = 22;
        return _regeneratorRuntime.awrap(this.implicitWaitForCondition(doFind));

      case 22:
        context$1$0.next = 31;
        break;

      case 24:
        context$1$0.prev = 24;
        context$1$0.t0 = context$1$0['catch'](19);

        if (!(context$1$0.t0.message && context$1$0.t0.message.match(/Condition unmet/))) {
          context$1$0.next = 30;
          break;
        }

        // condition was not met setting res to empty array
        res = [];
        context$1$0.next = 31;
        break;

      case 30:
        throw context$1$0.t0;

      case 31:
        if (!mult) {
          context$1$0.next = 35;
          break;
        }

        return context$1$0.abrupt('return', res);

      case 35:
        if (!(!res || _lodash2['default'].size(res) === 0)) {
          context$1$0.next = 37;
          break;
        }

        throw new _appiumBaseDriver.errors.NoSuchElementError();

      case 37:
        return context$1$0.abrupt('return', res);

      case 38:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[19, 24]]);
};

var _pathFromDomNode = function _pathFromDomNode(node) {
  var path = null;
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = _getIterator(_lodash2['default'].values(node.attributes)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var attrObj = _step.value;

      if (attrObj.name === "path") {
        path = attrObj.value;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator['return']) {
        _iterator['return']();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return path;
};

var _xmlSourceFromJson = function _xmlSourceFromJson(jsonSource) {
  if (typeof jsonSource === "string") {
    jsonSource = JSON.parse(jsonSource);
  }
  return (0, _js2xmlparser22['default'])("AppiumAUT", jsonSource, {
    wrapArray: { enabled: false, elementName: "element" },
    declaration: { include: true },
    prettyPrinting: { indentString: "    " }
  });
};

var _performXpathQueryOnJson = function _performXpathQueryOnJson(selector, jsonSource) {
  var xmlSource = _xmlSourceFromJson(jsonSource);
  var dom = new _xmldom2['default'].DOMParser().parseFromString(xmlSource);
  return _xpath2['default'].select(selector, dom);
};

commands.findUIElementsByXpath = function callee$0$0(selector, mult) {
  var context = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];
  var curRetry = arguments.length <= 3 || arguments[3] === undefined ? 1 : arguments[3];

  var sourceXml, selectedNodes, indexPaths, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, node, ip, methodName, methodArgs, proxyCmd, res;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        sourceXml = undefined;
        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.getSourceForElementForXML(context));

      case 4:
        sourceXml = context$1$0.sent;
        context$1$0.next = 11;
        break;

      case 7:
        context$1$0.prev = 7;
        context$1$0.t0 = context$1$0['catch'](1);

        _logger2['default'].warn("Error getting source, can't continue finding element by XPath");
        throw context$1$0.t0;

      case 11:
        selectedNodes = _performXpathQueryOnJson(selector, sourceXml);

        if (!mult) {
          selectedNodes = selectedNodes.slice(0, 1);
        }
        indexPaths = [];
        _iteratorNormalCompletion2 = true;
        _didIteratorError2 = false;
        _iteratorError2 = undefined;
        context$1$0.prev = 17;

        // filter out elements without 'path' attribute
        for (_iterator2 = _getIterator(selectedNodes); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          node = _step2.value;
          ip = _pathFromDomNode(node);

          if (ip !== null) {
            indexPaths.push(ip);
          }
        }

        context$1$0.next = 25;
        break;

      case 21:
        context$1$0.prev = 21;
        context$1$0.t1 = context$1$0['catch'](17);
        _didIteratorError2 = true;
        _iteratorError2 = context$1$0.t1;

      case 25:
        context$1$0.prev = 25;
        context$1$0.prev = 26;

        if (!_iteratorNormalCompletion2 && _iterator2['return']) {
          _iterator2['return']();
        }

      case 28:
        context$1$0.prev = 28;

        if (!_didIteratorError2) {
          context$1$0.next = 31;
          break;
        }

        throw _iteratorError2;

      case 31:
        return context$1$0.finish(28);

      case 32:
        return context$1$0.finish(25);

      case 33:
        if (!(indexPaths.length < 1)) {
          context$1$0.next = 35;
          break;
        }

        return context$1$0.abrupt('return', []);

      case 35:
        methodName = undefined;
        methodArgs = [];

        if (!mult) {
          methodName = "getElementByIndexPath";
          methodArgs[0] = '\'' + indexPaths[0] + '\'';
        } else {
          methodName = "getElementsByIndexPaths";
          methodArgs[0] = JSON.stringify(indexPaths);
        }

        if (context) {
          methodArgs[1] = 'au.getElement(\'' + context + '\')';
        }

        proxyCmd = 'au.' + methodName + '(' + methodArgs.join(", ") + ')';
        res = undefined;
        context$1$0.prev = 41;
        context$1$0.next = 44;
        return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand(proxyCmd));

      case 44:
        res = context$1$0.sent;
        context$1$0.next = 57;
        break;

      case 47:
        context$1$0.prev = 47;
        context$1$0.t2 = context$1$0['catch'](41);

        if (!(curRetry < 3)) {
          context$1$0.next = 56;
          break;
        }

        _logger2['default'].debug("Got a warning from uiauto that some index paths " + "could not be resolved, trying again");
        context$1$0.next = 53;
        return _regeneratorRuntime.awrap(_bluebird2['default'].delay(300));

      case 53:
        context$1$0.next = 55;
        return _regeneratorRuntime.awrap(this.findUIElementsByXpath(selector, mult, context, curRetry + 1));

      case 55:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 56:
        throw context$1$0.t2;

      case 57:
        return context$1$0.abrupt('return', res);

      case 58:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 7], [17, 21, 25, 33], [26,, 28, 32], [41, 47]]);
};

helpers.findScrollableElOrEls = function callee$0$0(mult, context) {
  var scrollTypes, res, ext, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, scrollType, command, elements, element;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        scrollTypes = ['UIAScrollView', 'UIATableView', 'UIACollectionView', 'UIAWebView'];
        res = [];
        ext = mult ? 's' : '';
        _iteratorNormalCompletion3 = true;
        _didIteratorError3 = false;
        _iteratorError3 = undefined;
        context$1$0.prev = 6;
        _iterator3 = _getIterator(scrollTypes);

      case 8:
        if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
          context$1$0.next = 26;
          break;
        }

        scrollType = _step3.value;
        command = 'au.getElement' + ext + 'ByType(\'' + scrollType + '\'' + context + ')';

        if (!mult) {
          context$1$0.next = 18;
          break;
        }

        context$1$0.next = 14;
        return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand(command));

      case 14:
        elements = context$1$0.sent;

        if (!_lodash2['default'].isEmpty(elements)) {
          res.push.apply(res, _toConsumableArray(elements));
        }
        context$1$0.next = 23;
        break;

      case 18:
        context$1$0.next = 20;
        return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand(command));

      case 20:
        element = context$1$0.sent;

        if (!element) {
          context$1$0.next = 23;
          break;
        }

        return context$1$0.abrupt('return', element);

      case 23:
        _iteratorNormalCompletion3 = true;
        context$1$0.next = 8;
        break;

      case 26:
        context$1$0.next = 32;
        break;

      case 28:
        context$1$0.prev = 28;
        context$1$0.t0 = context$1$0['catch'](6);
        _didIteratorError3 = true;
        _iteratorError3 = context$1$0.t0;

      case 32:
        context$1$0.prev = 32;
        context$1$0.prev = 33;

        if (!_iteratorNormalCompletion3 && _iterator3['return']) {
          _iterator3['return']();
        }

      case 35:
        context$1$0.prev = 35;

        if (!_didIteratorError3) {
          context$1$0.next = 38;
          break;
        }

        throw _iteratorError3;

      case 38:
        return context$1$0.finish(35);

      case 39:
        return context$1$0.finish(32);

      case 40:
        if (!mult) {
          context$1$0.next = 42;
          break;
        }

        return context$1$0.abrupt('return', res);

      case 42:
        throw new _appiumBaseDriver.errors.NoSuchElementError();

      case 43:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[6, 28, 32, 40], [33,, 35, 39]]);
};

helpers.getFirstVisibleChild = function callee$0$0(elementId) {
  var visibleEls;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.findElementsFromElement('-ios uiautomation', '.elements().withPredicate("isVisible == 1");', elementId));

      case 2:
        visibleEls = context$1$0.sent;
        return context$1$0.abrupt('return', _lodash2['default'].first(visibleEls));

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

_Object$assign(extensions, commands, helpers);
exports.commands = commands;
exports.helpers = helpers;
exports['default'] = extensions;

// previously getSelectorForStrategy

// For the ID strategy, we first want to handle the selector as an
// accessibility id. If no element is found by that strategy, we fall
// back to searching for the string.

// Since no element was found using the accessibility id, we fall
// back to search by string.

// and if we don't have any matching nodes, return the empty array

// otherwise look up the actual element by its index path

// having index paths means we think elements should be there. Sometimes
// uiauto lags in enabling us to get elements, so we retry a few times if
// it can't find elements we know should be there. see uiauto code
// for more logic

// we get a StaleElementReference if uiauto can't find an element
// by the path we mentioned
//# sourceMappingURL=data:application/json;charset=utf8;base64,
