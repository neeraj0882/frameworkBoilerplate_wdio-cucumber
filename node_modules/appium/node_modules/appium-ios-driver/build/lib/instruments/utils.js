'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _teen_process = require('teen_process');

var _appiumSupport = require('appium-support');

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _appiumXcode = require('appium-xcode');

var _appiumXcode2 = _interopRequireDefault(_appiumXcode);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _instruments = require('./instruments');

var _instruments2 = _interopRequireDefault(_instruments);

var rootDir = _path2['default'].resolve(__dirname, '../..');
var INST_STALL_TIMEOUT = 12000;

function getInstrumentsPath() {
  var instrumentsPath, _ref, stdout;

  return _regeneratorRuntime.async(function getInstrumentsPath$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        instrumentsPath = undefined;
        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('xcrun', ['-find', 'instruments']));

      case 4:
        _ref = context$1$0.sent;
        stdout = _ref.stdout;

        instrumentsPath = (stdout || '').trim().replace('\n$', '');
        context$1$0.next = 12;
        break;

      case 9:
        context$1$0.prev = 9;
        context$1$0.t0 = context$1$0['catch'](1);

        if (context$1$0.t0) {
          _logger2['default'].error(context$1$0.t0.message);
        }

      case 12:
        if (!instrumentsPath) {
          _logger2['default'].errorAndThrow('Could not find the instruments binary. Please ensure ' + '`xcrun -find instruments` can locate it.');
        }
        _logger2['default'].debug('Instruments is at: ' + instrumentsPath);
        return context$1$0.abrupt('return', instrumentsPath);

      case 15:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 9]]);
}

function getAvailableDevices() {
  var timeout = arguments.length <= 0 || arguments[0] === undefined ? INST_STALL_TIMEOUT : arguments[0];

  var instrumentsPath, opts, lines, _ref2, stdout, devices;

  return _regeneratorRuntime.async(function getAvailableDevices$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Getting list of devices instruments supports');
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(getInstrumentsPath());

      case 3:
        instrumentsPath = context$1$0.sent;
        opts = { timeout: timeout };
        lines = undefined;
        context$1$0.prev = 6;
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)(instrumentsPath, ['-s', 'devices'], opts));

      case 9:
        _ref2 = context$1$0.sent;
        stdout = _ref2.stdout;

        lines = stdout.split('\n');
        context$1$0.next = 17;
        break;

      case 14:
        context$1$0.prev = 14;
        context$1$0.t0 = context$1$0['catch'](6);

        _logger2['default'].errorAndThrow('Failed getting devices, err: ' + context$1$0.t0 + '.');

      case 17:
        devices = lines.filter(function (line) {
          // https://regex101.com/r/aE6aS3/6
          return (/^.+ \(\d+\.(\d+\.)?\d+( Simulator)?\) \[.+\]( \(Simulator\))?$/.test(line)
          );
        });

        _logger2['default'].debug('Available devices: ' + devices);
        return context$1$0.abrupt('return', devices);

      case 20:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[6, 14]]);
}

function killAllInstruments() {
  return _regeneratorRuntime.async(function killAllInstruments$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Killing all instruments');
        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('pkill', ['-f', 'instruments']));

      case 4:
        context$1$0.next = 8;
        break;

      case 6:
        context$1$0.prev = 6;
        context$1$0.t0 = context$1$0['catch'](1);

      case 8:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 6]]);
}

function cleanAllTraces() {
  return _regeneratorRuntime.async(function cleanAllTraces$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!process.env.CLEAN_TRACES) {
          context$1$0.next = 8;
          break;
        }

        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf('instrumentscli*.trace'));

      case 4:
        context$1$0.next = 8;
        break;

      case 6:
        context$1$0.prev = 6;
        context$1$0.t0 = context$1$0['catch'](1);

      case 8:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 6]]);
}

function parseLaunchTimeout(launchTimeout) {
  // number or object like { global: 40000, afterSimLaunch: 5000 }
  // may also parse JSON strings.
  if (_lodash2['default'].isString(launchTimeout)) {
    try {
      launchTimeout = JSON.parse(launchTimeout);
    } catch (err) {
      _logger2['default'].warn('Invalid launch timeout: ' + launchTimeout);
    }
  }
  if (_lodash2['default'].isNumber(launchTimeout)) {
    launchTimeout = {
      global: launchTimeout
    };
  }
  return launchTimeout;
}

function getIwdPath(xcodeMajorVersion) {
  var thirdpartyPath, iwdPath;
  return _regeneratorRuntime.async(function getIwdPath$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        thirdpartyPath = _path2['default'].resolve(rootDir, '..', 'instruments-iwd');
        iwdPath = _path2['default'].resolve(thirdpartyPath, 'iwd' + xcodeMajorVersion);
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(iwdPath));

      case 4:
        if (context$1$0.sent) {
          context$1$0.next = 6;
          break;
        }

        iwdPath = _path2['default'].resolve(thirdpartyPath, 'iwd');

      case 6:
        _logger2['default'].debug('Found Insruments-Without-Delay: ' + iwdPath);
        return context$1$0.abrupt('return', iwdPath);

      case 8:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

// this function launches an instruments test with a default test
// that immediately passes. In this way we can start a simulator
// and be notified when it completely launches
function quickLaunch(udid) {
  var appPath = arguments.length <= 1 || arguments[1] === undefined ? _path2['default'].resolve(__dirname, '..', '..', 'assets', 'TestApp.app') : arguments[1];
  var traceTemplatePath, scriptPath, traceDocument, resultsPath, args;
  return _regeneratorRuntime.async(function quickLaunch$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_appiumXcode2['default'].getAutomationTraceTemplatePath());

      case 2:
        traceTemplatePath = context$1$0.sent;
        scriptPath = _path2['default'].resolve(__dirname, '..', '..', 'assets', 'blank_instruments_test.js');
        traceDocument = _path2['default'].resolve('/', 'tmp', 'testTrace.trace');
        resultsPath = _path2['default'].resolve('/', 'tmp');
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(traceDocument));

      case 8:
        args = ['instruments', '-D', traceDocument, '-t', traceTemplatePath, '-w', udid, appPath, '-e', 'UIASCRIPT', scriptPath, '-e', 'UIARESULTSPATH', resultsPath];

        _logger2['default'].debug('Running command: \'xcrun ' + args.join(' ') + '\'');
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('xcrun', args));

      case 12:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function quickInstruments() {
  var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  var xcodeTraceTemplatePath;
  return _regeneratorRuntime.async(function quickInstruments$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        opts = _lodash2['default'].cloneDeep(opts);
        context$1$0.t0 = opts.xcodeTraceTemplatePath;

        if (context$1$0.t0) {
          context$1$0.next = 6;
          break;
        }

        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(_appiumXcode2['default'].getAutomationTraceTemplatePath());

      case 5:
        context$1$0.t0 = context$1$0.sent;

      case 6:
        xcodeTraceTemplatePath = context$1$0.t0;

        _lodash2['default'].defaults(opts, {
          launchTimeout: 60000,
          template: xcodeTraceTemplatePath,
          withoutDelay: true,
          xcodeVersion: '8.1',
          webSocket: null,
          flakeyRetries: true,
          logNoColors: false
        });
        return context$1$0.abrupt('return', new _instruments2['default'](opts));

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

exports.rootDir = rootDir;
exports.killAllInstruments = killAllInstruments;
exports.cleanAllTraces = cleanAllTraces;
exports.getInstrumentsPath = getInstrumentsPath;
exports.getAvailableDevices = getAvailableDevices;
exports.parseLaunchTimeout = parseLaunchTimeout;
exports.getIwdPath = getIwdPath;
exports.quickLaunch = quickLaunch;
exports.quickInstruments = quickInstruments;

// the trace document can be in a weird state
// but we never do anything with it, so delete
//# sourceMappingURL=data:application/json;charset=utf8;base64,
