// Wrapper around Apple's Instruments app

'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _toConsumableArray = require('babel-runtime/helpers/to-consumable-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _teen_process = require('teen_process');

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _through = require('through');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _appiumSupport = require('appium-support');

var _appiumXcode = require('appium-xcode');

var _appiumXcode2 = _interopRequireDefault(_appiumXcode);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _appiumIosSimulator = require('appium-ios-simulator');

var _utils = require('./utils');

var _streams = require('./streams');

require('colors');

var ERR_NEVER_CHECKED_IN = 'Instruments never checked in';
var ERR_CRASHED_ON_STARTUP = 'Instruments crashed on startup';
var ERR_AMBIGUOUS_DEVICE = 'Instruments Usage Error : Ambiguous device name/identifier';

var Instruments = (function () {
  _createClass(Instruments, null, [{
    key: 'quickInstruments',

    // simple factory with sane defaults
    value: function quickInstruments(opts) {
      var xcodeTraceTemplatePath;
      return _regeneratorRuntime.async(function quickInstruments$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            opts = _lodash2['default'].clone(opts);
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(_appiumXcode2['default'].getAutomationTraceTemplatePath());

          case 3:
            xcodeTraceTemplatePath = context$2$0.sent;

            _lodash2['default'].defaults(opts, {
              launchTimeout: 60000,
              template: xcodeTraceTemplatePath,
              withoutDelay: true,
              xcodeVersion: '8.1',
              webSocket: null,
              flakeyRetries: 2
            });
            return context$2$0.abrupt('return', new Instruments(opts));

          case 6:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    /*
     * opts:
     *   - app
     *   - termTimeout - defaults to 5000
     *   - flakeyRetries - defaults to 0
     *   - udid
     *   - bootstrap
     *   - template
     *   - withoutDelay
     *   - processArguments
     *   - simulatorSdkAndDevice
     *   - tmpDir - defaults to `/tmp/appium-instruments`
     *   - traceDir
     *   - launchTimeout - defaults to 90000
     *   - webSocket
     *   - instrumentsPath
     *   - realDevice - true/false, defaults to false
     */
  }]);

  function Instruments(opts) {
    var _this = this;

    _classCallCheck(this, Instruments);

    opts = _lodash2['default'].cloneDeep(opts);
    _lodash2['default'].defaults(opts, {
      termTimeout: 5000,
      tmpDir: '/tmp/appium-instruments',
      launchTimeout: 90000,
      flakeyRetries: 0,
      realDevice: false
    });

    // config
    var _arr = ['app', 'termTimeout', 'flakeyRetries', 'udid', 'bootstrap', 'template', 'withoutDelay', 'processArguments', 'realDevice', 'simulatorSdkAndDevice', 'tmpDir', 'traceDir', 'locale', 'language'];
    for (var _i = 0; _i < _arr.length; _i++) {
      var f = _arr[_i];
      this[f] = opts[f];
    }
    this.traceDir = this.traceDir || this.tmpDir;
    this.launchTimeout = (0, _utils.parseLaunchTimeout)(opts.launchTimeout);

    // state
    this.proc = null;
    this.webSocket = opts.webSocket;
    this.instrumentsPath = opts.instrumentsPath;
    this.launchTries = 0;
    this.socketConnectDelays = [];
    this.gotFBSOpenApplicationError = false;
    this.onShutdown = new _bluebird2['default'](function (resolve, reject) {
      _this.onShutdownDeferred = { resolve: resolve, reject: reject };
    });
    // avoids UnhandledException
    this.onShutdown['catch'](function () {}).done(); // eslint-disable-line promise/catch-or-return
  }

  _createClass(Instruments, [{
    key: 'configure',
    value: function configure() {
      return _regeneratorRuntime.async(function configure$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (this.xcodeVersion) {
              context$2$0.next = 4;
              break;
            }

            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(_appiumXcode2['default'].getVersion(true));

          case 3:
            this.xcodeVersion = context$2$0.sent;

          case 4:
            if (this.xcodeVersion.versionFloat === 6.0 && this.withoutDelay) {
              _logger2['default'].info('In xcode 6.0, instruments-without-delay does not work. ' + 'If using Appium, you can disable instruments-without-delay ' + 'with the --native-instruments-lib server flag');
            }

            if (!(this.xcodeVersion.versionString === '5.0.1')) {
              context$2$0.next = 7;
              break;
            }

            throw new Error('Xcode 5.0.1 ships with a broken version of ' + 'Instruments. please upgrade to 5.0.2');

          case 7:
            if (!(this.xcodeVersion.major > 7)) {
              context$2$0.next = 9;
              break;
            }

            throw new Error('Instruments-based automation was removed in Xcode 8. ' + ('Xcode ' + this.xcodeVersion.versionString + ' is not supported. ') + 'Please try the XCUItest driver.');

          case 9:
            if (this.template) {
              context$2$0.next = 13;
              break;
            }

            context$2$0.next = 12;
            return _regeneratorRuntime.awrap(_appiumXcode2['default'].getAutomationTraceTemplatePath());

          case 12:
            this.template = context$2$0.sent;

          case 13:
            if (this.instrumentsPath) {
              context$2$0.next = 17;
              break;
            }

            context$2$0.next = 16;
            return _regeneratorRuntime.awrap((0, _utils.getInstrumentsPath)());

          case 16:
            this.instrumentsPath = context$2$0.sent;

          case 17:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'launchOnce',
    value: function launchOnce() {
      var launchResultPromise, actOnStderr;
      return _regeneratorRuntime.async(function launchOnce$(context$2$0) {
        var _this2 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].info('Launching instruments');
            // prepare temp dir
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(this.tmpDir));

          case 3:
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap((0, _appiumSupport.mkdirp)(this.tmpDir));

          case 5:
            context$2$0.next = 7;
            return _regeneratorRuntime.awrap((0, _appiumSupport.mkdirp)(this.traceDir));

          case 7:

            this.exitListener = null;
            context$2$0.next = 10;
            return _regeneratorRuntime.awrap(this.spawnInstruments());

          case 10:
            this.proc = context$2$0.sent;

            this.proc.on('exit', function (code, signal) {
              var msg = code !== null ? 'code: ' + code : 'signal: ' + signal;
              _logger2['default'].debug('Instruments exited with ' + msg);
            });

            // set up the promise to handle launch
            launchResultPromise = new _bluebird2['default'](function (resolve, reject) {
              _this2.launchResultDeferred = { resolve: resolve, reject: reject };
            });

            // There was a special case for ignoreStartupExit
            // but it is not needed anymore, you may just listen for exit.
            this.setExitListener(function () {
              _this2.proc = null;
              _this2.launchResultDeferred.reject(new Error(ERR_CRASHED_ON_STARTUP));
            });

            this.proc.on('error', function (err) {
              // eslint-disable-line promise/prefer-await-to-callbacks
              _logger2['default'].debug('Error with instruments proc: ' + err.message);
              if (err.message.indexOf('ENOENT') !== -1) {
                _this2.proc = null; // otherwise we'll try to send sigkill
                _logger2['default'].error('Unable to spawn instruments: ' + err.message);
                _this2.launchResultDeferred.reject(err);
              }
            });

            this.proc.stdout.setEncoding('utf8');
            this.proc.stdout.pipe((0, _streams.outputStream)()).pipe((0, _streams.dumpStream)());

            this.proc.stderr.setEncoding('utf8');

            actOnStderr = function actOnStderr(output) {
              if (_this2.launchTimeout.afterSimLaunch && output && output.match(/CLTilesManagerClient: initialize/)) {
                _this2.addSocketConnectTimer(_this2.launchTimeout.afterSimLaunch, 'afterLaunch', function callee$3$0() {
                  return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                    while (1) switch (context$4$0.prev = context$4$0.next) {
                      case 0:
                        context$4$0.next = 2;
                        return _regeneratorRuntime.awrap(this.killInstruments());

                      case 2:
                        this.launchResultDeferred.reject(new Error(ERR_NEVER_CHECKED_IN));

                      case 3:
                      case 'end':
                        return context$4$0.stop();
                    }
                  }, null, _this2);
                });
              }

              var fbsErrStr = '(FBSOpenApplicationErrorDomain error 8.)';
              if (output.indexOf(fbsErrStr) !== -1) {
                _this2.gotFBSOpenApplicationError = true;
              }

              if (output.indexOf(ERR_AMBIGUOUS_DEVICE) !== -1) {
                var msg = ERR_AMBIGUOUS_DEVICE + ': \'' + _this2.simulatorSdkAndDevice + '\'';
                _this2.launchResultDeferred.reject(new Error(msg));
              }
            };

            this.proc.stderr.pipe((0, _through.through)(function (output) {
              actOnStderr(output);
              this.queue(output);
            })).pipe((0, _streams.errorStream)()).pipe((0, _streams.webSocketAlertStream)(this.webSocket)).pipe((0, _streams.dumpStream)());

            // start waiting for instruments to launch successfully
            this.addSocketConnectTimer(this.launchTimeout.global, 'global', function callee$2$0() {
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    context$3$0.next = 2;
                    return _regeneratorRuntime.awrap(this.killInstruments());

                  case 2:
                    this.launchResultDeferred.reject(new Error(ERR_NEVER_CHECKED_IN));

                  case 3:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this2);
            });

            context$2$0.prev = 21;
            context$2$0.next = 24;
            return _regeneratorRuntime.awrap(launchResultPromise);

          case 24:
            context$2$0.prev = 24;

            this.clearSocketConnectTimers();
            return context$2$0.finish(24);

          case 27:
            this.setExitListener(function (code, signal) {
              _this2.proc = null;
              var msg = code !== null ? 'code: ' + code : 'signal: ' + signal;
              _this2.onShutdownDeferred.reject(new Error('Abnormal exit with ' + msg));
            });

          case 28:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[21,, 24, 27]]);
    }
  }, {
    key: 'launch',
    value: function launch() {
      var launchTries, errIsCatchable;
      return _regeneratorRuntime.async(function launch$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.configure());

          case 2:
            launchTries = 0;

          case 3:
            // eslint-disable-line no-constant-condition
            launchTries++;
            _logger2['default'].debug('Attempting to launch instruments, this is try #' + launchTries);

            context$2$0.prev = 5;
            context$2$0.next = 8;
            return _regeneratorRuntime.awrap(this.launchOnce());

          case 8:
            return context$2$0.abrupt('break', 34);

          case 11:
            context$2$0.prev = 11;
            context$2$0.t0 = context$2$0['catch'](5);

            _logger2['default'].error('Error launching instruments: ' + context$2$0.t0.message);
            errIsCatchable = context$2$0.t0.message === ERR_NEVER_CHECKED_IN || context$2$0.t0.message === ERR_CRASHED_ON_STARTUP;

            if (errIsCatchable) {
              context$2$0.next = 17;
              break;
            }

            throw context$2$0.t0;

          case 17:
            if (!(launchTries <= this.flakeyRetries)) {
              context$2$0.next = 32;
              break;
            }

            if (!this.gotFBSOpenApplicationError) {
              context$2$0.next = 25;
              break;
            }

            _logger2['default'].debug('Got the FBSOpenApplicationError, not killing the ' + 'sim but leaving it open so the app will launch');
            this.gotFBSOpenApplicationError = false; // clear out for next launch
            context$2$0.next = 23;
            return _regeneratorRuntime.awrap(_bluebird2['default'].delay(1000));

          case 23:
            context$2$0.next = 30;
            break;

          case 25:
            if (this.realDevice) {
              context$2$0.next = 28;
              break;
            }

            context$2$0.next = 28;
            return _regeneratorRuntime.awrap((0, _appiumIosSimulator.killAllSimulators)());

          case 28:
            context$2$0.next = 30;
            return _regeneratorRuntime.awrap(_bluebird2['default'].delay(5000));

          case 30:
            context$2$0.next = 33;
            break;

          case 32:
            _logger2['default'].errorAndThrow('We exceeded the number of retries allowed for ' + 'instruments to successfully start; failing launch');

          case 33:
            if (true) {
              context$2$0.next = 3;
              break;
            }

          case 34:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[5, 11]]);
    }
  }, {
    key: 'registerLaunch',
    value: function registerLaunch() {
      this.launchResultDeferred.resolve();
    }
  }, {
    key: 'spawnInstruments',
    value: function spawnInstruments() {
      var traceDir, i, args, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, arg, space, flag, value, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _step2$value, env, iwdPath, instrumentsExecArgs;

      return _regeneratorRuntime.async(function spawnInstruments$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            traceDir = undefined;
            i = 0;

          case 2:
            // loop while there are tracedirs to delete
            traceDir = _path2['default'].resolve(this.traceDir, 'instrumentscli' + i + '.trace');
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(traceDir));

          case 5:
            if (context$2$0.sent) {
              context$2$0.next = 7;
              break;
            }

            return context$2$0.abrupt('break', 10);

          case 7:
            i++;
            context$2$0.next = 2;
            break;

          case 10:
            args = ['-t', this.template, '-D', traceDir];

            if (this.udid) {
              // real device, so specify udid
              args = args.concat(['-w', this.udid]);
              _logger2['default'].debug('Attempting to run app on real device with UDID \'' + this.udid + '\'');
            }
            if (!this.udid && this.simulatorSdkAndDevice) {
              // sim, so specify the sdk and device
              args = args.concat(['-w', this.simulatorSdkAndDevice]);
              _logger2['default'].debug('Attempting to run app on ' + this.simulatorSdkAndDevice);
            }
            args = args.concat([this.app]);

            if (!this.processArguments) {
              context$2$0.next = 63;
              break;
            }

            _logger2['default'].debug('Attempting to run app with process arguments: ' + JSON.stringify(this.processArguments));
            // any additional stuff specified by the user

            if (!_lodash2['default'].isString(this.processArguments)) {
              context$2$0.next = 44;
              break;
            }

            if (!(this.processArguments.indexOf('-e ') === -1)) {
              context$2$0.next = 22;
              break;
            }

            _logger2['default'].debug('Plain string process arguments being pushed into arguments');
            args.push(this.processArguments);
            context$2$0.next = 42;
            break;

          case 22:
            _logger2['default'].debug('Environment variables being pushed into arguments');
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            context$2$0.prev = 26;
            for (_iterator = _getIterator(this.processArguments.split('-e ')); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              arg = _step.value;

              arg = arg.trim();
              if (arg.length) {
                space = arg.indexOf(' ');
                flag = arg.substring(0, space);
                value = arg.substring(space + 1);

                args.push('-e', flag, value);
              }
            }
            context$2$0.next = 34;
            break;

          case 30:
            context$2$0.prev = 30;
            context$2$0.t0 = context$2$0['catch'](26);
            _didIteratorError = true;
            _iteratorError = context$2$0.t0;

          case 34:
            context$2$0.prev = 34;
            context$2$0.prev = 35;

            if (!_iteratorNormalCompletion && _iterator['return']) {
              _iterator['return']();
            }

          case 37:
            context$2$0.prev = 37;

            if (!_didIteratorError) {
              context$2$0.next = 40;
              break;
            }

            throw _iteratorError;

          case 40:
            return context$2$0.finish(37);

          case 41:
            return context$2$0.finish(34);

          case 42:
            context$2$0.next = 63;
            break;

          case 44:
            _iteratorNormalCompletion2 = true;
            _didIteratorError2 = false;
            _iteratorError2 = undefined;
            context$2$0.prev = 47;

            // process arguments can also be a hash of flags and values

            for (_iterator2 = _getIterator(_lodash2['default'].toPairs(this.processArguments)); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              _step2$value = _slicedToArray(_step2.value, 2);
              flag = _step2$value[0];
              value = _step2$value[1];

              args.push('-e', flag, value);
            }
            context$2$0.next = 55;
            break;

          case 51:
            context$2$0.prev = 51;
            context$2$0.t1 = context$2$0['catch'](47);
            _didIteratorError2 = true;
            _iteratorError2 = context$2$0.t1;

          case 55:
            context$2$0.prev = 55;
            context$2$0.prev = 56;

            if (!_iteratorNormalCompletion2 && _iterator2['return']) {
              _iterator2['return']();
            }

          case 58:
            context$2$0.prev = 58;

            if (!_didIteratorError2) {
              context$2$0.next = 61;
              break;
            }

            throw _iteratorError2;

          case 61:
            return context$2$0.finish(58);

          case 62:
            return context$2$0.finish(55);

          case 63:
            args = args.concat(['-e', 'UIASCRIPT', this.bootstrap]);
            args = args.concat(['-e', 'UIARESULTSPATH', this.tmpDir]);
            if (this.language) {
              args = args.concat(['-AppleLanguages (' + this.language + ')']);
              args = args.concat(['-NSLanguages (' + this.language + ')']);
            }
            if (this.locale) {
              args = args.concat(['-AppleLocale ' + this.locale]);
            }

            env = _lodash2['default'].clone(process.env);

            if (this.xcodeVersion.major >= 7 && !this.udid) {
              // iwd currently does not work with xcode7, setting withoutDelay to false
              _logger2['default'].info("On xcode 7.0+, instruments-without-delay does not work, " + "skipping instruments-without-delay");
              this.withoutDelay = false;
            }
            context$2$0.next = 71;
            return _regeneratorRuntime.awrap((0, _utils.getIwdPath)(this.xcodeVersion.major));

          case 71:
            iwdPath = context$2$0.sent;

            env.CA_DEBUG_TRANSACTIONS = 1;
            if (this.withoutDelay && !this.udid) {
              // sim, and using i-w-d
              env.DYLD_INSERT_LIBRARIES = _path2['default'].resolve(iwdPath, 'InstrumentsShim.dylib');
              env.LIB_PATH = iwdPath;
            }
            instrumentsExecArgs = [this.instrumentsPath].concat(_toConsumableArray(args));

            instrumentsExecArgs = _lodash2['default'].map(instrumentsExecArgs, function (arg) {
              if (arg === null) {
                throw new Error('A null value was passed as an arg to execute ' + 'instruments on the command line. A letiable is ' + 'probably not getting set. Array of command args: ' + JSON.stringify(instrumentsExecArgs));
              }
              // escape any argument that has a space in it
              if (_lodash2['default'].isString(arg) && arg.indexOf(' ') !== -1) {
                return '"' + arg + '"';
              }
              // otherwise just use the argument
              return arg;
            });
            _logger2['default'].debug('Spawning instruments with command: \'' + instrumentsExecArgs.join(' ') + '\'');
            if (this.withoutDelay) {
              _logger2['default'].debug('And extra without-delay env: ' + JSON.stringify({
                DYLD_INSERT_LIBRARIES: env.DYLD_INSERT_LIBRARIES,
                LIB_PATH: env.LIB_PATH
              }));
            }
            _logger2['default'].debug('And launch timeouts (in ms): ' + JSON.stringify(this.launchTimeout));
            context$2$0.next = 81;
            return _regeneratorRuntime.awrap((0, _teen_process.spawn)(this.instrumentsPath, args, { env: env }));

          case 81:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 82:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[26, 30, 34, 42], [35,, 37, 41], [47, 51, 55, 63], [56,, 58, 62]]);
    }
  }, {
    key: 'addSocketConnectTimer',
    value: function addSocketConnectTimer(delay, type, doAction) {
      var socketConnectDelay = (0, _appiumSupport.cancellableDelay)(delay);
      /* eslint-disable */
      socketConnectDelay.then(function () {
        _logger2['default'].warn('Instruments socket client never checked in; timing out (' + type + ')');
        return doAction();
      })['catch'](_bluebird2['default'].CancellationError, function () {}).done();
      /* eslint-enable */
      this.socketConnectDelays.push(socketConnectDelay);
    }
  }, {
    key: 'clearSocketConnectTimers',
    value: function clearSocketConnectTimers() {
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = _getIterator(this.socketConnectDelays), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var delay = _step3.value;

          delay.cancel();
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3['return']) {
            _iterator3['return']();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      this.socketConnectDelays = [];
    }
  }, {
    key: 'setExitListener',
    value: function setExitListener(exitListener) {
      if (!this.proc) return; // eslint-disable-line curly
      if (this.exitListener) {
        this.proc.removeListener('exit', this.exitListener);
      }
      this.exitListener = exitListener;
      this.proc.on('exit', exitListener);
    }
  }, {
    key: 'killInstruments',
    value: function killInstruments() {
      var _this4 = this;

      if (!this.proc) return; // eslint-disable-line curly

      _logger2['default'].debug('Kill Instruments process (pid: ' + this.proc.pid + ')');
      return new _bluebird2['default'](function callee$2$0(resolve) {
        var wasTerminated, termDelay, termPromise;
        return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
          var _this3 = this;

          while (1) switch (context$3$0.prev = context$3$0.next) {
            case 0:
              wasTerminated = false;
              termDelay = (0, _appiumSupport.cancellableDelay)(this.termTimeout);
              termPromise = termDelay['catch'](_bluebird2['default'].CancellationError, function () {});

              this.setExitListener(function () {
                _this3.proc = null;
                wasTerminated = true;
                termDelay.cancel();
                resolve();
              });
              _logger2['default'].debug('Sending SIGTERM');
              this.proc.kill('SIGTERM');
              context$3$0.next = 8;
              return _regeneratorRuntime.awrap(termPromise);

            case 8:
              if (!wasTerminated) {
                _logger2['default'].warn('Instruments did not terminate after ' + this.termTimeout / 1000 + ' seconds!');
                _logger2['default'].debug('Sending SIGKILL');
                this.proc.kill('SIGKILL');
                if (_lodash2['default'].isFunction(this.exitListener)) {
                  this.exitListener();
                }
              }

            case 9:
            case 'end':
              return context$3$0.stop();
          }
        }, null, _this4);
      });
    }

    /* PROCESS MANAGEMENT */
  }, {
    key: 'shutdown',
    value: function shutdown() {
      return _regeneratorRuntime.async(function shutdown$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Starting shutdown.');
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.killInstruments());

          case 3:
            this.onShutdownDeferred.resolve();

          case 4:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }]);

  return Instruments;
})();

exports['default'] = Instruments;
module.exports = exports['default'];
// eslint-disable-line curly

// build up the arguments to use
// {"processArguments": {"flag1": "value1", "flag2": "value2"}}

// monitoring process termination
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9pbnN0cnVtZW50cy9pbnN0cnVtZW50cy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzRCQUVzQixjQUFjOztzQkFDcEIsVUFBVTs7OztzQkFDWixRQUFROzs7O3VCQUNFLFNBQVM7O29CQUNoQixNQUFNOzs7OzZCQUNzQixnQkFBZ0I7OzJCQUMzQyxjQUFjOzs7O3dCQUNsQixVQUFVOzs7O2tDQUNVLHNCQUFzQjs7cUJBQ1csU0FBUzs7dUJBQ0EsV0FBVzs7UUFDaEYsUUFBUTs7QUFHZixJQUFNLG9CQUFvQixHQUFHLDhCQUE4QixDQUFDO0FBQzVELElBQU0sc0JBQXNCLEdBQUcsZ0NBQWdDLENBQUM7QUFDaEUsSUFBTSxvQkFBb0IsR0FBRyw0REFBNEQsQ0FBQzs7SUFFcEYsV0FBVztlQUFYLFdBQVc7Ozs7V0FFZSwwQkFBQyxJQUFJO1VBRTdCLHNCQUFzQjs7OztBQUQxQixnQkFBSSxHQUFHLG9CQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQzs7NkNBQ2MseUJBQU0sOEJBQThCLEVBQUU7OztBQUFyRSxrQ0FBc0I7O0FBQzFCLGdDQUFFLFFBQVEsQ0FBQyxJQUFJLEVBQUU7QUFDZiwyQkFBYSxFQUFFLEtBQUs7QUFDcEIsc0JBQVEsRUFBRSxzQkFBc0I7QUFDaEMsMEJBQVksRUFBRSxJQUFJO0FBQ2xCLDBCQUFZLEVBQUUsS0FBSztBQUNuQix1QkFBUyxFQUFFLElBQUk7QUFDZiwyQkFBYSxFQUFFLENBQUM7YUFDakIsQ0FBQyxDQUFDO2dEQUNJLElBQUksV0FBVyxDQUFDLElBQUksQ0FBQzs7Ozs7OztLQUM3Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW9CVyxXQWxDUixXQUFXLENBa0NGLElBQUksRUFBRTs7OzBCQWxDZixXQUFXOztBQW1DYixRQUFJLEdBQUcsb0JBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3pCLHdCQUFFLFFBQVEsQ0FBQyxJQUFJLEVBQUU7QUFDZixpQkFBVyxF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LENBQUM7QUFDN0Isa0JBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDOzsrQ0FDcEIsV0FBVzs7O0FBQ2pCLGtCQUFJLENBQUMsYUFBYSxFQUFFO0FBQ2xCLG9DQUFJLElBQUksMENBQXdDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxlQUFZLENBQUM7QUFDcEYsb0NBQUksS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFDN0Isb0JBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQzFCLG9CQUFJLG9CQUFFLFVBQVUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUU7QUFDbkMsc0JBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztpQkFDckI7ZUFDRjs7Ozs7OztPQUNGLENBQUMsQ0FBQztLQUNKOzs7OztXQUdjOzs7O0FBQ2IsZ0NBQUksS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUM7OzZDQUMxQixJQUFJLENBQUMsZUFBZSxFQUFFOzs7QUFDNUIsZ0JBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLEVBQUUsQ0FBQzs7Ozs7OztLQUNuQzs7O1NBMVhHLFdBQVc7OztxQkE2WEYsV0FBVyIsImZpbGUiOiJsaWIvaW5zdHJ1bWVudHMvaW5zdHJ1bWVudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBXcmFwcGVyIGFyb3VuZCBBcHBsZSdzIEluc3RydW1lbnRzIGFwcFxuXG5pbXBvcnQgeyBzcGF3biB9IGZyb20gJ3RlZW5fcHJvY2Vzcyc7XG5pbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyB0aHJvdWdoIH0gZnJvbSAndGhyb3VnaCc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IG1rZGlycCwgZnMsIGNhbmNlbGxhYmxlRGVsYXkgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgeGNvZGUgZnJvbSAnYXBwaXVtLXhjb2RlJztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCB7IGtpbGxBbGxTaW11bGF0b3JzIH0gZnJvbSAnYXBwaXVtLWlvcy1zaW11bGF0b3InO1xuaW1wb3J0IHsgZ2V0SW5zdHJ1bWVudHNQYXRoLCBwYXJzZUxhdW5jaFRpbWVvdXQsIGdldEl3ZFBhdGggfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IG91dHB1dFN0cmVhbSwgZXJyb3JTdHJlYW0sIHdlYlNvY2tldEFsZXJ0U3RyZWFtLCBkdW1wU3RyZWFtIH0gZnJvbSAnLi9zdHJlYW1zJztcbmltcG9ydCAnY29sb3JzJztcblxuXG5jb25zdCBFUlJfTkVWRVJfQ0hFQ0tFRF9JTiA9ICdJbnN0cnVtZW50cyBuZXZlciBjaGVja2VkIGluJztcbmNvbnN0IEVSUl9DUkFTSEVEX09OX1NUQVJUVVAgPSAnSW5zdHJ1bWVudHMgY3Jhc2hlZCBvbiBzdGFydHVwJztcbmNvbnN0IEVSUl9BTUJJR1VPVVNfREVWSUNFID0gJ0luc3RydW1lbnRzIFVzYWdlIEVycm9yIDogQW1iaWd1b3VzIGRldmljZSBuYW1lL2lkZW50aWZpZXInO1xuXG5jbGFzcyBJbnN0cnVtZW50cyB7XG4gIC8vIHNpbXBsZSBmYWN0b3J5IHdpdGggc2FuZSBkZWZhdWx0c1xuICBzdGF0aWMgYXN5bmMgcXVpY2tJbnN0cnVtZW50cyAob3B0cykge1xuICAgIG9wdHMgPSBfLmNsb25lKG9wdHMpO1xuICAgIGxldCB4Y29kZVRyYWNlVGVtcGxhdGVQYXRoID0gYXdhaXQgeGNvZGUuZ2V0QXV0b21hdGlvblRyYWNlVGVtcGxhdGVQYXRoKCk7XG4gICAgXy5kZWZhdWx0cyhvcHRzLCB7XG4gICAgICBsYXVuY2hUaW1lb3V0OiA2MDAwMCxcbiAgICAgIHRlbXBsYXRlOiB4Y29kZVRyYWNlVGVtcGxhdGVQYXRoLFxuICAgICAgd2l0aG91dERlbGF5OiB0cnVlLFxuICAgICAgeGNvZGVWZXJzaW9uOiAnOC4xJyxcbiAgICAgIHdlYlNvY2tldDogbnVsbCxcbiAgICAgIGZsYWtleVJldHJpZXM6IDJcbiAgICB9KTtcbiAgICByZXR1cm4gbmV3IEluc3RydW1lbnRzKG9wdHMpO1xuICB9XG5cbiAgLypcbiAgICogb3B0czpcbiAgICogICAtIGFwcFxuICAgKiAgIC0gdGVybVRpbWVvdXQgLSBkZWZhdWx0cyB0byA1MDAwXG4gICAqICAgLSBmbGFrZXlSZXRyaWVzIC0gZGVmYXVsdHMgdG8gMFxuICAgKiAgIC0gdWRpZFxuICAgKiAgIC0gYm9vdHN0cmFwXG4gICAqICAgLSB0ZW1wbGF0ZVxuICAgKiAgIC0gd2l0aG91dERlbGF5XG4gICAqICAgLSBwcm9jZXNzQXJndW1lbnRzXG4gICAqICAgLSBzaW11bGF0b3JTZGtBbmREZXZpY2VcbiAgICogICAtIHRtcERpciAtIGRlZmF1bHRzIHRvIGAvdG1wL2FwcGl1bS1pbnN0cnVtZW50c2BcbiAgICogICAtIHRyYWNlRGlyXG4gICAqICAgLSBsYXVuY2hUaW1lb3V0IC0gZGVmYXVsdHMgdG8gOTAwMDBcbiAgICogICAtIHdlYlNvY2tldFxuICAgKiAgIC0gaW5zdHJ1bWVudHNQYXRoXG4gICAqICAgLSByZWFsRGV2aWNlIC0gdHJ1ZS9mYWxzZSwgZGVmYXVsdHMgdG8gZmFsc2VcbiAgICovXG4gIGNvbnN0cnVjdG9yIChvcHRzKSB7XG4gICAgb3B0cyA9IF8uY2xvbmVEZWVwKG9wdHMpO1xuICAgIF8uZGVmYXVsdHMob3B0cywge1xuICAgICAgdGVybVRpbWVvdXQ6IDUwMDAsXG4gICAgICB0bXBEaXI6ICcvdG1wL2FwcGl1bS1pbnN0cnVtZW50cycsXG4gICAgICBsYXVuY2hUaW1lb3V0OiA5MDAwMCxcbiAgICAgIGZsYWtleVJldHJpZXM6IDAsXG4gICAgICByZWFsRGV2aWNlOiBmYWxzZVxuICAgIH0pO1xuXG4gICAgLy8gY29uZmlnXG4gICAgZm9yIChsZXQgZiBvZiBbJ2FwcCcsICd0ZXJtVGltZW91dCcsICdmbGFrZXlSZXRyaWVzJywgJ3VkaWQnLCAnYm9vdHN0cmFwJyxcbiAgICAgICAgICAgICAgICAgICAndGVtcGxhdGUnLCAnd2l0aG91dERlbGF5JywgJ3Byb2Nlc3NBcmd1bWVudHMnLCAncmVhbERldmljZScsXG4gICAgICAgICAgICAgICAgICAgJ3NpbXVsYXRvclNka0FuZERldmljZScsICd0bXBEaXInLCAndHJhY2VEaXInLCAnbG9jYWxlJywgJ2xhbmd1YWdlJ10pIHtcbiAgICAgIHRoaXNbZl0gPSBvcHRzW2ZdO1xuICAgIH1cbiAgICB0aGlzLnRyYWNlRGlyID0gdGhpcy50cmFjZURpciB8fCB0aGlzLnRtcERpcjtcbiAgICB0aGlzLmxhdW5jaFRpbWVvdXQgPSBwYXJzZUxhdW5jaFRpbWVvdXQob3B0cy5sYXVuY2hUaW1lb3V0KTtcblxuICAgIC8vIHN0YXRlXG4gICAgdGhpcy5wcm9jID0gbnVsbDtcbiAgICB0aGlzLndlYlNvY2tldCA9IG9wdHMud2ViU29ja2V0O1xuICAgIHRoaXMuaW5zdHJ1bWVudHNQYXRoID0gb3B0cy5pbnN0cnVtZW50c1BhdGg7XG4gICAgdGhpcy5sYXVuY2hUcmllcyA9IDA7XG4gICAgdGhpcy5zb2NrZXRDb25uZWN0RGVsYXlzID0gW107XG4gICAgdGhpcy5nb3RGQlNPcGVuQXBwbGljYXRpb25FcnJvciA9IGZhbHNlO1xuICAgIHRoaXMub25TaHV0ZG93biA9IG5ldyBCKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMub25TaHV0ZG93bkRlZmVycmVkID0ge3Jlc29sdmUsIHJlamVjdH07XG4gICAgfSk7XG4gICAgLy8gYXZvaWRzIFVuaGFuZGxlZEV4Y2VwdGlvblxuICAgIHRoaXMub25TaHV0ZG93bi5jYXRjaCgoKSA9PiB7fSkuZG9uZSgpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHByb21pc2UvY2F0Y2gtb3ItcmV0dXJuXG4gIH1cblxuICBhc3luYyBjb25maWd1cmUgKCkge1xuICAgIGlmICghdGhpcy54Y29kZVZlcnNpb24pIHtcbiAgICAgIHRoaXMueGNvZGVWZXJzaW9uID0gYXdhaXQgeGNvZGUuZ2V0VmVyc2lvbih0cnVlKTtcbiAgICB9XG4gICAgaWYgKHRoaXMueGNvZGVWZXJzaW9uLnZlcnNpb25GbG9hdCA9PT0gNi4wICYmIHRoaXMud2l0aG91dERlbGF5KSB7XG4gICAgICBsb2cuaW5mbygnSW4geGNvZGUgNi4wLCBpbnN0cnVtZW50cy13aXRob3V0LWRlbGF5IGRvZXMgbm90IHdvcmsuICcgK1xuICAgICAgICAgICAgICAgJ0lmIHVzaW5nIEFwcGl1bSwgeW91IGNhbiBkaXNhYmxlIGluc3RydW1lbnRzLXdpdGhvdXQtZGVsYXkgJyArXG4gICAgICAgICAgICAgICAnd2l0aCB0aGUgLS1uYXRpdmUtaW5zdHJ1bWVudHMtbGliIHNlcnZlciBmbGFnJyk7XG4gICAgfVxuICAgIGlmICh0aGlzLnhjb2RlVmVyc2lvbi52ZXJzaW9uU3RyaW5nID09PSAnNS4wLjEnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1hjb2RlIDUuMC4xIHNoaXBzIHdpdGggYSBicm9rZW4gdmVyc2lvbiBvZiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAnSW5zdHJ1bWVudHMuIHBsZWFzZSB1cGdyYWRlIHRvIDUuMC4yJyk7XG4gICAgfVxuICAgIGlmICh0aGlzLnhjb2RlVmVyc2lvbi5tYWpvciA+IDcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgSW5zdHJ1bWVudHMtYmFzZWQgYXV0b21hdGlvbiB3YXMgcmVtb3ZlZCBpbiBYY29kZSA4LiBgICtcbiAgICAgICAgICAgICAgICAgICAgICBgWGNvZGUgJHt0aGlzLnhjb2RlVmVyc2lvbi52ZXJzaW9uU3RyaW5nfSBpcyBub3Qgc3VwcG9ydGVkLiBgICtcbiAgICAgICAgICAgICAgICAgICAgICBgUGxlYXNlIHRyeSB0aGUgWENVSXRlc3QgZHJpdmVyLmApO1xuICAgIH1cblxuICAgIGlmICghdGhpcy50ZW1wbGF0ZSkge1xuICAgICAgdGhpcy50ZW1wbGF0ZSA9IGF3YWl0IHhjb2RlLmdldEF1dG9tYXRpb25UcmFjZVRlbXBsYXRlUGF0aCgpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5pbnN0cnVtZW50c1BhdGgpIHtcbiAgICAgIHRoaXMuaW5zdHJ1bWVudHNQYXRoID0gYXdhaXQgZ2V0SW5zdHJ1bWVudHNQYXRoKCk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgbGF1bmNoT25jZSAoKSB7XG4gICAgbG9nLmluZm8oJ0xhdW5jaGluZyBpbnN0cnVtZW50cycpO1xuICAgIC8vIHByZXBhcmUgdGVtcCBkaXJcbiAgICBhd2FpdCBmcy5yaW1yYWYodGhpcy50bXBEaXIpO1xuICAgIGF3YWl0IG1rZGlycCh0aGlzLnRtcERpcik7XG4gICAgYXdhaXQgbWtkaXJwKHRoaXMudHJhY2VEaXIpO1xuXG4gICAgdGhpcy5leGl0TGlzdGVuZXIgPSBudWxsO1xuICAgIHRoaXMucHJvYyA9IGF3YWl0IHRoaXMuc3Bhd25JbnN0cnVtZW50cygpO1xuICAgIHRoaXMucHJvYy5vbignZXhpdCcsIChjb2RlLCBzaWduYWwpID0+IHtcbiAgICAgIGNvbnN0IG1zZyA9IGNvZGUgIT09IG51bGwgPyBgY29kZTogJHtjb2RlfWAgOiBgc2lnbmFsOiAke3NpZ25hbH1gO1xuICAgICAgbG9nLmRlYnVnKGBJbnN0cnVtZW50cyBleGl0ZWQgd2l0aCAke21zZ31gKTtcbiAgICB9KTtcblxuICAgIC8vIHNldCB1cCB0aGUgcHJvbWlzZSB0byBoYW5kbGUgbGF1bmNoXG4gICAgbGV0IGxhdW5jaFJlc3VsdFByb21pc2UgPSBuZXcgQigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmxhdW5jaFJlc3VsdERlZmVycmVkID0ge3Jlc29sdmUsIHJlamVjdH07XG4gICAgfSk7XG5cbiAgICAvLyBUaGVyZSB3YXMgYSBzcGVjaWFsIGNhc2UgZm9yIGlnbm9yZVN0YXJ0dXBFeGl0XG4gICAgLy8gYnV0IGl0IGlzIG5vdCBuZWVkZWQgYW55bW9yZSwgeW91IG1heSBqdXN0IGxpc3RlbiBmb3IgZXhpdC5cbiAgICB0aGlzLnNldEV4aXRMaXN0ZW5lcigoKSA9PiB7XG4gICAgICB0aGlzLnByb2MgPSBudWxsO1xuICAgICAgdGhpcy5sYXVuY2hSZXN1bHREZWZlcnJlZC5yZWplY3QobmV3IEVycm9yKEVSUl9DUkFTSEVEX09OX1NUQVJUVVApKTtcbiAgICB9KTtcblxuICAgIHRoaXMucHJvYy5vbignZXJyb3InLCAoZXJyKSA9PiB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcHJvbWlzZS9wcmVmZXItYXdhaXQtdG8tY2FsbGJhY2tzXG4gICAgICBsb2cuZGVidWcoYEVycm9yIHdpdGggaW5zdHJ1bWVudHMgcHJvYzogJHtlcnIubWVzc2FnZX1gKTtcbiAgICAgIGlmIChlcnIubWVzc2FnZS5pbmRleE9mKCdFTk9FTlQnKSAhPT0gLTEpIHtcbiAgICAgICAgdGhpcy5wcm9jID0gbnVsbDsgLy8gb3RoZXJ3aXNlIHdlJ2xsIHRyeSB0byBzZW5kIHNpZ2tpbGxcbiAgICAgICAgbG9nLmVycm9yKGBVbmFibGUgdG8gc3Bhd24gaW5zdHJ1bWVudHM6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgICAgIHRoaXMubGF1bmNoUmVzdWx0RGVmZXJyZWQucmVqZWN0KGVycik7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLnByb2Muc3Rkb3V0LnNldEVuY29kaW5nKCd1dGY4Jyk7XG4gICAgdGhpcy5wcm9jLnN0ZG91dC5waXBlKG91dHB1dFN0cmVhbSgpKS5waXBlKGR1bXBTdHJlYW0oKSk7XG5cbiAgICB0aGlzLnByb2Muc3RkZXJyLnNldEVuY29kaW5nKCd1dGY4Jyk7XG4gICAgbGV0IGFjdE9uU3RkZXJyID0gKG91dHB1dCkgPT4ge1xuICAgICAgaWYgKHRoaXMubGF1bmNoVGltZW91dC5hZnRlclNpbUxhdW5jaCAmJiBvdXRwdXQgJiYgb3V0cHV0Lm1hdGNoKC9DTFRpbGVzTWFuYWdlckNsaWVudDogaW5pdGlhbGl6ZS8pKSB7XG4gICAgICAgIHRoaXMuYWRkU29ja2V0Q29ubmVjdFRpbWVyKHRoaXMubGF1bmNoVGltZW91dC5hZnRlclNpbUxhdW5jaCwgJ2FmdGVyTGF1bmNoJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgIGF3YWl0IHRoaXMua2lsbEluc3RydW1lbnRzKCk7XG4gICAgICAgICAgdGhpcy5sYXVuY2hSZXN1bHREZWZlcnJlZC5yZWplY3QobmV3IEVycm9yKEVSUl9ORVZFUl9DSEVDS0VEX0lOKSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBsZXQgZmJzRXJyU3RyID0gJyhGQlNPcGVuQXBwbGljYXRpb25FcnJvckRvbWFpbiBlcnJvciA4LiknO1xuICAgICAgaWYgKG91dHB1dC5pbmRleE9mKGZic0VyclN0cikgIT09IC0xKSB7XG4gICAgICAgIHRoaXMuZ290RkJTT3BlbkFwcGxpY2F0aW9uRXJyb3IgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAob3V0cHV0LmluZGV4T2YoRVJSX0FNQklHVU9VU19ERVZJQ0UpICE9PSAtMSkge1xuICAgICAgICBsZXQgbXNnID0gYCR7RVJSX0FNQklHVU9VU19ERVZJQ0V9OiAnJHt0aGlzLnNpbXVsYXRvclNka0FuZERldmljZX0nYDtcbiAgICAgICAgdGhpcy5sYXVuY2hSZXN1bHREZWZlcnJlZC5yZWplY3QobmV3IEVycm9yKG1zZykpO1xuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5wcm9jLnN0ZGVyci5waXBlKHRocm91Z2goZnVuY3Rpb24gKG91dHB1dCkge1xuICAgICAgYWN0T25TdGRlcnIob3V0cHV0KTtcbiAgICAgIHRoaXMucXVldWUob3V0cHV0KTtcbiAgICB9KSkucGlwZShlcnJvclN0cmVhbSgpKVxuICAgIC5waXBlKHdlYlNvY2tldEFsZXJ0U3RyZWFtKHRoaXMud2ViU29ja2V0KSlcbiAgICAucGlwZShkdW1wU3RyZWFtKCkpO1xuXG4gICAgLy8gc3RhcnQgd2FpdGluZyBmb3IgaW5zdHJ1bWVudHMgdG8gbGF1bmNoIHN1Y2Nlc3NmdWxseVxuICAgIHRoaXMuYWRkU29ja2V0Q29ubmVjdFRpbWVyKHRoaXMubGF1bmNoVGltZW91dC5nbG9iYWwsICdnbG9iYWwnLCBhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCB0aGlzLmtpbGxJbnN0cnVtZW50cygpO1xuICAgICAgdGhpcy5sYXVuY2hSZXN1bHREZWZlcnJlZC5yZWplY3QobmV3IEVycm9yKEVSUl9ORVZFUl9DSEVDS0VEX0lOKSk7XG4gICAgfSk7XG5cbiAgICB0cnkge1xuICAgICAgYXdhaXQgbGF1bmNoUmVzdWx0UHJvbWlzZTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpcy5jbGVhclNvY2tldENvbm5lY3RUaW1lcnMoKTtcbiAgICB9XG4gICAgdGhpcy5zZXRFeGl0TGlzdGVuZXIoKGNvZGUsIHNpZ25hbCkgPT4ge1xuICAgICAgdGhpcy5wcm9jID0gbnVsbDtcbiAgICAgIGNvbnN0IG1zZyA9IGNvZGUgIT09IG51bGwgPyBgY29kZTogJHtjb2RlfWAgOiBgc2lnbmFsOiAke3NpZ25hbH1gO1xuICAgICAgdGhpcy5vblNodXRkb3duRGVmZXJyZWQucmVqZWN0KG5ldyBFcnJvcihgQWJub3JtYWwgZXhpdCB3aXRoICR7bXNnfWApKTtcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIGxhdW5jaCAoKSB7XG4gICAgYXdhaXQgdGhpcy5jb25maWd1cmUoKTtcbiAgICBsZXQgbGF1bmNoVHJpZXMgPSAwO1xuICAgIGRvIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cbiAgICAgIGxhdW5jaFRyaWVzKys7XG4gICAgICBsb2cuZGVidWcoYEF0dGVtcHRpbmcgdG8gbGF1bmNoIGluc3RydW1lbnRzLCB0aGlzIGlzIHRyeSAjJHtsYXVuY2hUcmllc31gKTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgdGhpcy5sYXVuY2hPbmNlKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGxvZy5lcnJvcihgRXJyb3IgbGF1bmNoaW5nIGluc3RydW1lbnRzOiAke2Vyci5tZXNzYWdlfWApO1xuICAgICAgICBsZXQgZXJySXNDYXRjaGFibGUgPSBlcnIubWVzc2FnZSA9PT0gRVJSX05FVkVSX0NIRUNLRURfSU4gfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyLm1lc3NhZ2UgPT09IEVSUl9DUkFTSEVEX09OX1NUQVJUVVA7XG4gICAgICAgIGlmICghZXJySXNDYXRjaGFibGUpIHtcbiAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxhdW5jaFRyaWVzIDw9IHRoaXMuZmxha2V5UmV0cmllcykge1xuICAgICAgICAgIGlmICh0aGlzLmdvdEZCU09wZW5BcHBsaWNhdGlvbkVycm9yKSB7XG4gICAgICAgICAgICBsb2cuZGVidWcoJ0dvdCB0aGUgRkJTT3BlbkFwcGxpY2F0aW9uRXJyb3IsIG5vdCBraWxsaW5nIHRoZSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAnc2ltIGJ1dCBsZWF2aW5nIGl0IG9wZW4gc28gdGhlIGFwcCB3aWxsIGxhdW5jaCcpO1xuICAgICAgICAgICAgdGhpcy5nb3RGQlNPcGVuQXBwbGljYXRpb25FcnJvciA9IGZhbHNlOyAvLyBjbGVhciBvdXQgZm9yIG5leHQgbGF1bmNoXG4gICAgICAgICAgICBhd2FpdCBCLmRlbGF5KDEwMDApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMucmVhbERldmljZSkge1xuICAgICAgICAgICAgICBhd2FpdCBraWxsQWxsU2ltdWxhdG9ycygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXdhaXQgQi5kZWxheSg1MDAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbG9nLmVycm9yQW5kVGhyb3coJ1dlIGV4Y2VlZGVkIHRoZSBudW1iZXIgb2YgcmV0cmllcyBhbGxvd2VkIGZvciAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaW5zdHJ1bWVudHMgdG8gc3VjY2Vzc2Z1bGx5IHN0YXJ0OyBmYWlsaW5nIGxhdW5jaCcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSB3aGlsZSAodHJ1ZSk7XG4gIH1cblxuICByZWdpc3RlckxhdW5jaCAoKSB7XG4gICAgdGhpcy5sYXVuY2hSZXN1bHREZWZlcnJlZC5yZXNvbHZlKCk7XG4gIH1cblxuICBhc3luYyBzcGF3bkluc3RydW1lbnRzICgpIHtcbiAgICBsZXQgdHJhY2VEaXI7XG4gICAgZm9yIChsZXQgaSA9IDA7IDsgaSsrKSB7XG4gICAgICAvLyBsb29wIHdoaWxlIHRoZXJlIGFyZSB0cmFjZWRpcnMgdG8gZGVsZXRlXG4gICAgICB0cmFjZURpciA9IHBhdGgucmVzb2x2ZSh0aGlzLnRyYWNlRGlyLCBgaW5zdHJ1bWVudHNjbGkke2l9LnRyYWNlYCk7XG4gICAgICBpZiAoIWF3YWl0IGZzLmV4aXN0cyh0cmFjZURpcikpIGJyZWFrOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGN1cmx5XG4gICAgfVxuXG4gICAgLy8gYnVpbGQgdXAgdGhlIGFyZ3VtZW50cyB0byB1c2VcbiAgICBsZXQgYXJncyA9IFsnLXQnLCB0aGlzLnRlbXBsYXRlLCAnLUQnLCB0cmFjZURpcl07XG4gICAgaWYgKHRoaXMudWRpZCkge1xuICAgICAgLy8gcmVhbCBkZXZpY2UsIHNvIHNwZWNpZnkgdWRpZFxuICAgICAgYXJncyA9IGFyZ3MuY29uY2F0KFsnLXcnLCB0aGlzLnVkaWRdKTtcbiAgICAgIGxvZy5kZWJ1ZyhgQXR0ZW1wdGluZyB0byBydW4gYXBwIG9uIHJlYWwgZGV2aWNlIHdpdGggVURJRCAnJHt0aGlzLnVkaWR9J2ApO1xuICAgIH1cbiAgICBpZiAoIXRoaXMudWRpZCAmJiB0aGlzLnNpbXVsYXRvclNka0FuZERldmljZSkge1xuICAgICAgLy8gc2ltLCBzbyBzcGVjaWZ5IHRoZSBzZGsgYW5kIGRldmljZVxuICAgICAgYXJncyA9IGFyZ3MuY29uY2F0KFsnLXcnLCB0aGlzLnNpbXVsYXRvclNka0FuZERldmljZV0pO1xuICAgICAgbG9nLmRlYnVnKGBBdHRlbXB0aW5nIHRvIHJ1biBhcHAgb24gJHt0aGlzLnNpbXVsYXRvclNka0FuZERldmljZX1gKTtcbiAgICB9XG4gICAgYXJncyA9IGFyZ3MuY29uY2F0KFt0aGlzLmFwcF0pO1xuICAgIGlmICh0aGlzLnByb2Nlc3NBcmd1bWVudHMpIHtcbiAgICAgIGxvZy5kZWJ1ZyhgQXR0ZW1wdGluZyB0byBydW4gYXBwIHdpdGggcHJvY2VzcyBhcmd1bWVudHM6ICR7SlNPTi5zdHJpbmdpZnkodGhpcy5wcm9jZXNzQXJndW1lbnRzKX1gKTtcbiAgICAgIC8vIGFueSBhZGRpdGlvbmFsIHN0dWZmIHNwZWNpZmllZCBieSB0aGUgdXNlclxuXG4gICAgICBpZiAoXy5pc1N0cmluZyh0aGlzLnByb2Nlc3NBcmd1bWVudHMpKSB7XG4gICAgICAgIGlmICh0aGlzLnByb2Nlc3NBcmd1bWVudHMuaW5kZXhPZignLWUgJykgPT09IC0xKSB7XG4gICAgICAgICAgbG9nLmRlYnVnKCdQbGFpbiBzdHJpbmcgcHJvY2VzcyBhcmd1bWVudHMgYmVpbmcgcHVzaGVkIGludG8gYXJndW1lbnRzJyk7XG4gICAgICAgICAgYXJncy5wdXNoKHRoaXMucHJvY2Vzc0FyZ3VtZW50cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbG9nLmRlYnVnKCdFbnZpcm9ubWVudCB2YXJpYWJsZXMgYmVpbmcgcHVzaGVkIGludG8gYXJndW1lbnRzJyk7XG4gICAgICAgICAgZm9yIChsZXQgYXJnIG9mIHRoaXMucHJvY2Vzc0FyZ3VtZW50cy5zcGxpdCgnLWUgJykpIHtcbiAgICAgICAgICAgIGFyZyA9IGFyZy50cmltKCk7XG4gICAgICAgICAgICBpZiAoYXJnLmxlbmd0aCkge1xuICAgICAgICAgICAgICBsZXQgc3BhY2UgPSBhcmcuaW5kZXhPZignICcpO1xuICAgICAgICAgICAgICBsZXQgZmxhZyA9IGFyZy5zdWJzdHJpbmcoMCwgc3BhY2UpO1xuICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBhcmcuc3Vic3RyaW5nKHNwYWNlICsgMSk7XG4gICAgICAgICAgICAgIGFyZ3MucHVzaCgnLWUnLCBmbGFnLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBwcm9jZXNzIGFyZ3VtZW50cyBjYW4gYWxzbyBiZSBhIGhhc2ggb2YgZmxhZ3MgYW5kIHZhbHVlc1xuICAgICAgICAvLyB7XCJwcm9jZXNzQXJndW1lbnRzXCI6IHtcImZsYWcxXCI6IFwidmFsdWUxXCIsIFwiZmxhZzJcIjogXCJ2YWx1ZTJcIn19XG4gICAgICAgIGZvciAobGV0IFtmbGFnLCB2YWx1ZV0gb2YgXy50b1BhaXJzKHRoaXMucHJvY2Vzc0FyZ3VtZW50cykpIHtcbiAgICAgICAgICBhcmdzLnB1c2goJy1lJywgZmxhZywgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGFyZ3MgPSBhcmdzLmNvbmNhdChbJy1lJywgJ1VJQVNDUklQVCcsIHRoaXMuYm9vdHN0cmFwXSk7XG4gICAgYXJncyA9IGFyZ3MuY29uY2F0KFsnLWUnLCAnVUlBUkVTVUxUU1BBVEgnLCB0aGlzLnRtcERpcl0pO1xuICAgIGlmICh0aGlzLmxhbmd1YWdlKSB7XG4gICAgICBhcmdzID0gYXJncy5jb25jYXQoW2AtQXBwbGVMYW5ndWFnZXMgKCR7dGhpcy5sYW5ndWFnZX0pYF0pO1xuICAgICAgYXJncyA9IGFyZ3MuY29uY2F0KFtgLU5TTGFuZ3VhZ2VzICgke3RoaXMubGFuZ3VhZ2V9KWBdKTtcbiAgICB9XG4gICAgaWYgKHRoaXMubG9jYWxlKSB7XG4gICAgICBhcmdzID0gYXJncy5jb25jYXQoW2AtQXBwbGVMb2NhbGUgJHt0aGlzLmxvY2FsZX1gXSk7XG4gICAgfVxuXG4gICAgbGV0IGVudiA9IF8uY2xvbmUocHJvY2Vzcy5lbnYpO1xuICAgIGlmICh0aGlzLnhjb2RlVmVyc2lvbi5tYWpvciA+PSA3ICYmICF0aGlzLnVkaWQpIHtcbiAgICAgIC8vIGl3ZCBjdXJyZW50bHkgZG9lcyBub3Qgd29yayB3aXRoIHhjb2RlNywgc2V0dGluZyB3aXRob3V0RGVsYXkgdG8gZmFsc2VcbiAgICAgIGxvZy5pbmZvKFwiT24geGNvZGUgNy4wKywgaW5zdHJ1bWVudHMtd2l0aG91dC1kZWxheSBkb2VzIG5vdCB3b3JrLCBcIiArXG4gICAgICAgICAgICAgICBcInNraXBwaW5nIGluc3RydW1lbnRzLXdpdGhvdXQtZGVsYXlcIik7XG4gICAgICB0aGlzLndpdGhvdXREZWxheSA9IGZhbHNlO1xuICAgIH1cbiAgICBsZXQgaXdkUGF0aCA9IGF3YWl0IGdldEl3ZFBhdGgodGhpcy54Y29kZVZlcnNpb24ubWFqb3IpO1xuICAgIGVudi5DQV9ERUJVR19UUkFOU0FDVElPTlMgPSAxO1xuICAgIGlmICh0aGlzLndpdGhvdXREZWxheSAmJiAhdGhpcy51ZGlkKSB7XG4gICAgICAvLyBzaW0sIGFuZCB1c2luZyBpLXctZFxuICAgICAgZW52LkRZTERfSU5TRVJUX0xJQlJBUklFUyA9IHBhdGgucmVzb2x2ZShpd2RQYXRoLCAnSW5zdHJ1bWVudHNTaGltLmR5bGliJyk7XG4gICAgICBlbnYuTElCX1BBVEggPSBpd2RQYXRoO1xuICAgIH1cbiAgICBsZXQgaW5zdHJ1bWVudHNFeGVjQXJncyA9IFt0aGlzLmluc3RydW1lbnRzUGF0aCwgLi4uYXJnc107XG4gICAgaW5zdHJ1bWVudHNFeGVjQXJncyA9IF8ubWFwKGluc3RydW1lbnRzRXhlY0FyZ3MsIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgIGlmIChhcmcgPT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBIG51bGwgdmFsdWUgd2FzIHBhc3NlZCBhcyBhbiBhcmcgdG8gZXhlY3V0ZSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdpbnN0cnVtZW50cyBvbiB0aGUgY29tbWFuZCBsaW5lLiBBIGxldGlhYmxlIGlzICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3Byb2JhYmx5IG5vdCBnZXR0aW5nIHNldC4gQXJyYXkgb2YgY29tbWFuZCBhcmdzOiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KGluc3RydW1lbnRzRXhlY0FyZ3MpKTtcbiAgICAgIH1cbiAgICAgIC8vIGVzY2FwZSBhbnkgYXJndW1lbnQgdGhhdCBoYXMgYSBzcGFjZSBpbiBpdFxuICAgICAgaWYgKF8uaXNTdHJpbmcoYXJnKSAmJiBhcmcuaW5kZXhPZignICcpICE9PSAtMSkge1xuICAgICAgICByZXR1cm4gYFwiJHthcmd9XCJgO1xuICAgICAgfVxuICAgICAgLy8gb3RoZXJ3aXNlIGp1c3QgdXNlIHRoZSBhcmd1bWVudFxuICAgICAgcmV0dXJuIGFyZztcbiAgICB9KTtcbiAgICBsb2cuZGVidWcoYFNwYXduaW5nIGluc3RydW1lbnRzIHdpdGggY29tbWFuZDogJyR7aW5zdHJ1bWVudHNFeGVjQXJncy5qb2luKCcgJyl9J2ApO1xuICAgIGlmICh0aGlzLndpdGhvdXREZWxheSkge1xuICAgICAgbG9nLmRlYnVnKCdBbmQgZXh0cmEgd2l0aG91dC1kZWxheSBlbnY6ICcgKyBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIERZTERfSU5TRVJUX0xJQlJBUklFUzogZW52LkRZTERfSU5TRVJUX0xJQlJBUklFUyxcbiAgICAgICAgTElCX1BBVEg6IGVudi5MSUJfUEFUSFxuICAgICAgfSkpO1xuICAgIH1cbiAgICBsb2cuZGVidWcoYEFuZCBsYXVuY2ggdGltZW91dHMgKGluIG1zKTogJHtKU09OLnN0cmluZ2lmeSh0aGlzLmxhdW5jaFRpbWVvdXQpfWApO1xuICAgIHJldHVybiBhd2FpdCBzcGF3bih0aGlzLmluc3RydW1lbnRzUGF0aCwgYXJncywge2Vudn0pO1xuICB9XG5cbiAgYWRkU29ja2V0Q29ubmVjdFRpbWVyIChkZWxheSwgdHlwZSwgZG9BY3Rpb24pIHtcbiAgICBsZXQgc29ja2V0Q29ubmVjdERlbGF5ID0gY2FuY2VsbGFibGVEZWxheShkZWxheSk7XG4gICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICBzb2NrZXRDb25uZWN0RGVsYXkudGhlbigoKSA9PiB7XG4gICAgICBsb2cud2FybihgSW5zdHJ1bWVudHMgc29ja2V0IGNsaWVudCBuZXZlciBjaGVja2VkIGluOyB0aW1pbmcgb3V0ICgke3R5cGV9KWApO1xuICAgICAgcmV0dXJuIGRvQWN0aW9uKCk7XG4gICAgfSkuY2F0Y2goQi5DYW5jZWxsYXRpb25FcnJvciwgKCkgPT4ge30pLmRvbmUoKTtcbiAgICAvKiBlc2xpbnQtZW5hYmxlICovXG4gICAgdGhpcy5zb2NrZXRDb25uZWN0RGVsYXlzLnB1c2goc29ja2V0Q29ubmVjdERlbGF5KTtcbiAgfVxuXG4gIGNsZWFyU29ja2V0Q29ubmVjdFRpbWVycyAoKSB7XG4gICAgZm9yIChsZXQgZGVsYXkgb2YgdGhpcy5zb2NrZXRDb25uZWN0RGVsYXlzKSB7XG4gICAgICBkZWxheS5jYW5jZWwoKTtcbiAgICB9XG4gICAgdGhpcy5zb2NrZXRDb25uZWN0RGVsYXlzID0gW107XG4gIH1cblxuICBzZXRFeGl0TGlzdGVuZXIgKGV4aXRMaXN0ZW5lcikge1xuICAgIGlmICghdGhpcy5wcm9jKSByZXR1cm47IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY3VybHlcbiAgICBpZiAodGhpcy5leGl0TGlzdGVuZXIpIHtcbiAgICAgIHRoaXMucHJvYy5yZW1vdmVMaXN0ZW5lcignZXhpdCcsIHRoaXMuZXhpdExpc3RlbmVyKTtcbiAgICB9XG4gICAgdGhpcy5leGl0TGlzdGVuZXIgPSBleGl0TGlzdGVuZXI7XG4gICAgdGhpcy5wcm9jLm9uKCdleGl0JywgZXhpdExpc3RlbmVyKTtcbiAgfVxuXG4gIGtpbGxJbnN0cnVtZW50cyAoKSB7XG4gICAgaWYgKCF0aGlzLnByb2MpIHJldHVybjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjdXJseVxuXG4gICAgbG9nLmRlYnVnKGBLaWxsIEluc3RydW1lbnRzIHByb2Nlc3MgKHBpZDogJHt0aGlzLnByb2MucGlkfSlgKTtcbiAgICByZXR1cm4gbmV3IEIoYXN5bmMgKHJlc29sdmUpID0+IHtcbiAgICAgIGxldCB3YXNUZXJtaW5hdGVkID0gZmFsc2U7XG4gICAgICAvLyBtb25pdG9yaW5nIHByb2Nlc3MgdGVybWluYXRpb25cbiAgICAgIGxldCB0ZXJtRGVsYXkgPSBjYW5jZWxsYWJsZURlbGF5KHRoaXMudGVybVRpbWVvdXQpO1xuICAgICAgbGV0IHRlcm1Qcm9taXNlID0gdGVybURlbGF5LmNhdGNoKEIuQ2FuY2VsbGF0aW9uRXJyb3IsICgpID0+IHt9KTtcbiAgICAgIHRoaXMuc2V0RXhpdExpc3RlbmVyKCgpID0+IHtcbiAgICAgICAgdGhpcy5wcm9jID0gbnVsbDtcbiAgICAgICAgd2FzVGVybWluYXRlZCA9IHRydWU7XG4gICAgICAgIHRlcm1EZWxheS5jYW5jZWwoKTtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfSk7XG4gICAgICBsb2cuZGVidWcoJ1NlbmRpbmcgU0lHVEVSTScpO1xuICAgICAgdGhpcy5wcm9jLmtpbGwoJ1NJR1RFUk0nKTtcbiAgICAgIGF3YWl0IHRlcm1Qcm9taXNlO1xuICAgICAgaWYgKCF3YXNUZXJtaW5hdGVkKSB7XG4gICAgICAgIGxvZy53YXJuKGBJbnN0cnVtZW50cyBkaWQgbm90IHRlcm1pbmF0ZSBhZnRlciAke3RoaXMudGVybVRpbWVvdXQgLyAxMDAwfSBzZWNvbmRzIWApO1xuICAgICAgICBsb2cuZGVidWcoJ1NlbmRpbmcgU0lHS0lMTCcpO1xuICAgICAgICB0aGlzLnByb2Mua2lsbCgnU0lHS0lMTCcpO1xuICAgICAgICBpZiAoXy5pc0Z1bmN0aW9uKHRoaXMuZXhpdExpc3RlbmVyKSkge1xuICAgICAgICAgIHRoaXMuZXhpdExpc3RlbmVyKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qIFBST0NFU1MgTUFOQUdFTUVOVCAqL1xuICBhc3luYyBzaHV0ZG93biAoKSB7XG4gICAgbG9nLmRlYnVnKCdTdGFydGluZyBzaHV0ZG93bi4nKTtcbiAgICBhd2FpdCB0aGlzLmtpbGxJbnN0cnVtZW50cygpO1xuICAgIHRoaXMub25TaHV0ZG93bkRlZmVycmVkLnJlc29sdmUoKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBJbnN0cnVtZW50cztcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
