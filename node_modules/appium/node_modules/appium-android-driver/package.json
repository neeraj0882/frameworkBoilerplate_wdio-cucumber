{
  "_args": [
    [
      {
        "raw": "appium-android-driver@https://registry.npmjs.org/appium-android-driver/-/appium-android-driver-2.4.1.tgz",
        "scope": null,
        "escapedName": "appium-android-driver",
        "name": "appium-android-driver",
        "rawSpec": "https://registry.npmjs.org/appium-android-driver/-/appium-android-driver-2.4.1.tgz",
        "spec": "https://registry.npmjs.org/appium-android-driver/-/appium-android-driver-2.4.1.tgz",
        "type": "remote"
      },
      "/Users/saxenan3/myprojects/uiAutomation/mytest_project/node_modules/appium"
    ]
  ],
  "_from": "appium-android-driver@https://registry.npmjs.org/appium-android-driver/-/appium-android-driver-2.4.1.tgz",
  "_id": "appium-android-driver@2.4.1",
  "_inCache": true,
  "_location": "/appium/appium-android-driver",
  "_phantomChildren": {
    "amdefine": "1.0.1"
  },
  "_requested": {
    "raw": "appium-android-driver@https://registry.npmjs.org/appium-android-driver/-/appium-android-driver-2.4.1.tgz",
    "scope": null,
    "escapedName": "appium-android-driver",
    "name": "appium-android-driver",
    "rawSpec": "https://registry.npmjs.org/appium-android-driver/-/appium-android-driver-2.4.1.tgz",
    "spec": "https://registry.npmjs.org/appium-android-driver/-/appium-android-driver-2.4.1.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/appium",
    "/appium/appium-espresso-driver",
    "/appium/appium-selendroid-driver",
    "/appium/appium-uiautomator2-driver",
    "/appium/appium-youiengine-driver"
  ],
  "_resolved": "https://registry.npmjs.org/appium-android-driver/-/appium-android-driver-2.4.1.tgz",
  "_shasum": "3c8edde9c1f22fe5dad173180f1f3b68c46e7dc7",
  "_shrinkwrap": null,
  "_spec": "appium-android-driver@https://registry.npmjs.org/appium-android-driver/-/appium-android-driver-2.4.1.tgz",
  "_where": "/Users/saxenan3/myprojects/uiAutomation/mytest_project/node_modules/appium",
  "author": {
    "name": "appium"
  },
  "bin": {},
  "bugs": {
    "url": "https://github.com/appium/appium-android-driver/issues"
  },
  "dependencies": {
    "appium-adb": "^6.3.0",
    "appium-android-bootstrap": "^2.7.5",
    "appium-android-ime": "^2.0.0",
    "appium-base-driver": "^2.26.0",
    "appium-chromedriver": "^3.5.0",
    "appium-support": "^2.13.0",
    "appium-unlock": "^2.0.0",
    "asyncbox": "^2.0.4",
    "babel-runtime": "=5.8.24",
    "bluebird": "^3.4.7",
    "io.appium.settings": "^2.4.0",
    "jimp": "^0.2.24",
    "lodash": "^4.17.4",
    "portfinder": "^1.0.6",
    "shared-preferences-builder": "^0.0.4",
    "source-map-support": "^0.3.1",
    "teen_process": "^1.9.0",
    "temp": "^0.8.3",
    "ws": "^5.0.0",
    "yargs": "^6.6.0"
  },
  "description": "Android UiAutomator and Chrome support for Appium",
  "devDependencies": {
    "android-apidemos": "^2.1.1",
    "appium-gulp-plugins": "^2.2.0",
    "appium-test-support": "^0.4.0",
    "babel-eslint": "^7.1.1",
    "chai": "^3.0.0",
    "chai-as-promised": "^6.0.0",
    "eslint": "^3.10.2",
    "eslint-config-appium": "^2.1.0",
    "eslint-plugin-babel": "^3.3.0",
    "eslint-plugin-import": "^2.2.0",
    "eslint-plugin-mocha": "^4.7.0",
    "eslint-plugin-promise": "^3.3.1",
    "gulp": "^3.9.1",
    "mocha": "^3.5.0",
    "mock-fs": "^4.2.0",
    "pre-commit": "^1.1.3",
    "sinon": "^1.16.1",
    "unzip": "^0.1.11",
    "xmldom": "^0.1.19",
    "xpath": "^0.0.22"
  },
  "directories": {
    "lib": "lib"
  },
  "engines": [
    "node"
  ],
  "homepage": "https://github.com/appium/appium-android-driver#readme",
  "keywords": [
    "appium",
    "android",
    "testing",
    "automation",
    "mobile",
    "mobile testing"
  ],
  "license": "Apache-2.0",
  "main": "./build/index.js",
  "name": "appium-android-driver",
  "optionalDependencies": {},
  "pre-commit": [
    "precommit-msg",
    "precommit-test"
  ],
  "readme": "[![NPM version](http://img.shields.io/npm/v/appium-android-driver.svg)](https://npmjs.org/package/appium-android-driver)\n[![Downloads](http://img.shields.io/npm/dm/appium-android-driver.svg)](https://npmjs.org/package/appium-android-driver)\n[![Dependency Status](https://david-dm.org/appium/appium-android-driver.svg)](https://david-dm.org/appium/appium-android-driver)\n[![devDependency Status](https://david-dm.org/appium/appium-android-driver/dev-status.svg)](https://david-dm.org/appium/appium-android-driver#info=devDependencies)\n\n[![Build Status](https://travis-ci.org/appium/appium-android-driver.svg?branch=master)](https://travis-ci.org/appium/appium-android-driver)\n[![Coverage Status](https://coveralls.io/repos/appium/appium-android-driver/badge.svg?branch=master)](https://coveralls.io/r/appium/appium-android-driver?branch=master)\n\n# Appium Android Driver\n\nAppium Android Driver is a test automation tool for Android devices. Appium Android Driver automates native, hybrid and mobile web apps, tested on simulators, emulators and real devices. Appium Android Driver is part of the [Appium](https://github.com/appium/appium) mobile test automation tool.\n\n*Note*: Issue tracking for this repo has been disabled. Please use the [main Appium issue tracker](https://github.com/appium/appium/issues) instead.\n\n## Installation\n```\nnpm install appium-android-driver\n```\n\n## Usage\nImport Android Driver, set [desired capabilities](http://appium.io/slate/en/1.5/?javascript#appium-server-capabilities) and create a session:\n\n```\nimport { AndroidDriver } from `appium-android-driver`\n\nlet defaultCaps = {\n  app: 'path/to/your.apk',\n  deviceName: 'Android',\n  platformName: 'Android'\n};\n\nlet driver = new AndroidDriver();\nawait driver.createSession(defaultCaps);\n```\nRun commands:\n```\nawait driver.setOrientation('LANDSCAPE');\nconsole.log(await driver.getOrientation()); // -> 'LANDSCAPE'\n```\n\n### Specifying and selecting devices/emulators\nThe driver will attempt to connect to a device/emulator based on these properties in the `desiredCapabilities` object:\n\n1. `avd`: Launch or connect to the emulator with the given name.\n1. `udid`: Connect to the device with the given UDID.\n1. `platformVersion`: Connect to the first device or active emulator whose OS begins with the desired OS. This means `platformVersion: 5` will take the first `5x` device from the output of `adb devices` if there are multiple available.\n\nIf none of these capabilities are given, the driver will connect to the first device or active emulator returned from the output of `adb devices`.\n\nIf more than one of these capabilities are given, the driver will only use first the capability in the order above. That is, `avd` takes priority over `udid`, which takes priority over `platformVersion`.\n\n## Commands\n|          Command           |\n|----------------------------|\n| `activateIMEEngine`        |\n| `availableIMEEngines`      |\n| `back`                     |\n| `background`               |\n| `clear`                    |\n| `click`                    |\n| `complexTap`               |\n| `deactivateIMEEngine`      |\n| `defaultContextName`       |\n| `defaultWebviewName`       |\n| `doKey`                    |\n| `doTouchAction`            |\n| `doTouchDrag`              |\n| `drag`                     |\n| `elementDisplayed`         |\n| `elementEnabled`           |\n| `elementSelected`          |\n| `fakeFlick`                |\n| `fakeFlickElement`         |\n| `findElOrEls`              |\n| `fixRelease`               |\n| `flick`                    |\n| `getActiveIMEEngine`       |\n| `getAlertText`             |\n| `getAttribute`             |\n| `getContexts`              |\n| `getCurrentActivity`       |\n| `getCurrentContext`        |\n| `getDeviceTime`            |\n| `getDisplayDensity`        |\n| `getLocationInView`        |\n| `getLog`                   |\n| `getLogTypes`              |\n| `getName`                  |\n| `getNetworkConnection`     |\n| `getOrientation`           |\n| `getPageSource`            |\n| `getScreenshot`            |\n| `getSize`                  |\n| `getElementRect`           |\n| `getStrings`               |\n| `getSystemBars`            |\n| `getText`                  |\n| `getWindowSize`            |\n| `getWindowRect`            |\n| `hideKeyboard`             |\n| `installApp`               |\n| `isAppInstalled`           |\n| `isIMEActivated`           |\n| `isKeyboardShown`          |\n| `isLocked`                 |\n| `isWebContext`             |\n| `keyevent`                 |\n| `keys`                     |\n| `lock`                     |\n| `longPressKeyCode`         |\n| `onChromedriverStop`       |\n| `openNotifications`        |\n| `openSettingsActivity`     |\n| `parseTouch`               |\n| `performGesture`           |\n| `performMultiAction`       |\n| `performTouch`             |\n| `pinchClose`               |\n| `pinchOpen`                |\n| `postAcceptAlert`          |\n| `postDismissAlert`         |\n| `pressKeyCode`             |\n| `pullFile`                 |\n| `pullFolder`               |\n| `pushFile`                 |\n| `removeApp`                |\n| `replaceValue`             |\n| `reset`                    |\n| `setAlertText`             |\n| `setContext`               |\n| `setGeoLocation`           |\n| `setLocation`              |\n| `setNetworkConnection`     |\n| `setOrientation`           |\n| `setValue`                 |\n| `setUrl`                   |\n| `startActivity`            |\n| `startChromedriverProxy`   |\n| `stopChromedriverProxies`  |\n| `suspendChromedriverProxy` |\n| `swipe`                    |\n| `tap`                      |\n| `toggleData`               |\n| `toggleFlightMode`         |\n| `toggleLocationServices`   |\n| `toggleSetting`            |\n| `toggleWiFi`               |\n| `touchDown`                |\n| `touchLongClick`           |\n| `touchMove`                |\n| `touchUp`                  |\n| `unlock`                   |\n| `unlockWithHelperApp`      |\n| `unlockWithUIAutomation`   |\n| `wrapBootstrapDisconnect`  |\n| `fingerprint`              |\n| `sendSMS`                  |\n| `gsmCall`                  |\n| `gsmSignal`                |\n| `gsmVoice`                 |\n| `powerAC`                  |\n| `powerCapacity`            |\n| `networkSpeed`             |\n\n\n## API Notes\n\n`lock` behaves differently in Android than it does in iOS. In Android it does not take any arguments, and locks the screen and returns immediately.\n\n\n## Development\n\n### Transpile ES2015 code\n\n```\ngulp transpile\n```\n\n### Watch\n\n```\nnpm run watch\n```\n\n### Test\n\n```\nnpm test\n```\n\nSome tests need particular emulators. Currently they are twofold:\n1. API level 25: either set `ANDROID_25_AVD` environment variable to the name of\n  avd, or defaults to `\"Nexus_5_API_25\"`. If neither exist, the tests are skipped.\n2. API level 24: either set `ANDROID_24_NO_GMS_AVD` environment variable to the name of\n  avd, or defaults to `\"Nexus_5_API_24\"`. If neither exist, the tests are skipped.\n\nSome tests also also need a specific version of Chromedriver (specifically, `2.20`),\nwhich is available in the `test/assets` folder, or can be specified with the\n`CHROME_2_20_EXECUTABLE` environment variable.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/appium/appium-android-driver.git"
  },
  "scripts": {
    "build": "gulp transpile",
    "coverage": "gulp coveralls",
    "e2e-test": "gulp e2e-test",
    "lint": "gulp eslint",
    "lint:fix": "gulp eslint --fix",
    "mocha": "mocha",
    "precommit-msg": "echo 'Pre-commit checks...' && exit 0",
    "precommit-test": "REPORTER=dot gulp once",
    "prepublish": "gulp prepublish",
    "test": "gulp once",
    "watch": "gulp watch"
  },
  "version": "2.4.1"
}
