'use strict';

var _defineProperty = require('babel-runtime/helpers/define-property')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _teen_process = require('teen_process');

var _asyncbox = require('asyncbox');

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _appiumSupport = require('appium-support');

var _appiumAndroidIme = require('appium-android-ime');

var _ioAppiumSettings = require('io.appium.settings');

var _appiumUnlock = require('appium-unlock');

var _appiumAndroidBootstrap = require('appium-android-bootstrap');

var _appiumAndroidBootstrap2 = _interopRequireDefault(_appiumAndroidBootstrap);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _appiumAdb = require('appium-adb');

var _appiumAdb2 = _interopRequireDefault(_appiumAdb);

var _unlockHelpers = require('./unlock-helpers');

var _unlockHelpers2 = _interopRequireDefault(_unlockHelpers);

var PACKAGE_INSTALL_TIMEOUT = 90000; // milliseconds
var CHROME_BROWSERS = ["Chrome", "Chromium", "Chromebeta", "Browser", "chrome", "chromium", "chromebeta", "browser", "chromium-browser", "chromium-webview"];
var SETTINGS_HELPER_PKG_ID = 'io.appium.settings';
var SETTINGS_HELPER_PKG_ACTIVITY = ".Settings";
var UNLOCK_HELPER_PKG_ID = 'io.appium.unlock';
var UNLOCK_HELPER_PKG_ACTIVITY = ".Unlock";

var helpers = {};

helpers.parseJavaVersion = function (stderr) {
  var lines = stderr.split("\n");
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = _getIterator(lines), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var line = _step.value;

      if (new RegExp(/(java|openjdk) version/).test(line)) {
        return line.split(" ")[2].replace(/"/g, '');
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator['return']) {
        _iterator['return']();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return null;
};

helpers.getJavaVersion = function callee$0$0() {
  var _ref, stderr, javaVer;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug("Getting Java version");

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('java', ['-version']));

      case 3:
        _ref = context$1$0.sent;
        stderr = _ref.stderr;
        javaVer = helpers.parseJavaVersion(stderr);

        if (!(javaVer === null)) {
          context$1$0.next = 8;
          break;
        }

        throw new Error("Could not get the Java version. Is Java installed?");

      case 8:
        _logger2['default'].info('Java version is: ' + javaVer);
        return context$1$0.abrupt('return', javaVer);

      case 10:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.prepareEmulator = function callee$0$0(adb, opts) {
  var avd, avdArgs, language, locale, avdLaunchTimeout, avdReadyTimeout, avdName, runningAVD;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        avd = opts.avd;
        avdArgs = opts.avdArgs;
        language = opts.language;
        locale = opts.locale;
        avdLaunchTimeout = opts.avdLaunchTimeout;
        avdReadyTimeout = opts.avdReadyTimeout;

        if (avd) {
          context$1$0.next = 8;
          break;
        }

        throw new Error("Cannot launch AVD without AVD name");

      case 8:
        avdName = avd.replace('@', '');
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(adb.getRunningAVD(avdName));

      case 11:
        runningAVD = context$1$0.sent;

        if (!(runningAVD !== null)) {
          context$1$0.next = 21;
          break;
        }

        if (!(avdArgs && avdArgs.toLowerCase().indexOf("-wipe-data") > -1)) {
          context$1$0.next = 19;
          break;
        }

        _logger2['default'].debug('Killing \'' + avdName + '\' because it needs to be wiped at start.');
        context$1$0.next = 17;
        return _regeneratorRuntime.awrap(adb.killEmulator(avdName));

      case 17:
        context$1$0.next = 21;
        break;

      case 19:
        _logger2['default'].debug("Not launching AVD because it is already running.");
        return context$1$0.abrupt('return');

      case 21:
        avdArgs = this.prepareAVDArgs(opts, adb, avdArgs);
        context$1$0.next = 24;
        return _regeneratorRuntime.awrap(adb.launchAVD(avd, avdArgs, language, locale, avdLaunchTimeout, avdReadyTimeout));

      case 24:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.prepareAVDArgs = function (opts, adb, avdArgs) {
  var args = avdArgs ? [avdArgs] : [];
  if (!_lodash2['default'].isUndefined(opts.networkSpeed)) {
    var networkSpeed = this.ensureNetworkSpeed(adb, opts.networkSpeed);
    args.push('-netspeed', networkSpeed);
  }
  if (opts.isHeadless) {
    args.push('-no-window');
  }
  return args.join(' ');
};

helpers.ensureNetworkSpeed = function (adb, networkSpeed) {
  if (_lodash2['default'].values(adb.NETWORK_SPEED).indexOf(networkSpeed) !== -1) {
    return networkSpeed;
  }
  _logger2['default'].warn('Wrong network speed param ' + networkSpeed + ', using default: full. Supported values: ' + _lodash2['default'].values(adb.NETWORK_SPEED));
  return adb.NETWORK_SPEED.FULL;
};

helpers.ensureDeviceLocale = function callee$0$0(adb, language, country) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(!_lodash2['default'].isString(language) && !_lodash2['default'].isString(country))) {
          context$1$0.next = 4;
          break;
        }

        _logger2['default'].warn('setDeviceLanguageCountry requires language or country.');
        _logger2['default'].warn('Got language: \'' + language + '\' and country: \'' + country + '\'');
        return context$1$0.abrupt('return');

      case 4:
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(adb.setDeviceLanguageCountry(language, country));

      case 6:
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(adb.ensureCurrentLocale(language, country));

      case 8:
        if (context$1$0.sent) {
          context$1$0.next = 10;
          break;
        }

        throw new Error('Failed to set language: ' + language + ' and country: ' + country);

      case 10:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.getDeviceInfoFromCaps = function callee$0$0() {
  var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  var adb, udid, emPort, devices, availDevicesStr, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, device, deviceOS;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_appiumAdb2['default'].createADB({
          javaVersion: opts.javaVersion,
          adbPort: opts.adbPort,
          remoteAdbHost: opts.remoteAdbHost,
          clearDeviceLogsOnStart: opts.clearDeviceLogsOnStart
        }));

      case 2:
        adb = context$1$0.sent;
        udid = opts.udid;
        emPort = null;

        if (!opts.avd) {
          context$1$0.next = 12;
          break;
        }

        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(helpers.prepareEmulator(adb, opts));

      case 8:
        udid = adb.curDeviceId;
        emPort = adb.emulatorPort;
        context$1$0.next = 64;
        break;

      case 12:
        // no avd given. lets try whatever's plugged in devices/emulators
        _logger2['default'].info("Retrieving device list");
        context$1$0.next = 15;
        return _regeneratorRuntime.awrap(adb.getDevicesWithRetry());

      case 15:
        devices = context$1$0.sent;

        if (!udid) {
          context$1$0.next = 21;
          break;
        }

        if (!_lodash2['default'].includes(_lodash2['default'].map(devices, 'udid'), udid)) {
          _logger2['default'].errorAndThrow('Device ' + udid + ' was not in the list ' + 'of connected devices');
        }
        emPort = adb.getPortFromEmulatorString(udid);
        context$1$0.next = 64;
        break;

      case 21:
        if (!opts.platformVersion) {
          context$1$0.next = 62;
          break;
        }

        opts.platformVersion = ('' + opts.platformVersion).trim();

        // a platform version was given. lets try to find a device with the same os
        _logger2['default'].info('Looking for a device with Android \'' + opts.platformVersion + '\'');

        // in case we fail to find something, give the user a useful log that has
        // the device udids and os versions so they know what's available
        availDevicesStr = [];
        _iteratorNormalCompletion2 = true;
        _didIteratorError2 = false;
        _iteratorError2 = undefined;
        context$1$0.prev = 28;
        _iterator2 = _getIterator(devices);

      case 30:
        if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
          context$1$0.next = 44;
          break;
        }

        device = _step2.value;
        context$1$0.next = 34;
        return _regeneratorRuntime.awrap(adb.setDeviceId(device.udid));

      case 34:
        context$1$0.next = 36;
        return _regeneratorRuntime.awrap(adb.getPlatformVersion());

      case 36:
        deviceOS = context$1$0.sent;

        // build up our info string of available devices as we iterate
        availDevicesStr.push(device.udid + ' (' + deviceOS + ')');

        // we do a begins with check for implied wildcard matching
        // eg: 4 matches 4.1, 4.0, 4.1.3-samsung, etc

        if (!(deviceOS.indexOf(opts.platformVersion) === 0)) {
          context$1$0.next = 41;
          break;
        }

        udid = device.udid;
        return context$1$0.abrupt('break', 44);

      case 41:
        _iteratorNormalCompletion2 = true;
        context$1$0.next = 30;
        break;

      case 44:
        context$1$0.next = 50;
        break;

      case 46:
        context$1$0.prev = 46;
        context$1$0.t0 = context$1$0['catch'](28);
        _didIteratorError2 = true;
        _iteratorError2 = context$1$0.t0;

      case 50:
        context$1$0.prev = 50;
        context$1$0.prev = 51;

        if (!_iteratorNormalCompletion2 && _iterator2['return']) {
          _iterator2['return']();
        }

      case 53:
        context$1$0.prev = 53;

        if (!_didIteratorError2) {
          context$1$0.next = 56;
          break;
        }

        throw _iteratorError2;

      case 56:
        return context$1$0.finish(53);

      case 57:
        return context$1$0.finish(50);

      case 58:

        // we couldn't find anything! quit
        if (!udid) {
          _logger2['default'].errorAndThrow('Unable to find an active device or emulator ' + ('with OS ' + opts.platformVersion + '. The following ') + 'are available: ' + availDevicesStr.join(', '));
        }

        emPort = adb.getPortFromEmulatorString(udid);
        context$1$0.next = 64;
        break;

      case 62:
        // a udid was not given, grab the first device we see
        udid = devices[0].udid;
        emPort = adb.getPortFromEmulatorString(udid);

      case 64:

        _logger2['default'].info('Using device: ' + udid);
        return context$1$0.abrupt('return', { udid: udid, emPort: emPort });

      case 66:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[28, 46, 50, 58], [51,, 53, 57]]);
};

// returns a new adb instance with deviceId set
helpers.createADB = function callee$0$0(javaVersion, udid, emPort, adbPort, suppressKillServer, remoteAdbHost, clearDeviceLogsOnStart) {
  var adb;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_appiumAdb2['default'].createADB({
          javaVersion: javaVersion,
          adbPort: adbPort,
          suppressKillServer: suppressKillServer,
          remoteAdbHost: remoteAdbHost,
          clearDeviceLogsOnStart: clearDeviceLogsOnStart
        }));

      case 2:
        adb = context$1$0.sent;

        adb.setDeviceId(udid);
        if (emPort) {
          adb.setEmulatorPort(emPort);
        }

        return context$1$0.abrupt('return', adb);

      case 6:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.getLaunchInfo = function callee$0$0(adb, opts) {
  var app, appPackage, appActivity, appWaitPackage, appWaitActivity, _ref2, apkPackage, apkActivity;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        app = opts.app;
        appPackage = opts.appPackage;
        appActivity = opts.appActivity;
        appWaitPackage = opts.appWaitPackage;
        appWaitActivity = opts.appWaitActivity;

        if (app) {
          context$1$0.next = 8;
          break;
        }

        _logger2['default'].warn("No app sent in, not parsing package/activity");
        return context$1$0.abrupt('return');

      case 8:
        if (!(appPackage && appActivity)) {
          context$1$0.next = 10;
          break;
        }

        return context$1$0.abrupt('return');

      case 10:

        _logger2['default'].debug("Parsing package and activity from app manifest");
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap(adb.packageAndLaunchActivityFromManifest(app));

      case 13:
        _ref2 = context$1$0.sent;
        apkPackage = _ref2.apkPackage;
        apkActivity = _ref2.apkActivity;

        if (apkPackage && !appPackage) {
          appPackage = apkPackage;
        }
        if (!appWaitPackage) {
          appWaitPackage = appPackage;
        }
        if (apkActivity && !appActivity) {
          appActivity = apkActivity;
        }
        if (!appWaitActivity) {
          appWaitActivity = appActivity;
        }
        _logger2['default'].debug('Parsed package and activity are: ' + apkPackage + '/' + apkActivity);
        return context$1$0.abrupt('return', { appPackage: appPackage, appWaitPackage: appWaitPackage, appActivity: appActivity, appWaitActivity: appWaitActivity });

      case 22:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.resetApp = function callee$0$0(adb) {
  var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var app, appPackage, fastReset, fullReset, _opts$androidInstallTimeout, androidInstallTimeout, autoGrantPermissions, isInstalled, output;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        app = opts.app;
        appPackage = opts.appPackage;
        fastReset = opts.fastReset;
        fullReset = opts.fullReset;
        _opts$androidInstallTimeout = opts.androidInstallTimeout;
        androidInstallTimeout = _opts$androidInstallTimeout === undefined ? PACKAGE_INSTALL_TIMEOUT : _opts$androidInstallTimeout;
        autoGrantPermissions = opts.autoGrantPermissions;

        if (appPackage) {
          context$1$0.next = 9;
          break;
        }

        throw new Error("'appPackage' option is required");

      case 9:
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(adb.isAppInstalled(appPackage));

      case 11:
        isInstalled = context$1$0.sent;

        if (!isInstalled) {
          context$1$0.next = 37;
          break;
        }

        context$1$0.prev = 13;
        context$1$0.next = 16;
        return _regeneratorRuntime.awrap(adb.forceStop(appPackage));

      case 16:
        context$1$0.next = 20;
        break;

      case 18:
        context$1$0.prev = 18;
        context$1$0.t0 = context$1$0['catch'](13);

      case 20:
        if (!(!fullReset && fastReset)) {
          context$1$0.next = 37;
          break;
        }

        context$1$0.next = 23;
        return _regeneratorRuntime.awrap(adb.clear(appPackage));

      case 23:
        output = context$1$0.sent;

        if (!(_lodash2['default'].isString(output) && output.toLowerCase().includes('failed'))) {
          context$1$0.next = 26;
          break;
        }

        throw new Error('Cannot clear the application data of \'' + appPackage + '\'. Original error: ' + output);

      case 26:
        if (!autoGrantPermissions) {
          context$1$0.next = 35;
          break;
        }

        context$1$0.prev = 27;
        context$1$0.next = 30;
        return _regeneratorRuntime.awrap(adb.grantAllPermissions(appPackage));

      case 30:
        context$1$0.next = 35;
        break;

      case 32:
        context$1$0.prev = 32;
        context$1$0.t1 = context$1$0['catch'](27);

        _logger2['default'].error('Unable to grant permissions requested. Original error: ' + context$1$0.t1.message);

      case 35:
        _logger2['default'].debug('Performed fast reset on the installed \'' + appPackage + '\' application (stop and clear)');
        return context$1$0.abrupt('return');

      case 37:
        if (app) {
          context$1$0.next = 39;
          break;
        }

        throw new Error("'app' option is required for reinstall");

      case 39:

        _logger2['default'].debug('Running full reset on \'' + appPackage + '\' (reinstall)');

        if (!isInstalled) {
          context$1$0.next = 43;
          break;
        }

        context$1$0.next = 43;
        return _regeneratorRuntime.awrap(adb.uninstallApk(appPackage));

      case 43:
        context$1$0.next = 45;
        return _regeneratorRuntime.awrap(adb.install(app, {
          grantPermissions: autoGrantPermissions,
          timeout: androidInstallTimeout
        }));

      case 45:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[13, 18], [27, 32]]);
};

helpers.installApk = function callee$0$0(adb) {
  var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var app, appPackage, fastReset, fullReset, _opts$androidInstallTimeout2, androidInstallTimeout, autoGrantPermissions, shouldPerformFastReset;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        app = opts.app;
        appPackage = opts.appPackage;
        fastReset = opts.fastReset;
        fullReset = opts.fullReset;
        _opts$androidInstallTimeout2 = opts.androidInstallTimeout;
        androidInstallTimeout = _opts$androidInstallTimeout2 === undefined ? PACKAGE_INSTALL_TIMEOUT : _opts$androidInstallTimeout2;
        autoGrantPermissions = opts.autoGrantPermissions;

        if (!(!app || !appPackage)) {
          context$1$0.next = 9;
          break;
        }

        throw new Error("'app' and 'appPackage' options are required");

      case 9:
        if (!fullReset) {
          context$1$0.next = 13;
          break;
        }

        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(this.resetApp(adb, opts));

      case 12:
        return context$1$0.abrupt('return');

      case 13:
        context$1$0.t0 = fastReset;

        if (!context$1$0.t0) {
          context$1$0.next = 18;
          break;
        }

        context$1$0.next = 17;
        return _regeneratorRuntime.awrap(adb.isAppInstalled(appPackage));

      case 17:
        context$1$0.t0 = context$1$0.sent;

      case 18:
        shouldPerformFastReset = context$1$0.t0;
        context$1$0.next = 21;
        return _regeneratorRuntime.awrap(adb.installOrUpgrade(app, appPackage, {
          grantPermissions: autoGrantPermissions,
          timeout: androidInstallTimeout
        }));

      case 21:
        if (!shouldPerformFastReset) {
          context$1$0.next = 25;
          break;
        }

        _logger2['default'].info('Performing fast reset on \'' + appPackage + '\'');
        context$1$0.next = 25;
        return _regeneratorRuntime.awrap(this.resetApp(adb, opts));

      case 25:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Installs an array of apks
 * @param {ADB} adb Instance of Appium ADB object
 * @param {Object} opts Opts defined in driver.js
 */
helpers.installOtherApks = function callee$0$0(otherApps, adb, opts) {
  var _opts$androidInstallTimeout3, androidInstallTimeout, autoGrantPermissions;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _opts$androidInstallTimeout3 = opts.androidInstallTimeout;
        androidInstallTimeout = _opts$androidInstallTimeout3 === undefined ? PACKAGE_INSTALL_TIMEOUT : _opts$androidInstallTimeout3;
        autoGrantPermissions = opts.autoGrantPermissions;
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(_bluebird2['default'].all(otherApps.map(function (otherApp) {
          _logger2['default'].debug('Installing app: ' + otherApp);
          return adb.installOrUpgrade(otherApp, null, {
            grantPermissions: autoGrantPermissions,
            timeout: androidInstallTimeout
          });
        })));

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.initUnicodeKeyboard = function callee$0$0(adb) {
  var defaultIME, appiumIME;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Enabling Unicode keyboard support');
        _logger2['default'].debug("Pushing unicode ime to device...");
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(adb.install(_appiumAndroidIme.path, { replace: false }));

      case 4:
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(adb.defaultIME());

      case 6:
        defaultIME = context$1$0.sent;

        _logger2['default'].debug('Unsetting previous IME ' + defaultIME);
        appiumIME = 'io.appium.android.ime/.UnicodeIME';

        _logger2['default'].debug('Setting IME to \'' + appiumIME + '\'');
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(adb.enableIME(appiumIME));

      case 12:
        context$1$0.next = 14;
        return _regeneratorRuntime.awrap(adb.setIME(appiumIME));

      case 14:
        return context$1$0.abrupt('return', defaultIME);

      case 15:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.setMockLocationApp = function callee$0$0(adb, app) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(adb.getApiLevel());

      case 3:
        context$1$0.t0 = context$1$0.sent;

        if (!(context$1$0.t0 < 23)) {
          context$1$0.next = 9;
          break;
        }

        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(adb.shell(['settings', 'put', 'secure', 'mock_location', '1']));

      case 7:
        context$1$0.next = 11;
        break;

      case 9:
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(adb.shell(['appops', 'set', app, 'android:mock_location', 'allow']));

      case 11:
        context$1$0.next = 16;
        break;

      case 13:
        context$1$0.prev = 13;
        context$1$0.t1 = context$1$0['catch'](0);

        _logger2['default'].warn('Unable to set mock location for app \'' + app + '\': ' + context$1$0.t1.message);

      case 16:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 13]]);
};

helpers.installHelperApp = function callee$0$0(adb, apkPath, packageId, appName) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(adb.installOrUpgrade(apkPath, packageId, { grantPermissions: true }));

      case 3:
        context$1$0.next = 8;
        break;

      case 5:
        context$1$0.prev = 5;
        context$1$0.t0 = context$1$0['catch'](0);

        _logger2['default'].warn('Ignored error while installing Appium ' + appName + ' helper: ' + ('\'' + context$1$0.t0.message + '\'. Manually uninstalling the application ') + ('with package id \'' + packageId + '\' may help. Expect some Appium ') + 'features may not work as expected unless this problem is ' + 'fixed.');

      case 8:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 5]]);
};

helpers.pushSettingsApp = function callee$0$0(adb) {
  var throwError = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug("Pushing settings apk to device...");

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(helpers.installHelperApp(adb, _ioAppiumSettings.path, SETTINGS_HELPER_PKG_ID, 'Settings'));

      case 3:
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(adb.processExists(SETTINGS_HELPER_PKG_ID));

      case 5:
        if (!context$1$0.sent) {
          context$1$0.next = 8;
          break;
        }

        _logger2['default'].debug(SETTINGS_HELPER_PKG_ID + ' is already running. ' + 'There is no need to reset its permissions.');
        return context$1$0.abrupt('return');

      case 8:
        context$1$0.prev = 8;
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(adb.startApp({
          pkg: SETTINGS_HELPER_PKG_ID,
          activity: SETTINGS_HELPER_PKG_ACTIVITY,
          action: "android.intent.action.MAIN",
          category: "android.intent.category.LAUNCHER",
          flags: "0x10200000",
          stopApp: false
        }));

      case 11:
        context$1$0.next = 18;
        break;

      case 13:
        context$1$0.prev = 13;
        context$1$0.t0 = context$1$0['catch'](8);

        _logger2['default'].warn('Failed to launch settings app: ' + context$1$0.t0.message);

        if (!throwError) {
          context$1$0.next = 18;
          break;
        }

        throw context$1$0.t0;

      case 18:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[8, 13]]);
};

helpers.pushUnlock = function callee$0$0(adb) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug("Pushing unlock helper app to device...");

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(helpers.installHelperApp(adb, _appiumUnlock.path, UNLOCK_HELPER_PKG_ID, 'Unlock'));

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Extracts string.xml and converts it to string.json and pushes
 * it to /data/local/tmp/string.json on for use of bootstrap
 * If app is not present to extract string.xml it deletes remote strings.json
 * If app does not have strings.xml we push an empty json object to remote
 *
 * @param {?string} language - Language abbreviation, for example 'fr'. The default language
 * is used if this argument is not defined.
 * @param {Object} adb - The adb mofdule instance.
 * @param {Object} opts - Driver options dictionary.
 * @returns {Object} The dictionary, where string resourtces identifiers are keys
 * along with their corresponding values for the given language or an empty object
 * if no matching resources were extracted.
 */
helpers.pushStrings = function callee$0$0(language, adb, opts) {
  var remoteDir, stringsJson, remoteFile, stringsTmpDir, _ref3, apkStrings, localPath;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        remoteDir = '/data/local/tmp';
        stringsJson = 'strings.json';
        remoteFile = remoteDir + '/' + stringsJson;
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(adb.rimraf(remoteFile));

      case 5:
        context$1$0.t0 = _lodash2['default'].isEmpty(opts.appPackage);

        if (context$1$0.t0) {
          context$1$0.next = 10;
          break;
        }

        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(opts.app));

      case 9:
        context$1$0.t0 = !context$1$0.sent;

      case 10:
        if (!context$1$0.t0) {
          context$1$0.next = 12;
          break;
        }

        return context$1$0.abrupt('return', {});

      case 12:
        stringsTmpDir = _path2['default'].resolve(opts.tmpDir, opts.appPackage);
        context$1$0.prev = 13;

        _logger2['default'].debug('Extracting strings from apk', opts.app, language, stringsTmpDir);
        context$1$0.next = 17;
        return _regeneratorRuntime.awrap(adb.extractStringsFromApk(opts.app, language, stringsTmpDir));

      case 17:
        _ref3 = context$1$0.sent;
        apkStrings = _ref3.apkStrings;
        localPath = _ref3.localPath;
        context$1$0.next = 22;
        return _regeneratorRuntime.awrap(adb.push(localPath, remoteDir));

      case 22:
        return context$1$0.abrupt('return', apkStrings);

      case 25:
        context$1$0.prev = 25;
        context$1$0.t1 = context$1$0['catch'](13);

        _logger2['default'].warn('Could not get strings, continuing anyway. Original error: ' + context$1$0.t1.message);
        context$1$0.next = 30;
        return _regeneratorRuntime.awrap(adb.shell('echo', ['\'{}\' > ' + remoteFile]));

      case 30:
        context$1$0.prev = 30;
        context$1$0.next = 33;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(stringsTmpDir));

      case 33:
        return context$1$0.finish(30);

      case 34:
        return context$1$0.abrupt('return', {});

      case 35:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[13, 25, 30, 34]]);
};

helpers.unlockWithUIAutomation = function callee$0$0(driver, adb, unlockCapabilities) {
  var _PIN_UNLOCK$PASSWORD_UNLOCK$PATTERN_UNLOCK$FINGERPRINT_UNLOCK$unlockType;

  var unlockType, unlockKey, unlockMethod;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        unlockType = unlockCapabilities.unlockType;

        if (_unlockHelpers2['default'].isValidUnlockType(unlockType)) {
          context$1$0.next = 3;
          break;
        }

        throw new Error('Invalid unlock type ' + unlockType);

      case 3:
        unlockKey = unlockCapabilities.unlockKey;

        if (_unlockHelpers2['default'].isValidKey(unlockType, unlockKey)) {
          context$1$0.next = 6;
          break;
        }

        throw new Error('Missing unlockKey ' + unlockKey + ' capability for unlockType ' + unlockType);

      case 6:
        unlockMethod = (_PIN_UNLOCK$PASSWORD_UNLOCK$PATTERN_UNLOCK$FINGERPRINT_UNLOCK$unlockType = {}, _defineProperty(_PIN_UNLOCK$PASSWORD_UNLOCK$PATTERN_UNLOCK$FINGERPRINT_UNLOCK$unlockType, _unlockHelpers.PIN_UNLOCK, _unlockHelpers2['default'].pinUnlock), _defineProperty(_PIN_UNLOCK$PASSWORD_UNLOCK$PATTERN_UNLOCK$FINGERPRINT_UNLOCK$unlockType, _unlockHelpers.PASSWORD_UNLOCK, _unlockHelpers2['default'].passwordUnlock), _defineProperty(_PIN_UNLOCK$PASSWORD_UNLOCK$PATTERN_UNLOCK$FINGERPRINT_UNLOCK$unlockType, _unlockHelpers.PATTERN_UNLOCK, _unlockHelpers2['default'].patternUnlock), _defineProperty(_PIN_UNLOCK$PASSWORD_UNLOCK$PATTERN_UNLOCK$FINGERPRINT_UNLOCK$unlockType, _unlockHelpers.FINGERPRINT_UNLOCK, _unlockHelpers2['default'].fingerprintUnlock), _PIN_UNLOCK$PASSWORD_UNLOCK$PATTERN_UNLOCK$FINGERPRINT_UNLOCK$unlockType)[unlockType];
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(unlockMethod(adb, driver, unlockCapabilities));

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.unlockWithHelperApp = function callee$0$0(adb) {
  var startOpts;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].info("Unlocking screen");
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(adb.forceStop(UNLOCK_HELPER_PKG_ID));

      case 3:
        startOpts = {
          pkg: UNLOCK_HELPER_PKG_ID,
          activity: UNLOCK_HELPER_PKG_ACTIVITY,
          action: "android.intent.action.MAIN",
          category: "android.intent.category.LAUNCHER",
          flags: "0x10200000",
          stopApp: false
        };
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(adb.startApp(startOpts));

      case 6:
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(adb.startApp(startOpts));

      case 8:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.unlock = function callee$0$0(driver, adb, capabilities) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(adb.isScreenLocked());

      case 2:
        if (context$1$0.sent) {
          context$1$0.next = 5;
          break;
        }

        _logger2['default'].info("Screen already unlocked, doing nothing");
        return context$1$0.abrupt('return');

      case 5:
        if (!_lodash2['default'].isUndefined(capabilities.unlockType)) {
          context$1$0.next = 10;
          break;
        }

        context$1$0.next = 8;
        return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(10, 1000, function callee$1$0() {
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                _logger2['default'].debug("Screen is locked, trying to unlock");
                // check if it worked, twice
                _logger2['default'].warn("Using app unlock, this is going to be deprecated!");
                context$2$0.next = 4;
                return _regeneratorRuntime.awrap(helpers.unlockWithHelperApp(adb));

              case 4:
                context$2$0.next = 6;
                return _regeneratorRuntime.awrap(helpers.verifyUnlock(adb));

              case 6:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        }));

      case 8:
        context$1$0.next = 14;
        break;

      case 10:
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(helpers.unlockWithUIAutomation(driver, adb, { unlockType: capabilities.unlockType, unlockKey: capabilities.unlockKey }));

      case 12:
        context$1$0.next = 14;
        return _regeneratorRuntime.awrap(helpers.verifyUnlock(adb));

      case 14:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.verifyUnlock = function callee$0$0(adb) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this2 = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(2, 1000, function callee$1$0() {
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(adb.isScreenLocked());

              case 2:
                if (!context$2$0.sent) {
                  context$2$0.next = 4;
                  break;
                }

                throw new Error("Screen did not unlock successfully, retrying");

              case 4:
                _logger2['default'].debug("Screen unlocked successfully");

              case 5:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this2);
        }));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.initDevice = function callee$0$0(adb, opts) {
  var defaultIME;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(adb.waitForDevice());

      case 2:
        if (opts.avd) {
          context$1$0.next = 7;
          break;
        }

        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(helpers.pushSettingsApp(adb));

      case 5:
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(helpers.setMockLocationApp(adb, SETTINGS_HELPER_PKG_ID));

      case 7:
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(helpers.ensureDeviceLocale(adb, opts.language, opts.locale));

      case 9:
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(adb.startLogcat());

      case 11:
        defaultIME = undefined;

        if (!opts.unicodeKeyboard) {
          context$1$0.next = 16;
          break;
        }

        context$1$0.next = 15;
        return _regeneratorRuntime.awrap(helpers.initUnicodeKeyboard(adb));

      case 15:
        defaultIME = context$1$0.sent;

      case 16:
        if (!_lodash2['default'].isUndefined(opts.unlockType)) {
          context$1$0.next = 19;
          break;
        }

        context$1$0.next = 19;
        return _regeneratorRuntime.awrap(helpers.pushUnlock(adb));

      case 19:
        return context$1$0.abrupt('return', defaultIME);

      case 20:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.removeNullProperties = function (obj) {
  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    for (var _iterator3 = _getIterator(_lodash2['default'].keys(obj)), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      var key = _step3.value;

      if (_lodash2['default'].isNull(obj[key]) || _lodash2['default'].isUndefined(obj[key])) {
        delete obj[key];
      }
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3['return']) {
        _iterator3['return']();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }
};

helpers.truncateDecimals = function (number, digits) {
  var multiplier = Math.pow(10, digits),
      adjustedNum = number * multiplier,
      truncatedNum = Math[adjustedNum < 0 ? 'ceil' : 'floor'](adjustedNum);

  return truncatedNum / multiplier;
};

helpers.isChromeBrowser = function (browser) {
  return _lodash2['default'].includes(CHROME_BROWSERS, browser);
};

helpers.getChromePkg = function (browser) {
  var pkg = undefined,
      activity = undefined;

  browser = browser.toLowerCase();
  if (browser === "chromium") {
    pkg = "org.chromium.chrome.shell";
    activity = ".ChromeShellActivity";
  } else if (browser === "chromebeta") {
    pkg = "com.chrome.beta";
    activity = "com.google.android.apps.chrome.Main";
  } else if (browser === "browser") {
    pkg = "com.android.browser";
    activity = "com.android.browser.BrowserActivity";
  } else if (browser === "chromium-browser") {
    pkg = "org.chromium.chrome";
    activity = "com.google.android.apps.chrome.Main";
  } else if (browser === "chromium-webview") {
    pkg = "org.chromium.webview_shell";
    activity = "org.chromium.webview_shell.WebViewBrowserActivity";
  } else {
    pkg = "com.android.chrome";
    activity = "com.google.android.apps.chrome.Main";
  }
  return { pkg: pkg, activity: activity };
};

helpers.removeAllSessionWebSocketHandlers = function callee$0$0(server, sessionId) {
  var activeHandlers, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, pathname;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(!server || !_lodash2['default'].isFunction(server.getWebSocketHandlers))) {
          context$1$0.next = 2;
          break;
        }

        return context$1$0.abrupt('return');

      case 2:
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(server.getWebSocketHandlers(sessionId));

      case 4:
        activeHandlers = context$1$0.sent;
        _iteratorNormalCompletion4 = true;
        _didIteratorError4 = false;
        _iteratorError4 = undefined;
        context$1$0.prev = 8;
        _iterator4 = _getIterator(_lodash2['default'].keys(activeHandlers));

      case 10:
        if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
          context$1$0.next = 17;
          break;
        }

        pathname = _step4.value;
        context$1$0.next = 14;
        return _regeneratorRuntime.awrap(server.removeWebSocketHandler(pathname));

      case 14:
        _iteratorNormalCompletion4 = true;
        context$1$0.next = 10;
        break;

      case 17:
        context$1$0.next = 23;
        break;

      case 19:
        context$1$0.prev = 19;
        context$1$0.t0 = context$1$0['catch'](8);
        _didIteratorError4 = true;
        _iteratorError4 = context$1$0.t0;

      case 23:
        context$1$0.prev = 23;
        context$1$0.prev = 24;

        if (!_iteratorNormalCompletion4 && _iterator4['return']) {
          _iterator4['return']();
        }

      case 26:
        context$1$0.prev = 26;

        if (!_didIteratorError4) {
          context$1$0.next = 29;
          break;
        }

        throw _iteratorError4;

      case 29:
        return context$1$0.finish(26);

      case 30:
        return context$1$0.finish(23);

      case 31:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[8, 19, 23, 31], [24,, 26, 30]]);
};

/**
 * Takes a desired capability and tries to JSON.parse it as an array,
 * and either returns the parsed array or a singleton array.
 *
 * @param {any} cap A desired capability
 */
helpers.parseArray = function (cap) {
  var parsedCaps = undefined;
  try {
    parsedCaps = JSON.parse(cap);
  } catch (ign) {}

  if (_lodash2['default'].isArray(parsedCaps)) {
    return parsedCaps;
  } else if (_lodash2['default'].isString(cap)) {
    return [cap];
  }

  throw new Error('must provide a string or JSON Array; received ' + cap);
};

helpers.bootstrap = _appiumAndroidBootstrap2['default'];
helpers.unlocker = _unlockHelpers2['default'];

exports['default'] = helpers;
exports.CHROME_BROWSERS = CHROME_BROWSERS;

// we can create a throwaway ADB instance here, so there is no dependency
// on instantiating on earlier (at this point, we have no udid)
// we can only use this ADB object for commands that would not be confused
// if multiple devices are connected

// a specific avd name was given. try to initialize with that

// udid was given, lets try to init with that device

// first try started devices/emulators

// direct adb calls to the specific device

// fullReset has priority over fastReset

// executing `shell pm clear` resets previously assigned application permissions as well

// There is no need to reset the newly installed app

// Install all of the APK's asynchronously

// get the default IME so we can return back to it later if we want

// Reinstall will stop the settings helper process anyway, so
// there is no need to continue if the application is still running

// lauch io.appium.settings app due to settings failing to be set
// if the app is not launched prior to start the session on android 7+
// see https://github.com/appium/appium/issues/8957

// clean up remote string.json if present

// then start the app twice, as once is flakey

// Leave the old unlock to avoid breaking existing tests

// pushSettingsApp required before calling ensureDeviceLocale for API Level 24+
//# sourceMappingURL=data:application/json;charset=utf8;base64,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OztrQ0FDRyxvQkFBRSxJQUFJLENBQUMsY0FBYyxDQUFDOzs7Ozs7OztBQUFsQyxnQkFBUTs7eUNBQ1gsTUFBTSxDQUFDLHNCQUFzQixDQUFDLFFBQVEsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQUVoRCxDQUFDOzs7Ozs7OztBQVFGLE9BQU8sQ0FBQyxVQUFVLEdBQUcsVUFBVSxHQUFHLEVBQUU7QUFDbEMsTUFBSSxVQUFVLFlBQUEsQ0FBQztBQUNmLE1BQUk7QUFDRixjQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztHQUM5QixDQUFDLE9BQU8sR0FBRyxFQUFFLEVBQUc7O0FBRWpCLE1BQUksb0JBQUUsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFO0FBQ3pCLFdBQU8sVUFBVSxDQUFDO0dBQ25CLE1BQU0sSUFBSSxvQkFBRSxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUU7QUFDMUIsV0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0dBQ2Q7O0FBRUQsUUFBTSxJQUFJLEtBQUssb0RBQWtELEdBQUcsQ0FBRyxDQUFDO0NBQ3pFLENBQUM7O0FBRUYsT0FBTyxDQUFDLFNBQVMsc0NBQVksQ0FBQztBQUM5QixPQUFPLENBQUMsUUFBUSw2QkFBVyxDQUFDOztxQkFFYixPQUFPO1FBQ2IsZUFBZSxHQUFmLGVBQWUiLCJmaWxlIjoibGliL2FuZHJvaWQtaGVscGVycy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IGV4ZWMgfSBmcm9tICd0ZWVuX3Byb2Nlc3MnO1xuaW1wb3J0IHsgcmV0cnlJbnRlcnZhbCB9IGZyb20gJ2FzeW5jYm94JztcbmltcG9ydCBsb2dnZXIgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHsgZnMgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgeyBwYXRoIGFzIHVuaWNvZGVJTUVQYXRoIH0gZnJvbSAnYXBwaXVtLWFuZHJvaWQtaW1lJztcbmltcG9ydCB7IHBhdGggYXMgc2V0dGluZ3NBcGtQYXRoIH0gZnJvbSAnaW8uYXBwaXVtLnNldHRpbmdzJztcbmltcG9ydCB7IHBhdGggYXMgdW5sb2NrQXBrUGF0aCB9IGZyb20gJ2FwcGl1bS11bmxvY2snO1xuaW1wb3J0IEJvb3RzdHJhcCBmcm9tICdhcHBpdW0tYW5kcm9pZC1ib290c3RyYXAnO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuXG5pbXBvcnQgQURCIGZyb20gJ2FwcGl1bS1hZGInO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyB1bmxvY2tlciwgUElOX1VOTE9DSywgUEFTU1dPUkRfVU5MT0NLLCBQQVRURVJOX1VOTE9DSywgRklOR0VSUFJJTlRfVU5MT0NLIH0gZnJvbSAnLi91bmxvY2staGVscGVycyc7XG5cblxuY29uc3QgUEFDS0FHRV9JTlNUQUxMX1RJTUVPVVQgPSA5MDAwMDsgLy8gbWlsbGlzZWNvbmRzXG5jb25zdCBDSFJPTUVfQlJPV1NFUlMgPSBbXCJDaHJvbWVcIiwgXCJDaHJvbWl1bVwiLCBcIkNocm9tZWJldGFcIiwgXCJCcm93c2VyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgXCJjaHJvbWVcIiwgXCJjaHJvbWl1bVwiLCBcImNocm9tZWJldGFcIiwgXCJicm93c2VyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgXCJjaHJvbWl1bS1icm93c2VyXCIsIFwiY2hyb21pdW0td2Vidmlld1wiXTtcbmNvbnN0IFNFVFRJTkdTX0hFTFBFUl9QS0dfSUQgPSAnaW8uYXBwaXVtLnNldHRpbmdzJztcbmNvbnN0IFNFVFRJTkdTX0hFTFBFUl9QS0dfQUNUSVZJVFkgPSBcIi5TZXR0aW5nc1wiO1xuY29uc3QgVU5MT0NLX0hFTFBFUl9QS0dfSUQgPSAnaW8uYXBwaXVtLnVubG9jayc7XG5jb25zdCBVTkxPQ0tfSEVMUEVSX1BLR19BQ1RJVklUWSA9IFwiLlVubG9ja1wiO1xuXG5sZXQgaGVscGVycyA9IHt9O1xuXG5oZWxwZXJzLnBhcnNlSmF2YVZlcnNpb24gPSBmdW5jdGlvbiAoc3RkZXJyKSB7XG4gIGxldCBsaW5lcyA9IHN0ZGVyci5zcGxpdChcIlxcblwiKTtcbiAgZm9yIChsZXQgbGluZSBvZiBsaW5lcykge1xuICAgIGlmIChuZXcgUmVnRXhwKC8oamF2YXxvcGVuamRrKSB2ZXJzaW9uLykudGVzdChsaW5lKSkge1xuICAgICAgcmV0dXJuIGxpbmUuc3BsaXQoXCIgXCIpWzJdLnJlcGxhY2UoL1wiL2csICcnKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuXG5oZWxwZXJzLmdldEphdmFWZXJzaW9uID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBsb2dnZXIuZGVidWcoXCJHZXR0aW5nIEphdmEgdmVyc2lvblwiKTtcblxuICBsZXQge3N0ZGVycn0gPSBhd2FpdCBleGVjKCdqYXZhJywgWyctdmVyc2lvbiddKTtcbiAgbGV0IGphdmFWZXIgPSBoZWxwZXJzLnBhcnNlSmF2YVZlcnNpb24oc3RkZXJyKTtcbiAgaWYgKGphdmFWZXIgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgZ2V0IHRoZSBKYXZhIHZlcnNpb24uIElzIEphdmEgaW5zdGFsbGVkP1wiKTtcbiAgfVxuICBsb2dnZXIuaW5mbyhgSmF2YSB2ZXJzaW9uIGlzOiAke2phdmFWZXJ9YCk7XG4gIHJldHVybiBqYXZhVmVyO1xufTtcblxuaGVscGVycy5wcmVwYXJlRW11bGF0b3IgPSBhc3luYyBmdW5jdGlvbiAoYWRiLCBvcHRzKSB7XG4gIGxldCB7YXZkLCBhdmRBcmdzLCBsYW5ndWFnZSwgbG9jYWxlLCBhdmRMYXVuY2hUaW1lb3V0LFxuICAgICAgIGF2ZFJlYWR5VGltZW91dH0gPSBvcHRzO1xuICBpZiAoIWF2ZCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBsYXVuY2ggQVZEIHdpdGhvdXQgQVZEIG5hbWVcIik7XG4gIH1cbiAgbGV0IGF2ZE5hbWUgPSBhdmQucmVwbGFjZSgnQCcsICcnKTtcbiAgbGV0IHJ1bm5pbmdBVkQgPSBhd2FpdCBhZGIuZ2V0UnVubmluZ0FWRChhdmROYW1lKTtcbiAgaWYgKHJ1bm5pbmdBVkQgIT09IG51bGwpIHtcbiAgICBpZiAoYXZkQXJncyAmJiBhdmRBcmdzLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihcIi13aXBlLWRhdGFcIikgPiAtMSkge1xuICAgICAgbG9nZ2VyLmRlYnVnKGBLaWxsaW5nICcke2F2ZE5hbWV9JyBiZWNhdXNlIGl0IG5lZWRzIHRvIGJlIHdpcGVkIGF0IHN0YXJ0LmApO1xuICAgICAgYXdhaXQgYWRiLmtpbGxFbXVsYXRvcihhdmROYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9nZ2VyLmRlYnVnKFwiTm90IGxhdW5jaGluZyBBVkQgYmVjYXVzZSBpdCBpcyBhbHJlYWR5IHJ1bm5pbmcuXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBhdmRBcmdzID0gdGhpcy5wcmVwYXJlQVZEQXJncyhvcHRzLCBhZGIsIGF2ZEFyZ3MpO1xuICBhd2FpdCBhZGIubGF1bmNoQVZEKGF2ZCwgYXZkQXJncywgbGFuZ3VhZ2UsIGxvY2FsZSwgYXZkTGF1bmNoVGltZW91dCxcbiAgICAgICAgICAgICAgICAgICAgICBhdmRSZWFkeVRpbWVvdXQpO1xufTtcblxuaGVscGVycy5wcmVwYXJlQVZEQXJncyA9IGZ1bmN0aW9uIChvcHRzLCBhZGIsIGF2ZEFyZ3MpIHtcbiAgbGV0IGFyZ3MgPSBhdmRBcmdzID8gW2F2ZEFyZ3NdIDogW107XG4gIGlmICghXy5pc1VuZGVmaW5lZChvcHRzLm5ldHdvcmtTcGVlZCkpIHtcbiAgICBsZXQgbmV0d29ya1NwZWVkID0gdGhpcy5lbnN1cmVOZXR3b3JrU3BlZWQoYWRiLCBvcHRzLm5ldHdvcmtTcGVlZCk7XG4gICAgYXJncy5wdXNoKCctbmV0c3BlZWQnLCBuZXR3b3JrU3BlZWQpO1xuICB9XG4gIGlmIChvcHRzLmlzSGVhZGxlc3MpIHtcbiAgICBhcmdzLnB1c2goJy1uby13aW5kb3cnKTtcbiAgfVxuICByZXR1cm4gYXJncy5qb2luKCcgJyk7XG59O1xuXG5oZWxwZXJzLmVuc3VyZU5ldHdvcmtTcGVlZCA9IGZ1bmN0aW9uIChhZGIsIG5ldHdvcmtTcGVlZCkge1xuICBpZiAoXy52YWx1ZXMoYWRiLk5FVFdPUktfU1BFRUQpLmluZGV4T2YobmV0d29ya1NwZWVkKSAhPT0gLTEpIHtcbiAgICByZXR1cm4gbmV0d29ya1NwZWVkO1xuICB9XG4gIGxvZ2dlci53YXJuKGBXcm9uZyBuZXR3b3JrIHNwZWVkIHBhcmFtICR7bmV0d29ya1NwZWVkfSwgdXNpbmcgZGVmYXVsdDogZnVsbC4gU3VwcG9ydGVkIHZhbHVlczogJHtfLnZhbHVlcyhhZGIuTkVUV09SS19TUEVFRCl9YCk7XG4gIHJldHVybiBhZGIuTkVUV09SS19TUEVFRC5GVUxMO1xufTtcblxuaGVscGVycy5lbnN1cmVEZXZpY2VMb2NhbGUgPSBhc3luYyBmdW5jdGlvbiAoYWRiLCBsYW5ndWFnZSwgY291bnRyeSkge1xuICBpZiAoIV8uaXNTdHJpbmcobGFuZ3VhZ2UpICYmICFfLmlzU3RyaW5nKGNvdW50cnkpKSB7XG4gICAgbG9nZ2VyLndhcm4oYHNldERldmljZUxhbmd1YWdlQ291bnRyeSByZXF1aXJlcyBsYW5ndWFnZSBvciBjb3VudHJ5LmApO1xuICAgIGxvZ2dlci53YXJuKGBHb3QgbGFuZ3VhZ2U6ICcke2xhbmd1YWdlfScgYW5kIGNvdW50cnk6ICcke2NvdW50cnl9J2ApO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGF3YWl0IGFkYi5zZXREZXZpY2VMYW5ndWFnZUNvdW50cnkobGFuZ3VhZ2UsIGNvdW50cnkpO1xuXG4gIGlmICghYXdhaXQgYWRiLmVuc3VyZUN1cnJlbnRMb2NhbGUobGFuZ3VhZ2UsIGNvdW50cnkpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gc2V0IGxhbmd1YWdlOiAke2xhbmd1YWdlfSBhbmQgY291bnRyeTogJHtjb3VudHJ5fWApO1xuICB9XG59O1xuXG5oZWxwZXJzLmdldERldmljZUluZm9Gcm9tQ2FwcyA9IGFzeW5jIGZ1bmN0aW9uIChvcHRzID0ge30pIHtcbiAgLy8gd2UgY2FuIGNyZWF0ZSBhIHRocm93YXdheSBBREIgaW5zdGFuY2UgaGVyZSwgc28gdGhlcmUgaXMgbm8gZGVwZW5kZW5jeVxuICAvLyBvbiBpbnN0YW50aWF0aW5nIG9uIGVhcmxpZXIgKGF0IHRoaXMgcG9pbnQsIHdlIGhhdmUgbm8gdWRpZClcbiAgLy8gd2UgY2FuIG9ubHkgdXNlIHRoaXMgQURCIG9iamVjdCBmb3IgY29tbWFuZHMgdGhhdCB3b3VsZCBub3QgYmUgY29uZnVzZWRcbiAgLy8gaWYgbXVsdGlwbGUgZGV2aWNlcyBhcmUgY29ubmVjdGVkXG4gIGxldCBhZGIgPSBhd2FpdCBBREIuY3JlYXRlQURCKHtcbiAgICBqYXZhVmVyc2lvbjogb3B0cy5qYXZhVmVyc2lvbixcbiAgICBhZGJQb3J0OiBvcHRzLmFkYlBvcnQsXG4gICAgcmVtb3RlQWRiSG9zdDogb3B0cy5yZW1vdGVBZGJIb3N0LFxuICAgIGNsZWFyRGV2aWNlTG9nc09uU3RhcnQ6IG9wdHMuY2xlYXJEZXZpY2VMb2dzT25TdGFydCxcbiAgfSk7XG4gIGxldCB1ZGlkID0gb3B0cy51ZGlkO1xuICBsZXQgZW1Qb3J0ID0gbnVsbDtcblxuICAvLyBhIHNwZWNpZmljIGF2ZCBuYW1lIHdhcyBnaXZlbi4gdHJ5IHRvIGluaXRpYWxpemUgd2l0aCB0aGF0XG4gIGlmIChvcHRzLmF2ZCkge1xuICAgIGF3YWl0IGhlbHBlcnMucHJlcGFyZUVtdWxhdG9yKGFkYiwgb3B0cyk7XG4gICAgdWRpZCA9IGFkYi5jdXJEZXZpY2VJZDtcbiAgICBlbVBvcnQgPSBhZGIuZW11bGF0b3JQb3J0O1xuICB9IGVsc2Uge1xuICAgIC8vIG5vIGF2ZCBnaXZlbi4gbGV0cyB0cnkgd2hhdGV2ZXIncyBwbHVnZ2VkIGluIGRldmljZXMvZW11bGF0b3JzXG4gICAgbG9nZ2VyLmluZm8oXCJSZXRyaWV2aW5nIGRldmljZSBsaXN0XCIpO1xuICAgIGxldCBkZXZpY2VzID0gYXdhaXQgYWRiLmdldERldmljZXNXaXRoUmV0cnkoKTtcblxuICAgIC8vIHVkaWQgd2FzIGdpdmVuLCBsZXRzIHRyeSB0byBpbml0IHdpdGggdGhhdCBkZXZpY2VcbiAgICBpZiAodWRpZCkge1xuICAgICAgaWYgKCFfLmluY2x1ZGVzKF8ubWFwKGRldmljZXMsICd1ZGlkJyksIHVkaWQpKSB7XG4gICAgICAgIGxvZ2dlci5lcnJvckFuZFRocm93KGBEZXZpY2UgJHt1ZGlkfSB3YXMgbm90IGluIHRoZSBsaXN0IGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgb2YgY29ubmVjdGVkIGRldmljZXNgKTtcbiAgICAgIH1cbiAgICAgIGVtUG9ydCA9IGFkYi5nZXRQb3J0RnJvbUVtdWxhdG9yU3RyaW5nKHVkaWQpO1xuICAgIH0gZWxzZSBpZiAob3B0cy5wbGF0Zm9ybVZlcnNpb24pIHtcbiAgICAgIG9wdHMucGxhdGZvcm1WZXJzaW9uID0gYCR7b3B0cy5wbGF0Zm9ybVZlcnNpb259YC50cmltKCk7XG5cbiAgICAgIC8vIGEgcGxhdGZvcm0gdmVyc2lvbiB3YXMgZ2l2ZW4uIGxldHMgdHJ5IHRvIGZpbmQgYSBkZXZpY2Ugd2l0aCB0aGUgc2FtZSBvc1xuICAgICAgbG9nZ2VyLmluZm8oYExvb2tpbmcgZm9yIGEgZGV2aWNlIHdpdGggQW5kcm9pZCAnJHtvcHRzLnBsYXRmb3JtVmVyc2lvbn0nYCk7XG5cbiAgICAgIC8vIGluIGNhc2Ugd2UgZmFpbCB0byBmaW5kIHNvbWV0aGluZywgZ2l2ZSB0aGUgdXNlciBhIHVzZWZ1bCBsb2cgdGhhdCBoYXNcbiAgICAgIC8vIHRoZSBkZXZpY2UgdWRpZHMgYW5kIG9zIHZlcnNpb25zIHNvIHRoZXkga25vdyB3aGF0J3MgYXZhaWxhYmxlXG4gICAgICBsZXQgYXZhaWxEZXZpY2VzU3RyID0gW107XG5cbiAgICAgIC8vIGZpcnN0IHRyeSBzdGFydGVkIGRldmljZXMvZW11bGF0b3JzXG4gICAgICBmb3IgKGxldCBkZXZpY2Ugb2YgZGV2aWNlcykge1xuICAgICAgICAvLyBkaXJlY3QgYWRiIGNhbGxzIHRvIHRoZSBzcGVjaWZpYyBkZXZpY2VcbiAgICAgICAgYXdhaXQgYWRiLnNldERldmljZUlkKGRldmljZS51ZGlkKTtcbiAgICAgICAgbGV0IGRldmljZU9TID0gYXdhaXQgYWRiLmdldFBsYXRmb3JtVmVyc2lvbigpO1xuXG4gICAgICAgIC8vIGJ1aWxkIHVwIG91ciBpbmZvIHN0cmluZyBvZiBhdmFpbGFibGUgZGV2aWNlcyBhcyB3ZSBpdGVyYXRlXG4gICAgICAgIGF2YWlsRGV2aWNlc1N0ci5wdXNoKGAke2RldmljZS51ZGlkfSAoJHtkZXZpY2VPU30pYCk7XG5cbiAgICAgICAgLy8gd2UgZG8gYSBiZWdpbnMgd2l0aCBjaGVjayBmb3IgaW1wbGllZCB3aWxkY2FyZCBtYXRjaGluZ1xuICAgICAgICAvLyBlZzogNCBtYXRjaGVzIDQuMSwgNC4wLCA0LjEuMy1zYW1zdW5nLCBldGNcbiAgICAgICAgaWYgKGRldmljZU9TLmluZGV4T2Yob3B0cy5wbGF0Zm9ybVZlcnNpb24pID09PSAwKSB7XG4gICAgICAgICAgdWRpZCA9IGRldmljZS51ZGlkO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIHdlIGNvdWxkbid0IGZpbmQgYW55dGhpbmchIHF1aXRcbiAgICAgIGlmICghdWRpZCkge1xuICAgICAgICBsb2dnZXIuZXJyb3JBbmRUaHJvdyhgVW5hYmxlIHRvIGZpbmQgYW4gYWN0aXZlIGRldmljZSBvciBlbXVsYXRvciBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYHdpdGggT1MgJHtvcHRzLnBsYXRmb3JtVmVyc2lvbn0uIFRoZSBmb2xsb3dpbmcgYCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBhcmUgYXZhaWxhYmxlOiBgICsgYXZhaWxEZXZpY2VzU3RyLmpvaW4oJywgJykpO1xuICAgICAgfVxuXG4gICAgICBlbVBvcnQgPSBhZGIuZ2V0UG9ydEZyb21FbXVsYXRvclN0cmluZyh1ZGlkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gYSB1ZGlkIHdhcyBub3QgZ2l2ZW4sIGdyYWIgdGhlIGZpcnN0IGRldmljZSB3ZSBzZWVcbiAgICAgIHVkaWQgPSBkZXZpY2VzWzBdLnVkaWQ7XG4gICAgICBlbVBvcnQgPSBhZGIuZ2V0UG9ydEZyb21FbXVsYXRvclN0cmluZyh1ZGlkKTtcbiAgICB9XG4gIH1cblxuICBsb2dnZXIuaW5mbyhgVXNpbmcgZGV2aWNlOiAke3VkaWR9YCk7XG4gIHJldHVybiB7dWRpZCwgZW1Qb3J0fTtcbn07XG5cbi8vIHJldHVybnMgYSBuZXcgYWRiIGluc3RhbmNlIHdpdGggZGV2aWNlSWQgc2V0XG5oZWxwZXJzLmNyZWF0ZUFEQiA9IGFzeW5jIGZ1bmN0aW9uIChqYXZhVmVyc2lvbiwgdWRpZCwgZW1Qb3J0LCBhZGJQb3J0LCBzdXBwcmVzc0tpbGxTZXJ2ZXIsIHJlbW90ZUFkYkhvc3QsIGNsZWFyRGV2aWNlTG9nc09uU3RhcnQpIHtcbiAgbGV0IGFkYiA9IGF3YWl0IEFEQi5jcmVhdGVBREIoe1xuICAgIGphdmFWZXJzaW9uLFxuICAgIGFkYlBvcnQsXG4gICAgc3VwcHJlc3NLaWxsU2VydmVyLFxuICAgIHJlbW90ZUFkYkhvc3QsXG4gICAgY2xlYXJEZXZpY2VMb2dzT25TdGFydCxcbiAgfSk7XG5cbiAgYWRiLnNldERldmljZUlkKHVkaWQpO1xuICBpZiAoZW1Qb3J0KSB7XG4gICAgYWRiLnNldEVtdWxhdG9yUG9ydChlbVBvcnQpO1xuICB9XG5cbiAgcmV0dXJuIGFkYjtcbn07XG5cbmhlbHBlcnMuZ2V0TGF1bmNoSW5mbyA9IGFzeW5jIGZ1bmN0aW9uIChhZGIsIG9wdHMpIHtcbiAgbGV0IHthcHAsIGFwcFBhY2thZ2UsIGFwcEFjdGl2aXR5LCBhcHBXYWl0UGFja2FnZSwgYXBwV2FpdEFjdGl2aXR5fSA9IG9wdHM7XG4gIGlmICghYXBwKSB7XG4gICAgbG9nZ2VyLndhcm4oXCJObyBhcHAgc2VudCBpbiwgbm90IHBhcnNpbmcgcGFja2FnZS9hY3Rpdml0eVwiKTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGFwcFBhY2thZ2UgJiYgYXBwQWN0aXZpdHkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBsb2dnZXIuZGVidWcoXCJQYXJzaW5nIHBhY2thZ2UgYW5kIGFjdGl2aXR5IGZyb20gYXBwIG1hbmlmZXN0XCIpO1xuICBsZXQge2Fwa1BhY2thZ2UsIGFwa0FjdGl2aXR5fSA9XG4gICAgYXdhaXQgYWRiLnBhY2thZ2VBbmRMYXVuY2hBY3Rpdml0eUZyb21NYW5pZmVzdChhcHApO1xuICBpZiAoYXBrUGFja2FnZSAmJiAhYXBwUGFja2FnZSkge1xuICAgIGFwcFBhY2thZ2UgPSBhcGtQYWNrYWdlO1xuICB9XG4gIGlmICghYXBwV2FpdFBhY2thZ2UpIHtcbiAgICBhcHBXYWl0UGFja2FnZSA9IGFwcFBhY2thZ2U7XG4gIH1cbiAgaWYgKGFwa0FjdGl2aXR5ICYmICFhcHBBY3Rpdml0eSkge1xuICAgIGFwcEFjdGl2aXR5ID0gYXBrQWN0aXZpdHk7XG4gIH1cbiAgaWYgKCFhcHBXYWl0QWN0aXZpdHkpIHtcbiAgICBhcHBXYWl0QWN0aXZpdHkgPSBhcHBBY3Rpdml0eTtcbiAgfVxuICBsb2dnZXIuZGVidWcoYFBhcnNlZCBwYWNrYWdlIGFuZCBhY3Rpdml0eSBhcmU6ICR7YXBrUGFja2FnZX0vJHthcGtBY3Rpdml0eX1gKTtcbiAgcmV0dXJuIHthcHBQYWNrYWdlLCBhcHBXYWl0UGFja2FnZSwgYXBwQWN0aXZpdHksIGFwcFdhaXRBY3Rpdml0eX07XG59O1xuXG5oZWxwZXJzLnJlc2V0QXBwID0gYXN5bmMgZnVuY3Rpb24gKGFkYiwgb3B0cyA9IHt9KSB7XG4gIGNvbnN0IHthcHAsIGFwcFBhY2thZ2UsIGZhc3RSZXNldCwgZnVsbFJlc2V0LFxuICAgIGFuZHJvaWRJbnN0YWxsVGltZW91dCA9IFBBQ0tBR0VfSU5TVEFMTF9USU1FT1VULFxuICAgIGF1dG9HcmFudFBlcm1pc3Npb25zfSA9IG9wdHM7XG5cbiAgaWYgKCFhcHBQYWNrYWdlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiJ2FwcFBhY2thZ2UnIG9wdGlvbiBpcyByZXF1aXJlZFwiKTtcbiAgfVxuXG4gIGNvbnN0IGlzSW5zdGFsbGVkID0gYXdhaXQgYWRiLmlzQXBwSW5zdGFsbGVkKGFwcFBhY2thZ2UpO1xuXG4gIGlmIChpc0luc3RhbGxlZCkge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBhZGIuZm9yY2VTdG9wKGFwcFBhY2thZ2UpO1xuICAgIH0gY2F0Y2ggKGlnbikge31cbiAgICAvLyBmdWxsUmVzZXQgaGFzIHByaW9yaXR5IG92ZXIgZmFzdFJlc2V0XG4gICAgaWYgKCFmdWxsUmVzZXQgJiYgZmFzdFJlc2V0KSB7XG4gICAgICBjb25zdCBvdXRwdXQgPSBhd2FpdCBhZGIuY2xlYXIoYXBwUGFja2FnZSk7XG4gICAgICBpZiAoXy5pc1N0cmluZyhvdXRwdXQpICYmIG91dHB1dC50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdmYWlsZWQnKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBjbGVhciB0aGUgYXBwbGljYXRpb24gZGF0YSBvZiAnJHthcHBQYWNrYWdlfScuIE9yaWdpbmFsIGVycm9yOiAke291dHB1dH1gKTtcbiAgICAgIH1cbiAgICAgIC8vIGV4ZWN1dGluZyBgc2hlbGwgcG0gY2xlYXJgIHJlc2V0cyBwcmV2aW91c2x5IGFzc2lnbmVkIGFwcGxpY2F0aW9uIHBlcm1pc3Npb25zIGFzIHdlbGxcbiAgICAgIGlmIChhdXRvR3JhbnRQZXJtaXNzaW9ucykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGF3YWl0IGFkYi5ncmFudEFsbFBlcm1pc3Npb25zKGFwcFBhY2thZ2UpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGxvZ2dlci5lcnJvcihgVW5hYmxlIHRvIGdyYW50IHBlcm1pc3Npb25zIHJlcXVlc3RlZC4gT3JpZ2luYWwgZXJyb3I6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbG9nZ2VyLmRlYnVnKGBQZXJmb3JtZWQgZmFzdCByZXNldCBvbiB0aGUgaW5zdGFsbGVkICcke2FwcFBhY2thZ2V9JyBhcHBsaWNhdGlvbiAoc3RvcCBhbmQgY2xlYXIpYCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgaWYgKCFhcHApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCInYXBwJyBvcHRpb24gaXMgcmVxdWlyZWQgZm9yIHJlaW5zdGFsbFwiKTtcbiAgfVxuXG4gIGxvZ2dlci5kZWJ1ZyhgUnVubmluZyBmdWxsIHJlc2V0IG9uICcke2FwcFBhY2thZ2V9JyAocmVpbnN0YWxsKWApO1xuICBpZiAoaXNJbnN0YWxsZWQpIHtcbiAgICBhd2FpdCBhZGIudW5pbnN0YWxsQXBrKGFwcFBhY2thZ2UpO1xuICB9XG4gIGF3YWl0IGFkYi5pbnN0YWxsKGFwcCwge1xuICAgIGdyYW50UGVybWlzc2lvbnM6IGF1dG9HcmFudFBlcm1pc3Npb25zLFxuICAgIHRpbWVvdXQ6IGFuZHJvaWRJbnN0YWxsVGltZW91dFxuICB9KTtcbn07XG5cbmhlbHBlcnMuaW5zdGFsbEFwayA9IGFzeW5jIGZ1bmN0aW9uIChhZGIsIG9wdHMgPSB7fSkge1xuICBjb25zdCB7YXBwLCBhcHBQYWNrYWdlLCBmYXN0UmVzZXQsIGZ1bGxSZXNldCxcbiAgICBhbmRyb2lkSW5zdGFsbFRpbWVvdXQgPSBQQUNLQUdFX0lOU1RBTExfVElNRU9VVCxcbiAgICBhdXRvR3JhbnRQZXJtaXNzaW9uc30gPSBvcHRzO1xuXG4gIGlmICghYXBwIHx8ICFhcHBQYWNrYWdlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiJ2FwcCcgYW5kICdhcHBQYWNrYWdlJyBvcHRpb25zIGFyZSByZXF1aXJlZFwiKTtcbiAgfVxuXG4gIGlmIChmdWxsUmVzZXQpIHtcbiAgICBhd2FpdCB0aGlzLnJlc2V0QXBwKGFkYiwgb3B0cyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gVGhlcmUgaXMgbm8gbmVlZCB0byByZXNldCB0aGUgbmV3bHkgaW5zdGFsbGVkIGFwcFxuICBjb25zdCBzaG91bGRQZXJmb3JtRmFzdFJlc2V0ID0gZmFzdFJlc2V0ICYmIGF3YWl0IGFkYi5pc0FwcEluc3RhbGxlZChhcHBQYWNrYWdlKTtcblxuICBhd2FpdCBhZGIuaW5zdGFsbE9yVXBncmFkZShhcHAsIGFwcFBhY2thZ2UsIHtcbiAgICBncmFudFBlcm1pc3Npb25zOiBhdXRvR3JhbnRQZXJtaXNzaW9ucyxcbiAgICB0aW1lb3V0OiBhbmRyb2lkSW5zdGFsbFRpbWVvdXRcbiAgfSk7XG5cbiAgaWYgKHNob3VsZFBlcmZvcm1GYXN0UmVzZXQpIHtcbiAgICBsb2dnZXIuaW5mbyhgUGVyZm9ybWluZyBmYXN0IHJlc2V0IG9uICcke2FwcFBhY2thZ2V9J2ApO1xuICAgIGF3YWl0IHRoaXMucmVzZXRBcHAoYWRiLCBvcHRzKTtcbiAgfVxufTtcblxuLyoqXG4gKiBJbnN0YWxscyBhbiBhcnJheSBvZiBhcGtzXG4gKiBAcGFyYW0ge0FEQn0gYWRiIEluc3RhbmNlIG9mIEFwcGl1bSBBREIgb2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRzIGRlZmluZWQgaW4gZHJpdmVyLmpzXG4gKi9cbmhlbHBlcnMuaW5zdGFsbE90aGVyQXBrcyA9IGFzeW5jIGZ1bmN0aW9uIChvdGhlckFwcHMsIGFkYiwgb3B0cykge1xuICBsZXQge1xuICAgIGFuZHJvaWRJbnN0YWxsVGltZW91dCA9IFBBQ0tBR0VfSU5TVEFMTF9USU1FT1VULFxuICAgIGF1dG9HcmFudFBlcm1pc3Npb25zXG4gIH0gPSBvcHRzO1xuXG4gIC8vIEluc3RhbGwgYWxsIG9mIHRoZSBBUEsncyBhc3luY2hyb25vdXNseVxuICBhd2FpdCBCLmFsbChvdGhlckFwcHMubWFwKChvdGhlckFwcCkgPT4ge1xuICAgIGxvZ2dlci5kZWJ1ZyhgSW5zdGFsbGluZyBhcHA6ICR7b3RoZXJBcHB9YCk7XG4gICAgcmV0dXJuIGFkYi5pbnN0YWxsT3JVcGdyYWRlKG90aGVyQXBwLCBudWxsLCB7XG4gICAgICBncmFudFBlcm1pc3Npb25zOiBhdXRvR3JhbnRQZXJtaXNzaW9ucyxcbiAgICAgIHRpbWVvdXQ6IGFuZHJvaWRJbnN0YWxsVGltZW91dCxcbiAgICB9KTtcbiAgfSkpO1xufTtcblxuaGVscGVycy5pbml0VW5pY29kZUtleWJvYXJkID0gYXN5bmMgZnVuY3Rpb24gKGFkYikge1xuICBsb2dnZXIuZGVidWcoJ0VuYWJsaW5nIFVuaWNvZGUga2V5Ym9hcmQgc3VwcG9ydCcpO1xuICBsb2dnZXIuZGVidWcoXCJQdXNoaW5nIHVuaWNvZGUgaW1lIHRvIGRldmljZS4uLlwiKTtcbiAgYXdhaXQgYWRiLmluc3RhbGwodW5pY29kZUlNRVBhdGgsIHtyZXBsYWNlOiBmYWxzZX0pO1xuXG4gIC8vIGdldCB0aGUgZGVmYXVsdCBJTUUgc28gd2UgY2FuIHJldHVybiBiYWNrIHRvIGl0IGxhdGVyIGlmIHdlIHdhbnRcbiAgbGV0IGRlZmF1bHRJTUUgPSBhd2FpdCBhZGIuZGVmYXVsdElNRSgpO1xuXG4gIGxvZ2dlci5kZWJ1ZyhgVW5zZXR0aW5nIHByZXZpb3VzIElNRSAke2RlZmF1bHRJTUV9YCk7XG4gIGNvbnN0IGFwcGl1bUlNRSA9ICdpby5hcHBpdW0uYW5kcm9pZC5pbWUvLlVuaWNvZGVJTUUnO1xuICBsb2dnZXIuZGVidWcoYFNldHRpbmcgSU1FIHRvICcke2FwcGl1bUlNRX0nYCk7XG4gIGF3YWl0IGFkYi5lbmFibGVJTUUoYXBwaXVtSU1FKTtcbiAgYXdhaXQgYWRiLnNldElNRShhcHBpdW1JTUUpO1xuICByZXR1cm4gZGVmYXVsdElNRTtcbn07XG5cbmhlbHBlcnMuc2V0TW9ja0xvY2F0aW9uQXBwID0gYXN5bmMgZnVuY3Rpb24gKGFkYiwgYXBwKSB7XG4gIHRyeSB7XG4gICAgaWYgKGF3YWl0IGFkYi5nZXRBcGlMZXZlbCgpIDwgMjMpIHtcbiAgICAgIGF3YWl0IGFkYi5zaGVsbChbJ3NldHRpbmdzJywgJ3B1dCcsICdzZWN1cmUnLCAnbW9ja19sb2NhdGlvbicsICcxJ10pO1xuICAgIH0gZWxzZSB7XG4gICAgICBhd2FpdCBhZGIuc2hlbGwoWydhcHBvcHMnLCAnc2V0JywgYXBwLCAnYW5kcm9pZDptb2NrX2xvY2F0aW9uJywgJ2FsbG93J10pO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nZ2VyLndhcm4oYFVuYWJsZSB0byBzZXQgbW9jayBsb2NhdGlvbiBmb3IgYXBwICcke2FwcH0nOiAke2Vyci5tZXNzYWdlfWApO1xuICB9XG59O1xuXG5oZWxwZXJzLmluc3RhbGxIZWxwZXJBcHAgPSBhc3luYyBmdW5jdGlvbiAoYWRiLCBhcGtQYXRoLCBwYWNrYWdlSWQsIGFwcE5hbWUpIHtcbiAgdHJ5IHtcbiAgICBhd2FpdCBhZGIuaW5zdGFsbE9yVXBncmFkZShhcGtQYXRoLCBwYWNrYWdlSWQsIHtncmFudFBlcm1pc3Npb25zOiB0cnVlfSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGxvZ2dlci53YXJuKGBJZ25vcmVkIGVycm9yIHdoaWxlIGluc3RhbGxpbmcgQXBwaXVtICR7YXBwTmFtZX0gaGVscGVyOiBgICtcbiAgICAgICAgICAgICAgICBgJyR7ZXJyLm1lc3NhZ2V9Jy4gTWFudWFsbHkgdW5pbnN0YWxsaW5nIHRoZSBhcHBsaWNhdGlvbiBgICtcbiAgICAgICAgICAgICAgICBgd2l0aCBwYWNrYWdlIGlkICcke3BhY2thZ2VJZH0nIG1heSBoZWxwLiBFeHBlY3Qgc29tZSBBcHBpdW0gYCArXG4gICAgICAgICAgICAgICAgYGZlYXR1cmVzIG1heSBub3Qgd29yayBhcyBleHBlY3RlZCB1bmxlc3MgdGhpcyBwcm9ibGVtIGlzIGAgK1xuICAgICAgICAgICAgICAgIGBmaXhlZC5gKTtcbiAgfVxufTtcblxuaGVscGVycy5wdXNoU2V0dGluZ3NBcHAgPSBhc3luYyBmdW5jdGlvbiAoYWRiLCB0aHJvd0Vycm9yID0gZmFsc2UpIHtcbiAgbG9nZ2VyLmRlYnVnKFwiUHVzaGluZyBzZXR0aW5ncyBhcGsgdG8gZGV2aWNlLi4uXCIpO1xuXG4gIGF3YWl0IGhlbHBlcnMuaW5zdGFsbEhlbHBlckFwcChhZGIsIHNldHRpbmdzQXBrUGF0aCwgU0VUVElOR1NfSEVMUEVSX1BLR19JRCwgJ1NldHRpbmdzJyk7XG5cbiAgLy8gUmVpbnN0YWxsIHdpbGwgc3RvcCB0aGUgc2V0dGluZ3MgaGVscGVyIHByb2Nlc3MgYW55d2F5LCBzb1xuICAvLyB0aGVyZSBpcyBubyBuZWVkIHRvIGNvbnRpbnVlIGlmIHRoZSBhcHBsaWNhdGlvbiBpcyBzdGlsbCBydW5uaW5nXG4gIGlmIChhd2FpdCBhZGIucHJvY2Vzc0V4aXN0cyhTRVRUSU5HU19IRUxQRVJfUEtHX0lEKSkge1xuICAgIGxvZ2dlci5kZWJ1ZyhgJHtTRVRUSU5HU19IRUxQRVJfUEtHX0lEfSBpcyBhbHJlYWR5IHJ1bm5pbmcuIGAgK1xuICAgICAgICAgICAgICAgICBgVGhlcmUgaXMgbm8gbmVlZCB0byByZXNldCBpdHMgcGVybWlzc2lvbnMuYCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gbGF1Y2ggaW8uYXBwaXVtLnNldHRpbmdzIGFwcCBkdWUgdG8gc2V0dGluZ3MgZmFpbGluZyB0byBiZSBzZXRcbiAgLy8gaWYgdGhlIGFwcCBpcyBub3QgbGF1bmNoZWQgcHJpb3IgdG8gc3RhcnQgdGhlIHNlc3Npb24gb24gYW5kcm9pZCA3K1xuICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2FwcGl1bS9hcHBpdW0vaXNzdWVzLzg5NTdcbiAgdHJ5IHtcbiAgICBhd2FpdCBhZGIuc3RhcnRBcHAoe1xuICAgICAgcGtnOiBTRVRUSU5HU19IRUxQRVJfUEtHX0lELFxuICAgICAgYWN0aXZpdHk6IFNFVFRJTkdTX0hFTFBFUl9QS0dfQUNUSVZJVFksXG4gICAgICBhY3Rpb246IFwiYW5kcm9pZC5pbnRlbnQuYWN0aW9uLk1BSU5cIixcbiAgICAgIGNhdGVnb3J5OiBcImFuZHJvaWQuaW50ZW50LmNhdGVnb3J5LkxBVU5DSEVSXCIsXG4gICAgICBmbGFnczogXCIweDEwMjAwMDAwXCIsXG4gICAgICBzdG9wQXBwOiBmYWxzZSxcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nZ2VyLndhcm4oYEZhaWxlZCB0byBsYXVuY2ggc2V0dGluZ3MgYXBwOiAke2Vyci5tZXNzYWdlfWApO1xuICAgIGlmICh0aHJvd0Vycm9yKSB7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICB9XG59O1xuXG5oZWxwZXJzLnB1c2hVbmxvY2sgPSBhc3luYyBmdW5jdGlvbiAoYWRiKSB7XG4gIGxvZ2dlci5kZWJ1ZyhcIlB1c2hpbmcgdW5sb2NrIGhlbHBlciBhcHAgdG8gZGV2aWNlLi4uXCIpO1xuXG4gIGF3YWl0IGhlbHBlcnMuaW5zdGFsbEhlbHBlckFwcChhZGIsIHVubG9ja0Fwa1BhdGgsIFVOTE9DS19IRUxQRVJfUEtHX0lELCAnVW5sb2NrJyk7XG59O1xuXG4vKipcbiAqIEV4dHJhY3RzIHN0cmluZy54bWwgYW5kIGNvbnZlcnRzIGl0IHRvIHN0cmluZy5qc29uIGFuZCBwdXNoZXNcbiAqIGl0IHRvIC9kYXRhL2xvY2FsL3RtcC9zdHJpbmcuanNvbiBvbiBmb3IgdXNlIG9mIGJvb3RzdHJhcFxuICogSWYgYXBwIGlzIG5vdCBwcmVzZW50IHRvIGV4dHJhY3Qgc3RyaW5nLnhtbCBpdCBkZWxldGVzIHJlbW90ZSBzdHJpbmdzLmpzb25cbiAqIElmIGFwcCBkb2VzIG5vdCBoYXZlIHN0cmluZ3MueG1sIHdlIHB1c2ggYW4gZW1wdHkganNvbiBvYmplY3QgdG8gcmVtb3RlXG4gKlxuICogQHBhcmFtIHs/c3RyaW5nfSBsYW5ndWFnZSAtIExhbmd1YWdlIGFiYnJldmlhdGlvbiwgZm9yIGV4YW1wbGUgJ2ZyJy4gVGhlIGRlZmF1bHQgbGFuZ3VhZ2VcbiAqIGlzIHVzZWQgaWYgdGhpcyBhcmd1bWVudCBpcyBub3QgZGVmaW5lZC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBhZGIgLSBUaGUgYWRiIG1vZmR1bGUgaW5zdGFuY2UuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIERyaXZlciBvcHRpb25zIGRpY3Rpb25hcnkuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGljdGlvbmFyeSwgd2hlcmUgc3RyaW5nIHJlc291cnRjZXMgaWRlbnRpZmllcnMgYXJlIGtleXNcbiAqIGFsb25nIHdpdGggdGhlaXIgY29ycmVzcG9uZGluZyB2YWx1ZXMgZm9yIHRoZSBnaXZlbiBsYW5ndWFnZSBvciBhbiBlbXB0eSBvYmplY3RcbiAqIGlmIG5vIG1hdGNoaW5nIHJlc291cmNlcyB3ZXJlIGV4dHJhY3RlZC5cbiAqL1xuaGVscGVycy5wdXNoU3RyaW5ncyA9IGFzeW5jIGZ1bmN0aW9uIChsYW5ndWFnZSwgYWRiLCBvcHRzKSB7XG4gIGNvbnN0IHJlbW90ZURpciA9ICcvZGF0YS9sb2NhbC90bXAnO1xuICBjb25zdCBzdHJpbmdzSnNvbiA9ICdzdHJpbmdzLmpzb24nO1xuICBjb25zdCByZW1vdGVGaWxlID0gYCR7cmVtb3RlRGlyfS8ke3N0cmluZ3NKc29ufWA7XG5cbiAgLy8gY2xlYW4gdXAgcmVtb3RlIHN0cmluZy5qc29uIGlmIHByZXNlbnRcbiAgYXdhaXQgYWRiLnJpbXJhZihyZW1vdGVGaWxlKTtcblxuICBpZiAoXy5pc0VtcHR5KG9wdHMuYXBwUGFja2FnZSkgfHwgIShhd2FpdCBmcy5leGlzdHMob3B0cy5hcHApKSkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIGNvbnN0IHN0cmluZ3NUbXBEaXIgPSBwYXRoLnJlc29sdmUob3B0cy50bXBEaXIsIG9wdHMuYXBwUGFja2FnZSk7XG4gIHRyeSB7XG4gICAgbG9nZ2VyLmRlYnVnKCdFeHRyYWN0aW5nIHN0cmluZ3MgZnJvbSBhcGsnLCBvcHRzLmFwcCwgbGFuZ3VhZ2UsIHN0cmluZ3NUbXBEaXIpO1xuICAgIGNvbnN0IHthcGtTdHJpbmdzLCBsb2NhbFBhdGh9ID0gYXdhaXQgYWRiLmV4dHJhY3RTdHJpbmdzRnJvbUFwayhvcHRzLmFwcCwgbGFuZ3VhZ2UsIHN0cmluZ3NUbXBEaXIpO1xuICAgIGF3YWl0IGFkYi5wdXNoKGxvY2FsUGF0aCwgcmVtb3RlRGlyKTtcbiAgICByZXR1cm4gYXBrU3RyaW5ncztcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nZ2VyLndhcm4oYENvdWxkIG5vdCBnZXQgc3RyaW5ncywgY29udGludWluZyBhbnl3YXkuIE9yaWdpbmFsIGVycm9yOiAke2Vyci5tZXNzYWdlfWApO1xuICAgIGF3YWl0IGFkYi5zaGVsbCgnZWNobycsIFtgJ3t9JyA+ICR7cmVtb3RlRmlsZX1gXSk7XG4gIH0gZmluYWxseSB7XG4gICAgYXdhaXQgZnMucmltcmFmKHN0cmluZ3NUbXBEaXIpO1xuICB9XG4gIHJldHVybiB7fTtcbn07XG5cbmhlbHBlcnMudW5sb2NrV2l0aFVJQXV0b21hdGlvbiA9IGFzeW5jIGZ1bmN0aW9uIChkcml2ZXIsIGFkYiwgdW5sb2NrQ2FwYWJpbGl0aWVzKSB7XG4gIGxldCB1bmxvY2tUeXBlID0gdW5sb2NrQ2FwYWJpbGl0aWVzLnVubG9ja1R5cGU7XG4gIGlmICghdW5sb2NrZXIuaXNWYWxpZFVubG9ja1R5cGUodW5sb2NrVHlwZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgdW5sb2NrIHR5cGUgJHt1bmxvY2tUeXBlfWApO1xuICB9XG4gIGxldCB1bmxvY2tLZXkgPSB1bmxvY2tDYXBhYmlsaXRpZXMudW5sb2NrS2V5O1xuICBpZiAoIXVubG9ja2VyLmlzVmFsaWRLZXkodW5sb2NrVHlwZSwgdW5sb2NrS2V5KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgTWlzc2luZyB1bmxvY2tLZXkgJHt1bmxvY2tLZXl9IGNhcGFiaWxpdHkgZm9yIHVubG9ja1R5cGUgJHt1bmxvY2tUeXBlfWApO1xuICB9XG4gIGNvbnN0IHVubG9ja01ldGhvZCA9IHtcbiAgICBbUElOX1VOTE9DS106IHVubG9ja2VyLnBpblVubG9jayxcbiAgICBbUEFTU1dPUkRfVU5MT0NLXTogdW5sb2NrZXIucGFzc3dvcmRVbmxvY2ssXG4gICAgW1BBVFRFUk5fVU5MT0NLXTogdW5sb2NrZXIucGF0dGVyblVubG9jayxcbiAgICBbRklOR0VSUFJJTlRfVU5MT0NLXTogdW5sb2NrZXIuZmluZ2VycHJpbnRVbmxvY2tcbiAgfVt1bmxvY2tUeXBlXTtcbiAgYXdhaXQgdW5sb2NrTWV0aG9kKGFkYiwgZHJpdmVyLCB1bmxvY2tDYXBhYmlsaXRpZXMpO1xufTtcblxuaGVscGVycy51bmxvY2tXaXRoSGVscGVyQXBwID0gYXN5bmMgZnVuY3Rpb24gKGFkYikge1xuICBsb2dnZXIuaW5mbyhcIlVubG9ja2luZyBzY3JlZW5cIik7XG4gIGF3YWl0IGFkYi5mb3JjZVN0b3AoVU5MT0NLX0hFTFBFUl9QS0dfSUQpO1xuICAvLyB0aGVuIHN0YXJ0IHRoZSBhcHAgdHdpY2UsIGFzIG9uY2UgaXMgZmxha2V5XG4gIGxldCBzdGFydE9wdHMgPSB7XG4gICAgcGtnOiBVTkxPQ0tfSEVMUEVSX1BLR19JRCxcbiAgICBhY3Rpdml0eTogVU5MT0NLX0hFTFBFUl9QS0dfQUNUSVZJVFksXG4gICAgYWN0aW9uOiBcImFuZHJvaWQuaW50ZW50LmFjdGlvbi5NQUlOXCIsXG4gICAgY2F0ZWdvcnk6IFwiYW5kcm9pZC5pbnRlbnQuY2F0ZWdvcnkuTEFVTkNIRVJcIixcbiAgICBmbGFnczogXCIweDEwMjAwMDAwXCIsXG4gICAgc3RvcEFwcDogZmFsc2VcbiAgfTtcbiAgYXdhaXQgYWRiLnN0YXJ0QXBwKHN0YXJ0T3B0cyk7XG4gIGF3YWl0IGFkYi5zdGFydEFwcChzdGFydE9wdHMpO1xufTtcblxuaGVscGVycy51bmxvY2sgPSBhc3luYyBmdW5jdGlvbiAoZHJpdmVyLCBhZGIsIGNhcGFiaWxpdGllcykge1xuICBpZiAoIShhd2FpdCBhZGIuaXNTY3JlZW5Mb2NrZWQoKSkpIHtcbiAgICBsb2dnZXIuaW5mbyhcIlNjcmVlbiBhbHJlYWR5IHVubG9ja2VkLCBkb2luZyBub3RoaW5nXCIpO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoXy5pc1VuZGVmaW5lZChjYXBhYmlsaXRpZXMudW5sb2NrVHlwZSkpIHtcbiAgICAvLyBMZWF2ZSB0aGUgb2xkIHVubG9jayB0byBhdm9pZCBicmVha2luZyBleGlzdGluZyB0ZXN0c1xuICAgIGF3YWl0IHJldHJ5SW50ZXJ2YWwoMTAsIDEwMDAsIGFzeW5jICgpID0+IHtcbiAgICAgIGxvZ2dlci5kZWJ1ZyhcIlNjcmVlbiBpcyBsb2NrZWQsIHRyeWluZyB0byB1bmxvY2tcIik7XG4gICAgICAvLyBjaGVjayBpZiBpdCB3b3JrZWQsIHR3aWNlXG4gICAgICBsb2dnZXIud2FybihcIlVzaW5nIGFwcCB1bmxvY2ssIHRoaXMgaXMgZ29pbmcgdG8gYmUgZGVwcmVjYXRlZCFcIik7XG4gICAgICBhd2FpdCBoZWxwZXJzLnVubG9ja1dpdGhIZWxwZXJBcHAoYWRiKTtcbiAgICAgIGF3YWl0IGhlbHBlcnMudmVyaWZ5VW5sb2NrKGFkYik7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgYXdhaXQgaGVscGVycy51bmxvY2tXaXRoVUlBdXRvbWF0aW9uKGRyaXZlciwgYWRiLCB7dW5sb2NrVHlwZTogY2FwYWJpbGl0aWVzLnVubG9ja1R5cGUsIHVubG9ja0tleTogY2FwYWJpbGl0aWVzLnVubG9ja0tleX0pO1xuICAgIGF3YWl0IGhlbHBlcnMudmVyaWZ5VW5sb2NrKGFkYik7XG4gIH1cbn07XG5cbmhlbHBlcnMudmVyaWZ5VW5sb2NrID0gYXN5bmMgZnVuY3Rpb24gKGFkYikge1xuICBhd2FpdCByZXRyeUludGVydmFsKDIsIDEwMDAsIGFzeW5jICgpID0+IHtcbiAgICBpZiAoYXdhaXQgYWRiLmlzU2NyZWVuTG9ja2VkKCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlNjcmVlbiBkaWQgbm90IHVubG9jayBzdWNjZXNzZnVsbHksIHJldHJ5aW5nXCIpO1xuICAgIH1cbiAgICBsb2dnZXIuZGVidWcoXCJTY3JlZW4gdW5sb2NrZWQgc3VjY2Vzc2Z1bGx5XCIpO1xuICB9KTtcbn07XG5cbmhlbHBlcnMuaW5pdERldmljZSA9IGFzeW5jIGZ1bmN0aW9uIChhZGIsIG9wdHMpIHtcbiAgYXdhaXQgYWRiLndhaXRGb3JEZXZpY2UoKTtcblxuICBpZiAoIW9wdHMuYXZkKSB7XG4gICAgLy8gcHVzaFNldHRpbmdzQXBwIHJlcXVpcmVkIGJlZm9yZSBjYWxsaW5nIGVuc3VyZURldmljZUxvY2FsZSBmb3IgQVBJIExldmVsIDI0K1xuICAgIGF3YWl0IGhlbHBlcnMucHVzaFNldHRpbmdzQXBwKGFkYik7XG4gICAgYXdhaXQgaGVscGVycy5zZXRNb2NrTG9jYXRpb25BcHAoYWRiLCBTRVRUSU5HU19IRUxQRVJfUEtHX0lEKTtcbiAgfVxuXG4gIGF3YWl0IGhlbHBlcnMuZW5zdXJlRGV2aWNlTG9jYWxlKGFkYiwgb3B0cy5sYW5ndWFnZSwgb3B0cy5sb2NhbGUpO1xuICBhd2FpdCBhZGIuc3RhcnRMb2djYXQoKTtcbiAgbGV0IGRlZmF1bHRJTUU7XG4gIGlmIChvcHRzLnVuaWNvZGVLZXlib2FyZCkge1xuICAgIGRlZmF1bHRJTUUgPSBhd2FpdCBoZWxwZXJzLmluaXRVbmljb2RlS2V5Ym9hcmQoYWRiKTtcbiAgfVxuICBpZiAoXy5pc1VuZGVmaW5lZChvcHRzLnVubG9ja1R5cGUpKSB7XG4gICAgYXdhaXQgaGVscGVycy5wdXNoVW5sb2NrKGFkYik7XG4gIH1cbiAgcmV0dXJuIGRlZmF1bHRJTUU7XG59O1xuXG5oZWxwZXJzLnJlbW92ZU51bGxQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKG9iaikge1xuICBmb3IgKGxldCBrZXkgb2YgXy5rZXlzKG9iaikpIHtcbiAgICBpZiAoXy5pc051bGwob2JqW2tleV0pIHx8IF8uaXNVbmRlZmluZWQob2JqW2tleV0pKSB7XG4gICAgICBkZWxldGUgb2JqW2tleV07XG4gICAgfVxuICB9XG59O1xuXG5oZWxwZXJzLnRydW5jYXRlRGVjaW1hbHMgPSBmdW5jdGlvbiAobnVtYmVyLCBkaWdpdHMpIHtcbiAgbGV0IG11bHRpcGxpZXIgPSBNYXRoLnBvdygxMCwgZGlnaXRzKSxcbiAgICAgIGFkanVzdGVkTnVtID0gbnVtYmVyICogbXVsdGlwbGllcixcbiAgICAgIHRydW5jYXRlZE51bSA9IE1hdGhbYWRqdXN0ZWROdW0gPCAwID8gJ2NlaWwnIDogJ2Zsb29yJ10oYWRqdXN0ZWROdW0pO1xuXG4gIHJldHVybiB0cnVuY2F0ZWROdW0gLyBtdWx0aXBsaWVyO1xufTtcblxuaGVscGVycy5pc0Nocm9tZUJyb3dzZXIgPSBmdW5jdGlvbiAoYnJvd3Nlcikge1xuICByZXR1cm4gXy5pbmNsdWRlcyhDSFJPTUVfQlJPV1NFUlMsIGJyb3dzZXIpO1xufTtcblxuaGVscGVycy5nZXRDaHJvbWVQa2cgPSBmdW5jdGlvbiAoYnJvd3Nlcikge1xuICBsZXQgcGtnLCBhY3Rpdml0eTtcblxuICBicm93c2VyID0gYnJvd3Nlci50b0xvd2VyQ2FzZSgpO1xuICBpZiAoYnJvd3NlciA9PT0gXCJjaHJvbWl1bVwiKSB7XG4gICAgcGtnID0gXCJvcmcuY2hyb21pdW0uY2hyb21lLnNoZWxsXCI7XG4gICAgYWN0aXZpdHkgPSBcIi5DaHJvbWVTaGVsbEFjdGl2aXR5XCI7XG4gIH0gZWxzZSBpZiAoYnJvd3NlciA9PT0gXCJjaHJvbWViZXRhXCIpIHtcbiAgICBwa2cgPSBcImNvbS5jaHJvbWUuYmV0YVwiO1xuICAgIGFjdGl2aXR5ID0gXCJjb20uZ29vZ2xlLmFuZHJvaWQuYXBwcy5jaHJvbWUuTWFpblwiO1xuICB9IGVsc2UgaWYgKGJyb3dzZXIgPT09IFwiYnJvd3NlclwiKSB7XG4gICAgcGtnID0gXCJjb20uYW5kcm9pZC5icm93c2VyXCI7XG4gICAgYWN0aXZpdHkgPSBcImNvbS5hbmRyb2lkLmJyb3dzZXIuQnJvd3NlckFjdGl2aXR5XCI7XG4gIH0gZWxzZSBpZiAoYnJvd3NlciA9PT0gXCJjaHJvbWl1bS1icm93c2VyXCIpIHtcbiAgICBwa2cgPSBcIm9yZy5jaHJvbWl1bS5jaHJvbWVcIjtcbiAgICBhY3Rpdml0eSA9IFwiY29tLmdvb2dsZS5hbmRyb2lkLmFwcHMuY2hyb21lLk1haW5cIjtcbiAgfSBlbHNlIGlmIChicm93c2VyID09PSBcImNocm9taXVtLXdlYnZpZXdcIikge1xuICAgIHBrZyA9IFwib3JnLmNocm9taXVtLndlYnZpZXdfc2hlbGxcIjtcbiAgICBhY3Rpdml0eSA9IFwib3JnLmNocm9taXVtLndlYnZpZXdfc2hlbGwuV2ViVmlld0Jyb3dzZXJBY3Rpdml0eVwiO1xuICB9IGVsc2Uge1xuICAgIHBrZyA9IFwiY29tLmFuZHJvaWQuY2hyb21lXCI7XG4gICAgYWN0aXZpdHkgPSBcImNvbS5nb29nbGUuYW5kcm9pZC5hcHBzLmNocm9tZS5NYWluXCI7XG4gIH1cbiAgcmV0dXJuIHtwa2csIGFjdGl2aXR5fTtcbn07XG5cbmhlbHBlcnMucmVtb3ZlQWxsU2Vzc2lvbldlYlNvY2tldEhhbmRsZXJzID0gYXN5bmMgZnVuY3Rpb24gKHNlcnZlciwgc2Vzc2lvbklkKSB7XG4gIGlmICghc2VydmVyIHx8ICFfLmlzRnVuY3Rpb24oc2VydmVyLmdldFdlYlNvY2tldEhhbmRsZXJzKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGFjdGl2ZUhhbmRsZXJzID0gYXdhaXQgc2VydmVyLmdldFdlYlNvY2tldEhhbmRsZXJzKHNlc3Npb25JZCk7XG4gIGZvciAoY29uc3QgcGF0aG5hbWUgb2YgXy5rZXlzKGFjdGl2ZUhhbmRsZXJzKSkge1xuICAgIGF3YWl0IHNlcnZlci5yZW1vdmVXZWJTb2NrZXRIYW5kbGVyKHBhdGhuYW1lKTtcbiAgfVxufTtcblxuLyoqXG4gKiBUYWtlcyBhIGRlc2lyZWQgY2FwYWJpbGl0eSBhbmQgdHJpZXMgdG8gSlNPTi5wYXJzZSBpdCBhcyBhbiBhcnJheSxcbiAqIGFuZCBlaXRoZXIgcmV0dXJucyB0aGUgcGFyc2VkIGFycmF5IG9yIGEgc2luZ2xldG9uIGFycmF5LlxuICpcbiAqIEBwYXJhbSB7YW55fSBjYXAgQSBkZXNpcmVkIGNhcGFiaWxpdHlcbiAqL1xuaGVscGVycy5wYXJzZUFycmF5ID0gZnVuY3Rpb24gKGNhcCkge1xuICBsZXQgcGFyc2VkQ2FwcztcbiAgdHJ5IHtcbiAgICBwYXJzZWRDYXBzID0gSlNPTi5wYXJzZShjYXApO1xuICB9IGNhdGNoIChpZ24pIHsgfVxuXG4gIGlmIChfLmlzQXJyYXkocGFyc2VkQ2FwcykpIHtcbiAgICByZXR1cm4gcGFyc2VkQ2FwcztcbiAgfSBlbHNlIGlmIChfLmlzU3RyaW5nKGNhcCkpIHtcbiAgICByZXR1cm4gW2NhcF07XG4gIH1cblxuICB0aHJvdyBuZXcgRXJyb3IoYG11c3QgcHJvdmlkZSBhIHN0cmluZyBvciBKU09OIEFycmF5OyByZWNlaXZlZCAke2NhcH1gKTtcbn07XG5cbmhlbHBlcnMuYm9vdHN0cmFwID0gQm9vdHN0cmFwO1xuaGVscGVycy51bmxvY2tlciA9IHVubG9ja2VyO1xuXG5leHBvcnQgZGVmYXVsdCBoZWxwZXJzO1xuZXhwb3J0IHsgQ0hST01FX0JST1dTRVJTIH07XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uIn0=
