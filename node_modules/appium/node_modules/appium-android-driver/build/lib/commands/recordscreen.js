'use strict';

var _toConsumableArray = require('babel-runtime/helpers/to-consumable-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _fs2 = require('fs');

var _fs3 = _interopRequireDefault(_fs2);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _asyncbox = require('asyncbox');

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _appiumSupport = require('appium-support');

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var _temp = require('temp');

var _temp2 = _interopRequireDefault(_temp);

var commands = {},
    extensions = {};

var RETRY_PAUSE = 1000;
var MAX_RECORDING_TIME_SEC = 60 * 3;
var DEFAULT_RECORDING_TIME_SEC = MAX_RECORDING_TIME_SEC;
var PROCESS_SHUTDOWN_TIMEOUT_SEC = 5;
var SCREENRECORD_BINARY = 'screenrecord';
var DEFAULT_EXT = '.mp4';
var MIN_EMULATOR_API_LEVEL = 27;

function extractCurrentRecordingPath(adb, pids) {
  var lsofOutput, _ref, output, pattern, matches;

  return _regeneratorRuntime.async(function extractCurrentRecordingPath$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        lsofOutput = '';
        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(adb.shell(['lsof', '-p', pids.join(',')]));

      case 4:
        _ref = context$1$0.sent;
        output = _ref.output;

        lsofOutput = output;
        context$1$0.next = 13;
        break;

      case 9:
        context$1$0.prev = 9;
        context$1$0.t0 = context$1$0['catch'](1);

        _logger2['default'].warn('Cannot extract the path to the current screen capture. ' + ('Original error: ' + context$1$0.t0.message));
        return context$1$0.abrupt('return', null);

      case 13:
        _logger2['default'].debug('Got the following output from lsof: ' + lsofOutput);
        pattern = new RegExp(/\d+\s+(\/.*\.mp4)/);
        matches = pattern.exec(lsofOutput);
        return context$1$0.abrupt('return', _lodash2['default'].isEmpty(matches) ? null : _lodash2['default'].last(matches));

      case 17:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 9]]);
}

function finishScreenCapture(adb, pids) {
  return _regeneratorRuntime.async(function finishScreenCapture$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(adb.shell(['kill', '-2'].concat(_toConsumableArray(pids))));

      case 3:
        context$1$0.next = 8;
        break;

      case 5:
        context$1$0.prev = 5;
        context$1$0.t0 = context$1$0['catch'](0);
        return context$1$0.abrupt('return', true);

      case 8:
        context$1$0.prev = 8;
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap((0, _asyncbox.waitForCondition)(function callee$1$0() {
          var output, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, pid;

          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.prev = 0;
                context$2$0.next = 3;
                return _regeneratorRuntime.awrap(adb.shell(['ps']));

              case 3:
                output = context$2$0.sent;
                _iteratorNormalCompletion = true;
                _didIteratorError = false;
                _iteratorError = undefined;
                context$2$0.prev = 7;
                _iterator = _getIterator(pids);

              case 9:
                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                  context$2$0.next = 16;
                  break;
                }

                pid = _step.value;

                if (!new RegExp('\\b' + pid + '\\b[^\\n]+\\b' + SCREENRECORD_BINARY + '$', 'm').test(output)) {
                  context$2$0.next = 13;
                  break;
                }

                return context$2$0.abrupt('return', false);

              case 13:
                _iteratorNormalCompletion = true;
                context$2$0.next = 9;
                break;

              case 16:
                context$2$0.next = 22;
                break;

              case 18:
                context$2$0.prev = 18;
                context$2$0.t0 = context$2$0['catch'](7);
                _didIteratorError = true;
                _iteratorError = context$2$0.t0;

              case 22:
                context$2$0.prev = 22;
                context$2$0.prev = 23;

                if (!_iteratorNormalCompletion && _iterator['return']) {
                  _iterator['return']();
                }

              case 25:
                context$2$0.prev = 25;

                if (!_didIteratorError) {
                  context$2$0.next = 28;
                  break;
                }

                throw _iteratorError;

              case 28:
                return context$2$0.finish(25);

              case 29:
                return context$2$0.finish(22);

              case 30:
                return context$2$0.abrupt('return', true);

              case 33:
                context$2$0.prev = 33;
                context$2$0.t1 = context$2$0['catch'](0);

                _logger2['default'].warn(context$2$0.t1.message);
                return context$2$0.abrupt('return', false);

              case 37:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this, [[0, 33], [7, 18, 22, 30], [23,, 25, 29]]);
        }, { waitMs: PROCESS_SHUTDOWN_TIMEOUT_SEC * 1000, intervalMs: 500 }));

      case 11:
        context$1$0.next = 16;
        break;

      case 13:
        context$1$0.prev = 13;
        context$1$0.t1 = context$1$0['catch'](8);
        return context$1$0.abrupt('return', false);

      case 16:
        return context$1$0.abrupt('return', true);

      case 17:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 5], [8, 13]]);
}

function uploadRecordedMedia(adb, pathOnDevice) {
  var remotePath = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];
  var uploadOptions = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];

  var localFile, _ref2, size, memoryUsage, maxMemoryLimit, content, remoteUrl, options, user, pass, method;

  return _regeneratorRuntime.async(function uploadRecordedMedia$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        localFile = _temp2['default'].path({ prefix: 'appium', suffix: DEFAULT_EXT });
        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(adb.pull(pathOnDevice, localFile));

      case 4:
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.stat(localFile));

      case 6:
        _ref2 = context$1$0.sent;
        size = _ref2.size;

        _logger2['default'].debug('The size of the recent screen recording is ' + _appiumSupport.util.toReadableSizeString(size));

        if (!_lodash2['default'].isEmpty(remotePath)) {
          context$1$0.next = 18;
          break;
        }

        memoryUsage = process.memoryUsage();
        maxMemoryLimit = (memoryUsage.heapTotal - memoryUsage.heapUsed) / 2;

        if (!(size >= maxMemoryLimit)) {
          context$1$0.next = 14;
          break;
        }

        throw new Error('Cannot read the recorded media \'' + pathOnDevice + '\' to the memory, ' + 'because the file is too large ' + ('(' + _appiumSupport.util.toReadableSizeString(size) + ' >= ' + _appiumSupport.util.toReadableSizeString(maxMemoryLimit) + '). ') + 'Try to provide a link to a remote writable location instead.');

      case 14:
        context$1$0.next = 16;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(localFile));

      case 16:
        content = context$1$0.sent;
        return context$1$0.abrupt('return', content.toString('base64'));

      case 18:
        remoteUrl = _url2['default'].parse(remotePath);
        options = {};
        user = uploadOptions.user;
        pass = uploadOptions.pass;
        method = uploadOptions.method;

        if (remoteUrl.protocol.startsWith('http')) {
          options = {
            url: remoteUrl.href,
            method: method || 'PUT',
            multipart: [{ body: _fs3['default'].createReadStream(localFile) }]
          };
          if (user && pass) {
            options.auth = { user: user, pass: pass };
          }
        } else if (remoteUrl.protocol === 'ftp') {
          options = {
            host: remoteUrl.hostname,
            port: remoteUrl.port || 21
          };
          if (user && pass) {
            options.user = user;
            options.pass = pass;
          }
        }
        context$1$0.next = 26;
        return _regeneratorRuntime.awrap(_appiumSupport.net.uploadFile(localFile, remotePath, options));

      case 26:
        return context$1$0.abrupt('return', '');

      case 27:
        context$1$0.prev = 27;
        context$1$0.next = 30;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(localFile));

      case 30:
        context$1$0.prev = 30;
        context$1$0.next = 33;
        return _regeneratorRuntime.awrap(adb.rimraf(pathOnDevice));

      case 33:
        context$1$0.next = 38;
        break;

      case 35:
        context$1$0.prev = 35;
        context$1$0.t0 = context$1$0['catch'](30);

        _logger2['default'].warn('Cannot delete the recorded screen media \'' + pathOnDevice + '\' from the device. Continuing anyway');

      case 38:
        return context$1$0.finish(27);

      case 39:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1,, 27, 39], [30, 35]]);
}

function verifyScreenRecordIsSupported(adb, isEmulator) {
  var apiLevel;
  return _regeneratorRuntime.async(function verifyScreenRecordIsSupported$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(adb.getApiLevel());

      case 2:
        apiLevel = context$1$0.sent;

        if (!(isEmulator && apiLevel < MIN_EMULATOR_API_LEVEL)) {
          context$1$0.next = 5;
          break;
        }

        throw new Error('Screen recording does not work on emulators running Android API level less than ' + MIN_EMULATOR_API_LEVEL);

      case 5:
        if (!(apiLevel < 19)) {
          context$1$0.next = 7;
          break;
        }

        throw new Error('Screen recording not available on API Level ' + apiLevel + '. Minimum API Level is 19.');

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

/**
 * @typedef {Object} StartRecordingOptions
 *
 * @property {?string} remotePath - The path to the remote location, where the captured video should be uploaded.
 *                                  The following protocols are supported: http/https, ftp.
 *                                  Null or empty string value (the default setting) means the content of resulting
 *                                  file should be encoded as Base64 and passed as the endpount response value.
 *                                  An exception will be thrown if the generated media file is too big to
 *                                  fit into the available process memory.
 *                                  This option only has an effect if there is screen recording process in progreess
 *                                  and `forceRestart` parameter is not set to `true`.
 * @property {?string} user - The name of the user for the remote authentication. Only works if `remotePath` is provided.
 * @property {?string} pass - The password for the remote authentication. Only works if `remotePath` is provided.
 * @property {?string} method - The http multipart upload method name. The 'PUT' one is used by default.
 *                              Only works if `remotePath` is provided.
 * @property {?string} videoSize - The format is widthxheight.
 *                  The default value is the device's native display resolution (if supported),
 *                  1280x720 if not. For best results,
 *                  use a size supported by your device's Advanced Video Coding (AVC) encoder.
 *                  For example, "1280x720"
 * @property {?boolean} bugReport - Set it to `true` in order to display additional information on the video overlay,
 *                                  such as a timestamp, that is helpful in videos captured to illustrate bugs.
 *                                  This option is only supported since API level 27 (Android P).
 * @property {?string|number} timeLimit - The maximum recording time, in seconds. The default and maximum value is 180 (3 minutes).
 * @property {?string|number} bitRate - The video bit rate for the video, in megabits per second.
 *                The default value is 4. You can increase the bit rate to improve video quality,
 *                but doing so results in larger movie files.
 * @property {?boolean} forceRestart - Whether to try to catch and upload/return the currently running screen recording
 *                                     (`false`, the default setting) or ignore the result of it and start a new recording
 *                                     immediately (`true`).
 */

/**
 * Record the display of a real devices running Android 4.4 (API level 19) and higher.
 * Emulators are supported since API level 27 (Android P).
 * It records screen activity to an MPEG-4 file. Audio is not recorded with the video file.
 * If screen recording has been already started then the command will stop it forcefully and start a new one.
 * The previously recorded video file will be deleted.
 *
 * @param {?StartRecordingOptions} options - The available options.
 * @returns {string} Base64-encoded content of the recorded media file if
 *                   any screen recording is currently running or an empty string.
 * @throws {Error} If screen recording has failed to start or is not supported on the device under test.
 */
commands.startRecordingScreen = function callee$0$0() {
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  var videoSize, _options$timeLimit, timeLimit, bugReport, bitRate, forceRestart, result, pids, pathOnDevice, cmd;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this3 = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        videoSize = options.videoSize;
        _options$timeLimit = options.timeLimit;
        timeLimit = _options$timeLimit === undefined ? DEFAULT_RECORDING_TIME_SEC : _options$timeLimit;
        bugReport = options.bugReport;
        bitRate = options.bitRate;
        forceRestart = options.forceRestart;
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(verifyScreenRecordIsSupported(this.adb, this.isEmulator()));

      case 8:
        result = '';

        if (forceRestart) {
          context$1$0.next = 13;
          break;
        }

        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(this.stopRecordingScreen(options));

      case 12:
        result = context$1$0.sent;

      case 13:
        context$1$0.prev = 13;
        context$1$0.next = 16;
        return _regeneratorRuntime.awrap(this.adb.getPIDsByName(SCREENRECORD_BINARY));

      case 16:
        context$1$0.t0 = function (p) {
          return '' + p;
        };

        pids = context$1$0.sent.map(context$1$0.t0);

        if (_lodash2['default'].isEmpty(pids)) {
          context$1$0.next = 21;
          break;
        }

        context$1$0.next = 21;
        return _regeneratorRuntime.awrap(this.adb.shell(['kill'].concat(_toConsumableArray(pids))));

      case 21:
        context$1$0.next = 26;
        break;

      case 23:
        context$1$0.prev = 23;
        context$1$0.t1 = context$1$0['catch'](13);

        _logger2['default'].errorAndThrow('Unable to stop screen recording: ' + context$1$0.t1.message);

      case 26:
        if (_lodash2['default'].isEmpty(this._recentScreenRecordingPath)) {
          context$1$0.next = 35;
          break;
        }

        context$1$0.prev = 27;
        context$1$0.next = 30;
        return _regeneratorRuntime.awrap(this.adb.rimraf(this._recentScreenRecordingPath));

      case 30:
        context$1$0.next = 34;
        break;

      case 32:
        context$1$0.prev = 32;
        context$1$0.t2 = context$1$0['catch'](27);

      case 34:
        this._recentScreenRecordingPath = null;

      case 35:
        pathOnDevice = '/sdcard/' + Math.floor(new Date()) + DEFAULT_EXT;
        cmd = [SCREENRECORD_BINARY];

        if (_appiumSupport.util.hasValue(videoSize)) {
          cmd.push('--size', videoSize);
        }
        if (_appiumSupport.util.hasValue(timeLimit)) {
          cmd.push('--time-limit', '' + timeLimit);
        }
        if (_appiumSupport.util.hasValue(bitRate)) {
          cmd.push('--bit-rate', '' + bitRate);
        }
        if (bugReport) {
          cmd.push('--bugreport');
        }
        cmd.push(pathOnDevice);

        // wrap in a manual Promise so we can handle errors in adb shell operation
        context$1$0.next = 44;
        return _regeneratorRuntime.awrap(new _bluebird2['default'](function callee$1$0(resolve, reject) {
          var err, timeout;
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            var _this2 = this;

            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                err = null;
                timeout = Math.floor(parseFloat(timeLimit) * 1000);

                if (!(timeout > MAX_RECORDING_TIME_SEC * 1000 || timeout <= 0)) {
                  context$2$0.next = 4;
                  break;
                }

                return context$2$0.abrupt('return', reject(new Error('The timeLimit value must be in range (0, ' + MAX_RECORDING_TIME_SEC + '] seconds. ' + ('The value of ' + timeLimit + ' has been passed instead.'))));

              case 4:
                _logger2['default'].debug('Beginning screen recording with command: \'adb shell ' + cmd.join(' ') + '\'' + ('Will timeout in ' + timeout / 1000 + ' s'));
                // screenrecord has its owen timer, so we only use this one as a safety precaution
                timeout += PROCESS_SHUTDOWN_TIMEOUT_SEC * 1000 * 2;
                // do not await here, as the call runs in the background and we check for its product
                this.adb.shell(cmd, { timeout: timeout, killSignal: 'SIGINT' })['catch'](function (e) {
                  err = e;
                });

                // there is the delay time to start recording the screen, so, wait until it is ready.
                // the ready condition is
                //   1. check the movie file is created
                //   2. check it is started to capture the screen
                context$2$0.prev = 7;
                context$2$0.next = 10;
                return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(10, RETRY_PAUSE, function callee$2$0() {
                  var size;
                  return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                    while (1) switch (context$3$0.prev = context$3$0.next) {
                      case 0:
                        if (!err) {
                          context$3$0.next = 2;
                          break;
                        }

                        return context$3$0.abrupt('return');

                      case 2:
                        context$3$0.next = 4;
                        return _regeneratorRuntime.awrap(this.adb.fileSize(pathOnDevice));

                      case 4:
                        size = context$3$0.sent;

                        if (!(size <= 32)) {
                          context$3$0.next = 7;
                          break;
                        }

                        throw new Error('Remote file \'' + pathOnDevice + '\' found but it is still too small: ' + size + ' bytes');

                      case 7:
                      case 'end':
                        return context$3$0.stop();
                    }
                  }, null, _this2);
                }));

              case 10:
                context$2$0.next = 15;
                break;

              case 12:
                context$2$0.prev = 12;
                context$2$0.t0 = context$2$0['catch'](7);

                err = context$2$0.t0;

              case 15:
                if (!err) {
                  context$2$0.next = 18;
                  break;
                }

                _logger2['default'].error('Error recording screen: ' + err.message);
                return context$2$0.abrupt('return', reject(err));

              case 18:
                this._recentScreenRecordingPath = pathOnDevice;
                resolve(result);

              case 20:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this3, [[7, 12]]);
        }));

      case 44:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 45:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[13, 23], [27, 32]]);
};

/**
 * @typedef {Object} StopRecordingOptions
 *
 * @property {?string} remotePath - The path to the remote location, where the resulting video should be uploaded.
 *                                  The following protocols are supported: http/https, ftp.
 *                                  Null or empty string value (the default setting) means the content of resulting
 *                                  file should be encoded as Base64 and passed as the endpount response value.
 *                                  An exception will be thrown if the generated media file is too big to
 *                                  fit into the available process memory.
 * @property {?string} user - The name of the user for the remote authentication.
 * @property {?string} pass - The password for the remote authentication.
 * @property {?string} method - The http multipart upload method name. The 'PUT' one is used by default.
 */

/**
 * Stop recording the screen. If no screen recording process is running then
 * the endpoint will try to get the recently recorded file.
 * If no previously recorded file is found and no active screen recording
 * processes are running then the method returns an empty string.
 *
 * @param {?StopRecordingOptions} options - The available options.
 * @returns {string} Base64-encoded content of the recorded media file if 'remotePath'
 *                   parameter is empty or null or an empty string.
 * @throws {Error} If there was an error while getting the name of a media file
 *                 or the file content cannot be uploaded to the remote location
 *                 or screen recording is not supported on the device under test.
 */
commands.stopRecordingScreen = function callee$0$0() {
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  var remotePath, user, pass, method, pids, pathOnDevice, result;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        remotePath = options.remotePath;
        user = options.user;
        pass = options.pass;
        method = options.method;
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(verifyScreenRecordIsSupported(this.adb, this.isEmulator()));

      case 6:
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.adb.getPIDsByName(SCREENRECORD_BINARY));

      case 8:
        context$1$0.t0 = function (p) {
          return '' + p;
        };

        pids = context$1$0.sent.map(context$1$0.t0);
        pathOnDevice = this._recentScreenRecordingPath;

        if (!_lodash2['default'].isEmpty(pids)) {
          context$1$0.next = 15;
          break;
        }

        _logger2['default'].info('Screen recording is not running. There is nothing to stop.');
        context$1$0.next = 29;
        break;

      case 15:
        context$1$0.t1 = pathOnDevice;

        if (context$1$0.t1) {
          context$1$0.next = 20;
          break;
        }

        context$1$0.next = 19;
        return _regeneratorRuntime.awrap(extractCurrentRecordingPath(this.adb, pids));

      case 19:
        context$1$0.t1 = context$1$0.sent;

      case 20:
        pathOnDevice = context$1$0.t1;
        context$1$0.prev = 21;

        if (_lodash2['default'].isEmpty(pathOnDevice)) {
          _logger2['default'].errorAndThrow('Cannot parse the path to the file created by ' + 'screen recorder process from \'ps\' output. ' + 'Did you start screen recording before?');
        }

      case 23:
        context$1$0.prev = 23;
        context$1$0.next = 26;
        return _regeneratorRuntime.awrap(finishScreenCapture(this.adb, pids));

      case 26:
        if (context$1$0.sent) {
          context$1$0.next = 28;
          break;
        }

        _logger2['default'].warn('Unable to stop screen recording. Continuing anyway');

      case 28:
        return context$1$0.finish(23);

      case 29:
        result = '';

        if (_lodash2['default'].isEmpty(pathOnDevice)) {
          context$1$0.next = 38;
          break;
        }

        context$1$0.prev = 31;
        context$1$0.next = 34;
        return _regeneratorRuntime.awrap(uploadRecordedMedia(this.adb, pathOnDevice, remotePath, { user: user, pass: pass, method: method }));

      case 34:
        result = context$1$0.sent;

      case 35:
        context$1$0.prev = 35;

        this._recentScreenRecordingPath = null;
        return context$1$0.finish(35);

      case 38:
        return context$1$0.abrupt('return', result);

      case 39:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[21,, 23, 29], [31,, 35, 38]]);
};

_Object$assign(extensions, commands);
exports.commands = commands;
exports['default'] = extensions;

// Wait until the process is terminated

//make adb command
//# sourceMappingURL=data:application/json;charset=utf8;base64,
