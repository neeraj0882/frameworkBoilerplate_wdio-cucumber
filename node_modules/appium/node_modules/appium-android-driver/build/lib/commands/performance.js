'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Number$isNaN = require('babel-runtime/core-js/number/is-nan')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _asyncbox = require('asyncbox');

var commands = {},
    helpers = {},
    extensions = {};

var NETWORK_KEYS = [['bucketStart', 'activeTime', 'rxBytes', 'rxPackets', 'txBytes', 'txPackets', 'operations', 'bucketDuration'], ['st', 'activeTime', 'rb', 'rp', 'tb', 'tp', 'op', 'bucketDuration']];
var CPU_KEYS = ['user', 'kernel'];
var BATTERY_KEYS = ['power'];
var MEMORY_KEYS = ['totalPrivateDirty', 'nativePrivateDirty', 'dalvikPrivateDirty', 'eglPrivateDirty', 'glPrivateDirty', 'totalPss', 'nativePss', 'dalvikPss', 'eglPss', 'glPss', 'nativeHeapAllocatedSize', 'nativeHeapSize'];

var SUPPORTED_PERFORMANCE_DATA_TYPES = {
  cpuinfo: 'the amount of cpu by user and kernel process - cpu information for applications on real devices and simulators',
  memoryinfo: 'the amount of memory used by the process - memory information for applications on real devices and simulators',
  batteryinfo: 'the remaining battery power - battery power information for applications on real devices and simulators',
  networkinfo: 'the network statistics - network rx/tx information for applications on real devices and simulators'
};

var RETRY_PAUSE = 1000;

//
// returns the information type of the system state which is supported to read as like cpu, memory, network traffic, and battery.
// output - array like below
//[cpuinfo, batteryinfo, networkinfo, memoryinfo]
//
commands.getPerformanceDataTypes = function () {
  return _lodash2['default'].keys(SUPPORTED_PERFORMANCE_DATA_TYPES);
};

// returns the information type of the system state which is supported to read as like cpu, memory, network traffic, and battery.
//input - (packageName) the package name of the application
//        (dataType) the type of system state which wants to read. It should be one of the keys of the SUPPORTED_PERFORMANCE_DATA_TYPES
//        (dataReadTimeout) the number of attempts to read
// output - table of the performance data, The first line of the table represents the type of data. The remaining lines represent the values of the data.
//
// in case of battery info : [[power], [23]]
// in case of memory info :  [[totalPrivateDirty, nativePrivateDirty, dalvikPrivateDirty, eglPrivateDirty, glPrivateDirty, totalPss, nativePss, dalvikPss, eglPss, glPss, nativeHeapAllocatedSize, nativeHeapSize], [18360, 8296, 6132, null, null, 42588, 8406, 7024, null, null, 26519, 10344]]
// in case of network info : [[bucketStart, activeTime, rxBytes, rxPackets, txBytes, txPackets, operations, bucketDuration,], [1478091600000, null, 1099075, 610947, 928, 114362, 769, 0, 3600000], [1478095200000, null, 1306300, 405997, 509, 46359, 370, 0, 3600000]]
// in case of network info : [[st, activeTime, rb, rp, tb, tp, op, bucketDuration], [1478088000, null, null, 32115296, 34291, 2956805, 25705, 0, 3600], [1478091600, null, null, 2714683, 11821, 1420564, 12650, 0, 3600], [1478095200, null, null, 10079213, 19962, 2487705, 20015, 0, 3600], [1478098800, null, null, 4444433, 10227, 1430356, 10493, 0, 3600]]
// in case of cpu info : [[user, kernel], [0.9, 1.3]]
//
commands.getPerformanceData = function callee$0$0(packageName, dataType) {
  var dataReadTimeout = arguments.length <= 2 || arguments[2] === undefined ? 2 : arguments[2];
  var data;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        data = undefined;
        context$1$0.t0 = dataType;
        context$1$0.next = context$1$0.t0 === 'batteryinfo' ? 4 : context$1$0.t0 === 'cpuinfo' ? 8 : context$1$0.t0 === 'memoryinfo' ? 12 : context$1$0.t0 === 'networkinfo' ? 16 : 20;
        break;

      case 4:
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.getBatteryInfo(dataReadTimeout));

      case 6:
        data = context$1$0.sent;
        return context$1$0.abrupt('break', 21);

      case 8:
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(this.getCPUInfo(packageName, dataReadTimeout));

      case 10:
        data = context$1$0.sent;
        return context$1$0.abrupt('break', 21);

      case 12:
        context$1$0.next = 14;
        return _regeneratorRuntime.awrap(this.getMemoryInfo(packageName, dataReadTimeout));

      case 14:
        data = context$1$0.sent;
        return context$1$0.abrupt('break', 21);

      case 16:
        context$1$0.next = 18;
        return _regeneratorRuntime.awrap(this.getNetworkTrafficInfo(dataReadTimeout));

      case 18:
        data = context$1$0.sent;
        return context$1$0.abrupt('break', 21);

      case 20:
        throw new Error('No performance data of type \'' + dataType + '\' found.');

      case 21:
        return context$1$0.abrupt('return', data);

      case 22:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.getCPUInfo = function callee$0$0(packageName) {
  var dataReadTimeout = arguments.length <= 1 || arguments[1] === undefined ? 2 : arguments[1];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(dataReadTimeout, RETRY_PAUSE, function callee$1$0() {
          var cmd, data, userMatch, kernelMatch;
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                cmd = ['dumpsys', 'cpuinfo', '|', 'grep', '\'' + packageName + '\''];
                context$2$0.next = 3;
                return _regeneratorRuntime.awrap(this.adb.shell(cmd));

              case 3:
                data = context$2$0.sent;

                if (!_lodash2['default'].isEmpty(data)) {
                  context$2$0.next = 6;
                  break;
                }

                throw new Error('No data from dumpsys');

              case 6:
                userMatch = /([\d\.]+)%\s+user/.exec(data);
                kernelMatch = /([\d\.]+)%\s+kernel/.exec(data);

                if (!(!userMatch || !kernelMatch)) {
                  context$2$0.next = 10;
                  break;
                }

                throw new Error('Unable to parse cpu data: \'' + data + '\'');

              case 10:
                return context$2$0.abrupt('return', [_lodash2['default'].clone(CPU_KEYS), [userMatch[1], kernelMatch[1]]]);

              case 11:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        }));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.getBatteryInfo = function callee$0$0() {
  var dataReadTimeout = arguments.length <= 0 || arguments[0] === undefined ? 2 : arguments[0];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this2 = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(dataReadTimeout, RETRY_PAUSE, function callee$1$0() {
          var cmd, data, power;
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                cmd = ['dumpsys', 'battery', '|', 'grep', 'level'];
                context$2$0.next = 3;
                return _regeneratorRuntime.awrap(this.adb.shell(cmd));

              case 3:
                data = context$2$0.sent;

                if (data) {
                  context$2$0.next = 6;
                  break;
                }

                throw new Error('No data from dumpsys');

              case 6:
                power = parseInt((data.split(':')[1] || '').trim(), 10);

                if (_Number$isNaN(power)) {
                  context$2$0.next = 11;
                  break;
                }

                return context$2$0.abrupt('return', [_lodash2['default'].clone(BATTERY_KEYS), [power.toString()]]);

              case 11:
                throw new Error('Unable to parse battery data: \'' + data + '\'');

              case 12:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this2);
        }));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.getMemoryInfo = function callee$0$0(packageName) {
  var dataReadTimeout = arguments.length <= 1 || arguments[1] === undefined ? 2 : arguments[1];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this3 = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(dataReadTimeout, RETRY_PAUSE, function callee$1$0() {
          var cmd, data, totalPrivateDirty, totalPss, nativePrivateDirty, nativePss, nativeHeapSize, nativeHeapAllocatedSize, dalvikPrivateDirty, dalvikPss, eglPrivateDirty, eglPss, glPrivateDirty, glPss, apilevel, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, line, entries, type, subType, headers, _data;

          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                cmd = ['dumpsys', 'meminfo', '\'' + packageName + '\'', '|', 'grep', '-E', "'Native|Dalvik|EGL|GL|TOTAL'"];
                context$2$0.next = 3;
                return _regeneratorRuntime.awrap(this.adb.shell(cmd));

              case 3:
                data = context$2$0.sent;

                if (data) {
                  context$2$0.next = 6;
                  break;
                }

                throw new Error('No data from dumpsys');

              case 6:
                totalPrivateDirty = undefined, totalPss = undefined, nativePrivateDirty = undefined, nativePss = undefined, nativeHeapSize = undefined, nativeHeapAllocatedSize = undefined, dalvikPrivateDirty = undefined, dalvikPss = undefined, eglPrivateDirty = undefined, eglPss = undefined, glPrivateDirty = undefined, glPss = undefined;
                context$2$0.next = 9;
                return _regeneratorRuntime.awrap(this.adb.getApiLevel());

              case 9:
                apilevel = context$2$0.sent;
                _iteratorNormalCompletion = true;
                _didIteratorError = false;
                _iteratorError = undefined;
                context$2$0.prev = 13;

                for (_iterator = _getIterator(data.split('\n')); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                  line = _step.value;
                  entries = line.trim().split(' ').filter(Boolean);

                  // entries will have the values
                  //   ['<System Type>', '<Memory Type>', <pss total>, <private dirty>, <private clean>, <swapPss dirty>, <heap size>, <heap alloc>, <heap free>]
                  // except 'TOTAL', which skips the second type name
                  //
                  // and on API level 18 and below
                  //   ['<System Type', '<pps>', '<shared dirty>', '<private dirty>', '<heap size>', '<heap alloc>', '<heap free>']

                  if (apilevel > 18) {
                    type = entries[0];
                    subType = entries[1];

                    if (type === 'Native' && subType === 'Heap') {
                      // native heap
                      nativePss = entries[2];
                      nativePrivateDirty = entries[3];
                      nativeHeapSize = entries[6];
                      nativeHeapAllocatedSize = entries[7];
                    } else if (type === 'Dalvik' && subType === 'Heap') {
                      // dalvik heap
                      dalvikPss = entries[2];
                      dalvikPrivateDirty = entries[3];
                    } else if (type === 'EGL' && subType === 'mtrack') {
                      // egl
                      eglPss = entries[2];
                      eglPrivateDirty = entries[3];
                    } else if (type === 'GL' && subType === 'mtrack') {
                      // gl
                      glPss = entries[2];
                      glPrivateDirty = entries[3];
                    } else if (type === 'TOTAL' && entries.length === 8) {
                      // there are two totals, and we only want the full listing, which has 8 entries
                      totalPss = entries[1];
                      totalPrivateDirty = entries[2];
                    }
                  } else {
                    type = entries[0];

                    if (type === 'Native') {
                      nativePss = entries[1];
                      nativePrivateDirty = entries[3];
                      nativeHeapSize = entries[4];
                      nativeHeapAllocatedSize = entries[5];
                    } else if (type === 'Dalvik') {
                      dalvikPss = entries[1];
                      dalvikPrivateDirty = entries[3];
                    } else if (type === 'EGL') {
                      eglPss = entries[1];
                      eglPrivateDirty = entries[3];
                    } else if (type === 'GL') {
                      glPss = entries[1];
                      glPrivateDirty = entries[3];
                    } else if (type === 'TOTAL') {
                      totalPss = entries[1];
                      totalPrivateDirty = entries[3];
                    }
                  }
                }

                context$2$0.next = 21;
                break;

              case 17:
                context$2$0.prev = 17;
                context$2$0.t0 = context$2$0['catch'](13);
                _didIteratorError = true;
                _iteratorError = context$2$0.t0;

              case 21:
                context$2$0.prev = 21;
                context$2$0.prev = 22;

                if (!_iteratorNormalCompletion && _iterator['return']) {
                  _iterator['return']();
                }

              case 24:
                context$2$0.prev = 24;

                if (!_didIteratorError) {
                  context$2$0.next = 27;
                  break;
                }

                throw _iteratorError;

              case 27:
                return context$2$0.finish(24);

              case 28:
                return context$2$0.finish(21);

              case 29:
                if (!(totalPrivateDirty && totalPrivateDirty !== 'nodex')) {
                  context$2$0.next = 35;
                  break;
                }

                headers = _lodash2['default'].clone(MEMORY_KEYS);
                _data = [totalPrivateDirty, nativePrivateDirty, dalvikPrivateDirty, eglPrivateDirty, glPrivateDirty, totalPss, nativePss, dalvikPss, eglPss, glPss, nativeHeapAllocatedSize, nativeHeapSize];
                return context$2$0.abrupt('return', [headers, _data]);

              case 35:
                throw new Error('Unable to parse memory data: \'' + data + '\'');

              case 36:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this3, [[13, 17, 21, 29], [22,, 24, 28]]);
        }));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.getNetworkTrafficInfo = function callee$0$0() {
  var dataReadTimeout = arguments.length <= 0 || arguments[0] === undefined ? 2 : arguments[0];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this4 = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(dataReadTimeout, RETRY_PAUSE, function callee$1$0() {
          var returnValue, bucketDuration, bucketStart, activeTime, rxBytes, rxPackets, txBytes, txPackets, operations, cmd, data, index, fromXtstats, start, delimiter, end, pendingBytes, arrayList, j, k, returnIndex, i;
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                returnValue = [];
                bucketDuration = undefined, bucketStart = undefined, activeTime = undefined, rxBytes = undefined, rxPackets = undefined, txBytes = undefined, txPackets = undefined, operations = undefined;
                cmd = ['dumpsys', 'netstats'];
                context$2$0.next = 5;
                return _regeneratorRuntime.awrap(this.adb.shell(cmd));

              case 5:
                data = context$2$0.sent;

                if (data) {
                  context$2$0.next = 8;
                  break;
                }

                throw new Error('No data from dumpsys');

              case 8:
                index = 0;
                fromXtstats = data.indexOf("Xt stats:");
                start = data.indexOf("Pending bytes:", fromXtstats);
                delimiter = data.indexOf(":", start + 1);
                end = data.indexOf("\n", delimiter + 1);
                pendingBytes = data.substring(delimiter + 1, end).trim();

                if (end > delimiter) {
                  start = data.indexOf("bucketDuration", end + 1);
                  delimiter = data.indexOf("=", start + 1);
                  end = data.indexOf("\n", delimiter + 1);
                  bucketDuration = data.substring(delimiter + 1, end).trim();
                }

                if (!(start >= 0)) {
                  context$2$0.next = 33;
                  break;
                }

                data = data.substring(end + 1, data.length);
                arrayList = data.split("\n");

                if (!(arrayList.length > 0)) {
                  context$2$0.next = 33;
                  break;
                }

                start = -1;

                j = 0;

              case 21:
                if (!(j < NETWORK_KEYS.length)) {
                  context$2$0.next = 31;
                  break;
                }

                start = arrayList[0].indexOf(NETWORK_KEYS[j][0]);

                if (!(start >= 0)) {
                  context$2$0.next = 28;
                  break;
                }

                index = j;
                returnValue[0] = [];

                for (k = 0; k < NETWORK_KEYS[j].length; ++k) {
                  returnValue[0][k] = NETWORK_KEYS[j][k];
                }
                return context$2$0.abrupt('break', 31);

              case 28:
                ++j;
                context$2$0.next = 21;
                break;

              case 31:
                returnIndex = 1;

                for (i = 0; i < arrayList.length; i++) {
                  data = arrayList[i];
                  start = data.indexOf(NETWORK_KEYS[index][0]);

                  if (start >= 0) {
                    delimiter = data.indexOf("=", start + 1);
                    end = data.indexOf(" ", delimiter + 1);
                    bucketStart = data.substring(delimiter + 1, end).trim();

                    if (end > delimiter) {
                      start = data.indexOf(NETWORK_KEYS[index][1], end + 1);
                      if (start >= 0) {
                        delimiter = data.indexOf("=", start + 1);
                        end = data.indexOf(" ", delimiter + 1);
                        activeTime = data.substring(delimiter + 1, end).trim();
                      }
                    }

                    if (end > delimiter) {
                      start = data.indexOf(NETWORK_KEYS[index][2], end + 1);
                      if (start >= 0) {
                        delimiter = data.indexOf("=", start + 1);
                        end = data.indexOf(" ", delimiter + 1);
                        rxBytes = data.substring(delimiter + 1, end).trim();
                      }
                    }

                    if (end > delimiter) {
                      start = data.indexOf(NETWORK_KEYS[index][3], end + 1);
                      if (start >= 0) {
                        delimiter = data.indexOf("=", start + 1);
                        end = data.indexOf(" ", delimiter + 1);
                        rxPackets = data.substring(delimiter + 1, end).trim();
                      }
                    }

                    if (end > delimiter) {
                      start = data.indexOf(NETWORK_KEYS[index][4], end + 1);
                      if (start >= 0) {
                        delimiter = data.indexOf("=", start + 1);
                        end = data.indexOf(" ", delimiter + 1);
                        txBytes = data.substring(delimiter + 1, end).trim();
                      }
                    }

                    if (end > delimiter) {
                      start = data.indexOf(NETWORK_KEYS[index][5], end + 1);
                      if (start >= 0) {
                        delimiter = data.indexOf("=", start + 1);
                        end = data.indexOf(" ", delimiter + 1);
                        txPackets = data.substring(delimiter + 1, end).trim();
                      }
                    }

                    if (end > delimiter) {
                      start = data.indexOf(NETWORK_KEYS[index][6], end + 1);
                      if (start >= 0) {
                        delimiter = data.indexOf("=", start + 1);
                        end = data.length;
                        operations = data.substring(delimiter + 1, end).trim();
                      }
                    }
                    returnValue[returnIndex++] = [bucketStart, activeTime, rxBytes, rxPackets, txBytes, txPackets, operations, bucketDuration];
                  }
                }

              case 33:
                if (!(!_lodash2['default'].isEqual(pendingBytes, "") && !_lodash2['default'].isUndefined(pendingBytes) && !_lodash2['default'].isEqual(pendingBytes, "nodex"))) {
                  context$2$0.next = 37;
                  break;
                }

                return context$2$0.abrupt('return', returnValue);

              case 37:
                throw new Error('Unable to parse network traffic data: \'' + data + '\'');

              case 38:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this4);
        }));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

_Object$assign(extensions, commands, helpers);
exports.commands = commands;
exports.helpers = helpers;
exports.SUPPORTED_PERFORMANCE_DATA_TYPES = SUPPORTED_PERFORMANCE_DATA_TYPES;
exports.CPU_KEYS = CPU_KEYS;
exports.MEMORY_KEYS = MEMORY_KEYS;
exports.BATTERY_KEYS = BATTERY_KEYS;
exports.NETWORK_KEYS = NETWORK_KEYS;
exports['default'] = extensions;

// TODO: figure out why this is
// sometimes, the function of 'adb.shell' fails. when I tested this function on the target of 'Galaxy Note5',
// adb.shell(dumpsys cpuinfo) returns cpu datas for other application packages, but I can't find the data for packageName.
// It usually fails 30 times and success for the next time,
// Since then, he has continued to succeed.

// `data` will be something like
//    +0% 2209/io.appium.android.apis: 0.1% user + 0.2% kernel
//eslint-disable-line curly

//eslint-disable-line curly

//eslint-disable-line curly

// In case of network traffic information, it is different for the return data between emulator and real device.
// the return data of emulator
//   Xt stats:
//   Pending bytes: 39250
//   History since boot:
//   ident=[[type=WIFI, subType=COMBINED, networkId="WiredSSID"]] uid=-1 set=ALL tag=0x0
//   NetworkStatsHistory: bucketDuration=3600000
//   bucketStart=1478098800000 activeTime=31824 rxBytes=21502 rxPackets=78 txBytes=17748 txPackets=90 operations=0
//
// 7.1
//   Xt stats:
//   Pending bytes: 481487
//   History since boot:
//   ident=[{type=MOBILE, subType=COMBINED, subscriberId=310260..., metered=true}] uid=-1 set=ALL tag=0x0
//     NetworkStatsHistory: bucketDuration=3600
//       st=1483984800 rb=0 rp=0 tb=12031 tp=184 op=0
//       st=1483988400 rb=0 rp=0 tb=38476 tp=587 op=0
//       st=1483999200 rb=315616 rp=400 tb=94800 tp=362 op=0
//       st=1484002800 rb=15826 rp=20 tb=4738 tp=16 op=0
//
// the return data of real device
//   Xt stats:
//   Pending bytes: 0
//   History since boot:
//   ident=[{type=MOBILE, subType=COMBINED, subscriberId=450050...}] uid=-1 set=ALL tag=0x0
//   NetworkStatsHistory: bucketDuration=3600
//   st=1478088000 rb=32115296 rp=34291 tb=2956805 tp=25705 op=0
//   st=1478091600 rb=2714683 rp=11821 tb=1420564 tp=12650 op=0
//   st=1478095200 rb=10079213 rp=19962 tb=2487705 tp=20015 op=0
//   st=1478098800 rb=4444433 rp=10227 tb=1430356 tp=10493 op=0
//# sourceMappingURL=data:application/json;charset=utf8;base64,
