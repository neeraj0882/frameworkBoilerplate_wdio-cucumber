'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _androidHelpers = require('../android-helpers');

var _androidHelpers2 = _interopRequireDefault(_androidHelpers);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _temp = require('temp');

var _temp2 = _interopRequireDefault(_temp);

var _appiumSupport = require('appium-support');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _jimp = require('jimp');

var _jimp2 = _interopRequireDefault(_jimp);

var _teen_process = require('teen_process');

var swipeStepsPerSec = 28;
var dragStepsPerSec = 40;
var CONTAINER_PATH_MARKER = '@';
// https://regex101.com/r/PLdB0G/2
var CONTAINER_PATH_PATTERN = new RegExp('^' + CONTAINER_PATH_MARKER + '([^/]+)/(.+)');
var ANDROID_MEDIA_RESCAN_INTENT = 'android.intent.action.MEDIA_SCANNER_SCAN_FILE';

var commands = {},
    helpers = {},
    extensions = {};

commands.keyevent = function callee$0$0(keycode) {
  var metastate = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        // TODO deprecate keyevent; currently wd only implements keyevent
        _logger2['default'].warn("keyevent will be deprecated use pressKeyCode");
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.pressKeyCode(keycode, metastate));

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.pressKeyCode = function callee$0$0(keycode) {
  var metastate = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.bootstrap.sendAction("pressKeyCode", { keycode: keycode, metastate: metastate }));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.longPressKeyCode = function callee$0$0(keycode) {
  var metastate = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.bootstrap.sendAction("longPressKeyCode", { keycode: keycode, metastate: metastate }));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getOrientation = function callee$0$0() {
  var params, orientation;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        params = {
          naturalOrientation: !!this.opts.androidNaturalOrientation
        };
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.bootstrap.sendAction("orientation", params));

      case 3:
        orientation = context$1$0.sent;
        return context$1$0.abrupt('return', orientation.toUpperCase());

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.setOrientation = function callee$0$0(orientation) {
  var params;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        orientation = orientation.toUpperCase();
        params = {
          orientation: orientation,
          naturalOrientation: !!this.opts.androidNaturalOrientation
        };
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.bootstrap.sendAction("orientation", params));

      case 4:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.fakeFlick = function callee$0$0(xSpeed, ySpeed) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.bootstrap.sendAction('flick', { xSpeed: xSpeed, ySpeed: ySpeed }));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.fakeFlickElement = function callee$0$0(elementId, xoffset, yoffset, speed) {
  var params;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        params = { xoffset: xoffset, yoffset: yoffset, speed: speed, elementId: elementId };
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.bootstrap.sendAction('element:flick', params));

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.swipe = function callee$0$0(startX, startY, endX, endY, duration, touchCount, elId) {
  var swipeOpts;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (startX === 'null') {
          startX = 0.5;
        }
        if (startY === 'null') {
          startY = 0.5;
        }
        swipeOpts = { startX: startX, startY: startY, endX: endX, endY: endY,
          steps: Math.round(duration * swipeStepsPerSec) };

        // going the long way and checking for undefined and null since
        // we can't be assured `elId` is a string and not an int
        if (_appiumSupport.util.hasValue(elId)) {
          swipeOpts.elementId = elId;
        }
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.doSwipe(swipeOpts));

      case 6:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.doSwipe = function callee$0$0(swipeOpts) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!_appiumSupport.util.hasValue(swipeOpts.elementId)) {
          context$1$0.next = 6;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.bootstrap.sendAction("element:swipe", swipeOpts));

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 6:
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.bootstrap.sendAction("swipe", swipeOpts));

      case 8:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.pinchClose = function callee$0$0(startX, startY, endX, endY, duration, percent, steps, elId) {
  var pinchOpts;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        pinchOpts = {
          direction: 'in',
          elementId: elId,
          percent: percent,
          steps: steps
        };
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.bootstrap.sendAction("element:pinch", pinchOpts));

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.pinchOpen = function callee$0$0(startX, startY, endX, endY, duration, percent, steps, elId) {
  var pinchOpts;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        pinchOpts = { direction: 'out', elementId: elId, percent: percent, steps: steps };
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.bootstrap.sendAction("element:pinch", pinchOpts));

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.flick = function callee$0$0(element, xSpeed, ySpeed, xOffset, yOffset, speed) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!element) {
          context$1$0.next = 5;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.fakeFlickElement(element, xOffset, yOffset, speed));

      case 3:
        context$1$0.next = 7;
        break;

      case 5:
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.fakeFlick(xSpeed, ySpeed));

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.drag = function callee$0$0(startX, startY, endX, endY, duration, touchCount, elementId, destElId) {
  var dragOpts;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        dragOpts = {
          elementId: elementId, destElId: destElId, startX: startX, startY: startY, endX: endX, endY: endY,
          steps: Math.round(duration * dragStepsPerSec)
        };
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.doDrag(dragOpts));

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.doDrag = function callee$0$0(dragOpts) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!_appiumSupport.util.hasValue(dragOpts.elementId)) {
          context$1$0.next = 6;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.bootstrap.sendAction("element:drag", dragOpts));

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 6:
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.bootstrap.sendAction("drag", dragOpts));

      case 8:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.lock = function callee$0$0(seconds) {
  var floatSeconds;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.adb.lock());

      case 2:
        if (!isNaN(seconds)) {
          context$1$0.next = 4;
          break;
        }

        return context$1$0.abrupt('return');

      case 4:
        floatSeconds = parseFloat(seconds);

        if (!(floatSeconds <= 0)) {
          context$1$0.next = 7;
          break;
        }

        return context$1$0.abrupt('return');

      case 7:
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(_bluebird2['default'].delay(1000 * floatSeconds));

      case 9:
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(this.unlock());

      case 11:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.isLocked = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.adb.isScreenLocked());

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.unlock = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_androidHelpers2['default'].unlock(this, this.adb, this.caps));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.openNotifications = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.bootstrap.sendAction("openNotification"));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.setLocation = function callee$0$0(latitude, longitude) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.adb.sendTelnetCommand('geo fix ' + longitude + ' ' + latitude));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

function parseContainerPath(remotePath) {
  var match = CONTAINER_PATH_PATTERN.exec(remotePath);
  if (!match) {
    _logger2['default'].errorAndThrow('It is expected that package identifier is separated from the relative path with a single slash. ' + ('\'' + remotePath + '\' is given instead'));
  }
  return [match[1], _path2['default'].posix.resolve('/data/data/' + match[1], match[2])];
}

commands.pullFile = function callee$0$0(remotePath) {
  var tmpDestination, _parseContainerPath, _parseContainerPath2, packageId, pathInContainer, localFile, data;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (remotePath.endsWith('/')) {
          _logger2['default'].errorAndThrow('It is expected that remote path points to a file and not to a folder. ' + ('\'' + remotePath + '\' is given instead'));
        }
        tmpDestination = null;

        if (!remotePath.startsWith(CONTAINER_PATH_MARKER)) {
          context$1$0.next = 19;
          break;
        }

        _parseContainerPath = parseContainerPath(remotePath);
        _parseContainerPath2 = _slicedToArray(_parseContainerPath, 2);
        packageId = _parseContainerPath2[0];
        pathInContainer = _parseContainerPath2[1];

        _logger2['default'].info('Parsed package identifier \'' + packageId + '\' from \'' + remotePath + '\'. Will get the data from \'' + pathInContainer + '\'');
        tmpDestination = '/data/local/tmp/' + _path2['default'].posix.basename(pathInContainer);
        context$1$0.prev = 9;
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(this.adb.shell(['run-as', packageId, 'chmod 777 \'' + pathInContainer.replace(/'/g, '\\\'') + '\'']));

      case 12:
        context$1$0.next = 14;
        return _regeneratorRuntime.awrap(this.adb.shell(['cp', '-f', pathInContainer, tmpDestination]));

      case 14:
        context$1$0.next = 19;
        break;

      case 16:
        context$1$0.prev = 16;
        context$1$0.t0 = context$1$0['catch'](9);

        _logger2['default'].errorAndThrow('Cannot access the container of \'' + packageId + '\' application. ' + 'Is the application installed and has \'debuggable\' build option set to true? ' + ('Original error: ' + context$1$0.t0.message));

      case 19:
        localFile = _temp2['default'].path({ prefix: 'appium', suffix: '.tmp' });
        context$1$0.prev = 20;
        context$1$0.next = 23;
        return _regeneratorRuntime.awrap(this.adb.pull(_lodash2['default'].isString(tmpDestination) ? tmpDestination : remotePath, localFile));

      case 23:
        context$1$0.next = 25;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(localFile));

      case 25:
        data = context$1$0.sent;
        return context$1$0.abrupt('return', new Buffer(data).toString('base64'));

      case 27:
        context$1$0.prev = 27;
        context$1$0.next = 30;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(localFile));

      case 30:
        if (!context$1$0.sent) {
          context$1$0.next = 33;
          break;
        }

        context$1$0.next = 33;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.unlink(localFile));

      case 33:
        if (!_lodash2['default'].isString(tmpDestination)) {
          context$1$0.next = 36;
          break;
        }

        context$1$0.next = 36;
        return _regeneratorRuntime.awrap(this.adb.shell(['rm', '-f', tmpDestination]));

      case 36:
        return context$1$0.finish(27);

      case 37:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[9, 16], [20,, 27, 37]]);
};

commands.pushFile = function callee$0$0(remotePath, base64Data) {
  var localFile, content, tmpDestination, _parseContainerPath3, _parseContainerPath32, packageId, pathInContainer;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (remotePath.endsWith('/')) {
          _logger2['default'].errorAndThrow('It is expected that remote path points to a file and not to a folder. ' + ('\'' + remotePath + '\' is given instead'));
        }
        localFile = _temp2['default'].path({ prefix: 'appium', suffix: '.tmp' });

        if (_lodash2['default'].isArray(base64Data)) {
          // some clients (ahem) java, send a byte array encoding utf8 characters
          // instead of a string, which would be infinitely better!
          base64Data = Buffer.from(base64Data).toString('utf8');
        }
        content = Buffer.from(base64Data, 'base64');
        tmpDestination = null;
        context$1$0.prev = 5;
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(localFile, content.toString('binary'), 'binary'));

      case 8:
        if (!remotePath.startsWith(CONTAINER_PATH_MARKER)) {
          context$1$0.next = 33;
          break;
        }

        _parseContainerPath3 = parseContainerPath(remotePath);
        _parseContainerPath32 = _slicedToArray(_parseContainerPath3, 2);
        packageId = _parseContainerPath32[0];
        pathInContainer = _parseContainerPath32[1];

        _logger2['default'].info('Parsed package identifier \'' + packageId + '\' from \'' + remotePath + '\'. Will put the data into \'' + pathInContainer + '\'');
        tmpDestination = '/data/local/tmp/' + _path2['default'].posix.basename(pathInContainer);
        context$1$0.prev = 15;
        context$1$0.next = 18;
        return _regeneratorRuntime.awrap(this.adb.shell(['run-as', packageId, 'mkdir -p \'' + _path2['default'].posix.dirname(pathInContainer).replace(/'/g, '\\\'') + '\'']));

      case 18:
        context$1$0.next = 20;
        return _regeneratorRuntime.awrap(this.adb.shell(['run-as', packageId, 'touch \'' + pathInContainer.replace(/'/g, '\\\'') + '\'']));

      case 20:
        context$1$0.next = 22;
        return _regeneratorRuntime.awrap(this.adb.shell(['run-as', packageId, 'chmod 777 \'' + pathInContainer.replace(/'/g, '\\\'') + '\'']));

      case 22:
        context$1$0.next = 24;
        return _regeneratorRuntime.awrap(this.adb.push(localFile, tmpDestination));

      case 24:
        context$1$0.next = 26;
        return _regeneratorRuntime.awrap(this.adb.shell(['cp', '-f', tmpDestination, pathInContainer]));

      case 26:
        context$1$0.next = 31;
        break;

      case 28:
        context$1$0.prev = 28;
        context$1$0.t0 = context$1$0['catch'](15);

        _logger2['default'].errorAndThrow('Cannot access the container of \'' + packageId + '\' application. ' + 'Is the application installed and has \'debuggable\' build option set to true? ' + ('Original error: ' + context$1$0.t0.message));

      case 31:
        context$1$0.next = 44;
        break;

      case 33:
        context$1$0.next = 35;
        return _regeneratorRuntime.awrap(this.adb.push(localFile, remotePath));

      case 35:

        // if we have pushed a file, it might be a media file, so ensure that
        // apps know about it
        _logger2['default'].info("After pushing media file, broadcasting media scan intent");
        context$1$0.prev = 36;
        context$1$0.next = 39;
        return _regeneratorRuntime.awrap(this.adb.shell(['am', 'broadcast', '-a', ANDROID_MEDIA_RESCAN_INTENT, '-d', 'file://' + remotePath]));

      case 39:
        context$1$0.next = 44;
        break;

      case 41:
        context$1$0.prev = 41;
        context$1$0.t1 = context$1$0['catch'](36);

        _logger2['default'].warn('Got error broadcasting media scan intent: ' + context$1$0.t1.message + '; ignoring');

      case 44:
        context$1$0.prev = 44;
        context$1$0.next = 47;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(localFile));

      case 47:
        if (!context$1$0.sent) {
          context$1$0.next = 50;
          break;
        }

        context$1$0.next = 50;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.unlink(localFile));

      case 50:
        if (!_lodash2['default'].isString(tmpDestination)) {
          context$1$0.next = 53;
          break;
        }

        context$1$0.next = 53;
        return _regeneratorRuntime.awrap(this.adb.shell(['rm', '-f', tmpDestination]));

      case 53:
        return context$1$0.finish(44);

      case 54:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[5,, 44, 54], [15, 28], [36, 41]]);
};

commands.pullFolder = function callee$0$0(remotePath) {
  var localFolder;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        localFolder = _temp2['default'].path({ prefix: 'appium' });
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.adb.pull(remotePath, localFolder));

      case 3:
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(_appiumSupport.zip.toInMemoryZip(localFolder));

      case 5:
        return context$1$0.abrupt('return', context$1$0.sent.toString('base64'));

      case 6:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.fingerprint = function callee$0$0(fingerprintId) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.isEmulator()) {
          _logger2['default'].errorAndThrow("fingerprint method is only available for emulators");
        }
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.adb.fingerprint(fingerprintId));

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.sendSMS = function callee$0$0(phoneNumber, message) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.isEmulator()) {
          _logger2['default'].errorAndThrow("sendSMS method is only available for emulators");
        }
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.adb.sendSMS(phoneNumber, message));

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.gsmCall = function callee$0$0(phoneNumber, action) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.isEmulator()) {
          _logger2['default'].errorAndThrow("gsmCall method is only available for emulators");
        }
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.adb.gsmCall(phoneNumber, action));

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.gsmSignal = function callee$0$0(signalStrengh) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.isEmulator()) {
          _logger2['default'].errorAndThrow("gsmSignal method is only available for emulators");
        }
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.adb.gsmSignal(signalStrengh));

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.gsmVoice = function callee$0$0(state) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.isEmulator()) {
          _logger2['default'].errorAndThrow("gsmVoice method is only available for emulators");
        }
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.adb.gsmVoice(state));

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.powerAC = function callee$0$0(state) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.isEmulator()) {
          _logger2['default'].errorAndThrow("powerAC method is only available for emulators");
        }
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.adb.powerAC(state));

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.powerCapacity = function callee$0$0(batteryPercent) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.isEmulator()) {
          _logger2['default'].errorAndThrow("powerCapacity method is only available for emulators");
        }
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.adb.powerCapacity(batteryPercent));

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.networkSpeed = function callee$0$0(networkSpeed) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.isEmulator()) {
          _logger2['default'].errorAndThrow("networkSpeed method is only available for emulators");
        }
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.adb.networkSpeed(networkSpeed));

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.getScreenshotDataWithAdbShell = function callee$0$0(adb, opts) {
  var localFile, pngDir, png, cmd;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        localFile = _temp2['default'].path({ prefix: 'appium', suffix: '.png' });
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(localFile));

      case 3:
        if (!context$1$0.sent) {
          context$1$0.next = 6;
          break;
        }

        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.unlink(localFile));

      case 6:
        context$1$0.prev = 6;
        pngDir = opts.androidScreenshotPath || '/data/local/tmp/';
        png = _path2['default'].posix.resolve(pngDir, 'screenshot.png');
        cmd = ['/system/bin/rm', png + ';', '/system/bin/screencap', '-p', png];
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(adb.shell(cmd));

      case 12:
        context$1$0.next = 14;
        return _regeneratorRuntime.awrap(adb.fileSize(png));

      case 14:
        if (context$1$0.sent) {
          context$1$0.next = 16;
          break;
        }

        throw new Error('The size of the taken screenshot equals to zero.');

      case 16:
        context$1$0.next = 18;
        return _regeneratorRuntime.awrap(adb.pull(png, localFile));

      case 18:
        context$1$0.next = 20;
        return _regeneratorRuntime.awrap(_jimp2['default'].read(localFile));

      case 20:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 21:
        context$1$0.prev = 21;
        context$1$0.next = 24;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(localFile));

      case 24:
        if (!context$1$0.sent) {
          context$1$0.next = 27;
          break;
        }

        context$1$0.next = 27;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.unlink(localFile));

      case 27:
        return context$1$0.finish(21);

      case 28:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[6,, 21, 28]]);
};

helpers.getScreenshotDataWithAdbExecOut = function callee$0$0(adb) {
  var _ref, stdout, stderr, code;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)(adb.executable.path, adb.executable.defaultArgs.concat(['exec-out', '/system/bin/screencap', '-p']), { encoding: 'binary', isBuffer: true }));

      case 2:
        _ref = context$1$0.sent;
        stdout = _ref.stdout;
        stderr = _ref.stderr;
        code = _ref.code;

        if (!(code || stderr.length)) {
          context$1$0.next = 8;
          break;
        }

        throw new Error('Screenshot returned error, code: \'' + code + '\', stderr: \'' + stderr.toString() + '\'');

      case 8:
        if (stdout.length) {
          context$1$0.next = 10;
          break;
        }

        throw new Error('Screenshot returned no data');

      case 10:
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(_jimp2['default'].read(stdout));

      case 12:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 13:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getScreenshot = function callee$0$0() {
  var apiLevel, image, err, screenOrientation, getBuffer, imgBuffer;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.adb.getApiLevel());

      case 2:
        apiLevel = context$1$0.sent;
        image = null;

        if (!(apiLevel > 20)) {
          context$1$0.next = 14;
          break;
        }

        context$1$0.prev = 5;
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.getScreenshotDataWithAdbExecOut(this.adb));

      case 8:
        image = context$1$0.sent;
        context$1$0.next = 14;
        break;

      case 11:
        context$1$0.prev = 11;
        context$1$0.t0 = context$1$0['catch'](5);

        _logger2['default'].info('Cannot get screenshot data with \'adb exec-out\' because of \'' + context$1$0.t0.message + '\'. ' + 'Defaulting to \'adb shell\' call');

      case 14:
        if (image) {
          context$1$0.next = 25;
          break;
        }

        context$1$0.prev = 15;
        context$1$0.next = 18;
        return _regeneratorRuntime.awrap(this.getScreenshotDataWithAdbShell(this.adb, this.opts));

      case 18:
        image = context$1$0.sent;
        context$1$0.next = 25;
        break;

      case 21:
        context$1$0.prev = 21;
        context$1$0.t1 = context$1$0['catch'](15);
        err = 'Cannot get screenshot data because of \'' + context$1$0.t1.message + '\'. ' + 'Make sure the \'LayoutParams.FLAG_SECURE\' is not set for ' + 'the current view';

        _logger2['default'].errorAndThrow(err);

      case 25:
        if (!(apiLevel < 23)) {
          context$1$0.next = 38;
          break;
        }

        context$1$0.next = 28;
        return _regeneratorRuntime.awrap(this.adb.getScreenOrientation());

      case 28:
        screenOrientation = context$1$0.sent;
        context$1$0.prev = 29;
        context$1$0.next = 32;
        return _regeneratorRuntime.awrap(image.rotate(-90 * screenOrientation));

      case 32:
        image = context$1$0.sent;
        context$1$0.next = 38;
        break;

      case 35:
        context$1$0.prev = 35;
        context$1$0.t2 = context$1$0['catch'](29);

        _logger2['default'].warn('Could not rotate screenshot due to error: ' + context$1$0.t2);

      case 38:
        getBuffer = _bluebird2['default'].promisify(image.getBuffer, { context: image });
        context$1$0.next = 41;
        return _regeneratorRuntime.awrap(getBuffer(_jimp2['default'].MIME_PNG));

      case 41:
        imgBuffer = context$1$0.sent;
        return context$1$0.abrupt('return', imgBuffer.toString('base64'));

      case 43:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[5, 11], [15, 21], [29, 35]]);
};

_Object$assign(extensions, commands, helpers);
exports.commands = commands;
exports.helpers = helpers;
exports['default'] = extensions;

// adb push creates folders and overwrites existing files.

// if there is an error, throw

// if we don't get anything at all, throw

// This screenshoting approach is way faster, since it requires less external commands
// to be executed. Unfortunately, exec-out option is only supported by newer Android/SDK versions (5.0 and later)

// Android bug 8433742 - rotate screenshot if screen is rotated
//# sourceMappingURL=data:application/json;charset=utf8;base64,
