'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _this = this;

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _ws = require('ws');

var _ws2 = _interopRequireDefault(_ws);

var _appiumBaseDriver = require('appium-base-driver');

var commands = {},
    helpers = {},
    extensions = {};

var WEBSOCKET_ENDPOINT = function WEBSOCKET_ENDPOINT(sessionId) {
  return _appiumBaseDriver.DEFAULT_WS_PATHNAME_PREFIX + '/session/' + sessionId + '/appium/device/logcat';
};

// https://github.com/SeleniumHQ/selenium/blob/0d425676b3c9df261dd641917f867d4d5ce7774d/java/client/src/org/openqa/selenium/logging/LogEntry.java
function toLogRecord(timestamp, level, message) {
  return {
    timestamp: timestamp,
    level: level,
    message: message
  };
}

extensions.supportedLogTypes = {
  logcat: {
    description: 'Logs for Android applications on real device and emulators via ADB',
    getter: function getter(self) {
      return _regeneratorRuntime.async(function getter$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
          case 0:
            context$1$0.next = 2;
            return _regeneratorRuntime.awrap(self.adb.getLogcatLogs());

          case 2:
            return context$1$0.abrupt('return', context$1$0.sent);

          case 3:
          case 'end':
            return context$1$0.stop();
        }
      }, null, _this);
    }
  },
  bugreport: {
    description: '\'adb bugreport\' output for advanced issues diagnostic',
    getter: function getter(self) {
      var output, timestamp;
      return _regeneratorRuntime.async(function getter$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
          case 0:
            context$1$0.next = 2;
            return _regeneratorRuntime.awrap(self.adb.bugreport());

          case 2:
            output = context$1$0.sent;
            timestamp = Date.now();
            return context$1$0.abrupt('return', output.split(_os2['default'].EOL).map(function (x) {
              return toLogRecord(timestamp, 'ALL', x);
            }));

          case 5:
          case 'end':
            return context$1$0.stop();
        }
      }, null, _this);
    }
  },
  server: {
    description: 'Appium server logs',
    getter: function getter(self) {
      if (!self.relaxedSecurityEnabled) {
        throw new Error('Appium server must have relaxed security flag set ' + 'in order to be able to get server logs');
      }
      var timestamp = Date.now();
      return _logger2['default'].unwrap().record.map(function (x) {
        return toLogRecord(timestamp, 'ALL', _lodash2['default'].isEmpty(x.prefix) ? x.message : '[' + x.prefix + '] ' + x.message);
      });
    }
  }
};

/**
 * Starts Android logcat broadcast websocket on the same host and port
 * where Appium server is running at `/ws/session/:sessionId:/appium/logcat` endpoint. The method
 * will return immediately if the web socket is already listening.
 *
 * Each connected webcoket listener will receive logcat log lines
 * as soon as they are visible to Appium.
 */
commands.mobileStartLogsBroadcast = function callee$0$0() {
  var pathname, wss;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this2 = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        pathname = WEBSOCKET_ENDPOINT(this.sessionId);
        context$1$0.t0 = _lodash2['default'];
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.server.getWebSocketHandlers(pathname));

      case 4:
        context$1$0.t1 = context$1$0.sent;

        if (context$1$0.t0.isEmpty.call(context$1$0.t0, context$1$0.t1)) {
          context$1$0.next = 8;
          break;
        }

        _logger2['default'].debug('The logcat broadcasting web socket server is already listening at ' + pathname);
        return context$1$0.abrupt('return');

      case 8:

        _logger2['default'].info('Assigning logcat broadcasting web socket server to ' + pathname);
        // https://github.com/websockets/ws/blob/master/doc/ws.md
        wss = new _ws2['default'].Server({
          noServer: true
        });

        wss.on('connection', function (ws, req) {
          if (req) {
            var remoteIp = _lodash2['default'].isEmpty(req.headers['x-forwarded-for']) ? req.connection.remoteAddress : req.headers['x-forwarded-for'];
            _logger2['default'].debug('Established a new logcat listener web socket connection from ' + remoteIp);
          } else {
            _logger2['default'].debug('Established a new logcat listener web socket connection');
          }
          _this2.adb.setLogcatListener(function (logRecord) {
            if (ws && ws.readyState === _ws2['default'].OPEN) {
              ws.send(logRecord.message);
            }
          });
          ws.on('close', function (code, reason) {
            var closeMsg = 'Logcat listener web socket is closed.';
            if (!_lodash2['default'].isEmpty(code)) {
              closeMsg += ' Code: ' + code + '.';
            }
            if (!_lodash2['default'].isEmpty(reason)) {
              closeMsg += ' Reason: ' + reason + '.';
            }
            _logger2['default'].debug(closeMsg);
          });
        });
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap(this.server.addWebSocketHandler(pathname, wss));

      case 13:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Stops the previously started logcat broadcasting wesocket server.
 * This method will return immediately if no server is running.
 */
commands.mobileStopLogsBroadcast = function callee$0$0() {
  var pathname;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        pathname = WEBSOCKET_ENDPOINT(this.sessionId);
        context$1$0.t0 = _lodash2['default'];
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.server.getWebSocketHandlers(pathname));

      case 4:
        context$1$0.t1 = context$1$0.sent;

        if (!context$1$0.t0.isEmpty.call(context$1$0.t0, context$1$0.t1)) {
          context$1$0.next = 7;
          break;
        }

        return context$1$0.abrupt('return');

      case 7:

        _logger2['default'].debug('Stopping the logcat broadcasting web socket server');
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(this.server.removeWebSocketHandler(pathname));

      case 10:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

_Object$assign(extensions, commands, helpers);
exports.commands = commands;
exports.helpers = helpers;
exports['default'] = extensions;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
