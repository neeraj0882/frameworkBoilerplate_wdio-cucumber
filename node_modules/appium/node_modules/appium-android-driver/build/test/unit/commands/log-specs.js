'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _appiumAdb = require('appium-adb');

var _appiumAdb2 = _interopRequireDefault(_appiumAdb);

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _2 = require('../../..');

var _3 = _interopRequireDefault(_2);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('commands - logging', function () {
  var driver = undefined;
  before(function () {
    driver = new _3['default']();
    driver.adb = new _appiumAdb2['default']();
  });
  describe('getLogTypes', function () {
    it('should respond to the command', function () {
      driver.getLogTypes.should.an['instanceof'](Function);
    });
    it('should get log types', function callee$2$0() {
      var types;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.getLogTypes());

          case 2:
            types = context$3$0.sent;

            // all the types should be returned
            _lodash2['default'].xor(['logcat', 'bugreport', 'server'], types).should.eql([]);

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
  describe('getLog', function () {
    it('should respond to the command', function () {
      driver.getLog.should.be.an['instanceof'](Function);
    });
    it('should get logcat logs', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            _sinon2['default'].stub(driver.adb, 'getLogcatLogs').returns(['logs']);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getLog('logcat'));

          case 3:
            context$3$0.t0 = ['logs'];
            context$3$0.sent.should.be.deep.equal(context$3$0.t0);

            driver.adb.getLogcatLogs.called.should.be['true'];
            driver.adb.getLogcatLogs.restore();

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should get bugreport logs', function callee$2$0() {
      var _ref, _ref2, record1, record2;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            _sinon2['default'].stub(driver.adb, 'bugreport').returns('line1' + _os2['default'].EOL + 'line2');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getLog('bugreport'));

          case 3:
            _ref = context$3$0.sent;
            _ref2 = _slicedToArray(_ref, 2);
            record1 = _ref2[0];
            record2 = _ref2[1];

            record1.message.should.eql('line1');
            record2.message.should.eql('line2');
            driver.adb.bugreport.called.should.be['true'];
            driver.adb.bugreport.restore();

          case 11:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvdW5pdC9jb21tYW5kcy9sb2ctc3BlY3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7b0JBQWlCLE1BQU07Ozs7OEJBQ0ksa0JBQWtCOzs7O3NCQUMvQixRQUFROzs7O3FCQUNKLE9BQU87Ozs7eUJBQ1QsWUFBWTs7OztrQkFDYixJQUFJOzs7O2lCQUNPLFVBQVU7Ozs7QUFHcEMsa0JBQUssTUFBTSxFQUFFLENBQUM7QUFDZCxrQkFBSyxHQUFHLDZCQUFnQixDQUFDOztBQUV6QixRQUFRLENBQUMsb0JBQW9CLEVBQUUsWUFBWTtBQUN6QyxNQUFJLE1BQU0sWUFBQSxDQUFDO0FBQ1gsUUFBTSxDQUFDLFlBQVk7QUFDakIsVUFBTSxHQUFHLG1CQUFtQixDQUFDO0FBQzdCLFVBQU0sQ0FBQyxHQUFHLEdBQUcsNEJBQVMsQ0FBQztHQUN4QixDQUFDLENBQUM7QUFDSCxVQUFRLENBQUMsYUFBYSxFQUFFLFlBQVk7QUFDbEMsTUFBRSxDQUFDLCtCQUErQixFQUFFLFlBQVk7QUFDOUMsWUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsRUFBRSxjQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDbkQsQ0FBQyxDQUFDO0FBQ0gsTUFBRSxDQUFDLHNCQUFzQixFQUFFO1VBQ25CLEtBQUs7Ozs7OzZDQUFTLE1BQU0sQ0FBQyxXQUFXLEVBQUU7OztBQUFsQyxpQkFBSzs7O0FBRVgsZ0NBQUUsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLFdBQVcsRUFBRSxRQUFRLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDOzs7Ozs7O0tBQ2hFLENBQUMsQ0FBQztHQUNKLENBQUMsQ0FBQztBQUNILFVBQVEsQ0FBQyxRQUFRLEVBQUUsWUFBWTtBQUM3QixNQUFFLENBQUMsK0JBQStCLEVBQUUsWUFBWTtBQUM5QyxZQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxjQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDakQsQ0FBQyxDQUFDO0FBQ0gsTUFBRSxDQUFDLHdCQUF3QixFQUFFOzs7O0FBQzNCLCtCQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLGVBQWUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7OzZDQUNuRCxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQzs7OzZCQUF1QixDQUFDLE1BQU0sQ0FBQzs2QkFBN0IsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSzs7QUFDcEQsa0JBQU0sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxRQUFLLENBQUM7QUFDL0Msa0JBQU0sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLE9BQU8sRUFBRSxDQUFDOzs7Ozs7O0tBQ3BDLENBQUMsQ0FBQztBQUNILE1BQUUsQ0FBQywyQkFBMkIsRUFBRTt1QkFFdkIsT0FBTyxFQUFFLE9BQU87Ozs7O0FBRHZCLCtCQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLFdBQVcsQ0FBQyxDQUFDLE9BQU8sV0FBUyxnQkFBRyxHQUFHLFdBQVEsQ0FBQzs7NkNBQ2xDLE1BQU0sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDOzs7OztBQUFwRCxtQkFBTztBQUFFLG1CQUFPOztBQUN2QixtQkFBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3BDLG1CQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDcEMsa0JBQU0sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxRQUFLLENBQUM7QUFDM0Msa0JBQU0sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxDQUFDOzs7Ozs7O0tBQ2hDLENBQUMsQ0FBQztHQUNKLENBQUMsQ0FBQztDQUNKLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L3VuaXQvY29tbWFuZHMvbG9nLXNwZWNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XG5pbXBvcnQgY2hhaUFzUHJvbWlzZWQgZnJvbSAnY2hhaS1hcy1wcm9taXNlZCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHNpbm9uIGZyb20gJ3Npbm9uJztcbmltcG9ydCBBREIgZnJvbSAnYXBwaXVtLWFkYic7XG5pbXBvcnQgb3MgZnJvbSAnb3MnO1xuaW1wb3J0IEFuZHJvaWREcml2ZXIgZnJvbSAnLi4vLi4vLi4nO1xuXG5cbmNoYWkuc2hvdWxkKCk7XG5jaGFpLnVzZShjaGFpQXNQcm9taXNlZCk7XG5cbmRlc2NyaWJlKCdjb21tYW5kcyAtIGxvZ2dpbmcnLCBmdW5jdGlvbiAoKSB7XG4gIGxldCBkcml2ZXI7XG4gIGJlZm9yZShmdW5jdGlvbiAoKSB7XG4gICAgZHJpdmVyID0gbmV3IEFuZHJvaWREcml2ZXIoKTtcbiAgICBkcml2ZXIuYWRiID0gbmV3IEFEQigpO1xuICB9KTtcbiAgZGVzY3JpYmUoJ2dldExvZ1R5cGVzJywgZnVuY3Rpb24gKCkge1xuICAgIGl0KCdzaG91bGQgcmVzcG9uZCB0byB0aGUgY29tbWFuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGRyaXZlci5nZXRMb2dUeXBlcy5zaG91bGQuYW4uaW5zdGFuY2VvZihGdW5jdGlvbik7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBnZXQgbG9nIHR5cGVzJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgdHlwZXMgPSBhd2FpdCBkcml2ZXIuZ2V0TG9nVHlwZXMoKTtcbiAgICAgIC8vIGFsbCB0aGUgdHlwZXMgc2hvdWxkIGJlIHJldHVybmVkXG4gICAgICBfLnhvcihbJ2xvZ2NhdCcsICdidWdyZXBvcnQnLCAnc2VydmVyJ10sIHR5cGVzKS5zaG91bGQuZXFsKFtdKTtcbiAgICB9KTtcbiAgfSk7XG4gIGRlc2NyaWJlKCdnZXRMb2cnLCBmdW5jdGlvbiAoKSB7XG4gICAgaXQoJ3Nob3VsZCByZXNwb25kIHRvIHRoZSBjb21tYW5kJywgZnVuY3Rpb24gKCkge1xuICAgICAgZHJpdmVyLmdldExvZy5zaG91bGQuYmUuYW4uaW5zdGFuY2VvZihGdW5jdGlvbik7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBnZXQgbG9nY2F0IGxvZ3MnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBzaW5vbi5zdHViKGRyaXZlci5hZGIsICdnZXRMb2djYXRMb2dzJykucmV0dXJucyhbJ2xvZ3MnXSk7XG4gICAgICAoYXdhaXQgZHJpdmVyLmdldExvZygnbG9nY2F0JykpLnNob3VsZC5iZS5kZWVwLmVxdWFsKFsnbG9ncyddKTtcbiAgICAgIGRyaXZlci5hZGIuZ2V0TG9nY2F0TG9ncy5jYWxsZWQuc2hvdWxkLmJlLnRydWU7XG4gICAgICBkcml2ZXIuYWRiLmdldExvZ2NhdExvZ3MucmVzdG9yZSgpO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgZ2V0IGJ1Z3JlcG9ydCBsb2dzJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgc2lub24uc3R1Yihkcml2ZXIuYWRiLCAnYnVncmVwb3J0JykucmV0dXJucyhgbGluZTEke29zLkVPTH1saW5lMmApO1xuICAgICAgY29uc3QgW3JlY29yZDEsIHJlY29yZDJdID0gYXdhaXQgZHJpdmVyLmdldExvZygnYnVncmVwb3J0Jyk7XG4gICAgICByZWNvcmQxLm1lc3NhZ2Uuc2hvdWxkLmVxbCgnbGluZTEnKTtcbiAgICAgIHJlY29yZDIubWVzc2FnZS5zaG91bGQuZXFsKCdsaW5lMicpO1xuICAgICAgZHJpdmVyLmFkYi5idWdyZXBvcnQuY2FsbGVkLnNob3VsZC5iZS50cnVlO1xuICAgICAgZHJpdmVyLmFkYi5idWdyZXBvcnQucmVzdG9yZSgpO1xuICAgIH0pO1xuICB9KTtcbn0pOyJdLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vLi4ifQ==
