'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _defineProperty = require('babel-runtime/helpers/define-property')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _toConsumableArray = require('babel-runtime/helpers/to-consumable-array')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumBaseDriver = require('appium-base-driver');

var _uiautomator2 = require('./uiautomator2');

var _uiautomator22 = _interopRequireDefault(_uiautomator2);

var _appiumSupport = require('appium-support');

var _asyncbox = require('asyncbox');

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _commandsIndex = require('./commands/index');

var _commandsIndex2 = _interopRequireDefault(_commandsIndex);

var _appiumAdb = require('appium-adb');

var _helpers = require('./helpers');

var uiautomator2Helpers = _interopRequireWildcard(_helpers);

var _appiumAndroidDriver = require('appium-android-driver');

var _desiredCaps = require('./desired-caps');

var _desiredCaps2 = _interopRequireDefault(_desiredCaps);

var _portscanner = require('portscanner');

var helpers = _Object$assign({}, uiautomator2Helpers, _appiumAndroidDriver.androidHelpers);

// The range of ports we can use on the system for communicating to the
// UiAutomator2 HTTP server on the device
var SYSTEM_PORT_RANGE = [8200, 8299];

// This is the port that UiAutomator2 listens to on the device. We will forward
// one of the ports above on the system to this port on the device.
var DEVICE_PORT = 6790;

// NO_PROXY contains the paths that we never want to proxy to UiAutomator2 server.
// TODO:  Add the list of paths that we never want to proxy to UiAutomator2 server.
// TODO: Need to segregate the paths better way using regular expressions wherever applicable.
// (Not segregating right away because more paths to be added in the NO_PROXY list)
var NO_PROXY = [['GET', new RegExp('^/session/(?!.*\/)')], ['GET', new RegExp('^/session/[^/]+/appium/[^/]+/current_activity')], ['GET', new RegExp('^/session/[^/]+/appium/[^/]+/current_package')], ['GET', new RegExp('^/session/[^/]+/appium/app/[^/]+')], ['GET', new RegExp('^/session/[^/]+/appium/device/[^/]+')], ['GET', new RegExp('^/session/[^/]+/appium/settings')], ['GET', new RegExp('^/session/[^/]+/context')], ['GET', new RegExp('^/session/[^/]+/contexts')], ['GET', new RegExp('^/session/[^/]+/element/[^/]+/attribute')], ['GET', new RegExp('^/session/[^/]+/element/[^/]+/displayed')], ['GET', new RegExp('^/session/[^/]+/element/[^/]+/enabled')], ['GET', new RegExp('^/session/[^/]+/element/[^/]+/location_in_view')], ['GET', new RegExp('^/session/[^/]+/element/[^/]+/name')], ['GET', new RegExp('^/session/[^/]+/element/[^/]+/screenshot')], ['GET', new RegExp('^/session/[^/]+/element/[^/]+/selected')], ['GET', new RegExp('^/session/[^/]+/ime/[^/]+')], ['GET', new RegExp('^/session/[^/]+/log/types')], ['GET', new RegExp('^/session/[^/]+/network_connection')], ['GET', new RegExp('^/session/[^/]+/screenshot')], ['GET', new RegExp('^/session/[^/]+/url')], ['POST', new RegExp('^/session/[^/]+/actions')], ['POST', new RegExp('^/session/[^/]+/app/[^/]')], ['POST', new RegExp('^/session/[^/]+/appium/[^/]+/start_activity')], ['POST', new RegExp('^/session/[^/]+/appium/app/[^/]+')], ['POST', new RegExp('^/session/[^/]+/appium/device/(?!set_clipboard|get_clipboard)[^/]+')], ['POST', new RegExp('^/session/[^/]+/appium/element/[^/]+/replace_value')], ['POST', new RegExp('^/session/[^/]+/appium/element/[^/]+/value')], ['POST', new RegExp('^/session/[^/]+/appium/getPerformanceData')], ['POST', new RegExp('^/session/[^/]+/appium/performanceData/types')], ['POST', new RegExp('^/session/[^/]+/appium/settings')], ['POST', new RegExp('^/session/[^/]+/appium/start_recording_screen')], ['POST', new RegExp('^/session/[^/]+/appium/stop_recording_screen')], ['POST', new RegExp('^/session/[^/]+/context')], ['POST', new RegExp('^/session/[^/]+/element')], ['POST', new RegExp('^/session/[^/]+/ime/[^/]+')], ['POST', new RegExp('^/session/[^/]+/keys')], ['POST', new RegExp('^/session/[^/]+/location')], ['POST', new RegExp('^/session/[^/]+/log')], ['POST', new RegExp('^/session/[^/]+/network_connection')], ['POST', new RegExp('^/session/[^/]+/timeouts')], ['POST', new RegExp('^/session/[^/]+/touch/multi/perform')], ['POST', new RegExp('^/session/[^/]+/touch/perform')], ['POST', new RegExp('^/session/[^/]+/url')],

// MJSONWP commands
['POST', new RegExp('^/session/[^/]+/execute')], ['POST', new RegExp('^/session/[^/]+/execute_async')],
// W3C commands
['GET', new RegExp('^/session/[^/]+/window/rect')], ['POST', new RegExp('^/session/[^/]+/execute/async')], ['POST', new RegExp('^/session/[^/]+/execute/sync')]];

// This is a set of methods and paths that we never want to proxy to Chromedriver.
var CHROME_NO_PROXY = [['GET', new RegExp('^/session/[^/]+/appium')], ['GET', new RegExp('^/session/[^/]+/context')], ['GET', new RegExp('^/session/[^/]+/orientation')], ['POST', new RegExp('^/session/[^/]+/appium')], ['POST', new RegExp('^/session/[^/]+/context')], ['POST', new RegExp('^/session/[^/]+/orientation')], ['POST', new RegExp('^/session/[^/]+/touch/multi/perform')], ['POST', new RegExp('^/session/[^/]+/touch/perform')]];
var APP_EXTENSION = '.apk';

var AndroidUiautomator2Driver = (function (_BaseDriver) {
  _inherits(AndroidUiautomator2Driver, _BaseDriver);

  function AndroidUiautomator2Driver() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var shouldValidateCaps = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

    _classCallCheck(this, AndroidUiautomator2Driver);

    // `shell` overwrites adb.shell, so remove
    delete opts.shell;

    _get(Object.getPrototypeOf(AndroidUiautomator2Driver.prototype), 'constructor', this).call(this, opts, shouldValidateCaps);
    this.locatorStrategies = ['xpath', 'id', 'class name', 'accessibility id', '-android uiautomator'];
    this.desiredCapConstraints = _desiredCaps2['default'];
    this.uiautomator2 = null;
    this.jwpProxyActive = false;
    this.defaultIME = null;
    this.jwpProxyAvoid = NO_PROXY;
    this.apkStrings = {}; // map of language -> strings obj

    this.settings = new _appiumBaseDriver.DeviceSettings({ ignoreUnimportantViews: false, allowInvisibleElements: false }, this.onSettingsUpdate.bind(this));
    // handle webview mechanics from AndroidDriver
    this.chromedriver = null;
    this.sessionChromedrivers = {};

    // memoize per-instance commands
    this.getStatusBarHeight = _lodash2['default'].memoize(this.getStatusBarHeight);
  }

  // first add the android-driver commands which we will fall back to

  _createClass(AndroidUiautomator2Driver, [{
    key: 'createSession',
    value: function createSession() {
      var _len,
          args,
          _key,
          _ref,
          _ref2,
          sessionId,
          caps,
          serverDetails,
          defaultOpts,
          _helpers$getChromePkg,
          pkg,
          activity,
          args$2$0 = arguments;

      return _regeneratorRuntime.async(function createSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.prev = 0;

            for (_len = args$2$0.length, args = Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = args$2$0[_key];
            }

            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(_get(Object.getPrototypeOf(AndroidUiautomator2Driver.prototype), 'createSession', this).apply(this, args));

          case 4:
            _ref = context$2$0.sent;
            _ref2 = _slicedToArray(_ref, 2);
            sessionId = _ref2[0];
            caps = _ref2[1];
            serverDetails = { platform: 'LINUX',
              webStorageEnabled: false,
              takesScreenshot: true,
              javascriptEnabled: true,
              databaseEnabled: false,
              networkConnectionEnabled: true,
              locationContextEnabled: false,
              warnings: {},
              desired: this.caps };

            this.caps = _Object$assign(serverDetails, this.caps);

            this.curContext = this.defaultContextName();

            defaultOpts = {
              fullReset: false,
              autoLaunch: true,
              adbPort: _appiumAdb.DEFAULT_ADB_PORT,
              androidInstallTimeout: 90000
            };

            _lodash2['default'].defaults(this.opts, defaultOpts);

            if (this.isChromeSession) {
              _logger2['default'].info("We're going to run a Chrome-based session");
              _helpers$getChromePkg = helpers.getChromePkg(this.opts.browserName);
              pkg = _helpers$getChromePkg.pkg;
              activity = _helpers$getChromePkg.activity;

              this.opts.appPackage = this.caps.appPackage = pkg;
              this.opts.appActivity = this.caps.appActivity = activity;
              _logger2['default'].info('Chrome-type package and activity are ' + pkg + ' and ' + activity);
            }

            if (this.opts.reboot) {
              this.setAvdFromCapabilities(caps);
            }

            if (!this.opts.app) {
              context$2$0.next = 23;
              break;
            }

            context$2$0.next = 18;
            return _regeneratorRuntime.awrap(this.helpers.configureApp(this.opts.app, APP_EXTENSION));

          case 18:
            this.opts.app = context$2$0.sent;
            context$2$0.next = 21;
            return _regeneratorRuntime.awrap(this.checkAppPresent());

          case 21:
            context$2$0.next = 27;
            break;

          case 23:
            if (!this.appOnDevice) {
              context$2$0.next = 27;
              break;
            }

            // the app isn't an actual app file but rather something we want to
            // assume is on the device and just launch via the appPackage
            _logger2['default'].info('App file was not listed, instead we\'re going to run ' + (this.opts.appPackage + ' directly on the device'));
            context$2$0.next = 27;
            return _regeneratorRuntime.awrap(this.checkPackagePresent());

          case 27:
            context$2$0.t0 = this.opts.systemPort;

            if (context$2$0.t0) {
              context$2$0.next = 32;
              break;
            }

            context$2$0.next = 31;
            return _regeneratorRuntime.awrap((0, _portscanner.findAPortNotInUse)(SYSTEM_PORT_RANGE[0], SYSTEM_PORT_RANGE[1]));

          case 31:
            context$2$0.t0 = context$2$0.sent;

          case 32:
            this.opts.systemPort = context$2$0.t0;

            this.opts.adbPort = this.opts.adbPort || _appiumAdb.DEFAULT_ADB_PORT;

            context$2$0.next = 36;
            return _regeneratorRuntime.awrap(this.startUiAutomator2Session());

          case 36:
            context$2$0.next = 38;
            return _regeneratorRuntime.awrap(this.fillDeviceDetails());

          case 38:
            return context$2$0.abrupt('return', [sessionId, this.caps]);

          case 41:
            context$2$0.prev = 41;
            context$2$0.t1 = context$2$0['catch'](0);
            context$2$0.next = 45;
            return _regeneratorRuntime.awrap(this.deleteSession());

          case 45:
            throw context$2$0.t1;

          case 46:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[0, 41]]);
    }
  }, {
    key: 'fillDeviceDetails',
    value: function fillDeviceDetails() {
      return _regeneratorRuntime.async(function fillDeviceDetails$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.getDevicePixelRatio());

          case 2:
            this.caps.pixelRatio = context$2$0.sent;
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap(this.getStatusBarHeight());

          case 5:
            this.caps.statBarHeight = context$2$0.sent;
            context$2$0.next = 8;
            return _regeneratorRuntime.awrap(this.getViewPortRect());

          case 8:
            this.caps.viewportRect = context$2$0.sent;

          case 9:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getSession',
    value: function getSession() {
      var sessionData, uia2Data;
      return _regeneratorRuntime.async(function getSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(_get(Object.getPrototypeOf(AndroidUiautomator2Driver.prototype), 'getSession', this).call(this));

          case 2:
            sessionData = context$2$0.sent;

            _logger2['default'].debug("Getting session details from server to mix in");
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.uiautomator2.jwproxy.command('/', 'GET', {}));

          case 6:
            uia2Data = context$2$0.sent;
            return context$2$0.abrupt('return', _Object$assign({}, sessionData, uia2Data));

          case 8:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'isEmulator',
    value: function isEmulator() {
      return !!(this.opts.avd || /emulator/.test(this.opts.udid));
    }
  }, {
    key: 'setAvdFromCapabilities',
    value: function setAvdFromCapabilities(caps) {
      if (this.opts.avd) {
        _logger2['default'].info('avd name defined, ignoring device name and platform version');
      } else {
        if (!caps.deviceName) {
          _logger2['default'].errorAndThrow('avd or deviceName should be specified when reboot option is enables');
        }
        if (!caps.platformVersion) {
          _logger2['default'].errorAndThrow('avd or platformVersion should be specified when reboot option is enabled');
        }
        var avdDevice = caps.deviceName.replace(/[^a-zA-Z0-9_.]/g, "-");
        this.opts.avd = avdDevice + '__' + caps.platformVersion;
      }
    }
  }, {
    key: 'startUiAutomator2Session',
    value: function startUiAutomator2Session() {
      var _ref3,

      // get device udid for this session
      udid, emPort, appInfo;

      return _regeneratorRuntime.async(function startUiAutomator2Session$(context$2$0) {
        var _this = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (this.opts.javaVersion) {
              context$2$0.next = 4;
              break;
            }

            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(helpers.getJavaVersion());

          case 3:
            this.opts.javaVersion = context$2$0.sent;

          case 4:
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(helpers.getDeviceInfoFromCaps(this.opts));

          case 6:
            _ref3 = context$2$0.sent;
            udid = _ref3.udid;
            emPort = _ref3.emPort;

            this.opts.udid = udid;
            this.opts.emPort = emPort;

            // now that we know our java version and device info, we can create our
            // ADB instance
            context$2$0.next = 13;
            return _regeneratorRuntime.awrap(_appiumAndroidDriver.androidHelpers.createADB(this.opts.javaVersion, this.opts.udid, this.opts.emPort, this.opts.adbPort, this.opts.suppressKillServer, this.opts.remoteAdbHost, this.opts.clearDeviceLogsOnStart));

          case 13:
            this.adb = context$2$0.sent;
            context$2$0.next = 16;
            return _regeneratorRuntime.awrap(this.adb.getApiLevel());

          case 16:
            context$2$0.t0 = context$2$0.sent;

            if (!(context$2$0.t0 < 21)) {
              context$2$0.next = 19;
              break;
            }

            _logger2['default'].errorAndThrow('UIAutomation2 is only supported since Android 5.0 (Lollipop). ' + 'You could still use other supported backends in order to automate older Android versions.');

          case 19:
            context$2$0.next = 21;
            return _regeneratorRuntime.awrap(helpers.getLaunchInfo(this.adb, this.opts));

          case 21:
            appInfo = context$2$0.sent;

            // and get it onto our 'opts' object so we use it from now on
            _Object$assign(this.opts, appInfo);

            // set actual device name, udid, platform version, screen size, screen density, model and manufacturer details
            this.caps.deviceName = this.adb.curDeviceId;
            this.caps.deviceUDID = this.opts.udid;
            context$2$0.next = 27;
            return _regeneratorRuntime.awrap(this.adb.getPlatformVersion());

          case 27:
            this.caps.platformVersion = context$2$0.sent;
            context$2$0.next = 30;
            return _regeneratorRuntime.awrap(this.adb.getScreenSize());

          case 30:
            this.caps.deviceScreenSize = context$2$0.sent;
            context$2$0.next = 33;
            return _regeneratorRuntime.awrap(this.adb.getScreenDensity());

          case 33:
            this.caps.deviceScreenDensity = context$2$0.sent;
            context$2$0.next = 36;
            return _regeneratorRuntime.awrap(this.adb.getModel());

          case 36:
            this.caps.deviceModel = context$2$0.sent;
            context$2$0.next = 39;
            return _regeneratorRuntime.awrap(this.adb.getManufacturer());

          case 39:
            this.caps.deviceManufacturer = context$2$0.sent;
            context$2$0.next = 42;
            return _regeneratorRuntime.awrap(this.initUiAutomator2Server());

          case 42:
            context$2$0.next = 44;
            return _regeneratorRuntime.awrap(helpers.initDevice(this.adb, this.opts));

          case 44:
            this.defaultIME = context$2$0.sent;

            // Further prepare the device by forwarding the UiAutomator2 port
            _logger2['default'].debug('Forwarding UiAutomator2 Server port ' + DEVICE_PORT + ' to ' + this.opts.systemPort);
            context$2$0.next = 48;
            return _regeneratorRuntime.awrap(this.adb.forwardPort(this.opts.systemPort, DEVICE_PORT));

          case 48:
            if (!this.opts.autoLaunch) {
              context$2$0.next = 51;
              break;
            }

            context$2$0.next = 51;
            return _regeneratorRuntime.awrap(this.initAUT());

          case 51:
            // Adding AUT package name in the capabilities if package name not exist in caps
            if (!this.caps.appPackage && appInfo) {
              this.caps.appPackage = appInfo.appPackage;
            }

            // launch UiAutomator2 and wait till its online and we have a session
            context$2$0.next = 54;
            return _regeneratorRuntime.awrap(this.uiautomator2.startSession(this.caps));

          case 54:
            if (this.opts.skipUnlock) {
              context$2$0.next = 59;
              break;
            }

            context$2$0.next = 57;
            return _regeneratorRuntime.awrap(helpers.unlock(this, this.adb, this.caps));

          case 57:
            context$2$0.next = 60;
            break;

          case 59:
            _logger2['default'].debug('\'skipUnlock\' capability set, so skipping device unlock');

          case 60:
            if (!this.opts.autoLaunch) {
              context$2$0.next = 63;
              break;
            }

            context$2$0.next = 63;
            return _regeneratorRuntime.awrap(this.ensureAppStarts());

          case 63:
            if (!_appiumSupport.util.hasValue(this.opts.orientation)) {
              context$2$0.next = 67;
              break;
            }

            _logger2['default'].debug('Setting initial orientation to \'' + this.opts.orientation + '\'');
            context$2$0.next = 67;
            return _regeneratorRuntime.awrap(this.setOrientation(this.opts.orientation));

          case 67:
            if (!this.opts.autoWebview) {
              context$2$0.next = 70;
              break;
            }

            context$2$0.next = 70;
            return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(20, this.opts.autoWebviewTimeout || 2000, function callee$2$0() {
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    context$3$0.next = 2;
                    return _regeneratorRuntime.awrap(this.setContext(this.defaultWebviewName()));

                  case 2:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this);
            }));

          case 70:
            if (!this.isChromeSession) {
              context$2$0.next = 73;
              break;
            }

            context$2$0.next = 73;
            return _regeneratorRuntime.awrap(this.startChromeSession(this));

          case 73:

            // now that everything has started successfully, turn on proxying so all
            // subsequent session requests go straight to/from uiautomator2
            this.jwpProxyActive = true;

          case 74:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'initUiAutomator2Server',
    value: function initUiAutomator2Server() {
      return _regeneratorRuntime.async(function initUiAutomator2Server$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            // now that we have package and activity, we can create an instance of
            // uiautomator2 with the appropriate data
            this.uiautomator2 = new _uiautomator22['default']({
              host: this.opts.remoteAdbHost || this.opts.host || 'localhost',
              systemPort: this.opts.systemPort,
              devicePort: DEVICE_PORT,
              adb: this.adb,
              apk: this.opts.app,
              tmpDir: this.opts.tmpDir,
              appPackage: this.opts.appPackage,
              appActivity: this.opts.appActivity,
              disableWindowAnimation: !!this.opts.disableWindowAnimation
            });
            this.proxyReqRes = this.uiautomator2.proxyReqRes.bind(this.uiautomator2);

            // killing any uiautomator existing processes
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.uiautomator2.killUiAutomatorOnDevice());

          case 4:
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.uiautomator2.installServerApk(this.opts.uiautomator2ServerInstallTimeout));

          case 6:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'initAUT',
    value: function initAUT() {
      var otherApps, signed;
      return _regeneratorRuntime.async(function initAUT$(context$2$0) {
        var _this2 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(_appiumAndroidDriver.androidHelpers.pushStrings(this.opts.language, this.adb, this.opts));

          case 2:
            this.apkStrings[this.opts.language] = context$2$0.sent;

            if (!this.opts.otherApps) {
              context$2$0.next = 11;
              break;
            }

            otherApps = undefined;

            try {
              otherApps = helpers.parseArray(this.opts.otherApps);
            } catch (e) {
              _logger2['default'].errorAndThrow('Could not parse "otherApps" capability: ' + e.message);
            }
            context$2$0.next = 8;
            return _regeneratorRuntime.awrap(_bluebird2['default'].all(otherApps.map(function (app) {
              return _this2.helpers.configureApp(app, APP_EXTENSION);
            })));

          case 8:
            otherApps = context$2$0.sent;
            context$2$0.next = 11;
            return _regeneratorRuntime.awrap(helpers.installOtherApks(otherApps, this.adb, this.opts));

          case 11:
            if (this.opts.app) {
              context$2$0.next = 17;
              break;
            }

            if (this.opts.fullReset) {
              _logger2['default'].errorAndThrow('Full reset requires an app capability, use fastReset if app is not provided');
            }
            _logger2['default'].debug('No app capability. Assuming it is already on the device');

            if (!this.opts.fastReset) {
              context$2$0.next = 17;
              break;
            }

            context$2$0.next = 17;
            return _regeneratorRuntime.awrap(helpers.resetApp(this.adb, this.opts));

          case 17:
            if (this.opts.skipUninstall) {
              context$2$0.next = 20;
              break;
            }

            context$2$0.next = 20;
            return _regeneratorRuntime.awrap(this.adb.uninstallApk(this.opts.appPackage));

          case 20:
            if (this.opts.noSign) {
              context$2$0.next = 27;
              break;
            }

            context$2$0.next = 23;
            return _regeneratorRuntime.awrap(this.adb.checkApkCert(this.opts.app, this.opts.appPackage));

          case 23:
            signed = context$2$0.sent;

            if (!(!signed && this.opts.app)) {
              context$2$0.next = 27;
              break;
            }

            context$2$0.next = 27;
            return _regeneratorRuntime.awrap(this.adb.sign(this.opts.app, this.opts.appPackage));

          case 27:
            if (!this.opts.app) {
              context$2$0.next = 30;
              break;
            }

            context$2$0.next = 30;
            return _regeneratorRuntime.awrap(helpers.installApk(this.adb, this.opts));

          case 30:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'ensureAppStarts',
    value: function ensureAppStarts() {
      var appWaitPackage, appWaitActivity;
      return _regeneratorRuntime.async(function ensureAppStarts$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            appWaitPackage = this.opts.appWaitPackage || this.opts.appPackage;
            appWaitActivity = this.opts.appWaitActivity || this.opts.appActivity;

            _logger2['default'].info('UiAutomator2 did not start the activity we were waiting for, ' + ('\'' + appWaitPackage + '/' + appWaitActivity + '\'. Starting it ourselves'));

            if (!this.caps.androidCoverage) {
              context$2$0.next = 9;
              break;
            }

            _logger2['default'].info('androidCoverage is configured. ' + (' Starting instrumentation of \'' + this.caps.androidCoverage + '\'...'));
            context$2$0.next = 7;
            return _regeneratorRuntime.awrap(this.adb.androidCoverage(this.caps.androidCoverage, appWaitPackage, appWaitActivity));

          case 7:
            context$2$0.next = 11;
            break;

          case 9:
            context$2$0.next = 11;
            return _regeneratorRuntime.awrap(this.adb.startApp({
              pkg: this.opts.appPackage,
              activity: this.opts.appActivity,
              action: this.opts.intentAction,
              category: this.opts.intentCategory,
              flags: this.opts.intentFlags,
              waitPkg: this.opts.appWaitPackage,
              waitActivity: this.opts.appWaitActivity,
              optionalIntentArguments: this.opts.optionalIntentArguments,
              stopApp: !this.opts.dontStopAppOnReset,
              retry: true
            }));

          case 11:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'deleteSession',
    value: function deleteSession() {
      var avdName;
      return _regeneratorRuntime.async(function deleteSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Deleting UiAutomator2 session');
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(_appiumAndroidDriver.androidHelpers.removeAllSessionWebSocketHandlers(this.server, this.sessionId));

          case 3:
            if (!this.uiautomator2) {
              context$2$0.next = 22;
              break;
            }

            context$2$0.prev = 4;
            context$2$0.next = 7;
            return _regeneratorRuntime.awrap(this.stopChromedriverProxies());

          case 7:
            context$2$0.next = 12;
            break;

          case 9:
            context$2$0.prev = 9;
            context$2$0.t0 = context$2$0['catch'](4);

            _logger2['default'].warn('Unable to stop ChromeDriver proxies: ' + context$2$0.t0.message);

          case 12:
            if (!this.jwpProxyActive) {
              context$2$0.next = 21;
              break;
            }

            context$2$0.prev = 13;
            context$2$0.next = 16;
            return _regeneratorRuntime.awrap(this.uiautomator2.deleteSession());

          case 16:
            context$2$0.next = 21;
            break;

          case 18:
            context$2$0.prev = 18;
            context$2$0.t1 = context$2$0['catch'](13);

            _logger2['default'].warn('Unable to proxy deleteSession to UiAutomator2: ' + context$2$0.t1.message);

          case 21:
            this.uiautomator2 = null;

          case 22:
            this.jwpProxyActive = false;

            if (!this.adb) {
              context$2$0.next = 86;
              break;
            }

            if (!(this.opts.unicodeKeyboard && this.opts.resetKeyboard && this.defaultIME)) {
              context$2$0.next = 34;
              break;
            }

            _logger2['default'].debug('Resetting IME to \'' + this.defaultIME + '\'');
            context$2$0.prev = 26;
            context$2$0.next = 29;
            return _regeneratorRuntime.awrap(this.adb.setIME(this.defaultIME));

          case 29:
            context$2$0.next = 34;
            break;

          case 31:
            context$2$0.prev = 31;
            context$2$0.t2 = context$2$0['catch'](26);

            _logger2['default'].warn('Unable to reset IME: ' + context$2$0.t2.message);

          case 34:
            if (!this.caps.androidCoverage) {
              context$2$0.next = 45;
              break;
            }

            _logger2['default'].info('Shutting down the adb process of instrumentation...');
            context$2$0.next = 38;
            return _regeneratorRuntime.awrap(this.adb.endAndroidCoverage());

          case 38:
            if (!this.caps.androidCoverageEndIntent) {
              context$2$0.next = 44;
              break;
            }

            _logger2['default'].info('Sending intent broadcast \'' + this.caps.androidCoverageEndIntent + '\' at the end of instrumenting.');
            context$2$0.next = 42;
            return _regeneratorRuntime.awrap(this.adb.broadcast(this.caps.androidCoverageEndIntent));

          case 42:
            context$2$0.next = 45;
            break;

          case 44:
            _logger2['default'].warn('No androidCoverageEndIntent is configured in caps. Possibly you cannot get coverage file.');

          case 45:
            if (!this.opts.appPackage) {
              context$2$0.next = 54;
              break;
            }

            context$2$0.prev = 46;
            context$2$0.next = 49;
            return _regeneratorRuntime.awrap(this.adb.forceStop(this.opts.appPackage));

          case 49:
            context$2$0.next = 54;
            break;

          case 51:
            context$2$0.prev = 51;
            context$2$0.t3 = context$2$0['catch'](46);

            _logger2['default'].warn('Unable to force stop app: ' + context$2$0.t3.message);

          case 54:
            if (!(this.opts.fullReset && !this.opts.skipUninstall && !this.appOnDevice)) {
              context$2$0.next = 64;
              break;
            }

            _logger2['default'].debug('Capability \'fullReset\' set to \'true\', Uninstalling \'' + this.opts.appPackage + '\'');
            context$2$0.prev = 56;
            context$2$0.next = 59;
            return _regeneratorRuntime.awrap(this.adb.uninstallApk(this.opts.appPackage));

          case 59:
            context$2$0.next = 64;
            break;

          case 61:
            context$2$0.prev = 61;
            context$2$0.t4 = context$2$0['catch'](56);

            _logger2['default'].warn('Unable to uninstall app: ' + context$2$0.t4.message);

          case 64:
            context$2$0.next = 66;
            return _regeneratorRuntime.awrap(this.adb.stopLogcat());

          case 66:
            if (!_appiumSupport.util.hasValue(this.opts.systemPort)) {
              context$2$0.next = 75;
              break;
            }

            context$2$0.prev = 67;
            context$2$0.next = 70;
            return _regeneratorRuntime.awrap(this.adb.removePortForward(this.opts.systemPort));

          case 70:
            context$2$0.next = 75;
            break;

          case 72:
            context$2$0.prev = 72;
            context$2$0.t5 = context$2$0['catch'](67);

            _logger2['default'].warn('Unable to remove port forward \'' + context$2$0.t5.message + '\'');
            // Ignore, this block will also be called when we fall in catch block
            // and before even port forward.

          case 75:
            if (!this.opts.reboot) {
              context$2$0.next = 86;
              break;
            }

            avdName = this.opts.avd.replace('@', '');

            _logger2['default'].debug('Closing emulator \'' + avdName + '\'');
            context$2$0.prev = 78;
            context$2$0.next = 81;
            return _regeneratorRuntime.awrap(this.adb.killEmulator(avdName));

          case 81:
            context$2$0.next = 86;
            break;

          case 83:
            context$2$0.prev = 83;
            context$2$0.t6 = context$2$0['catch'](78);

            _logger2['default'].warn('Unable to close emulator: ' + context$2$0.t6.message);

          case 86:
            context$2$0.next = 88;
            return _regeneratorRuntime.awrap(_get(Object.getPrototypeOf(AndroidUiautomator2Driver.prototype), 'deleteSession', this).call(this));

          case 88:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[4, 9], [13, 18], [26, 31], [46, 51], [56, 61], [67, 72], [78, 83]]);
    }
  }, {
    key: 'checkAppPresent',
    value: function checkAppPresent() {
      return _regeneratorRuntime.async(function checkAppPresent$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Checking whether app is actually present');
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(this.opts.app));

          case 3:
            if (context$2$0.sent) {
              context$2$0.next = 5;
              break;
            }

            _logger2['default'].errorAndThrow('Could not find app apk at \'' + this.opts.app + '\'');

          case 5:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'defaultWebviewName',
    value: function defaultWebviewName() {
      return _appiumAndroidDriver.WEBVIEW_BASE + '0';
    }
  }, {
    key: 'onSettingsUpdate',
    value: function onSettingsUpdate(key, value) {
      var settings;
      return _regeneratorRuntime.async(function onSettingsUpdate$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            settings = _defineProperty({}, key, value);
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.uiautomator2.jwproxy.command('/appium/settings', 'POST', { settings: settings }));

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    // Need to override android-driver's version of this since we don't actually
    // have a bootstrap; instead we just restart adb and re-forward the UiAutomator2
    // port
  }, {
    key: 'wrapBootstrapDisconnect',
    value: function wrapBootstrapDisconnect(wrapped) {
      return _regeneratorRuntime.async(function wrapBootstrapDisconnect$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(wrapped());

          case 2:
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.adb.restart());

          case 4:
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.adb.forwardPort(this.opts.systemPort, DEVICE_PORT));

          case 6:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'proxyActive',
    value: function proxyActive(sessionId) {
      _get(Object.getPrototypeOf(AndroidUiautomator2Driver.prototype), 'proxyActive', this).call(this, sessionId);

      // we always have an active proxy to the UiAutomator2 server
      return true;
    }
  }, {
    key: 'canProxy',
    value: function canProxy(sessionId) {
      _get(Object.getPrototypeOf(AndroidUiautomator2Driver.prototype), 'canProxy', this).call(this, sessionId);

      // we can always proxy to the uiautomator2 server
      return true;
    }
  }, {
    key: 'getProxyAvoidList',
    value: function getProxyAvoidList(sessionId) {
      _get(Object.getPrototypeOf(AndroidUiautomator2Driver.prototype), 'getProxyAvoidList', this).call(this, sessionId);
      // we are maintaining two sets of NO_PROXY lists, one for chromedriver(CHROME_NO_PROXY)
      // and one for uiautomator2(NO_PROXY), based on current context will return related NO_PROXY list
      if (_appiumSupport.util.hasValue(this.chromedriver)) {
        //if the current context is webview(chromedriver), then return CHROME_NO_PROXY list
        this.jwpProxyAvoid = CHROME_NO_PROXY;
      } else {
        this.jwpProxyAvoid = NO_PROXY;
      }
      if (this.opts.nativeWebScreenshot) {
        this.jwpProxyAvoid = [].concat(_toConsumableArray(this.jwpProxyAvoid), [['GET', new RegExp('^/session/[^/]+/screenshot')]]);
      }

      return this.jwpProxyAvoid;
    }
  }, {
    key: 'driverData',
    get: function get() {
      // TODO fill out resource info here
      return {};
    }
  }, {
    key: 'isChromeSession',
    get: function get() {
      return helpers.isChromeBrowser(this.opts.browserName);
    }
  }]);

  return AndroidUiautomator2Driver;
})(_appiumBaseDriver.BaseDriver);

var _iteratorNormalCompletion = true;
var _didIteratorError = false;
var _iteratorError = undefined;

try {
  for (var _iterator = _getIterator(_lodash2['default'].toPairs(_appiumAndroidDriver.androidCommands)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
    var _step$value = _slicedToArray(_step.value, 2);

    var cmd = _step$value[0];
    var fn = _step$value[1];

    // we do some different/special things with these methods
    if (!_lodash2['default'].includes(['defaultWebviewName'], cmd)) {
      AndroidUiautomator2Driver.prototype[cmd] = fn;
    }
  }

  // then overwrite with any uiautomator2-specific commands
} catch (err) {
  _didIteratorError = true;
  _iteratorError = err;
} finally {
  try {
    if (!_iteratorNormalCompletion && _iterator['return']) {
      _iterator['return']();
    }
  } finally {
    if (_didIteratorError) {
      throw _iteratorError;
    }
  }
}

var _iteratorNormalCompletion2 = true;
var _didIteratorError2 = false;
var _iteratorError2 = undefined;

try {
  for (var _iterator2 = _getIterator(_lodash2['default'].toPairs(_commandsIndex2['default'])), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
    var _step2$value = _slicedToArray(_step2.value, 2);

    var cmd = _step2$value[0];
    var fn = _step2$value[1];

    AndroidUiautomator2Driver.prototype[cmd] = fn;
  }
} catch (err) {
  _didIteratorError2 = true;
  _iteratorError2 = err;
} finally {
  try {
    if (!_iteratorNormalCompletion2 && _iterator2['return']) {
      _iterator2['return']();
    }
  } finally {
    if (_didIteratorError2) {
      throw _iteratorError2;
    }
  }
}

exports['default'] = AndroidUiautomator2Driver;
module.exports = exports['default'];

// TODO handle otherSessionData for multiple sessions

// find and copy, or download and unzip an app url or path

// get appPackage et al from manifest if necessary

// set up the modified UiAutomator2 server etc

// start an avd, set the language/locale, pick an emulator, etc...
// TODO with multiple devices we'll need to parameterize this

// If the user sets autoLaunch to false, they are responsible for initAUT() and startAUT()

// set up app under test
// prepare our actual AUT, get it on the device, etc...

// Unlock the device after the session is started.

// unlock the device to prepare it for testing

// rescue UiAutomator2 if it fails to start our AUT

// if the initial orientation is requested, set it

// if we want to immediately get into a webview, set our context
// appropriately

// set the localized strings for the current language from the apk
// TODO: incorporate changes from appium#5308 which fix a race cond-
// ition bug in old appium and need to be replicated here

// Install any "otherApps" that were specified in caps

// make sure we have an activity and package to wait for

// Use this broadcast intent to notify it's time to dump coverage to file
//# sourceMappingURL=data:application/json;charset=utf8;base64,
