'use strict';

var _extends = require('babel-runtime/helpers/extends')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _desired = require('../../desired');

var _helpersSession = require('../../helpers/session');

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('mobile', function () {
  var driver = undefined;
  before(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          delete _desired.APIDEMOS_CAPS.app;
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap((0, _helpersSession.initDriver)(_extends({}, _desired.APIDEMOS_CAPS, {

            // For deeplinking to work, it has to run a session in a native
            // context but it doesn't matter what native app is run so just
            // run io.appium.settings for simplicity
            appPackage: 'io.appium.settings',
            appActivity: '.Settings'
          })));

        case 3:
          driver = context$2$0.sent;

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });
  after(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(driver.quit());

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });
  describe('mobile:shell', function () {
    it('should call execute command without proxy error, but require relaxed security flag', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.prev = 0;
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.execute('mobile: shell', { command: 'echo', args: ['hello'] }));

          case 3:
            context$3$0.next = 8;
            break;

          case 5:
            context$3$0.prev = 5;
            context$3$0.t0 = context$3$0['catch'](0);

            context$3$0.t0.message.should.match(/Original error: Appium server must have relaxed security flag set in order to run any shell commands/);

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this, [[0, 5]]);
    });
  });
  describe('mobile:deepLink', function () {
    it('should be able to launch apps using Instant Apps', function callee$2$0() {
      var btn;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.prev = 0;
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.execute("mobile: deepLink", { url: 'https://www.realtor.com/realestateandhomes-search/San-Jose_CA', 'package': 'com.move.realtor' }));

          case 3:
            context$3$0.next = 9;
            break;

          case 5:
            context$3$0.prev = 5;
            context$3$0.t0 = context$3$0['catch'](0);

            // Note: Currently no emulators have this feature enabled so for this test to make it past this try-catch
            // block it has to be run on a local emulator/device that has Instant Apps enabled
            // (https://developer.android.com/topic/instant-apps/getting-started/setup.html)
            context$3$0.t0.message.should.match(/unable to resolve intent/i);
            return context$3$0.abrupt('return');

          case 9:
            context$3$0.next = 11;
            return _regeneratorRuntime.awrap(driver.source().should.eventually.match(/com\.move\.realtor/));

          case 11:
            context$3$0.next = 13;
            return _regeneratorRuntime.awrap(driver.elementsByXPath('//android.widget.Button'));

          case 13:
            btn = context$3$0.sent;

            btn.length.should.be.above(0);
            context$3$0.next = 17;
            return _regeneratorRuntime.awrap(btn[0].click());

          case 17:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this, [[0, 5]]);
    });
  });
});

// Check that the source has the package name somewhere

// Check that we can find a native element and interact with it
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZnVuY3Rpb25hbC9jb21tYW5kcy9nZW5lcmFsL21vYmlsZS1jb21tYW5kLWUyZS1zcGVjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztvQkFBaUIsTUFBTTs7Ozs4QkFDSSxrQkFBa0I7Ozs7dUJBQ2YsZUFBZTs7OEJBQ2xCLHVCQUF1Qjs7QUFFbEQsa0JBQUssTUFBTSxFQUFFLENBQUM7QUFDZCxrQkFBSyxHQUFHLDZCQUFnQixDQUFDOztBQUV6QixRQUFRLENBQUMsUUFBUSxFQUFFLFlBQVk7QUFDN0IsTUFBSSxNQUFNLFlBQUEsQ0FBQztBQUNYLFFBQU0sQ0FBQzs7OztBQUNMLGlCQUFPLHVCQUFjLEdBQUcsQ0FBQzs7MkNBQ1Y7Ozs7O0FBTWIsc0JBQVUsRUFBRSxvQkFBb0I7QUFDaEMsdUJBQVcsRUFBRSxXQUFXO2FBQ3hCOzs7QUFSRixnQkFBTTs7Ozs7OztHQVNQLENBQUMsQ0FBQztBQUNILE9BQUssQ0FBQzs7Ozs7MkNBQ0UsTUFBTSxDQUFDLElBQUksRUFBRTs7Ozs7OztHQUNwQixDQUFDLENBQUM7QUFDSCxVQUFRLENBQUMsY0FBYyxFQUFFLFlBQVk7QUFDbkMsTUFBRSxDQUFDLG9GQUFvRixFQUFFOzs7Ozs7NkNBRS9FLE1BQU0sQ0FBQyxPQUFPLENBQUMsZUFBZSxFQUFFLEVBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBQyxDQUFDOzs7Ozs7Ozs7O0FBRXpFLDJCQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLHNHQUFzRyxDQUFDLENBQUM7Ozs7Ozs7S0FFbEksQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDO0FBQ0gsVUFBUSxDQUFDLGlCQUFpQixFQUFFLFlBQVk7QUFDdEMsTUFBRSxDQUFDLGtEQUFrRCxFQUFFO1VBZS9DLEdBQUc7Ozs7Ozs2Q0FiRCxNQUFNLENBQUMsT0FBTyxDQUFDLGtCQUFrQixFQUFFLEVBQUMsR0FBRyxFQUFFLCtEQUErRCxFQUFFLFdBQVMsa0JBQWtCLEVBQUMsQ0FBQzs7Ozs7Ozs7Ozs7OztBQUs3SSwyQkFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQywyQkFBMkIsQ0FBQyxDQUFDOzs7Ozs2Q0FLaEQsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLG9CQUFvQixDQUFDOzs7OzZDQUdqRCxNQUFNLENBQUMsZUFBZSxDQUFDLHlCQUF5QixDQUFDOzs7QUFBN0QsZUFBRzs7QUFDVCxlQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDOzs2Q0FDeEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRTs7Ozs7OztLQUNyQixDQUFDLENBQUM7R0FDSixDQUFDLENBQUM7Q0FDSixDQUFDLENBQUMiLCJmaWxlIjoidGVzdC9mdW5jdGlvbmFsL2NvbW1hbmRzL2dlbmVyYWwvbW9iaWxlLWNvbW1hbmQtZTJlLXNwZWNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XG5pbXBvcnQgY2hhaUFzUHJvbWlzZWQgZnJvbSAnY2hhaS1hcy1wcm9taXNlZCc7XG5pbXBvcnQgeyBBUElERU1PU19DQVBTIH0gZnJvbSAnLi4vLi4vZGVzaXJlZCc7XG5pbXBvcnQgeyBpbml0RHJpdmVyIH0gZnJvbSAnLi4vLi4vaGVscGVycy9zZXNzaW9uJztcblxuY2hhaS5zaG91bGQoKTtcbmNoYWkudXNlKGNoYWlBc1Byb21pc2VkKTtcblxuZGVzY3JpYmUoJ21vYmlsZScsIGZ1bmN0aW9uICgpIHtcbiAgbGV0IGRyaXZlcjtcbiAgYmVmb3JlKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBkZWxldGUgQVBJREVNT1NfQ0FQUy5hcHA7XG4gICAgZHJpdmVyID0gYXdhaXQgaW5pdERyaXZlcih7XG4gICAgICAuLi5BUElERU1PU19DQVBTLFxuXG4gICAgICAvLyBGb3IgZGVlcGxpbmtpbmcgdG8gd29yaywgaXQgaGFzIHRvIHJ1biBhIHNlc3Npb24gaW4gYSBuYXRpdmVcbiAgICAgIC8vIGNvbnRleHQgYnV0IGl0IGRvZXNuJ3QgbWF0dGVyIHdoYXQgbmF0aXZlIGFwcCBpcyBydW4gc28ganVzdFxuICAgICAgLy8gcnVuIGlvLmFwcGl1bS5zZXR0aW5ncyBmb3Igc2ltcGxpY2l0eVxuICAgICAgYXBwUGFja2FnZTogJ2lvLmFwcGl1bS5zZXR0aW5ncycsXG4gICAgICBhcHBBY3Rpdml0eTogJy5TZXR0aW5ncycsXG4gICAgfSk7XG4gIH0pO1xuICBhZnRlcihhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgYXdhaXQgZHJpdmVyLnF1aXQoKTtcbiAgfSk7XG4gIGRlc2NyaWJlKCdtb2JpbGU6c2hlbGwnLCBmdW5jdGlvbiAoKSB7XG4gICAgaXQoJ3Nob3VsZCBjYWxsIGV4ZWN1dGUgY29tbWFuZCB3aXRob3V0IHByb3h5IGVycm9yLCBidXQgcmVxdWlyZSByZWxheGVkIHNlY3VyaXR5IGZsYWcnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBkcml2ZXIuZXhlY3V0ZSgnbW9iaWxlOiBzaGVsbCcsIHtjb21tYW5kOiAnZWNobycsIGFyZ3M6IFsnaGVsbG8nXX0pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBlLm1lc3NhZ2Uuc2hvdWxkLm1hdGNoKC9PcmlnaW5hbCBlcnJvcjogQXBwaXVtIHNlcnZlciBtdXN0IGhhdmUgcmVsYXhlZCBzZWN1cml0eSBmbGFnIHNldCBpbiBvcmRlciB0byBydW4gYW55IHNoZWxsIGNvbW1hbmRzLyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICBkZXNjcmliZSgnbW9iaWxlOmRlZXBMaW5rJywgZnVuY3Rpb24gKCkge1xuICAgIGl0KCdzaG91bGQgYmUgYWJsZSB0byBsYXVuY2ggYXBwcyB1c2luZyBJbnN0YW50IEFwcHMnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBkcml2ZXIuZXhlY3V0ZShcIm1vYmlsZTogZGVlcExpbmtcIiwge3VybDogJ2h0dHBzOi8vd3d3LnJlYWx0b3IuY29tL3JlYWxlc3RhdGVhbmRob21lcy1zZWFyY2gvU2FuLUpvc2VfQ0EnLCBwYWNrYWdlOiAnY29tLm1vdmUucmVhbHRvcid9KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gTm90ZTogQ3VycmVudGx5IG5vIGVtdWxhdG9ycyBoYXZlIHRoaXMgZmVhdHVyZSBlbmFibGVkIHNvIGZvciB0aGlzIHRlc3QgdG8gbWFrZSBpdCBwYXN0IHRoaXMgdHJ5LWNhdGNoXG4gICAgICAgIC8vIGJsb2NrIGl0IGhhcyB0byBiZSBydW4gb24gYSBsb2NhbCBlbXVsYXRvci9kZXZpY2UgdGhhdCBoYXMgSW5zdGFudCBBcHBzIGVuYWJsZWRcbiAgICAgICAgLy8gKGh0dHBzOi8vZGV2ZWxvcGVyLmFuZHJvaWQuY29tL3RvcGljL2luc3RhbnQtYXBwcy9nZXR0aW5nLXN0YXJ0ZWQvc2V0dXAuaHRtbClcbiAgICAgICAgZS5tZXNzYWdlLnNob3VsZC5tYXRjaCgvdW5hYmxlIHRvIHJlc29sdmUgaW50ZW50L2kpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIENoZWNrIHRoYXQgdGhlIHNvdXJjZSBoYXMgdGhlIHBhY2thZ2UgbmFtZSBzb21ld2hlcmVcbiAgICAgIGF3YWl0IGRyaXZlci5zb3VyY2UoKS5zaG91bGQuZXZlbnR1YWxseS5tYXRjaCgvY29tXFwubW92ZVxcLnJlYWx0b3IvKTtcblxuICAgICAgLy8gQ2hlY2sgdGhhdCB3ZSBjYW4gZmluZCBhIG5hdGl2ZSBlbGVtZW50IGFuZCBpbnRlcmFjdCB3aXRoIGl0XG4gICAgICBjb25zdCBidG4gPSBhd2FpdCBkcml2ZXIuZWxlbWVudHNCeVhQYXRoKCcvL2FuZHJvaWQud2lkZ2V0LkJ1dHRvbicpO1xuICAgICAgYnRuLmxlbmd0aC5zaG91bGQuYmUuYWJvdmUoMCk7XG4gICAgICBhd2FpdCBidG5bMF0uY2xpY2soKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vLi4vLi4ifQ==
