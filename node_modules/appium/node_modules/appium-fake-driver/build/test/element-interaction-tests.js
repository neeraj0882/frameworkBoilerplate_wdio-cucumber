'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _helpers = require('./helpers');

var should = _chai2['default'].should();

function elementTests() {
  describe('element interaction and introspection', function () {
    var driver = undefined;
    before(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _helpers.initSession)(_helpers.DEFAULT_CAPS));

          case 2:
            driver = context$3$0.sent;

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    after(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _helpers.deleteSession)());

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should not send keys to an invalid element', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.elementByXPath('//MockListItem').sendKeys("test value").should.eventually.be.rejectedWith(/12/));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should send keys to an element and retrieve text', function callee$2$0() {
      var el;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.elementByXPath('//MockInputField'));

          case 2:
            el = context$3$0.sent;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(el.sendKeys("test value"));

          case 5:
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(el.text());

          case 7:
            context$3$0.sent.should.eql("test value");

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should not clear an invalid element', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.elementByXPath('//MockListItem').clear().should.eventually.be.rejectedWith(/12/));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should clear an element', function callee$2$0() {
      var el;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            el = driver.elementByXPath('//MockInputField');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(el.text());

          case 3:
            context$3$0.sent.should.not.eql('');
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(el.clear());

          case 6:
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(el.text());

          case 8:
            context$3$0.sent.should.eql('');

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should not click an invisible element', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.elementById('Button1').click().should.eventually.be.rejectedWith(/12/));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should click an element and get its attributes', function callee$2$0() {
      var el;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            el = driver.elementById('Button2');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(el.click());

          case 3:
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(el.click());

          case 5:
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(el.click());

          case 7:
            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(el.getAttribute('clicks'));

          case 9:
            context$3$0.sent.should.equal(3);

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should get the name of an element', function callee$2$0() {
      var el;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.elementByClassName('MockInputField'));

          case 2:
            el = context$3$0.sent;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(el.getTagName());

          case 5:
            context$3$0.sent.should.equal('MockInputField');
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(driver.elementById('wv'));

          case 8:
            el = context$3$0.sent;
            context$3$0.next = 11;
            return _regeneratorRuntime.awrap(el.getTagName());

          case 11:
            context$3$0.sent.should.equal('MockWebView');

          case 12:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should detect whether an element is displayed', function callee$2$0() {
      var el;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            el = driver.elementById('Button1');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(el.isDisplayed());

          case 3:
            context$3$0.sent.should.equal(false);

            el = driver.elementById('Button2');
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(el.isDisplayed());

          case 7:
            context$3$0.sent.should.equal(true);

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should detect whether an element is enabled', function callee$2$0() {
      var el;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            el = driver.elementById('Button1');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(el.isEnabled());

          case 3:
            context$3$0.sent.should.equal(false);

            el = driver.elementById('Button2');
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(el.isEnabled());

          case 7:
            context$3$0.sent.should.equal(true);

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should detect whether an element is selected', function callee$2$0() {
      var el;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            el = driver.elementById('Button1');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(el.isSelected());

          case 3:
            context$3$0.sent.should.equal(false);

            el = driver.elementById('Button2');
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(el.isSelected());

          case 7:
            context$3$0.sent.should.equal(true);

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should get the location on screen of an element', function callee$2$0() {
      var el;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            el = driver.elementById('nav');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(el.getLocation());

          case 3:
            context$3$0.t0 = { x: 1, y: 1 };
            context$3$0.sent.should.eql(context$3$0.t0);

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should get the location on screen of an element with float vals', function callee$2$0() {
      var el;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            el = driver.elementById('lv');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(el.getLocation());

          case 3:
            context$3$0.t0 = { x: 20.8, y: 15.3 };
            context$3$0.sent.should.eql(context$3$0.t0);

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should get the location in view of an element', function callee$2$0() {
      var el;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            el = driver.elementById('nav');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(el.getLocationInView());

          case 3:
            context$3$0.t0 = { x: 1, y: 1 };
            context$3$0.sent.should.eql(context$3$0.t0);

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should get the location in view of an element with float vals', function callee$2$0() {
      var el;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            el = driver.elementById('lv');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(el.getLocationInView());

          case 3:
            context$3$0.t0 = { x: 20.8, y: 15.3 };
            context$3$0.sent.should.eql(context$3$0.t0);

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should get the size of an element', function callee$2$0() {
      var el;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.elementById('nav'));

          case 2:
            el = context$3$0.sent;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(el.getSize());

          case 5:
            context$3$0.t0 = { width: 100, height: 100 };
            context$3$0.sent.should.eql(context$3$0.t0);

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should get the size of an element with float vals', function callee$2$0() {
      var el;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.elementById('wv'));

          case 2:
            el = context$3$0.sent;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(el.getSize());

          case 5:
            context$3$0.t0 = { width: 20.8, height: 20.5 };
            context$3$0.sent.should.eql(context$3$0.t0);

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should determine element equality', function callee$2$0() {
      var el1, el2;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.elementById('wv'));

          case 2:
            el1 = context$3$0.sent;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(driver.elementById('wv'));

          case 5:
            el2 = context$3$0.sent;
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(el1.equals(el2));

          case 8:
            context$3$0.sent.should.equal(true);

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should determine element inequality', function callee$2$0() {
      var el1, el2;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.elementById('wv'));

          case 2:
            el1 = context$3$0.sent;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(driver.elementById('lv'));

          case 5:
            el2 = context$3$0.sent;
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(el1.equals(el2));

          case 8:
            context$3$0.sent.should.equal(false);

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should not get the css property of an element when not in a webview', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.elementById('Button1').getComputedCss('height').should.eventually.be.rejectedWith(/36/));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should get the css property of an element when in a webview', function callee$2$0() {
      var el;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.context('WEBVIEW_1'));

          case 2:
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.elementByTagName('body'));

          case 4:
            el = context$3$0.sent;
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(el.getComputedCss('background-color'));

          case 7:
            context$3$0.sent.should.equal('#000');

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should return null for an unspecified css property', function callee$2$0() {
      var el;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.elementByTagName('body'));

          case 2:
            el = context$3$0.sent;
            context$3$0.t0 = should;
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(el.getComputedCss('font-size'));

          case 6:
            context$3$0.t1 = context$3$0.sent;
            context$3$0.t0.equal.call(context$3$0.t0, context$3$0.t1, null);

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
}

exports['default'] = elementTests;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,
