require('source-map-support').install();

'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _wd = require('wd');

var _wd2 = _interopRequireDefault(_wd);

var _requestPromise = require('request-promise');

var _requestPromise2 = _interopRequireDefault(_requestPromise);

var _appiumBaseDriverBuildTestBasedriver = require('appium-base-driver/build/test/basedriver');

var _ = require('..');

var _helpers = require('./helpers');

var _contextTests = require('./context-tests');

var _contextTests2 = _interopRequireDefault(_contextTests);

var _findElementTests = require('./find-element-tests');

var _findElementTests2 = _interopRequireDefault(_findElementTests);

var _elementInteractionTests = require('./element-interaction-tests');

var _elementInteractionTests2 = _interopRequireDefault(_elementInteractionTests);

var _alertTests = require('./alert-tests');

var _alertTests2 = _interopRequireDefault(_alertTests);

var _generalTests = require('./general-tests');

var _generalTests2 = _interopRequireDefault(_generalTests);

var should = _chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);
var shouldStartServer = process.env.USE_RUNNING_SERVER !== "0";

// test the same things as for base driver
(0, _appiumBaseDriverBuildTestBasedriver.baseDriverUnitTests)(_.FakeDriver, _helpers.DEFAULT_CAPS);
(0, _appiumBaseDriverBuildTestBasedriver.baseDriverE2ETests)(_.FakeDriver, _helpers.DEFAULT_CAPS);

describe('FakeDriver - via HTTP', function () {
  var server = null;
  before(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          if (!shouldStartServer) {
            context$2$0.next = 4;
            break;
          }

          context$2$0.next = 3;
          return _regeneratorRuntime.awrap((0, _.startServer)(_helpers.TEST_PORT, _helpers.TEST_HOST));

        case 3:
          server = context$2$0.sent;

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });
  after(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          if (server) {
            server.close();
          }

        case 1:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  describe('session handling', function () {
    it('should start and stop a session', function callee$2$0() {
      var driver, _ref, _ref2, sessionId;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver = _wd2['default'].promiseChainRemote(_helpers.TEST_HOST, _helpers.TEST_PORT);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.init(_helpers.DEFAULT_CAPS));

          case 3:
            _ref = context$3$0.sent;
            _ref2 = _slicedToArray(_ref, 1);
            sessionId = _ref2[0];

            should.exist(sessionId);
            sessionId.should.be.a('string');
            context$3$0.next = 10;
            return _regeneratorRuntime.awrap(driver.quit());

          case 10:
            context$3$0.next = 12;
            return _regeneratorRuntime.awrap(driver.title().should.eventually.be.rejectedWith(/terminated/));

          case 12:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });

  describe('session-based tests', function () {
    (0, _contextTests2['default'])();
    (0, _findElementTests2['default'])();
    (0, _elementInteractionTests2['default'])();
    (0, _alertTests2['default'])();
    (0, _generalTests2['default'])();
  });

  describe('w3c', function () {
    it('should return value.capabilities object for W3C', function callee$2$0() {
      var res;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(_requestPromise2['default'].post('http://' + _helpers.TEST_HOST + ':' + _helpers.TEST_PORT + '/wd/hub/session', {
              json: {
                capabilities: {
                  alwaysMatch: _helpers.DEFAULT_CAPS,
                  firstMatch: [{
                    'appium:fakeCap': 'Foo'
                  }]
                }
              }
            }));

          case 2:
            res = context$3$0.sent;

            res.value.capabilities.should.deep.equal(_Object$assign({}, _helpers.DEFAULT_CAPS, {
              fakeCap: 'Foo'
            }));
            res.value.sessionId.should.exist;
            should.not.exist(res.status);
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(_requestPromise2['default']['delete']('http://' + _helpers.TEST_HOST + ':' + _helpers.TEST_PORT + '/wd/hub/session/' + res.value.sessionId));

          case 8:
            res = context$3$0.sent;

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should return value object for MJSONWP as desiredCapabilities', function callee$2$0() {
      var res;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(_requestPromise2['default'].post('http://' + _helpers.TEST_HOST + ':' + _helpers.TEST_PORT + '/wd/hub/session', {
              json: { desiredCapabilities: _helpers.DEFAULT_CAPS }
            }));

          case 2:
            res = context$3$0.sent;

            res.value.should.deep.equal(_helpers.DEFAULT_CAPS);
            res.status.should.equal(0);
            res.sessionId.should.exist;
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(_requestPromise2['default']['delete']('http://' + _helpers.TEST_HOST + ':' + _helpers.TEST_PORT + '/wd/hub/session/' + res.sessionId));

          case 8:
            res = context$3$0.sent;

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZHJpdmVyLWUyZS1zcGVjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7b0JBRWlCLE1BQU07Ozs7OEJBQ0ksa0JBQWtCOzs7O2tCQUM5QixJQUFJOzs7OzhCQUNDLGlCQUFpQjs7OzttREFDbUIsMENBQTBDOztnQkFDMUQsSUFBSTs7dUJBQ08sV0FBVzs7NEJBQ3JDLGlCQUFpQjs7OztnQ0FDYixzQkFBc0I7Ozs7dUNBQ2YsNkJBQTZCOzs7OzBCQUMxQyxlQUFlOzs7OzRCQUNiLGlCQUFpQjs7OztBQUcxQyxJQUFNLE1BQU0sR0FBRyxrQkFBSyxNQUFNLEVBQUUsQ0FBQztBQUM3QixrQkFBSyxHQUFHLDZCQUFnQixDQUFDO0FBQ3pCLElBQU0saUJBQWlCLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsS0FBSyxHQUFHLENBQUM7OztBQUdqRSxrR0FBNkMsQ0FBQztBQUM5QyxpR0FBNEMsQ0FBQzs7QUFFN0MsUUFBUSxDQUFDLHVCQUF1QixFQUFFLFlBQVk7QUFDNUMsTUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDO0FBQ2xCLFFBQU0sQ0FBQzs7OztlQUNELGlCQUFpQjs7Ozs7OzJDQUNKLDBEQUFpQzs7O0FBQWhELGdCQUFNOzs7Ozs7O0dBRVQsQ0FBQyxDQUFDO0FBQ0gsT0FBSyxDQUFDOzs7O0FBQ0osY0FBSSxNQUFNLEVBQUU7QUFDVixrQkFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO1dBQ2hCOzs7Ozs7O0dBQ0YsQ0FBQyxDQUFDOztBQUVILFVBQVEsQ0FBQyxrQkFBa0IsRUFBRSxZQUFZO0FBQ3ZDLE1BQUUsQ0FBQyxpQ0FBaUMsRUFBRTtVQUNoQyxNQUFNLGVBQ0wsU0FBUzs7Ozs7QUFEVixrQkFBTSxHQUFHLGdCQUFHLGtCQUFrQix3Q0FBc0I7OzZDQUNoQyxNQUFNLENBQUMsSUFBSSx1QkFBYzs7Ozs7QUFBNUMscUJBQVM7O0FBQ2Qsa0JBQU0sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDeEIscUJBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQzs7NkNBQzFCLE1BQU0sQ0FBQyxJQUFJLEVBQUU7Ozs7NkNBQ2IsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUM7Ozs7Ozs7S0FDckUsQ0FBQyxDQUFDO0dBRUosQ0FBQyxDQUFDOztBQUVILFVBQVEsQ0FBQyxxQkFBcUIsRUFBRSxZQUFZO0FBQzFDLG9DQUFjLENBQUM7QUFDZix3Q0FBa0IsQ0FBQztBQUNuQiwrQ0FBeUIsQ0FBQztBQUMxQixrQ0FBWSxDQUFDO0FBQ2Isb0NBQWMsQ0FBQztHQUNoQixDQUFDLENBQUM7O0FBRUgsVUFBUSxDQUFDLEtBQUssRUFBRSxZQUFZO0FBQzFCLE1BQUUsQ0FBQyxpREFBaUQsRUFBRTtVQUNoRCxHQUFHOzs7Ozs2Q0FBUyw0QkFBUSxJQUFJLGdGQUFvRDtBQUM5RSxrQkFBSSxFQUFFO0FBQ0osNEJBQVksRUFBRTtBQUNaLDZCQUFXLHVCQUFjO0FBQ3pCLDRCQUFVLEVBQUUsQ0FBQztBQUNYLG9DQUFnQixFQUFFLEtBQUs7bUJBQ3hCLENBQUM7aUJBQ0g7ZUFDRjthQUNGLENBQUM7OztBQVRFLGVBQUc7O0FBVVAsZUFBRyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBYyxFQUFFLHlCQUFnQjtBQUN2RSxxQkFBTyxFQUFFLEtBQUs7YUFDZixDQUFDLENBQUMsQ0FBQztBQUNKLGVBQUcsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7QUFDakMsa0JBQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQzs7NkNBQ2pCLHFDQUFjLGtGQUFvRCxHQUFHLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBRzs7O0FBQXBHLGVBQUc7Ozs7Ozs7S0FDSixDQUFDLENBQUM7O0FBRUgsTUFBRSxDQUFDLCtEQUErRCxFQUFFO1VBQzlELEdBQUc7Ozs7OzZDQUFTLDRCQUFRLElBQUksZ0ZBQW9EO0FBQzlFLGtCQUFJLEVBQUUsRUFBRSxtQkFBbUIsdUJBQWMsRUFBRTthQUM1QyxDQUFDOzs7QUFGRSxlQUFHOztBQUdQLGVBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLHVCQUFjLENBQUM7QUFDMUMsZUFBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzNCLGVBQUcsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQzs7NkNBQ2YscUNBQWMsa0ZBQW9ELEdBQUcsQ0FBQyxTQUFTLENBQUc7OztBQUE5RixlQUFHOzs7Ozs7O0tBQ0osQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDO0NBRUosQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3QvZHJpdmVyLWUyZS1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRyYW5zcGlsZTptb2NoYVxuXG5pbXBvcnQgY2hhaSBmcm9tICdjaGFpJztcbmltcG9ydCBjaGFpQXNQcm9taXNlZCBmcm9tICdjaGFpLWFzLXByb21pc2VkJztcbmltcG9ydCB3ZCBmcm9tICd3ZCc7XG5pbXBvcnQgcmVxdWVzdCBmcm9tICdyZXF1ZXN0LXByb21pc2UnO1xuaW1wb3J0IHsgYmFzZURyaXZlckUyRVRlc3RzLCBiYXNlRHJpdmVyVW5pdFRlc3RzIH0gZnJvbSAnYXBwaXVtLWJhc2UtZHJpdmVyL2J1aWxkL3Rlc3QvYmFzZWRyaXZlcic7XG5pbXBvcnQgeyBGYWtlRHJpdmVyLCBzdGFydFNlcnZlciB9IGZyb20gJy4uJztcbmltcG9ydCB7IERFRkFVTFRfQ0FQUywgVEVTVF9IT1NULCBURVNUX1BPUlQgfSBmcm9tICcuL2hlbHBlcnMnO1xuaW1wb3J0IGNvbnRleHRUZXN0cyBmcm9tICcuL2NvbnRleHQtdGVzdHMnO1xuaW1wb3J0IGZpbmRFbGVtZW50VGVzdHMgZnJvbSAnLi9maW5kLWVsZW1lbnQtdGVzdHMnO1xuaW1wb3J0IGVsZW1lbnRJbnRlcmFjdGlvblRlc3RzIGZyb20gJy4vZWxlbWVudC1pbnRlcmFjdGlvbi10ZXN0cyc7XG5pbXBvcnQgYWxlcnRUZXN0cyBmcm9tICcuL2FsZXJ0LXRlc3RzJztcbmltcG9ydCBnZW5lcmFsVGVzdHMgZnJvbSAnLi9nZW5lcmFsLXRlc3RzJztcblxuXG5jb25zdCBzaG91bGQgPSBjaGFpLnNob3VsZCgpO1xuY2hhaS51c2UoY2hhaUFzUHJvbWlzZWQpO1xuY29uc3Qgc2hvdWxkU3RhcnRTZXJ2ZXIgPSBwcm9jZXNzLmVudi5VU0VfUlVOTklOR19TRVJWRVIgIT09IFwiMFwiO1xuXG4vLyB0ZXN0IHRoZSBzYW1lIHRoaW5ncyBhcyBmb3IgYmFzZSBkcml2ZXJcbmJhc2VEcml2ZXJVbml0VGVzdHMoRmFrZURyaXZlciwgREVGQVVMVF9DQVBTKTtcbmJhc2VEcml2ZXJFMkVUZXN0cyhGYWtlRHJpdmVyLCBERUZBVUxUX0NBUFMpO1xuXG5kZXNjcmliZSgnRmFrZURyaXZlciAtIHZpYSBIVFRQJywgZnVuY3Rpb24gKCkge1xuICBsZXQgc2VydmVyID0gbnVsbDtcbiAgYmVmb3JlKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoc2hvdWxkU3RhcnRTZXJ2ZXIpIHtcbiAgICAgIHNlcnZlciA9IGF3YWl0IHN0YXJ0U2VydmVyKFRFU1RfUE9SVCwgVEVTVF9IT1NUKTtcbiAgICB9XG4gIH0pO1xuICBhZnRlcihhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHNlcnZlcikge1xuICAgICAgc2VydmVyLmNsb3NlKCk7XG4gICAgfVxuICB9KTtcblxuICBkZXNjcmliZSgnc2Vzc2lvbiBoYW5kbGluZycsIGZ1bmN0aW9uICgpIHtcbiAgICBpdCgnc2hvdWxkIHN0YXJ0IGFuZCBzdG9wIGEgc2Vzc2lvbicsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBkcml2ZXIgPSB3ZC5wcm9taXNlQ2hhaW5SZW1vdGUoVEVTVF9IT1NULCBURVNUX1BPUlQpO1xuICAgICAgbGV0IFtzZXNzaW9uSWRdID0gYXdhaXQgZHJpdmVyLmluaXQoREVGQVVMVF9DQVBTKTtcbiAgICAgIHNob3VsZC5leGlzdChzZXNzaW9uSWQpO1xuICAgICAgc2Vzc2lvbklkLnNob3VsZC5iZS5hKCdzdHJpbmcnKTtcbiAgICAgIGF3YWl0IGRyaXZlci5xdWl0KCk7XG4gICAgICBhd2FpdCBkcml2ZXIudGl0bGUoKS5zaG91bGQuZXZlbnR1YWxseS5iZS5yZWplY3RlZFdpdGgoL3Rlcm1pbmF0ZWQvKTtcbiAgICB9KTtcblxuICB9KTtcblxuICBkZXNjcmliZSgnc2Vzc2lvbi1iYXNlZCB0ZXN0cycsIGZ1bmN0aW9uICgpIHtcbiAgICBjb250ZXh0VGVzdHMoKTtcbiAgICBmaW5kRWxlbWVudFRlc3RzKCk7XG4gICAgZWxlbWVudEludGVyYWN0aW9uVGVzdHMoKTtcbiAgICBhbGVydFRlc3RzKCk7XG4gICAgZ2VuZXJhbFRlc3RzKCk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCd3M2MnLCBmdW5jdGlvbiAoKSB7XG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gdmFsdWUuY2FwYWJpbGl0aWVzIG9iamVjdCBmb3IgVzNDJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IHJlcyA9IGF3YWl0IHJlcXVlc3QucG9zdChgaHR0cDovLyR7VEVTVF9IT1NUfToke1RFU1RfUE9SVH0vd2QvaHViL3Nlc3Npb25gLCB7XG4gICAgICAgIGpzb246IHtcbiAgICAgICAgICBjYXBhYmlsaXRpZXM6IHtcbiAgICAgICAgICAgIGFsd2F5c01hdGNoOiBERUZBVUxUX0NBUFMsXG4gICAgICAgICAgICBmaXJzdE1hdGNoOiBbe1xuICAgICAgICAgICAgICAnYXBwaXVtOmZha2VDYXAnOiAnRm9vJyxcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXMudmFsdWUuY2FwYWJpbGl0aWVzLnNob3VsZC5kZWVwLmVxdWFsKE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfQ0FQUywge1xuICAgICAgICBmYWtlQ2FwOiAnRm9vJyxcbiAgICAgIH0pKTtcbiAgICAgIHJlcy52YWx1ZS5zZXNzaW9uSWQuc2hvdWxkLmV4aXN0O1xuICAgICAgc2hvdWxkLm5vdC5leGlzdChyZXMuc3RhdHVzKTtcbiAgICAgIHJlcyA9IGF3YWl0IHJlcXVlc3QuZGVsZXRlKGBodHRwOi8vJHtURVNUX0hPU1R9OiR7VEVTVF9QT1JUfS93ZC9odWIvc2Vzc2lvbi8ke3Jlcy52YWx1ZS5zZXNzaW9uSWR9YCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJldHVybiB2YWx1ZSBvYmplY3QgZm9yIE1KU09OV1AgYXMgZGVzaXJlZENhcGFiaWxpdGllcycsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCByZXMgPSBhd2FpdCByZXF1ZXN0LnBvc3QoYGh0dHA6Ly8ke1RFU1RfSE9TVH06JHtURVNUX1BPUlR9L3dkL2h1Yi9zZXNzaW9uYCwge1xuICAgICAgICBqc29uOiB7IGRlc2lyZWRDYXBhYmlsaXRpZXM6IERFRkFVTFRfQ0FQUyB9XG4gICAgICB9KTtcbiAgICAgIHJlcy52YWx1ZS5zaG91bGQuZGVlcC5lcXVhbChERUZBVUxUX0NBUFMpO1xuICAgICAgcmVzLnN0YXR1cy5zaG91bGQuZXF1YWwoMCk7XG4gICAgICByZXMuc2Vzc2lvbklkLnNob3VsZC5leGlzdDtcbiAgICAgIHJlcyA9IGF3YWl0IHJlcXVlc3QuZGVsZXRlKGBodHRwOi8vJHtURVNUX0hPU1R9OiR7VEVTVF9QT1JUfS93ZC9odWIvc2Vzc2lvbi8ke3Jlcy5zZXNzaW9uSWR9YCk7XG4gICAgfSk7XG4gIH0pO1xuXG59KTtcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
