'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _helpers = require('./helpers');

var should = _chai2['default'].should();

function generalTests() {
  describe('generic actions', function () {
    var driver = undefined;

    before(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _helpers.initSession)(_helpers.DEFAULT_CAPS));

          case 2:
            driver = context$3$0.sent;

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    after(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _helpers.deleteSession)());

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should not send keys without a focused element', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.keys("test").should.eventually.be.rejectedWith(/12/));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should send keys to a focused element', function callee$2$0() {
      var el;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.elementById('input'));

          case 2:
            el = context$3$0.sent;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(el.click());

          case 5:
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(driver.keys("test"));

          case 7:
            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(el.text());

          case 9:
            context$3$0.sent.should.equal("test");

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it.skip('should set geolocation', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.setGeoLocation(-30, 30));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should get geolocation', function callee$2$0() {
      var geo;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.getGeoLocation());

          case 2:
            geo = context$3$0.sent;

            should.exist(geo.latitude);
            should.exist(geo.longitude);

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should get app source', function callee$2$0() {
      var source;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.source());

          case 2:
            source = context$3$0.sent;

            source.should.contain('<MockNavBar id="nav"');

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    // TODO do we want to test driver.pageIndex? probably not

    it('should get the orientation', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.getOrientation());

          case 2:
            context$3$0.sent.should.equal("PORTRAIT");

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should set the orientation to something valid', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.setOrientation("LANDSCAPE"));

          case 2:
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.getOrientation());

          case 4:
            context$3$0.sent.should.equal("LANDSCAPE");

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should not set the orientation to something invalid', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.setOrientation("INSIDEOUT").should.eventually.be.rejectedWith(/Orientation must be/));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should get a screenshot', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.t0 = should;
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.takeScreenshot());

          case 3:
            context$3$0.t1 = context$3$0.sent;
            context$3$0.t0.exist.call(context$3$0.t0, context$3$0.t1);

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should set implicit wait timeout', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.setImplicitWaitTimeout(1000));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should not set invalid implicit wait timeout', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.setImplicitWaitTimeout('foo').should.eventually.be.rejectedWith(/ms/));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    // skip these until basedriver supports these timeouts
    it.skip('should set async script timeout', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.setAsyncScriptTimeout(1000));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it.skip('should not set invalid async script timeout', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.setAsyncScriptTimeout('foo').should.eventually.be.rejectedWith(/ms/));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it.skip('should set page load timeout', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.setPageLoadTimeout(1000));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it.skip('should not set page load script timeout', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.setPageLoadTimeout('foo').should.eventually.be.rejectedWith(/ms/));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
}

exports['default'] = generalTests;
module.exports = exports['default'];

// TODO unquarantine when WD fixes what it sends the server
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZ2VuZXJhbC10ZXN0cy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O29CQUFpQixNQUFNOzs7O3VCQUNrQyxXQUFXOztBQUVwRSxJQUFNLE1BQU0sR0FBRyxrQkFBSyxNQUFNLEVBQUUsQ0FBQzs7QUFFN0IsU0FBUyxZQUFZLEdBQUk7QUFDdkIsVUFBUSxDQUFDLGlCQUFpQixFQUFFLFlBQVk7QUFDdEMsUUFBSSxNQUFNLFlBQUEsQ0FBQzs7QUFFWCxVQUFNLENBQUM7Ozs7OzZDQUNVLGdEQUF5Qjs7O0FBQXhDLGtCQUFNOzs7Ozs7O0tBQ1AsQ0FBQyxDQUFDOztBQUVILFNBQUssQ0FBQzs7Ozs7NkNBQ0UsNkJBQWU7Ozs7Ozs7S0FDdEIsQ0FBQyxDQUFDOztBQUVILE1BQUUsQ0FBQyxnREFBZ0QsRUFBRTs7Ozs7NkNBQzdDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQzs7Ozs7OztLQUNsRSxDQUFDLENBQUM7QUFDSCxNQUFFLENBQUMsdUNBQXVDLEVBQUU7VUFDdEMsRUFBRTs7Ozs7NkNBQVMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUM7OztBQUF0QyxjQUFFOzs2Q0FDQSxFQUFFLENBQUMsS0FBSyxFQUFFOzs7OzZDQUNWLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDOzs7OzZDQUNsQixFQUFFLENBQUMsSUFBSSxFQUFFOzs7NkJBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNOzs7Ozs7O0tBQ3RDLENBQUMsQ0FBQztBQUNILE1BQUUsQ0FBQyxJQUFJLENBQUMsd0JBQXdCLEVBQUU7Ozs7OzZDQUUxQixNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQzs7Ozs7OztLQUNyQyxDQUFDLENBQUM7QUFDSCxNQUFFLENBQUMsd0JBQXdCLEVBQUU7VUFDdkIsR0FBRzs7Ozs7NkNBQVMsTUFBTSxDQUFDLGNBQWMsRUFBRTs7O0FBQW5DLGVBQUc7O0FBQ1Asa0JBQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzNCLGtCQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQzs7Ozs7OztLQUM3QixDQUFDLENBQUM7QUFDSCxNQUFFLENBQUMsdUJBQXVCLEVBQUU7VUFDdEIsTUFBTTs7Ozs7NkNBQVMsTUFBTSxDQUFDLE1BQU0sRUFBRTs7O0FBQTlCLGtCQUFNOztBQUNWLGtCQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDOzs7Ozs7O0tBQy9DLENBQUMsQ0FBQzs7O0FBR0gsTUFBRSxDQUFDLDRCQUE0QixFQUFFOzs7Ozs2Q0FDeEIsTUFBTSxDQUFDLGNBQWMsRUFBRTs7OzZCQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBVTs7Ozs7OztLQUN4RCxDQUFDLENBQUM7QUFDSCxNQUFFLENBQUMsK0NBQStDLEVBQUU7Ozs7OzZDQUM1QyxNQUFNLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQzs7Ozs2Q0FDakMsTUFBTSxDQUFDLGNBQWMsRUFBRTs7OzZCQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsV0FBVzs7Ozs7OztLQUN6RCxDQUFDLENBQUM7QUFDSCxNQUFFLENBQUMscURBQXFELEVBQUU7Ozs7OzZDQUNsRCxNQUFNLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUMvQixNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMscUJBQXFCLENBQUM7Ozs7Ozs7S0FDbEUsQ0FBQyxDQUFDOztBQUVILE1BQUUsQ0FBQyx5QkFBeUIsRUFBRTs7Ozs2QkFDNUIsTUFBTTs7NkNBQWEsTUFBTSxDQUFDLGNBQWMsRUFBRTs7OzsyQkFBbkMsS0FBSzs7Ozs7OztLQUNiLENBQUMsQ0FBQzs7QUFFSCxNQUFFLENBQUMsa0NBQWtDLEVBQUU7Ozs7OzZDQUMvQixNQUFNLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDOzs7Ozs7O0tBQzFDLENBQUMsQ0FBQztBQUNILE1BQUUsQ0FBQyw4Q0FBOEMsRUFBRTs7Ozs7NkNBQzNDLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxLQUFLLENBQUMsQ0FDakMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQzs7Ozs7OztLQUNqRCxDQUFDLENBQUM7OztBQUdILE1BQUUsQ0FBQyxJQUFJLENBQUMsaUNBQWlDLEVBQUU7Ozs7OzZDQUNuQyxNQUFNLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDOzs7Ozs7O0tBQ3pDLENBQUMsQ0FBQztBQUNILE1BQUUsQ0FBQyxJQUFJLENBQUMsNkNBQTZDLEVBQUU7Ozs7OzZDQUMvQyxNQUFNLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQ2hDLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUM7Ozs7Ozs7S0FDakQsQ0FBQyxDQUFDOztBQUVILE1BQUUsQ0FBQyxJQUFJLENBQUMsOEJBQThCLEVBQUU7Ozs7OzZDQUNoQyxNQUFNLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDOzs7Ozs7O0tBQ3RDLENBQUMsQ0FBQztBQUNILE1BQUUsQ0FBQyxJQUFJLENBQUMseUNBQXlDLEVBQUU7Ozs7OzZDQUMzQyxNQUFNLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQzdCLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUM7Ozs7Ozs7S0FDakQsQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDO0NBQ0o7O3FCQUVjLFlBQVkiLCJmaWxlIjoidGVzdC9nZW5lcmFsLXRlc3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XG5pbXBvcnQgeyBpbml0U2Vzc2lvbiwgZGVsZXRlU2Vzc2lvbiwgREVGQVVMVF9DQVBTIH0gZnJvbSAnLi9oZWxwZXJzJztcblxuY29uc3Qgc2hvdWxkID0gY2hhaS5zaG91bGQoKTtcblxuZnVuY3Rpb24gZ2VuZXJhbFRlc3RzICgpIHtcbiAgZGVzY3JpYmUoJ2dlbmVyaWMgYWN0aW9ucycsIGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgZHJpdmVyO1xuXG4gICAgYmVmb3JlKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGRyaXZlciA9IGF3YWl0IGluaXRTZXNzaW9uKERFRkFVTFRfQ0FQUyk7XG4gICAgfSk7XG5cbiAgICBhZnRlcihhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBhd2FpdCBkZWxldGVTZXNzaW9uKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIG5vdCBzZW5kIGtleXMgd2l0aG91dCBhIGZvY3VzZWQgZWxlbWVudCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGF3YWl0IGRyaXZlci5rZXlzKFwidGVzdFwiKS5zaG91bGQuZXZlbnR1YWxseS5iZS5yZWplY3RlZFdpdGgoLzEyLyk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBzZW5kIGtleXMgdG8gYSBmb2N1c2VkIGVsZW1lbnQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgZWwgPSBhd2FpdCBkcml2ZXIuZWxlbWVudEJ5SWQoJ2lucHV0Jyk7XG4gICAgICBhd2FpdCBlbC5jbGljaygpO1xuICAgICAgYXdhaXQgZHJpdmVyLmtleXMoXCJ0ZXN0XCIpO1xuICAgICAgKGF3YWl0IGVsLnRleHQoKSkuc2hvdWxkLmVxdWFsKFwidGVzdFwiKTtcbiAgICB9KTtcbiAgICBpdC5za2lwKCdzaG91bGQgc2V0IGdlb2xvY2F0aW9uJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgLy8gVE9ETyB1bnF1YXJhbnRpbmUgd2hlbiBXRCBmaXhlcyB3aGF0IGl0IHNlbmRzIHRoZSBzZXJ2ZXJcbiAgICAgIGF3YWl0IGRyaXZlci5zZXRHZW9Mb2NhdGlvbigtMzAsIDMwKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIGdldCBnZW9sb2NhdGlvbicsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBnZW8gPSBhd2FpdCBkcml2ZXIuZ2V0R2VvTG9jYXRpb24oKTtcbiAgICAgIHNob3VsZC5leGlzdChnZW8ubGF0aXR1ZGUpO1xuICAgICAgc2hvdWxkLmV4aXN0KGdlby5sb25naXR1ZGUpO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgZ2V0IGFwcCBzb3VyY2UnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgc291cmNlID0gYXdhaXQgZHJpdmVyLnNvdXJjZSgpO1xuICAgICAgc291cmNlLnNob3VsZC5jb250YWluKCc8TW9ja05hdkJhciBpZD1cIm5hdlwiJyk7XG4gICAgfSk7XG4gICAgLy8gVE9ETyBkbyB3ZSB3YW50IHRvIHRlc3QgZHJpdmVyLnBhZ2VJbmRleD8gcHJvYmFibHkgbm90XG5cbiAgICBpdCgnc2hvdWxkIGdldCB0aGUgb3JpZW50YXRpb24nLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAoYXdhaXQgZHJpdmVyLmdldE9yaWVudGF0aW9uKCkpLnNob3VsZC5lcXVhbChcIlBPUlRSQUlUXCIpO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgc2V0IHRoZSBvcmllbnRhdGlvbiB0byBzb21ldGhpbmcgdmFsaWQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBhd2FpdCBkcml2ZXIuc2V0T3JpZW50YXRpb24oXCJMQU5EU0NBUEVcIik7XG4gICAgICAoYXdhaXQgZHJpdmVyLmdldE9yaWVudGF0aW9uKCkpLnNob3VsZC5lcXVhbChcIkxBTkRTQ0FQRVwiKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIG5vdCBzZXQgdGhlIG9yaWVudGF0aW9uIHRvIHNvbWV0aGluZyBpbnZhbGlkJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgYXdhaXQgZHJpdmVyLnNldE9yaWVudGF0aW9uKFwiSU5TSURFT1VUXCIpXG4gICAgICAgICAgICAgIC5zaG91bGQuZXZlbnR1YWxseS5iZS5yZWplY3RlZFdpdGgoL09yaWVudGF0aW9uIG11c3QgYmUvKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgZ2V0IGEgc2NyZWVuc2hvdCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNob3VsZC5leGlzdChhd2FpdCBkcml2ZXIudGFrZVNjcmVlbnNob3QoKSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHNldCBpbXBsaWNpdCB3YWl0IHRpbWVvdXQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBhd2FpdCBkcml2ZXIuc2V0SW1wbGljaXRXYWl0VGltZW91dCgxMDAwKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIG5vdCBzZXQgaW52YWxpZCBpbXBsaWNpdCB3YWl0IHRpbWVvdXQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBhd2FpdCBkcml2ZXIuc2V0SW1wbGljaXRXYWl0VGltZW91dCgnZm9vJylcbiAgICAgICAgICAgICAgLnNob3VsZC5ldmVudHVhbGx5LmJlLnJlamVjdGVkV2l0aCgvbXMvKTtcbiAgICB9KTtcblxuICAgIC8vIHNraXAgdGhlc2UgdW50aWwgYmFzZWRyaXZlciBzdXBwb3J0cyB0aGVzZSB0aW1lb3V0c1xuICAgIGl0LnNraXAoJ3Nob3VsZCBzZXQgYXN5bmMgc2NyaXB0IHRpbWVvdXQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBhd2FpdCBkcml2ZXIuc2V0QXN5bmNTY3JpcHRUaW1lb3V0KDEwMDApO1xuICAgIH0pO1xuICAgIGl0LnNraXAoJ3Nob3VsZCBub3Qgc2V0IGludmFsaWQgYXN5bmMgc2NyaXB0IHRpbWVvdXQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBhd2FpdCBkcml2ZXIuc2V0QXN5bmNTY3JpcHRUaW1lb3V0KCdmb28nKVxuICAgICAgICAgICAgICAuc2hvdWxkLmV2ZW50dWFsbHkuYmUucmVqZWN0ZWRXaXRoKC9tcy8pO1xuICAgIH0pO1xuXG4gICAgaXQuc2tpcCgnc2hvdWxkIHNldCBwYWdlIGxvYWQgdGltZW91dCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGF3YWl0IGRyaXZlci5zZXRQYWdlTG9hZFRpbWVvdXQoMTAwMCk7XG4gICAgfSk7XG4gICAgaXQuc2tpcCgnc2hvdWxkIG5vdCBzZXQgcGFnZSBsb2FkIHNjcmlwdCB0aW1lb3V0JywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgYXdhaXQgZHJpdmVyLnNldFBhZ2VMb2FkVGltZW91dCgnZm9vJylcbiAgICAgICAgICAgICAgLnNob3VsZC5ldmVudHVhbGx5LmJlLnJlamVjdGVkV2l0aCgvbXMvKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdlbmVyYWxUZXN0cztcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
