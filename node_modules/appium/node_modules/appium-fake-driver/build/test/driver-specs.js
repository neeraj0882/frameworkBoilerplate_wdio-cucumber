require('source-map-support').install();

'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

require('request-promise');

var _2 = require('..');

var _helpers = require('./helpers');

_chai2['default'].use(_chaiAsPromised2['default']);

_chai2['default'].should();

describe('FakeDriver', function () {
  it('should not start a session when a unique session is already running', function callee$1$0() {
    var d1, caps1, _ref, _ref2, uniqueSession, d2, otherSessionData;

    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          d1 = new _2.FakeDriver();
          caps1 = _lodash2['default'].clone(_helpers.DEFAULT_CAPS);

          caps1.uniqueApp = true;
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(d1.createSession(caps1, {}));

        case 5:
          _ref = context$2$0.sent;
          _ref2 = _slicedToArray(_ref, 1);
          uniqueSession = _ref2[0];

          uniqueSession.should.be.a('string');
          d2 = new _2.FakeDriver();
          otherSessionData = [d1.driverData];
          context$2$0.next = 13;
          return _regeneratorRuntime.awrap(d2.createSession(_helpers.DEFAULT_CAPS, {}, null, otherSessionData).should.eventually.be.rejectedWith(/unique/));

        case 13:
          context$2$0.next = 15;
          return _regeneratorRuntime.awrap(d1.deleteSession(uniqueSession));

        case 15:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });
  it('should start a new session when another non-unique session is running', function callee$1$0() {
    var d1, _ref3, _ref32, session1Id, d2, otherSessionData, _ref4, _ref42, session2Id;

    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          d1 = new _2.FakeDriver();
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(d1.createSession(_helpers.DEFAULT_CAPS, {}));

        case 3:
          _ref3 = context$2$0.sent;
          _ref32 = _slicedToArray(_ref3, 1);
          session1Id = _ref32[0];

          session1Id.should.be.a('string');
          d2 = new _2.FakeDriver();
          otherSessionData = [d1.driverData];
          context$2$0.next = 11;
          return _regeneratorRuntime.awrap(d2.createSession(_helpers.DEFAULT_CAPS, {}, null, otherSessionData));

        case 11:
          _ref4 = context$2$0.sent;
          _ref42 = _slicedToArray(_ref4, 1);
          session2Id = _ref42[0];

          session2Id.should.be.a('string');
          session1Id.should.not.equal(session2Id);
          context$2$0.next = 18;
          return _regeneratorRuntime.awrap(d1.deleteSession(session1Id));

        case 18:
          context$2$0.next = 20;
          return _regeneratorRuntime.awrap(d2.deleteSession(session2Id));

        case 20:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZHJpdmVyLXNwZWNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7c0JBRWMsUUFBUTs7OztvQkFDTCxNQUFNOzs7OzhCQUNJLGtCQUFrQjs7OztRQUN0QyxpQkFBaUI7O2lCQUNHLElBQUk7O3VCQUNGLFdBQVc7O0FBRXhDLGtCQUFLLEdBQUcsNkJBQWdCLENBQUM7O0FBRXpCLGtCQUFLLE1BQU0sRUFBRSxDQUFDOztBQUVkLFFBQVEsQ0FBQyxZQUFZLEVBQUUsWUFBWTtBQUNqQyxJQUFFLENBQUMscUVBQXFFLEVBQUU7UUFDcEUsRUFBRSxFQUNGLEtBQUssZUFFSixhQUFhLEVBRWQsRUFBRSxFQUNGLGdCQUFnQjs7Ozs7QUFOaEIsWUFBRSxHQUFHLG1CQUFnQjtBQUNyQixlQUFLLEdBQUcsb0JBQUUsS0FBSyx1QkFBYzs7QUFDakMsZUFBSyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7OzJDQUNLLEVBQUUsQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQzs7Ozs7QUFBbEQsdUJBQWE7O0FBQ2xCLHVCQUFhLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDaEMsWUFBRSxHQUFHLG1CQUFnQjtBQUNyQiwwQkFBZ0IsR0FBRyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUM7OzJDQUNoQyxFQUFFLENBQUMsYUFBYSx3QkFBZSxFQUFFLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixDQUFDLENBQ3ZELE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUM7Ozs7MkNBQzlDLEVBQUUsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDOzs7Ozs7O0dBQ3RDLENBQUMsQ0FBQztBQUNILElBQUUsQ0FBQyx1RUFBdUUsRUFBRTtRQUN0RSxFQUFFLGlCQUNELFVBQVUsRUFFWCxFQUFFLEVBQ0YsZ0JBQWdCLGlCQUNmLFVBQVU7Ozs7O0FBTFgsWUFBRSxHQUFHLG1CQUFnQjs7MkNBQ0EsRUFBRSxDQUFDLGFBQWEsd0JBQWUsRUFBRSxDQUFDOzs7OztBQUF0RCxvQkFBVTs7QUFDZixvQkFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzdCLFlBQUUsR0FBRyxtQkFBZ0I7QUFDckIsMEJBQWdCLEdBQUcsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDOzsyQ0FDYixFQUFFLENBQUMsYUFBYSx3QkFBZSxFQUFFLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixDQUFDOzs7OztBQUE5RSxvQkFBVTs7QUFDZixvQkFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ2pDLG9CQUFVLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7OzJDQUNsQyxFQUFFLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQzs7OzsyQ0FDNUIsRUFBRSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUM7Ozs7Ozs7R0FDbkMsQ0FBQyxDQUFDO0NBQ0osQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3QvZHJpdmVyLXNwZWNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHJhbnNwaWxlOm1vY2hhXG5cbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgY2hhaSBmcm9tICdjaGFpJztcbmltcG9ydCBjaGFpQXNQcm9taXNlZCBmcm9tICdjaGFpLWFzLXByb21pc2VkJztcbmltcG9ydCAncmVxdWVzdC1wcm9taXNlJztcbmltcG9ydCB7IEZha2VEcml2ZXIgfSBmcm9tICcuLic7XG5pbXBvcnQgeyBERUZBVUxUX0NBUFMgfSBmcm9tICcuL2hlbHBlcnMnO1xuXG5jaGFpLnVzZShjaGFpQXNQcm9taXNlZCk7XG5cbmNoYWkuc2hvdWxkKCk7XG5cbmRlc2NyaWJlKCdGYWtlRHJpdmVyJywgZnVuY3Rpb24gKCkge1xuICBpdCgnc2hvdWxkIG5vdCBzdGFydCBhIHNlc3Npb24gd2hlbiBhIHVuaXF1ZSBzZXNzaW9uIGlzIGFscmVhZHkgcnVubmluZycsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgZDEgPSBuZXcgRmFrZURyaXZlcigpO1xuICAgIGxldCBjYXBzMSA9IF8uY2xvbmUoREVGQVVMVF9DQVBTKTtcbiAgICBjYXBzMS51bmlxdWVBcHAgPSB0cnVlO1xuICAgIGxldCBbdW5pcXVlU2Vzc2lvbl0gPSBhd2FpdCBkMS5jcmVhdGVTZXNzaW9uKGNhcHMxLCB7fSk7XG4gICAgdW5pcXVlU2Vzc2lvbi5zaG91bGQuYmUuYSgnc3RyaW5nJyk7XG4gICAgbGV0IGQyID0gbmV3IEZha2VEcml2ZXIoKTtcbiAgICBsZXQgb3RoZXJTZXNzaW9uRGF0YSA9IFtkMS5kcml2ZXJEYXRhXTtcbiAgICBhd2FpdCBkMi5jcmVhdGVTZXNzaW9uKERFRkFVTFRfQ0FQUywge30sIG51bGwsIG90aGVyU2Vzc2lvbkRhdGEpXG4gICAgICAgICAgICAuc2hvdWxkLmV2ZW50dWFsbHkuYmUucmVqZWN0ZWRXaXRoKC91bmlxdWUvKTtcbiAgICBhd2FpdCBkMS5kZWxldGVTZXNzaW9uKHVuaXF1ZVNlc3Npb24pO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBzdGFydCBhIG5ldyBzZXNzaW9uIHdoZW4gYW5vdGhlciBub24tdW5pcXVlIHNlc3Npb24gaXMgcnVubmluZycsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgZDEgPSBuZXcgRmFrZURyaXZlcigpO1xuICAgIGxldCBbc2Vzc2lvbjFJZF0gPSBhd2FpdCBkMS5jcmVhdGVTZXNzaW9uKERFRkFVTFRfQ0FQUywge30pO1xuICAgIHNlc3Npb24xSWQuc2hvdWxkLmJlLmEoJ3N0cmluZycpO1xuICAgIGxldCBkMiA9IG5ldyBGYWtlRHJpdmVyKCk7XG4gICAgbGV0IG90aGVyU2Vzc2lvbkRhdGEgPSBbZDEuZHJpdmVyRGF0YV07XG4gICAgbGV0IFtzZXNzaW9uMklkXSA9IGF3YWl0IGQyLmNyZWF0ZVNlc3Npb24oREVGQVVMVF9DQVBTLCB7fSwgbnVsbCwgb3RoZXJTZXNzaW9uRGF0YSk7XG4gICAgc2Vzc2lvbjJJZC5zaG91bGQuYmUuYSgnc3RyaW5nJyk7XG4gICAgc2Vzc2lvbjFJZC5zaG91bGQubm90LmVxdWFsKHNlc3Npb24ySWQpO1xuICAgIGF3YWl0IGQxLmRlbGV0ZVNlc3Npb24oc2Vzc2lvbjFJZCk7XG4gICAgYXdhaXQgZDIuZGVsZXRlU2Vzc2lvbihzZXNzaW9uMklkKTtcbiAgfSk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
