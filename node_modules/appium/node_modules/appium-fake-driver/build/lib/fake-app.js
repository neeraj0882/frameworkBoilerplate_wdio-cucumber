'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _xmldom = require('xmldom');

var _xmldom2 = _interopRequireDefault(_xmldom);

var _xpath = require('xpath');

var _xpath2 = _interopRequireDefault(_xpath);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _fakeElement = require('./fake-element');

var readFile = _bluebird2['default'].promisify(_fs2['default'].readFile);

var FakeApp = (function () {
  function FakeApp() {
    _classCallCheck(this, FakeApp);

    this.dom = null;
    this.activeDom = null;
    this.activeWebview = null;
    this.activeFrame = null;
    this.activeAlert = null;
    this.lat = 0;
    this.long = 0;
    this.rawXml = '';
    this.currentOrientation = "PORTRAIT";
  }

  _createClass(FakeApp, [{
    key: 'loadApp',
    value: function loadApp(appPath) {
      var data;
      return _regeneratorRuntime.async(function loadApp$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].info("Loading Mock app model");
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(readFile(appPath));

          case 3:
            data = context$2$0.sent;

            _logger2['default'].info("Parsing Mock app XML");
            this.rawXml = data.toString();
            this.dom = new _xmldom2['default'].DOMParser().parseFromString(this.rawXml);
            this.activeDom = this.dom;

          case 8:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getWebviews',
    value: function getWebviews() {
      return this.xpathQuery('//MockWebView/*[1]').map(function (n) {
        return new FakeWebView(n);
      });
    }
  }, {
    key: 'activateWebview',
    value: function activateWebview(wv) {
      this.activeWebview = wv;
      var fragment = new _xmldom2['default'].XMLSerializer().serializeToString(wv.node);
      this.activeDom = new _xmldom2['default'].DOMParser().parseFromString(fragment, "application/xml");
    }
  }, {
    key: 'deactivateWebview',
    value: function deactivateWebview() {
      this.activeWebview = null;
      this.activeDom = this.dom;
    }
  }, {
    key: 'activateFrame',
    value: function activateFrame(frame) {
      this.activeFrame = frame;
      var fragment = new _xmldom2['default'].XMLSerializer().serializeToString(frame);
      this.activeDom = new _xmldom2['default'].DOMParser().parseFromString(fragment, "application/xml");
    }
  }, {
    key: 'deactivateFrame',
    value: function deactivateFrame() {
      this.activeFrame = null;
      this.activateWebview(this.activeWebview);
    }
  }, {
    key: 'xpathQuery',
    value: function xpathQuery(sel, ctx) {
      return _xpath2['default'].select(sel, ctx || this.activeDom);
    }
  }, {
    key: 'idQuery',
    value: function idQuery(id, ctx) {
      return this.xpathQuery('//*[@id="' + id + '"]', ctx);
    }
  }, {
    key: 'classQuery',
    value: function classQuery(className, ctx) {
      return this.xpathQuery('//' + className, ctx);
    }
  }, {
    key: 'hasAlert',
    value: function hasAlert() {
      return this.activeAlert !== null;
    }
  }, {
    key: 'setAlertText',
    value: function setAlertText(text) {
      if (!this.activeAlert.hasPrompt()) {
        throw new Error("No prompt to set text of");
      }
      this.activeAlert.setAttr('prompt', text);
    }
  }, {
    key: 'showAlert',
    value: function showAlert(alertId) {
      var nodes = this.xpathQuery('//alert[@id="' + alertId + '"]');
      if (nodes.length < 1) {
        throw new Error('Alert ' + alertId + ' doesn\'t exist!');
      }
      this.activeAlert = new _fakeElement.FakeElement(nodes[0], this);
    }
  }, {
    key: 'alertText',
    value: function alertText() {
      return this.activeAlert.getAttr('prompt') || this.activeAlert.nodeAttrs.text;
    }
  }, {
    key: 'handleAlert',
    value: function handleAlert() {
      this.activeAlert = null;
    }
  }, {
    key: 'getScreenshot',
    value: function getScreenshot() {
      return "hahahanotreallyascreenshot";
    }
  }, {
    key: 'title',
    get: function get() {
      var nodes = this.xpathQuery('//title');
      if (nodes.length < 1) {
        throw new Error("No title!");
      }
      return nodes[0].firstChild.data;
    }
  }, {
    key: 'currentGeoLocation',
    get: function get() {
      return {
        latitude: this.lat,
        longitude: this.long
      };
    }
  }, {
    key: 'orientation',
    get: function get() {
      return this.currentOrientation;
    },
    set: function set(o) {
      this.currentOrientation = o;
    }
  }]);

  return FakeApp;
})();

var FakeWebView = function FakeWebView(node) {
  _classCallCheck(this, FakeWebView);

  this.node = node;
};

exports.FakeApp = FakeApp;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
