'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _xmldom = require('xmldom');

var _xmldom2 = _interopRequireDefault(_xmldom);

var FakeElement = (function () {
  function FakeElement(xmlNode, app) {
    _classCallCheck(this, FakeElement);

    this.app = app;
    this.node = xmlNode;
    this.nodeAttrs = {};
    this.type = this.node.tagName;
    this.attrs = {};
    this.css = {};
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = _getIterator(_lodash2['default'].values(this.node.attributes)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var _step$value = _step.value;
        var _name = _step$value.name;
        var value = _step$value.value;

        this.nodeAttrs[_name] = value;
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    this.parseCss();
  }

  _createClass(FakeElement, [{
    key: 'parseCss',
    value: function parseCss() {
      if (this.nodeAttrs.style) {
        var segments = this.nodeAttrs.style.split(";");
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = _getIterator(segments), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var s = _step2.value;

            var _s$split = s.split(":");

            var _s$split2 = _slicedToArray(_s$split, 2);

            var prop = _s$split2[0];
            var val = _s$split2[1];

            prop = prop.trim();
            val = val.trim();
            this.css[prop] = val;
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2['return']) {
              _iterator2['return']();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      }
    }
  }, {
    key: 'setAttr',
    value: function setAttr(k, v) {
      this.attrs[k] = v;
    }
  }, {
    key: 'getAttr',
    value: function getAttr(k) {
      return this.attrs[k] || "";
    }
  }, {
    key: 'isVisible',
    value: function isVisible() {
      return this.nodeAttrs.visible !== "false";
    }
  }, {
    key: 'isEnabled',
    value: function isEnabled() {
      return this.nodeAttrs.enabled !== "false";
    }
  }, {
    key: 'isSelected',
    value: function isSelected() {
      return this.nodeAttrs.selected === "true";
    }
  }, {
    key: 'getLocation',
    value: function getLocation() {
      return {
        x: parseFloat(this.nodeAttrs.left || 0),
        y: parseFloat(this.nodeAttrs.top || 0)
      };
    }
  }, {
    key: 'getSize',
    value: function getSize() {
      return {
        width: parseFloat(this.nodeAttrs.width || 0),
        height: parseFloat(this.nodeAttrs.height || 0)
      };
    }
  }, {
    key: 'click',
    value: function click() {
      var curClicks = this.getAttr('clicks') || 0;
      this.setAttr('clicks', curClicks + 1);
      var alertId = this.nodeAttrs.showAlert;
      if (alertId) {
        this.app.showAlert(alertId);
      }
    }
  }, {
    key: 'equals',
    value: function equals(other) {
      return this.node === other.node;
    }
  }, {
    key: 'hasPrompt',
    value: function hasPrompt() {
      return this.nodeAttrs.hasPrompt === "true";
    }
  }, {
    key: 'getCss',
    value: function getCss(prop) {
      if (_lodash2['default'].has(this.css, prop)) {
        return this.css[prop];
      }
      return null;
    }
  }, {
    key: 'tagName',
    get: function get() {
      return this.node.tagName;
    }
  }, {
    key: 'xmlFragment',
    get: function get() {
      var frag = new _xmldom2['default'].XMLSerializer().serializeToString(this.node);
      return new _xmldom2['default'].DOMParser().parseFromString(frag, "application/xml");
    }
  }]);

  return FakeElement;
})();

exports.FakeElement = FakeElement;
//# sourceMappingURL=data:application/json;charset=utf8;base64,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LE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDNUMsVUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RDLFVBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDO0FBQ3ZDLFVBQUksT0FBTyxFQUFFO0FBQ1gsWUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7T0FDN0I7S0FDRjs7O1dBRU0sZ0JBQUMsS0FBSyxFQUFFO0FBQ2IsYUFBTyxJQUFJLENBQUMsSUFBSSxLQUFLLEtBQUssQ0FBQyxJQUFJLENBQUM7S0FDakM7OztXQUVTLHFCQUFHO0FBQ1gsYUFBTyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsS0FBSyxNQUFNLENBQUM7S0FDNUM7OztXQUVNLGdCQUFDLElBQUksRUFBRTtBQUNaLFVBQUksb0JBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUU7QUFDekIsZUFBTyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO09BQ3ZCO0FBQ0QsYUFBTyxJQUFJLENBQUM7S0FDYjs7O1NBNURXLGVBQUc7QUFDYixhQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO0tBQzFCOzs7U0E0RGUsZUFBRztBQUNqQixVQUFJLElBQUksR0FBRyxJQUFJLG9CQUFPLGFBQWEsRUFBRSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNuRSxhQUFPLElBQUksb0JBQU8sU0FBUyxFQUFFLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0tBQ3hFOzs7U0EzRkcsV0FBVzs7O1FBK0ZSLFdBQVcsR0FBWCxXQUFXIiwiZmlsZSI6ImxpYi9mYWtlLWVsZW1lbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IFhNTERvbSBmcm9tICd4bWxkb20nO1xuXG5jbGFzcyBGYWtlRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yICh4bWxOb2RlLCBhcHApIHtcbiAgICB0aGlzLmFwcCA9IGFwcDtcbiAgICB0aGlzLm5vZGUgPSB4bWxOb2RlO1xuICAgIHRoaXMubm9kZUF0dHJzID0ge307XG4gICAgdGhpcy50eXBlID0gdGhpcy5ub2RlLnRhZ05hbWU7XG4gICAgdGhpcy5hdHRycyA9IHt9O1xuICAgIHRoaXMuY3NzID0ge307XG4gICAgZm9yIChsZXQge25hbWUsIHZhbHVlfSBvZiBfLnZhbHVlcyh0aGlzLm5vZGUuYXR0cmlidXRlcykpIHtcbiAgICAgIHRoaXMubm9kZUF0dHJzW25hbWVdID0gdmFsdWU7XG4gICAgfVxuICAgIHRoaXMucGFyc2VDc3MoKTtcbiAgfVxuXG4gIHBhcnNlQ3NzICgpIHtcbiAgICBpZiAodGhpcy5ub2RlQXR0cnMuc3R5bGUpIHtcbiAgICAgIGxldCBzZWdtZW50cyA9IHRoaXMubm9kZUF0dHJzLnN0eWxlLnNwbGl0KFwiO1wiKTtcbiAgICAgIGZvciAobGV0IHMgb2Ygc2VnbWVudHMpIHtcbiAgICAgICAgbGV0IFtwcm9wLCB2YWxdID0gcy5zcGxpdChcIjpcIik7XG4gICAgICAgIHByb3AgPSBwcm9wLnRyaW0oKTtcbiAgICAgICAgdmFsID0gdmFsLnRyaW0oKTtcbiAgICAgICAgdGhpcy5jc3NbcHJvcF0gPSB2YWw7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZ2V0IHRhZ05hbWUgKCkge1xuICAgIHJldHVybiB0aGlzLm5vZGUudGFnTmFtZTtcbiAgfVxuXG4gIHNldEF0dHIgKGssIHYpIHtcbiAgICB0aGlzLmF0dHJzW2tdID0gdjtcbiAgfVxuXG4gIGdldEF0dHIgKGspIHtcbiAgICByZXR1cm4gdGhpcy5hdHRyc1trXSB8fCBcIlwiO1xuICB9XG5cbiAgaXNWaXNpYmxlICgpIHtcbiAgICByZXR1cm4gdGhpcy5ub2RlQXR0cnMudmlzaWJsZSAhPT0gXCJmYWxzZVwiO1xuICB9XG5cbiAgaXNFbmFibGVkICgpIHtcbiAgICByZXR1cm4gdGhpcy5ub2RlQXR0cnMuZW5hYmxlZCAhPT0gXCJmYWxzZVwiO1xuICB9XG5cbiAgaXNTZWxlY3RlZCAoKSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZUF0dHJzLnNlbGVjdGVkID09PSBcInRydWVcIjtcbiAgfVxuXG4gIGdldExvY2F0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgeDogcGFyc2VGbG9hdCh0aGlzLm5vZGVBdHRycy5sZWZ0IHx8IDApLFxuICAgICAgeTogcGFyc2VGbG9hdCh0aGlzLm5vZGVBdHRycy50b3AgfHwgMClcbiAgICB9O1xuICB9XG5cbiAgZ2V0U2l6ZSAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdpZHRoOiBwYXJzZUZsb2F0KHRoaXMubm9kZUF0dHJzLndpZHRoIHx8IDApLFxuICAgICAgaGVpZ2h0OiBwYXJzZUZsb2F0KHRoaXMubm9kZUF0dHJzLmhlaWdodCB8fCAwKVxuICAgIH07XG4gIH1cblxuICBjbGljayAoKSB7XG4gICAgbGV0IGN1ckNsaWNrcyA9IHRoaXMuZ2V0QXR0cignY2xpY2tzJykgfHwgMDtcbiAgICB0aGlzLnNldEF0dHIoJ2NsaWNrcycsIGN1ckNsaWNrcyArIDEpO1xuICAgIGxldCBhbGVydElkID0gdGhpcy5ub2RlQXR0cnMuc2hvd0FsZXJ0O1xuICAgIGlmIChhbGVydElkKSB7XG4gICAgICB0aGlzLmFwcC5zaG93QWxlcnQoYWxlcnRJZCk7XG4gICAgfVxuICB9XG5cbiAgZXF1YWxzIChvdGhlcikge1xuICAgIHJldHVybiB0aGlzLm5vZGUgPT09IG90aGVyLm5vZGU7XG4gIH1cblxuICBoYXNQcm9tcHQgKCkge1xuICAgIHJldHVybiB0aGlzLm5vZGVBdHRycy5oYXNQcm9tcHQgPT09IFwidHJ1ZVwiO1xuICB9XG5cbiAgZ2V0Q3NzIChwcm9wKSB7XG4gICAgaWYgKF8uaGFzKHRoaXMuY3NzLCBwcm9wKSkge1xuICAgICAgcmV0dXJuIHRoaXMuY3NzW3Byb3BdO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGdldCB4bWxGcmFnbWVudCAoKSB7XG4gICAgbGV0IGZyYWcgPSBuZXcgWE1MRG9tLlhNTFNlcmlhbGl6ZXIoKS5zZXJpYWxpemVUb1N0cmluZyh0aGlzLm5vZGUpO1xuICAgIHJldHVybiBuZXcgWE1MRG9tLkRPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyhmcmFnLCBcImFwcGxpY2F0aW9uL3htbFwiKTtcbiAgfVxuXG59XG5cbmV4cG9ydCB7IEZha2VFbGVtZW50IH07XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uIn0=
