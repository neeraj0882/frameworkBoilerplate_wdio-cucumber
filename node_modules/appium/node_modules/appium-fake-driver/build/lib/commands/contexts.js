'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumBaseDriver = require('appium-base-driver');

var commands = {},
    helpers = {},
    extensions = {};

helpers.getRawContexts = function () {
  var contexts = { 'NATIVE_APP': null };
  var wvs = this.appModel.getWebviews();
  for (var i = 1; i < wvs.length + 1; i++) {
    contexts['WEBVIEW_' + i] = wvs[i - 1];
  }
  return contexts;
};

helpers.assertWebviewContext = function () {
  if (this.curContext === 'NATIVE_APP') {
    throw new _appiumBaseDriver.errors.InvalidContextError();
  }
};

commands.getCurrentContext = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        return context$1$0.abrupt('return', this.curContext);

      case 1:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getContexts = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        return context$1$0.abrupt('return', _lodash2['default'].keys(this.getRawContexts()));

      case 1:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.setContext = function callee$0$0(context) {
  var contexts;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        contexts = this.getRawContexts();

        if (!_lodash2['default'].includes(_lodash2['default'].keys(contexts), context)) {
          context$1$0.next = 6;
          break;
        }

        this.curContext = context;
        if (context === 'NATIVE_APP') {
          this.appModel.deactivateWebview();
        } else {
          this.appModel.activateWebview(contexts[context]);
        }
        context$1$0.next = 7;
        break;

      case 6:
        throw new _appiumBaseDriver.errors.NoSuchContextError();

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.setFrame = function callee$0$0(frameId) {
  var nodes;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        this.assertWebviewContext();

        if (!(frameId === null)) {
          context$1$0.next = 5;
          break;
        }

        this.appModel.deactivateFrame();
        context$1$0.next = 9;
        break;

      case 5:
        nodes = this.appModel.xpathQuery('//iframe[@id="' + frameId + '"]');

        if (nodes.length) {
          context$1$0.next = 8;
          break;
        }

        throw new _appiumBaseDriver.errors.NoSuchFrameError();

      case 8:
        this.appModel.activateFrame(nodes[0]);

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

_Object$assign(extensions, commands, helpers);
exports.commands = commands;
exports.helpers = helpers;
exports['default'] = extensions;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9jb250ZXh0cy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7c0JBQWMsUUFBUTs7OztnQ0FDQyxvQkFBb0I7O0FBRTNDLElBQUksUUFBUSxHQUFHLEVBQUU7SUFBRSxPQUFPLEdBQUcsRUFBRTtJQUFFLFVBQVUsR0FBRyxFQUFFLENBQUM7O0FBRWpELE9BQU8sQ0FBQyxjQUFjLEdBQUcsWUFBWTtBQUNuQyxNQUFJLFFBQVEsR0FBRyxFQUFDLFlBQVksRUFBRSxJQUFJLEVBQUMsQ0FBQztBQUNwQyxNQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ3RDLE9BQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUN2QyxZQUFRLGNBQVksQ0FBQyxDQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztHQUN2QztBQUNELFNBQU8sUUFBUSxDQUFDO0NBQ2pCLENBQUM7O0FBRUYsT0FBTyxDQUFDLG9CQUFvQixHQUFHLFlBQVk7QUFDekMsTUFBSSxJQUFJLENBQUMsVUFBVSxLQUFLLFlBQVksRUFBRTtBQUNwQyxVQUFNLElBQUkseUJBQU8sbUJBQW1CLEVBQUUsQ0FBQztHQUN4QztDQUNGLENBQUM7O0FBRUYsUUFBUSxDQUFDLGlCQUFpQixHQUFHOzs7OzRDQUNwQixJQUFJLENBQUMsVUFBVTs7Ozs7OztDQUN2QixDQUFDOztBQUVGLFFBQVEsQ0FBQyxXQUFXLEdBQUc7Ozs7NENBQ2Qsb0JBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQzs7Ozs7OztDQUNyQyxDQUFDOztBQUVGLFFBQVEsQ0FBQyxVQUFVLEdBQUcsb0JBQWdCLE9BQU87TUFDdkMsUUFBUTs7OztBQUFSLGdCQUFRLEdBQUcsSUFBSSxDQUFDLGNBQWMsRUFBRTs7YUFDaEMsb0JBQUUsUUFBUSxDQUFDLG9CQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxPQUFPLENBQUM7Ozs7O0FBQ3ZDLFlBQUksQ0FBQyxVQUFVLEdBQUcsT0FBTyxDQUFDO0FBQzFCLFlBQUksT0FBTyxLQUFLLFlBQVksRUFBRTtBQUM1QixjQUFJLENBQUMsUUFBUSxDQUFDLGlCQUFpQixFQUFFLENBQUM7U0FDbkMsTUFBTTtBQUNMLGNBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1NBQ2xEOzs7OztjQUVLLElBQUkseUJBQU8sa0JBQWtCLEVBQUU7Ozs7Ozs7Q0FFeEMsQ0FBQzs7QUFFRixRQUFRLENBQUMsUUFBUSxHQUFHLG9CQUFnQixPQUFPO01BS25DLEtBQUs7Ozs7QUFKWCxZQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQzs7Y0FDeEIsT0FBTyxLQUFLLElBQUksQ0FBQTs7Ozs7QUFDbEIsWUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLEVBQUUsQ0FBQzs7Ozs7QUFFNUIsYUFBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxvQkFBa0IsT0FBTyxRQUFLOztZQUM3RCxLQUFLLENBQUMsTUFBTTs7Ozs7Y0FDVCxJQUFJLHlCQUFPLGdCQUFnQixFQUFFOzs7QUFFckMsWUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Ozs7Ozs7Q0FFekMsQ0FBQzs7QUFFRixlQUFjLFVBQVUsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDcEMsUUFBUSxHQUFSLFFBQVE7UUFBRSxPQUFPLEdBQVAsT0FBTztxQkFDWCxVQUFVIiwiZmlsZSI6ImxpYi9jb21tYW5kcy9jb250ZXh0cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBlcnJvcnMgfSBmcm9tICdhcHBpdW0tYmFzZS1kcml2ZXInO1xuXG5sZXQgY29tbWFuZHMgPSB7fSwgaGVscGVycyA9IHt9LCBleHRlbnNpb25zID0ge307XG5cbmhlbHBlcnMuZ2V0UmF3Q29udGV4dHMgPSBmdW5jdGlvbiAoKSB7XG4gIGxldCBjb250ZXh0cyA9IHsnTkFUSVZFX0FQUCc6IG51bGx9O1xuICBsZXQgd3ZzID0gdGhpcy5hcHBNb2RlbC5nZXRXZWJ2aWV3cygpO1xuICBmb3IgKGxldCBpID0gMTsgaSA8IHd2cy5sZW5ndGggKyAxOyBpKyspIHtcbiAgICBjb250ZXh0c1tgV0VCVklFV18ke2l9YF0gPSB3dnNbaSAtIDFdO1xuICB9XG4gIHJldHVybiBjb250ZXh0cztcbn07XG5cbmhlbHBlcnMuYXNzZXJ0V2Vidmlld0NvbnRleHQgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmN1ckNvbnRleHQgPT09ICdOQVRJVkVfQVBQJykge1xuICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZENvbnRleHRFcnJvcigpO1xuICB9XG59O1xuXG5jb21tYW5kcy5nZXRDdXJyZW50Q29udGV4dCA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuY3VyQ29udGV4dDtcbn07XG5cbmNvbW1hbmRzLmdldENvbnRleHRzID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gXy5rZXlzKHRoaXMuZ2V0UmF3Q29udGV4dHMoKSk7XG59O1xuXG5jb21tYW5kcy5zZXRDb250ZXh0ID0gYXN5bmMgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgbGV0IGNvbnRleHRzID0gdGhpcy5nZXRSYXdDb250ZXh0cygpO1xuICBpZiAoXy5pbmNsdWRlcyhfLmtleXMoY29udGV4dHMpLCBjb250ZXh0KSkge1xuICAgIHRoaXMuY3VyQ29udGV4dCA9IGNvbnRleHQ7XG4gICAgaWYgKGNvbnRleHQgPT09ICdOQVRJVkVfQVBQJykge1xuICAgICAgdGhpcy5hcHBNb2RlbC5kZWFjdGl2YXRlV2VidmlldygpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFwcE1vZGVsLmFjdGl2YXRlV2Vidmlldyhjb250ZXh0c1tjb250ZXh0XSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBlcnJvcnMuTm9TdWNoQ29udGV4dEVycm9yKCk7XG4gIH1cbn07XG5cbmNvbW1hbmRzLnNldEZyYW1lID0gYXN5bmMgZnVuY3Rpb24gKGZyYW1lSWQpIHtcbiAgdGhpcy5hc3NlcnRXZWJ2aWV3Q29udGV4dCgpO1xuICBpZiAoZnJhbWVJZCA9PT0gbnVsbCkge1xuICAgIHRoaXMuYXBwTW9kZWwuZGVhY3RpdmF0ZUZyYW1lKCk7XG4gIH0gZWxzZSB7XG4gICAgbGV0IG5vZGVzID0gdGhpcy5hcHBNb2RlbC54cGF0aFF1ZXJ5KGAvL2lmcmFtZVtAaWQ9XCIke2ZyYW1lSWR9XCJdYCk7XG4gICAgaWYgKCFub2Rlcy5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuTm9TdWNoRnJhbWVFcnJvcigpO1xuICAgIH1cbiAgICB0aGlzLmFwcE1vZGVsLmFjdGl2YXRlRnJhbWUobm9kZXNbMF0pO1xuICB9XG59O1xuXG5PYmplY3QuYXNzaWduKGV4dGVuc2lvbnMsIGNvbW1hbmRzLCBoZWxwZXJzKTtcbmV4cG9ydCB7IGNvbW1hbmRzLCBoZWxwZXJzIH07XG5leHBvcnQgZGVmYXVsdCBleHRlbnNpb25zO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
