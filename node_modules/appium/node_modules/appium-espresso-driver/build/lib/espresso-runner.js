'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _appiumBaseDriver = require('appium-base-driver');

var _asyncbox = require('asyncbox');

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _appiumSupport = require('appium-support');

var _packageJson = require('../../package.json');

// eslint-disable-line import/no-unresolved

var TEST_APK_PATH = _path2['default'].resolve(__dirname, '..', '..', 'espresso-server', 'app', 'build', 'outputs', 'apk', 'androidTest', 'debug', 'app-debug-androidTest.apk');
var TEST_MANIFEST_PATH = _path2['default'].resolve(__dirname, '..', '..', 'espresso-server', 'AndroidManifest-test.xml');
var TEST_APK_PKG = "io.appium.espressoserver.test";
var REQUIRED_PARAMS = ['adb', 'tmpDir', 'host', 'systemPort', 'devicePort', 'appPackage', 'forceEspressoRebuild'];

var EspressoRunner = (function () {
  function EspressoRunner() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, EspressoRunner);

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = _getIterator(REQUIRED_PARAMS), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var req = _step.value;

        if (!opts || !_appiumSupport.util.hasValue(opts[req])) {
          throw new Error('Option \'' + req + '\' is required!');
        }
        this[req] = opts[req];
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    this.jwproxy = new _appiumBaseDriver.JWProxy({ server: this.host, port: this.systemPort, base: '' });
    this.proxyReqRes = this.jwproxy.proxyReqRes.bind(this.jwproxy);

    this.modServerPath = _path2['default'].resolve(this.tmpDir, TEST_APK_PKG + '_' + _packageJson.version + '_' + this.appPackage + '.apk');
  }

  _createClass(EspressoRunner, [{
    key: 'installTestApk',
    value: function installTestApk() {
      return _regeneratorRuntime.async(function installTestApk$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.t0 = this.forceEspressoRebuild;

            if (!context$2$0.t0) {
              context$2$0.next = 5;
              break;
            }

            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(this.modServerPath));

          case 4:
            context$2$0.t0 = context$2$0.sent;

          case 5:
            if (!context$2$0.t0) {
              context$2$0.next = 9;
              break;
            }

            _logger2['default'].debug('Capability \'forceEspressoRebuild\' on. Deleting file \'' + this.modServerPath + '\'');
            context$2$0.next = 9;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.unlink(this.modServerPath));

          case 9:
            context$2$0.next = 11;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(this.modServerPath));

          case 11:
            if (context$2$0.sent) {
              context$2$0.next = 14;
              break;
            }

            context$2$0.next = 14;
            return _regeneratorRuntime.awrap(this.buildNewModServer());

          case 14:
            context$2$0.next = 16;
            return _regeneratorRuntime.awrap(this.checkAndSignCert(this.modServerPath));

          case 16:
            if (!this.forceEspressoRebuild) {
              context$2$0.next = 20;
              break;
            }

            _logger2['default'].info("New server was built, uninstalling any instances of it");
            context$2$0.next = 20;
            return _regeneratorRuntime.awrap(this.adb.uninstallApk(TEST_APK_PKG));

          case 20:
            context$2$0.next = 22;
            return _regeneratorRuntime.awrap(this.adb.installOrUpgrade(this.modServerPath, TEST_APK_PKG));

          case 22:
            _logger2['default'].info('Installed Espresso Test Server apk \'' + this.modServerPath + '\' (pkg: \'' + TEST_APK_PKG + '\')');

          case 23:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'buildNewModServer',
    value: function buildNewModServer() {
      var packageTmpDir, newManifestPath;
      return _regeneratorRuntime.async(function buildNewModServer$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].info('Repackaging espresso server for: \'' + this.appPackage + '\'');
            packageTmpDir = _path2['default'].resolve(this.tmpDir, this.appPackage);
            newManifestPath = _path2['default'].resolve(this.tmpDir, 'AndroidManifest.xml');

            _logger2['default'].info('Creating new manifest: \'' + newManifestPath + '\'');
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.mkdir(packageTmpDir));

          case 6:
            context$2$0.next = 8;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.copyFile(TEST_MANIFEST_PATH, newManifestPath));

          case 8:
            context$2$0.next = 10;
            return _regeneratorRuntime.awrap(this.adb.initAapt());

          case 10:
            context$2$0.next = 12;
            return _regeneratorRuntime.awrap(this.adb.compileManifest(newManifestPath, TEST_APK_PKG, this.appPackage));

          case 12:
            context$2$0.next = 14;
            return _regeneratorRuntime.awrap(this.adb.insertManifest(newManifestPath, TEST_APK_PATH, this.modServerPath));

          case 14:
            // copies from second to third and add manifest
            _logger2['default'].info('Repackaged espresso server ready: \'' + this.modServerPath + '\'');

          case 15:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    // TODO duplicated from uiautomator2, should be a lib method
  }, {
    key: 'checkAndSignCert',
    value: function checkAndSignCert(apk, apkPackage) {
      var signed;
      return _regeneratorRuntime.async(function checkAndSignCert$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.adb.checkApkCert(apk, apkPackage));

          case 2:
            signed = context$2$0.sent;

            if (signed) {
              context$2$0.next = 6;
              break;
            }

            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.adb.sign(apk));

          case 6:
            return context$2$0.abrupt('return', !signed);

          case 7:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'startSession',
    value: function startSession(caps) {
      var cmd, err;
      return _regeneratorRuntime.async(function startSession$(context$2$0) {
        var _this = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            cmd = ['am', 'instrument', '-w', '-e', 'debug', process.env.ESPRESSO_JAVA_DEBUG === 'true' ? 'true' : 'false', TEST_APK_PKG + '/android.support.test.runner.AndroidJUnitRunner'];

            _logger2['default'].info('Starting Espresso Server v' + _packageJson.version + ' with cmd: ' + cmd.join(' '));

            // start the instrumentation process, but do not wait for it
            // otherwise it will block for longer than needed for the device to be ready
            err = undefined;

            this.adb.shell(cmd)['catch'](function (e) {
              // eslint-disable-line
              // handle asynchronous errors that no longer get thrown
              err = e;
            });

            _logger2['default'].info('Waiting for Espresso to be online...');

            // wait 20s for espresso to be online
            context$2$0.next = 7;
            return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(20, 1000, function callee$2$0() {
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    if (!err) {
                      context$3$0.next = 2;
                      break;
                    }

                    return context$3$0.abrupt('return');

                  case 2:
                    context$3$0.next = 4;
                    return _regeneratorRuntime.awrap(this.jwproxy.command('/status', 'GET'));

                  case 4:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this);
            }));

          case 7:
            if (!err) {
              context$2$0.next = 9;
              break;
            }

            throw err;

          case 9:
            context$2$0.next = 11;
            return _regeneratorRuntime.awrap(this.jwproxy.command('/session', 'POST', { desiredCapabilities: caps }));

          case 11:
            if (!err) {
              context$2$0.next = 13;
              break;
            }

            throw err;

          case 13:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'deleteSession',
    // eslint-disable-line curly
    value: function deleteSession() {
      return _regeneratorRuntime.async(function deleteSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Deleting Espresso server session');
            // rely on jwproxy's intelligence to know what we're talking about and
            // delete the current session
            context$2$0.prev = 1;
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.jwproxy.command('/', 'DELETE'));

          case 4:
            context$2$0.next = 9;
            break;

          case 6:
            context$2$0.prev = 6;
            context$2$0.t0 = context$2$0['catch'](1);

            _logger2['default'].warn('Did not get confirmation Espresso deleteSession worked; ' + ('Error was: ' + context$2$0.t0));

          case 9:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[1, 6]]);
    }
  }]);

  return EspressoRunner;
})();

exports.EspressoRunner = EspressoRunner;
exports.REQUIRED_PARAMS = REQUIRED_PARAMS;
exports['default'] = EspressoRunner;
// TODO this should be internal to adb
// creates a file `${newManifestPath}.apk`
// eslint-disable-line curly
// eslint-disable-line curly
//# sourceMappingURL=data:application/json;charset=utf8;base64,
