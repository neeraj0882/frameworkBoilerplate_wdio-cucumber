'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _appiumTestSupport = require('appium-test-support');

var _appiumAdb = require('appium-adb');

var _appiumAdb2 = _interopRequireDefault(_appiumAdb);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _libEspressoRunner = require('../../lib/espresso-runner');

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);
var expect = _chai2['default'].expect;

describe('espresso-runner', function () {
  var adb = new _appiumAdb2['default']();

  function getOpts(params) {
    var opts = {};
    for (var j = 0; j < params.length; j++) {
      opts[params[j]] = 'value';
    }
    return opts;
  }
  describe('constructor', function () {
    function runConstructorTest(opts, missingParam) {
      it('should error out if missing \'' + missingParam + '\' parameter', function () {
        expect(function () {
          new _libEspressoRunner.EspressoRunner(opts);
        }).to['throw']('Option \'' + missingParam + '\' is required!');
      });
    }

    var _loop = function (i) {
      var params = _libEspressoRunner.REQUIRED_PARAMS.filter(function (el) {
        return el !== _libEspressoRunner.REQUIRED_PARAMS[i];
      });
      var opts = getOpts(params);
      runConstructorTest(opts, _libEspressoRunner.REQUIRED_PARAMS[i]);
    };

    for (var i = 0; i < _libEspressoRunner.REQUIRED_PARAMS.length; i++) {
      _loop(i);
    }
  });
  describe('startSession', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
    var opts = getOpts(_libEspressoRunner.REQUIRED_PARAMS);
    opts.adb = adb;
    it('should throw an error if running instrumentation process errors', function callee$2$0() {
      var espressoRunner;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('shell').withExactArgs(["am", "instrument", "-w", "-e", "debug", "false", "io.appium.espressoserver.test/android.support.test.runner.AndroidJUnitRunner"]).returns(_bluebird2['default'].reject("Problem with instrumentation"));

            espressoRunner = new _libEspressoRunner.EspressoRunner(opts);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(espressoRunner.startSession({}).should.eventually.be.rejectedWith(/Problem with instrumentation/));

          case 4:

            mocks.adb.verify();

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvdW5pdC9lc3ByZXNzby1ydW5uZXItc3BlY3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O29CQUFpQixNQUFNOzs7OzhCQUNJLGtCQUFrQjs7OztpQ0FDbkIscUJBQXFCOzt5QkFDL0IsWUFBWTs7Ozt3QkFDZCxVQUFVOzs7O2lDQUN3QiwyQkFBMkI7O0FBRzNFLGtCQUFLLE1BQU0sRUFBRSxDQUFDO0FBQ2Qsa0JBQUssR0FBRyw2QkFBZ0IsQ0FBQztBQUN6QixJQUFNLE1BQU0sR0FBRyxrQkFBSyxNQUFNLENBQUM7O0FBRTNCLFFBQVEsQ0FBQyxpQkFBaUIsRUFBRSxZQUFZO0FBQ3RDLE1BQUksR0FBRyxHQUFHLDRCQUFTLENBQUM7O0FBRXBCLFdBQVMsT0FBTyxDQUFFLE1BQU0sRUFBRTtBQUN4QixRQUFJLElBQUksR0FBRyxFQUFFLENBQUM7QUFDZCxTQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUN0QyxVQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDO0tBQzNCO0FBQ0QsV0FBTyxJQUFJLENBQUM7R0FDYjtBQUNELFVBQVEsQ0FBQyxhQUFhLEVBQUUsWUFBWTtBQUNsQyxhQUFTLGtCQUFrQixDQUFFLElBQUksRUFBRSxZQUFZLEVBQUU7QUFDL0MsUUFBRSxvQ0FBaUMsWUFBWSxtQkFBZSxZQUFZO0FBQ3hFLGNBQU0sQ0FBQyxZQUFNO0FBQ1gsZ0RBQW1CLElBQUksQ0FBQyxDQUFDO1NBQzFCLENBQUMsQ0FBQyxFQUFFLFNBQU0sZUFBWSxZQUFZLHFCQUFpQixDQUFDO09BQ3RELENBQUMsQ0FBQztLQUNKOzswQkFDUSxDQUFDO0FBQ1IsVUFBSSxNQUFNLEdBQUcsbUNBQWdCLE1BQU0sQ0FBQyxVQUFDLEVBQUU7ZUFBSyxFQUFFLEtBQUssbUNBQWdCLENBQUMsQ0FBQztPQUFBLENBQUMsQ0FBQztBQUN2RSxVQUFJLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDM0Isd0JBQWtCLENBQUMsSUFBSSxFQUFFLG1DQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDOzs7QUFIL0MsU0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLG1DQUFnQixNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFBeEMsQ0FBQztLQUlUO0dBQ0YsQ0FBQyxDQUFDO0FBQ0gsVUFBUSxDQUFDLGNBQWMsRUFBRSxrQ0FBVSxFQUFDLEdBQUcsRUFBSCxHQUFHLEVBQUMsRUFBRSxVQUFDLEtBQUssRUFBSztBQUNuRCxRQUFJLElBQUksR0FBRyxPQUFPLG9DQUFpQixDQUFDO0FBQ3BDLFFBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQ2YsTUFBRSxDQUFDLGlFQUFpRSxFQUFFO1VBSWhFLGNBQWM7Ozs7QUFIbEIsaUJBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLElBQUksRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLDhFQUE4RSxDQUFDLENBQUMsQ0FDekssT0FBTyxDQUFDLHNCQUFFLE1BQU0sQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDLENBQUM7O0FBRWpELDBCQUFjLEdBQUcsc0NBQW1CLElBQUksQ0FBQzs7NkNBQ3ZDLGNBQWMsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLDhCQUE4QixDQUFDOzs7O0FBRXZHLGlCQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDOzs7Ozs7O0tBQ3BCLENBQUMsQ0FBQztHQUNKLENBQUMsQ0FBQyxDQUFDO0NBQ0wsQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3QvdW5pdC9lc3ByZXNzby1ydW5uZXItc3BlY3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2hhaSBmcm9tICdjaGFpJztcbmltcG9ydCBjaGFpQXNQcm9taXNlZCBmcm9tICdjaGFpLWFzLXByb21pc2VkJztcbmltcG9ydCB7IHdpdGhNb2NrcyB9IGZyb20gJ2FwcGl1bS10ZXN0LXN1cHBvcnQnO1xuaW1wb3J0IEFEQiBmcm9tICdhcHBpdW0tYWRiJztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCB7IEVzcHJlc3NvUnVubmVyLCBSRVFVSVJFRF9QQVJBTVMgfSBmcm9tICcuLi8uLi9saWIvZXNwcmVzc28tcnVubmVyJztcblxuXG5jaGFpLnNob3VsZCgpO1xuY2hhaS51c2UoY2hhaUFzUHJvbWlzZWQpO1xuY29uc3QgZXhwZWN0ID0gY2hhaS5leHBlY3Q7XG5cbmRlc2NyaWJlKCdlc3ByZXNzby1ydW5uZXInLCBmdW5jdGlvbiAoKSB7XG4gIGxldCBhZGIgPSBuZXcgQURCKCk7XG5cbiAgZnVuY3Rpb24gZ2V0T3B0cyAocGFyYW1zKSB7XG4gICAgbGV0IG9wdHMgPSB7fTtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHBhcmFtcy5sZW5ndGg7IGorKykge1xuICAgICAgb3B0c1twYXJhbXNbal1dID0gJ3ZhbHVlJztcbiAgICB9XG4gICAgcmV0dXJuIG9wdHM7XG4gIH1cbiAgZGVzY3JpYmUoJ2NvbnN0cnVjdG9yJywgZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIHJ1bkNvbnN0cnVjdG9yVGVzdCAob3B0cywgbWlzc2luZ1BhcmFtKSB7XG4gICAgICBpdChgc2hvdWxkIGVycm9yIG91dCBpZiBtaXNzaW5nICcke21pc3NpbmdQYXJhbX0nIHBhcmFtZXRlcmAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZXhwZWN0KCgpID0+IHtcbiAgICAgICAgICBuZXcgRXNwcmVzc29SdW5uZXIob3B0cyk7XG4gICAgICAgIH0pLnRvLnRocm93KGBPcHRpb24gJyR7bWlzc2luZ1BhcmFtfScgaXMgcmVxdWlyZWQhYCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBSRVFVSVJFRF9QQVJBTVMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBwYXJhbXMgPSBSRVFVSVJFRF9QQVJBTVMuZmlsdGVyKChlbCkgPT4gZWwgIT09IFJFUVVJUkVEX1BBUkFNU1tpXSk7XG4gICAgICBsZXQgb3B0cyA9IGdldE9wdHMocGFyYW1zKTtcbiAgICAgIHJ1bkNvbnN0cnVjdG9yVGVzdChvcHRzLCBSRVFVSVJFRF9QQVJBTVNbaV0pO1xuICAgIH1cbiAgfSk7XG4gIGRlc2NyaWJlKCdzdGFydFNlc3Npb24nLCB3aXRoTW9ja3Moe2FkYn0sIChtb2NrcykgPT4ge1xuICAgIGxldCBvcHRzID0gZ2V0T3B0cyhSRVFVSVJFRF9QQVJBTVMpO1xuICAgIG9wdHMuYWRiID0gYWRiO1xuICAgIGl0KCdzaG91bGQgdGhyb3cgYW4gZXJyb3IgaWYgcnVubmluZyBpbnN0cnVtZW50YXRpb24gcHJvY2VzcyBlcnJvcnMnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBtb2Nrcy5hZGIuZXhwZWN0cygnc2hlbGwnKS53aXRoRXhhY3RBcmdzKFtcImFtXCIsIFwiaW5zdHJ1bWVudFwiLCBcIi13XCIsIFwiLWVcIiwgXCJkZWJ1Z1wiLCBcImZhbHNlXCIsIFwiaW8uYXBwaXVtLmVzcHJlc3Nvc2VydmVyLnRlc3QvYW5kcm9pZC5zdXBwb3J0LnRlc3QucnVubmVyLkFuZHJvaWRKVW5pdFJ1bm5lclwiXSlcbiAgICAgICAgLnJldHVybnMoQi5yZWplY3QoXCJQcm9ibGVtIHdpdGggaW5zdHJ1bWVudGF0aW9uXCIpKTtcblxuICAgICAgbGV0IGVzcHJlc3NvUnVubmVyID0gbmV3IEVzcHJlc3NvUnVubmVyKG9wdHMpO1xuICAgICAgYXdhaXQgZXNwcmVzc29SdW5uZXIuc3RhcnRTZXNzaW9uKHt9KS5zaG91bGQuZXZlbnR1YWxseS5iZS5yZWplY3RlZFdpdGgoL1Byb2JsZW0gd2l0aCBpbnN0cnVtZW50YXRpb24vKTtcblxuICAgICAgbW9ja3MuYWRiLnZlcmlmeSgpO1xuICAgIH0pO1xuICB9KSk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
