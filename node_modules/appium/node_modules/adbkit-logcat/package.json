{
  "_args": [
    [
      {
        "raw": "adbkit-logcat@https://registry.npmjs.org/adbkit-logcat/-/adbkit-logcat-1.1.0.tgz",
        "scope": null,
        "escapedName": "adbkit-logcat",
        "name": "adbkit-logcat",
        "rawSpec": "https://registry.npmjs.org/adbkit-logcat/-/adbkit-logcat-1.1.0.tgz",
        "spec": "https://registry.npmjs.org/adbkit-logcat/-/adbkit-logcat-1.1.0.tgz",
        "type": "remote"
      },
      "/Users/saxenan3/myprojects/uiAutomation/mytest_project/node_modules/appium"
    ]
  ],
  "_from": "adbkit-logcat@https://registry.npmjs.org/adbkit-logcat/-/adbkit-logcat-1.1.0.tgz",
  "_id": "adbkit-logcat@1.1.0",
  "_inCache": true,
  "_location": "/appium/adbkit-logcat",
  "_phantomChildren": {},
  "_requested": {
    "raw": "adbkit-logcat@https://registry.npmjs.org/adbkit-logcat/-/adbkit-logcat-1.1.0.tgz",
    "scope": null,
    "escapedName": "adbkit-logcat",
    "name": "adbkit-logcat",
    "rawSpec": "https://registry.npmjs.org/adbkit-logcat/-/adbkit-logcat-1.1.0.tgz",
    "spec": "https://registry.npmjs.org/adbkit-logcat/-/adbkit-logcat-1.1.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/appium",
    "/appium/adbkit"
  ],
  "_resolved": "https://registry.npmjs.org/adbkit-logcat/-/adbkit-logcat-1.1.0.tgz",
  "_shasum": "01d7f9b0cef9093a30bcb3b007efff301508962f",
  "_shrinkwrap": null,
  "_spec": "adbkit-logcat@https://registry.npmjs.org/adbkit-logcat/-/adbkit-logcat-1.1.0.tgz",
  "_where": "/Users/saxenan3/myprojects/uiAutomation/mytest_project/node_modules/appium",
  "author": {
    "name": "The OpenSTF Project",
    "email": "contact@openstf.io",
    "url": "https://openstf.io"
  },
  "bugs": {
    "url": "https://github.com/openstf/adbkit-logcat/issues"
  },
  "dependencies": {},
  "description": "A Node.js interface for working with Android's logcat output.",
  "devDependencies": {
    "chai": "^3.5.0",
    "coffee-script": "^1.10.0",
    "grunt": "^1.0.1",
    "grunt-cli": "^1.2.0",
    "grunt-coffeelint": "0.0.16",
    "grunt-contrib-clean": "^1.0.0",
    "grunt-contrib-coffee": "^1.0.0",
    "grunt-contrib-watch": "^1.0.0",
    "grunt-exec": "^1.0.0",
    "grunt-jsonlint": "^1.1.0",
    "grunt-notify": "^0.4.5",
    "mocha": "^3.0.2",
    "sinon": "^1.17.5",
    "sinon-chai": "^2.8.0"
  },
  "engines": {
    "node": ">= 0.10.4"
  },
  "homepage": "https://github.com/openstf/adbkit-logcat#readme",
  "keywords": [
    "adb",
    "adbkit",
    "logcat"
  ],
  "license": "Apache-2.0",
  "main": "./index",
  "name": "adbkit-logcat",
  "optionalDependencies": {},
  "readme": "# adbkit-logcat\n\n**adbkit-logcat** provides a [Node.js][nodejs] interface for working with output produced by the Android [`logcat` tool][logcat-site]. It takes a log stream (that you must create separately), parses it, and emits log entries in real-time as they occur. Possible use cases include storing logs in a database, forwarding logs via [MessagePack][msgpack], or just advanced filtering.\n\n## Getting started\n\nInstall via NPM:\n\n```bash\nnpm install --save adbkit-logcat\n```\n\nNote that while adbkit-logcat is written in CoffeeScript, it is compiled to JavaScript before publishing to NPM, which means that you are not required to use CoffeeScript.\n\n### Examples\n\n#### Output all log messages\n\n##### JavaScript\n\n```javascript\nvar logcat = require('adbkit-logcat');\nvar spawn = require('child_process').spawn;\n\n// Retrieve a binary log stream\nvar proc = spawn('adb', ['logcat', '-B']);\n\n// Connect logcat to the stream\nreader = logcat.readStream(proc.stdout);\nreader.on('entry', function(entry) {\n  console.log(entry.message);\n});\n\n// Make sure we don't leave anything hanging\nprocess.on('exit', function() {\n  proc.kill();\n});\n```\n\n##### CoffeeScript\n\n```coffeescript\nLogcat = require 'adbkit-logcat'\n{spawn} = require 'child_process'\n\n# Retrieve a binary log stream\nproc = spawn 'adb', ['logcat', '-B']\n\n# Connect logcat to the stream\nreader = Logcat.readStream proc.stdout\nreader.on 'entry', (entry) ->\n  console.log entry.message\n\n# Make sure we don't leave anything hanging\nprocess.on 'exit', ->\n  proc.kill()\n```\n\n## API\n\n### Logcat\n\n#### logcat.Priority\n\nExposes `Priority`. See below for details.\n\n#### logcat.Reader\n\nExposes `Reader`. See below for details.\n\n#### logcat.readStream(stream[, options])\n\nCreates a logcat reader instance from the provided logcat event [`Stream`][node-stream]. Note that you must create the stream separately.\n\n* **stream** The event stream to read.\n* **options** Optional. The following options are supported:\n    - **format** The format of the stream. Currently, the only supported value is `'binary'`, which (for example) `adb logcat -B` produces. Defaults to `'binary'`.\n    - **fixLineFeeds** All programs run via the ADB shell transform any `'\\n'` in the output to `'\\r\\n'`, which breaks binary content. If set, this option reverses the transformation before parsing the stream. Defaults to `true`.\n* Returns: The `Reader` instance.\n\n### Priority\n\n#### Constants\n\nThe following static properties are available:\n\n* **Priority.UNKNOWN** i.e. `0`.\n* **Priority.DEFAULT** i.e. `1`. Not available when reading a stream.\n* **Priority.VERBOSE** i.e. `2`.\n* **Priority.DEBUG** i.e. `3`.\n* **Priority.INFO** i.e. `4`.\n* **Priority.WARN** i.e. `5`.\n* **Priority.ERROR** i.e. `6`.\n* **Priority.FATAL** i.e. `7`.\n* **Priority.SILENT** i.e. `8`. Not available when reading a stream.\n\n#### Priority.fromLetter(letter)\n\nStatic method to convert the given `letter` into a numeric priority. For example, `Priority.fromName('d')` would return `Priority.DEBUG`.\n\n* **letter** The priority as a `String`. Any single, case-insensitive character matching the first character of any `Priority` constant is accepted.\n* Returns: The priority as a `Number`, or `undefined`.\n\n#### Priority.fromName(name)\n\nStatic method to convert the given `name` into a numeric priority. For example, `Priority.fromName('debug')` (or `Priority.fromName('d')`) would return `Priority.DEBUG`.\n\n* **name** The priority as a `String`. Any full, case-insensitive match of the `Priority` constants is accepted. If no match is found, falls back to `Priority.fromLetter()`.\n* Returns: The priority as a `Number`, or `undefined`.\n\n#### Priority.toLetter(priority)\n\nStatic method to convert the numeric priority into its letter representation. For example, `Priority.toLetter(Priority.DEBUG)` would return `'D'`.\n\n* **priority** The priority as a `Number`. Any `Priority` constant value is accepted.\n* Returns: The priority as a `String` letter, or `undefined`.\n\n#### Priority.toName(priority)\n\nStatic method to convert the numeric priority into its full string representation. For example, `Priority.toLetter(Priority.DEBUG)` would return `'DEBUG'`.\n\n* **priority** The priority as a `Number`. Any `Priority` constant value is accepted.\n* Returns: The priority as a `String`, or `undefined`.\n\n### Reader\n\nA reader instance, which is an [`EventEmitter`][node-events].\n\n#### Events\n\nThe following events are available:\n\n* **error** **(err)** Emitted when an error occurs.\n    * **err** An `Error`.\n* **end** Emitted when the stream ends.\n* **finish** Emitted when the stream finishes.\n* **entry** **(entry)** Emitted when the stream finishes.\n    * **entry** A log `Entry`. See below for details.\n\n#### constructor([options])\n\nFor advanced users. Manually constructs a `Reader` instance. Useful for testing and/or playing around. Normally you would use `logcat.readStream()` to create the instance.\n\n* **options** See `logcat.readStream()` for details.\n* Returns: N/A\n\n#### reader.connect(stream)\n\nFor advanced users. When instantiated manually (not via `logcat.readStream()`), connects the `Reader` instance to the given stream.\n\n* **stream** See `logcat.readStream()` for details.\n* Returns: The `Reader` instance.\n\n#### reader.end()\n\nConvenience method for ending the stream.\n\n* Returns: The `Reader` instance.\n\n#### reader.exclude(tag)\n\nSkip entries with the provided tag. Alias for `reader.include(tag, Priority.SILENT)`. Note that even skipped events have to be parsed so that they can be ignored.\n\n* **tag** The tag string to exclude. If `'*'`, works the same as `reader.excludeAll()`.\n* Returns: The `Reader` instance.\n\n#### reader.excludeAll()\n\nSkip **ALL** entries. Alias for `reader.includeAll(Priority.SILENT)`. Any entries you wish to see must be included via `include()`/`includeAll()`.\n\n* Returns: The `Reader` instance.\n\n#### reader.include(tag[, priority])\n\nInclude all entries with the given tag and a priority higher or equal to the given `priority`.\n\n* **tag** The tag string to include. If `'*'`, works the same as `reader.includeAll(priority)`.\n* **priority** Optional. A lower bound for the priority. Any numeric `Priority` constant or any `String` value accepted by `Priority.fromName()` is accepted. Defaults to `Priority.DEBUG`.\n* Returns: The `Reader` instance.\n\n#### reader.includeAll([priority])\n\nInclude all entries with a priority higher or equal to the given `priority`.\n\n* **tag** The tag string to exclude.\n* **priority** Optional. See `reader.include()` for details.\n* Returns: The `Reader` instance.\n\n#### reader.resetFilters()\n\nResets all inclusions/exclusions.\n\n* Returns: The `Reader` instance.\n\n### Entry\n\nA log entry.\n\n#### Properties\n\nThe following properties are available:\n\n* **date** Event time as a `Date`.\n* **pid** Process ID as a `Number`.\n* **tid** Thread ID as a `Number`.\n* **priority** Event priority as a `Number`. You can use `logcat.Priority` to convert the value into a `String`.\n* **tag** Event tag as a `String`.\n* **message** Message as a `String`.\n\n#### entry.toBinary()\n\nConverts the entry back to the binary log format.\n\n* Returns: The binary event as a [`Buffer`][node-buffer].\n\n## More information\n\n* [logprint.c](https://github.com/android/platform_system_core/blob/master/liblog/logprint.c)\n* [logcat.cpp](https://github.com/android/platform_system_core/blob/master/logcat/logcat.cpp)\n* [logger.h](https://github.com/android/platform_system_core/blob/master/include/log/logger.h)\n\n## Contributing\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md).\n\n## License\n\nSee [LICENSE](LICENSE).\n\nCopyright © The OpenSTF Project. All Rights Reserved.\n\n[nodejs]: <http://nodejs.org/>\n[msgpack]: <http://msgpack.org/>\n[logcat-site]: <http://developer.android.com/tools/help/logcat.html>\n[node-stream]: <http://nodejs.org/api/stream.html>\n[node-events]: <http://nodejs.org/api/events.html>\n[node-buffer]: <http://nodejs.org/api/buffer.html>\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/openstf/adbkit-logcat.git"
  },
  "scripts": {
    "postpublish": "grunt clean",
    "prepublish": "grunt coffee",
    "test": "grunt test"
  },
  "version": "1.1.0"
}
