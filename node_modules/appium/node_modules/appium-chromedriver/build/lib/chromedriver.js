require('source-map-support').install();

'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _Symbol$iterator = require('babel-runtime/core-js/symbol/iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

var _appiumBaseDriver = require('appium-base-driver');

var _child_process = require('child_process');

var _child_process2 = _interopRequireDefault(_child_process);

var _appiumSupport = require('appium-support');

var _asyncbox = require('asyncbox');

var _teen_process = require('teen_process');

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _install = require('./install');

var _utils = require('./utils');

var _semver = require('semver');

var _semver2 = _interopRequireDefault(_semver);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var log = _appiumSupport.logger.getLogger('Chromedriver');

var DEFAULT_HOST = '127.0.0.1';
var DEFAULT_PORT = 9515;
var CHROMEDRIVER_CHROME_MAPPING = {
  '2.37': '64.0.3282',
  '2.36': '63.0.3239',
  '2.35': '62.0.3202',
  '2.34': '61.0.3163',
  '2.33': '60.0.3112',
  '2.32': '59.0.3071',
  '2.31': '58.0.3029',
  '2.30': '58.0.3029',
  '2.29': '57.0.2987',
  '2.28': '55.0.2883',
  '2.27': '54.0.2840',
  '2.26': '53.0.2785',
  '2.25': '53.0.2785',
  '2.24': '52.0.2743',
  '2.23': '51.0.2704',
  '2.22': '49.0.2623',
  '2.21': '46.0.2490',
  '2.20': '43.0.2357',
  '2.19': '43.0.2357',
  '2.18': '43.0.2357',
  '2.17': '42.0.2311',
  '2.16': '42.0.2311',
  '2.15': '40.0.2214',
  '2.14': '39.0.2171',
  '2.13': '38.0.2125',
  '2.12': '36.0.1985',
  '2.11': '36.0.1985',
  '2.10': '33.0.1751',
  '2.9': '31.0.1650',
  '2.8': '30.0.1573',
  '2.7': '30.0.1573',
  '2.6': '29.0.1545',
  '2.5': '29.0.1545',
  '2.4': '29.0.1545',
  '2.3': '28.0.1500',
  '2.2': '27.0.1453',
  '2.1': '27.0.1453',
  '2.0': '27.0.1453'
};

var Chromedriver = (function (_events$EventEmitter) {
  _inherits(Chromedriver, _events$EventEmitter);

  function Chromedriver() {
    var args = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, Chromedriver);

    _get(Object.getPrototypeOf(Chromedriver.prototype), 'constructor', this).call(this);

    var _args$host = args.host;
    var host = _args$host === undefined ? DEFAULT_HOST : _args$host;
    var _args$port = args.port;
    var port = _args$port === undefined ? DEFAULT_PORT : _args$port;
    var executable = args.executable;
    var _args$executableDir = args.executableDir;
    var executableDir = _args$executableDir === undefined ? (0, _install.getChromedriverDir)() : _args$executableDir;
    var _args$bundleId = args.bundleId;
    var bundleId = _args$bundleId === undefined ? 'com.android.chrome' : _args$bundleId;
    var mappingPath = args.mappingPath;
    var cmdArgs = args.cmdArgs;
    var adb = args.adb;
    var verbose = args.verbose;
    var logPath = args.logPath;

    this.proxyHost = host;
    this.proxyPort = port;
    this.adb = adb;
    this.cmdArgs = cmdArgs;
    this.proc = null;
    this.chromedriver = executable;
    this.executableDir = executableDir;
    this.mappingPath = mappingPath;
    this.bundleId = bundleId;
    this.executableVerified = false;
    this.state = Chromedriver.STATE_STOPPED;
    this.jwproxy = new _appiumBaseDriver.JWProxy({ server: this.proxyHost, port: this.proxyPort });
    this.verbose = verbose;
    this.logPath = logPath;
  }

  _createClass(Chromedriver, [{
    key: 'getMapping',
    value: function getMapping() {
      var mapping;
      return _regeneratorRuntime.async(function getMapping$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            mapping = CHROMEDRIVER_CHROME_MAPPING;

            if (!this.mappingPath) {
              context$2$0.next = 21;
              break;
            }

            log.debug('Attempting to use Chromedriver-Chrome mapping from \'' + this.mappingPath + '\'');
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(this.mappingPath));

          case 5:
            if (context$2$0.sent) {
              context$2$0.next = 9;
              break;
            }

            log.warn('No file found at \'' + this.mappingPath + '\'. Using default mapping');
            context$2$0.next = 21;
            break;

          case 9:
            context$2$0.prev = 9;
            context$2$0.t0 = JSON;
            context$2$0.next = 13;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(this.mappingPath));

          case 13:
            context$2$0.t1 = context$2$0.sent;
            mapping = context$2$0.t0.parse.call(context$2$0.t0, context$2$0.t1);
            context$2$0.next = 21;
            break;

          case 17:
            context$2$0.prev = 17;
            context$2$0.t2 = context$2$0['catch'](9);

            log.error('Error parsing mapping from \'' + this.mappingPath + '\': ' + context$2$0.t2.message);
            log.warn('Using default mapping');

          case 21:
            return context$2$0.abrupt('return', mapping);

          case 22:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[9, 17]]);
    }
  }, {
    key: 'getChromedrivers',
    value: function getChromedrivers(mapping) {
      var executables, cds, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, cd;

      return _regeneratorRuntime.async(function getChromedrivers$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.glob(this.executableDir + '/*'));

          case 2:
            executables = context$2$0.sent;
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap((0, _asyncbox.asyncmap)(executables, function callee$2$0(executable) {
              var _ref, stdout, match, version;

              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    context$3$0.prev = 0;
                    context$3$0.next = 3;
                    return _regeneratorRuntime.awrap((0, _teen_process.exec)(executable, ['--version']));

                  case 3:
                    _ref = context$3$0.sent;
                    stdout = _ref.stdout;
                    match = /ChromeDriver\s(\d+\.\d+)\.\d+\s/.exec(stdout);

                    if (!match) {
                      context$3$0.next = 9;
                      break;
                    }

                    version = match[1];
                    return context$3$0.abrupt('return', {
                      executable: executable,
                      version: version,
                      minCDVersion: mapping[version]
                    });

                  case 9:
                    context$3$0.next = 13;
                    break;

                  case 11:
                    context$3$0.prev = 11;
                    context$3$0.t0 = context$3$0['catch'](0);

                  case 13:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, this, [[0, 11]]);
            }));

          case 5:
            context$2$0.t0 = function (cd) {
              return !!cd;
            };

            context$2$0.t1 = function (a, b) {
              return _semver2['default'].gte(_semver2['default'].coerce(b.version), _semver2['default'].coerce(a.version)) ? 1 : -1;
            };

            cds = context$2$0.sent.filter(context$2$0.t0).sort(context$2$0.t1);

            if (_lodash2['default'].isEmpty(cds)) {
              log.errorAndThrow('No Chromedriver found');
            }
            log.debug('The following Chromedriver executables were found:');
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            context$2$0.prev = 13;
            for (_iterator = _getIterator(cds); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              cd = _step.value;

              log.debug('    ' + cd.executable + ' (minimum Chrome version \'' + (cd.minCDVersion ? cd.minCDVersion : 'Unknown') + '\')');
            }
            context$2$0.next = 21;
            break;

          case 17:
            context$2$0.prev = 17;
            context$2$0.t2 = context$2$0['catch'](13);
            _didIteratorError = true;
            _iteratorError = context$2$0.t2;

          case 21:
            context$2$0.prev = 21;
            context$2$0.prev = 22;

            if (!_iteratorNormalCompletion && _iterator['return']) {
              _iterator['return']();
            }

          case 24:
            context$2$0.prev = 24;

            if (!_didIteratorError) {
              context$2$0.next = 27;
              break;
            }

            throw _iteratorError;

          case 27:
            return context$2$0.finish(24);

          case 28:
            return context$2$0.finish(21);

          case 29:
            return context$2$0.abrupt('return', cds);

          case 30:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[13, 17, 21, 29], [22,, 24, 28]]);
    }
  }, {
    key: 'getCompatibleChromedriver',
    value: function getCompatibleChromedriver() {
      var mapping, cds, chromeVersion, cd, workingCds, binPath;
      return _regeneratorRuntime.async(function getCompatibleChromedriver$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (this.adb) {
              context$2$0.next = 4;
              break;
            }

            context$2$0.next = 3;
            return _regeneratorRuntime.awrap((0, _install.getChromedriverBinaryPath)());

          case 3:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 4:
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.getMapping());

          case 6:
            mapping = context$2$0.sent;
            context$2$0.next = 9;
            return _regeneratorRuntime.awrap(this.getChromedrivers(mapping));

          case 9:
            cds = context$2$0.sent;
            context$2$0.t0 = _semver2['default'];
            context$2$0.next = 13;
            return _regeneratorRuntime.awrap((0, _utils.getChromeVersion)(this.adb, this.bundleId));

          case 13:
            context$2$0.t1 = context$2$0.sent;
            chromeVersion = context$2$0.t0.coerce.call(context$2$0.t0, context$2$0.t1);

            if (chromeVersion) {
              context$2$0.next = 19;
              break;
            }

            cd = cds[0];

            log.warn('Unable to discover Chrome version. Using Chromedriver ' + cd.version + ' at \'' + cd.executable + '\'');
            return context$2$0.abrupt('return', cd.executable);

          case 19:
            if (!(_semver2['default'].gt(chromeVersion, _lodash2['default'].values(mapping)[0]) && !_lodash2['default'].isUndefined(cds[0]) && _lodash2['default'].isUndefined(cds[0].minCDVersion))) {
              context$2$0.next = 23;
              break;
            }

            cd = cds[0];

            log.warn('No known Chromedriver available to automate Chrome version \'' + chromeVersion + '\'.\n' + ('Using Chromedriver version \'' + cd.version + '\', which has not been tested with Appium.'));
            return context$2$0.abrupt('return', cd.executable);

          case 23:
            workingCds = cds.filter(function (cd) {
              return !_lodash2['default'].isUndefined(cd.minCDVersion) && _semver2['default'].gte(chromeVersion, cd.minCDVersion);
            });

            if (_lodash2['default'].isEmpty(workingCds)) {
              log.errorAndThrow('No Chromedriver found that can automate Chrome \'' + chromeVersion + '\'. ' + 'See https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/web/chromedriver.md ' + 'for more details.');
            }

            binPath = workingCds[0].executable;

            log.debug('Found ' + workingCds.length + ' Chromedriver executable' + (workingCds.length === 1 ? '' : 's') + '\n' + ('capable of automating Chrome \'' + chromeVersion + '\'. ') + ('Choosing the most recent, \'' + binPath + '\'.'));
            log.debug('If a specific version is required, specify it with the `chromedriverExecutable`' + 'desired capability.');
            return context$2$0.abrupt('return', binPath);

          case 29:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'initChromedriverPath',
    value: function initChromedriverPath() {
      return _regeneratorRuntime.async(function initChromedriverPath$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!this.executableVerified) {
              context$2$0.next = 2;
              break;
            }

            return context$2$0.abrupt('return');

          case 2:
            context$2$0.t0 = this.chromedriver;

            if (context$2$0.t0) {
              context$2$0.next = 7;
              break;
            }

            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.getCompatibleChromedriver());

          case 6:
            context$2$0.t0 = context$2$0.sent;

          case 7:
            this.chromedriver = context$2$0.t0;
            context$2$0.next = 10;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(this.chromedriver));

          case 10:
            if (context$2$0.sent) {
              context$2$0.next = 12;
              break;
            }

            throw new Error('Trying to use a chromedriver binary at the path ' + (this.chromedriver + ', but it doesn\'t exist!'));

          case 12:
            this.executableVerified = true;
            log.info('Set chromedriver binary as: ' + this.chromedriver);

          case 14:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'start',
    value: function start(caps) {
      var emitStartingState = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];
      var args, startDetector, processIsAlive, webviewVersion;
      return _regeneratorRuntime.async(function start$(context$2$0) {
        var _this = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            this.capabilities = caps;
            if (emitStartingState) {
              this.changeState(Chromedriver.STATE_STARTING);
            }

            args = ["--url-base=wd/hub", '--port=' + this.proxyPort];

            if (this.adb && this.adb.adbPort) {
              args = args.concat(['--adb-port=' + this.adb.adbPort]);
            }
            if (this.cmdArgs) {
              args = args.concat(this.cmdArgs);
            }
            if (this.logPath) {
              args = args.concat(['--log-path=' + this.logPath]);
            }
            args = args.concat(['--verbose']);
            // what are the process stdout/stderr conditions wherein we know that
            // the process has started to our satisfaction?

            startDetector = function startDetector(stdout) {
              return stdout.indexOf('Starting ') === 0;
            };

            processIsAlive = false;
            webviewVersion = undefined;
            context$2$0.prev = 10;
            context$2$0.next = 13;
            return _regeneratorRuntime.awrap(this.initChromedriverPath());

          case 13:
            context$2$0.next = 15;
            return _regeneratorRuntime.awrap(this.killAll());

          case 15:

            // set up our subprocess object
            this.proc = new _teen_process.SubProcess(this.chromedriver, args);
            processIsAlive = true;

            // handle log output
            this.proc.on('output', function (stdout, stderr) {
              // if the cd output is not printed, find the chrome version and print
              // will get a response like
              //   DevTools response: {
              //      "Android-Package": "io.appium.sampleapp",
              //      "Browser": "Chrome/55.0.2883.91",
              //      "Protocol-Version": "1.2",
              //      "User-Agent": "...",
              //      "WebKit-Version": "537.36"
              //   }
              var out = stdout + stderr;
              var match = /"Browser": "(.*)"/.exec(out);
              if (match) {
                webviewVersion = match[1];
                log.debug('Webview version: \'' + webviewVersion + '\'');
              }

              // also print chromedriver version to logs
              // will output something like
              //  Starting ChromeDriver 2.33.506106 (8a06c39c4582fbfbab6966dbb1c38a9173bfb1a2) on port 9515
              match = /Starting ChromeDriver ([\.\d]+)/.exec(out);
              if (match) {
                log.debug('Chromedriver version: \'' + match[1] + '\'');
              }

              // give the output if it is requested
              if (_this.verbose) {
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                  for (var _iterator2 = _getIterator((stdout || '').trim().split('\n')), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var line = _step2.value;

                    if (!line.trim().length) continue; // eslint-disable-line curly
                    log.debug('[STDOUT] ' + line);
                  }
                } catch (err) {
                  _didIteratorError2 = true;
                  _iteratorError2 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion2 && _iterator2['return']) {
                      _iterator2['return']();
                    }
                  } finally {
                    if (_didIteratorError2) {
                      throw _iteratorError2;
                    }
                  }
                }

                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;

                try {
                  for (var _iterator3 = _getIterator((stderr || '').trim().split('\n')), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var line = _step3.value;

                    if (!line.trim().length) continue; // eslint-disable-line curly
                    log.error('[STDERR] ' + line);
                  }
                } catch (err) {
                  _didIteratorError3 = true;
                  _iteratorError3 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion3 && _iterator3['return']) {
                      _iterator3['return']();
                    }
                  } finally {
                    if (_didIteratorError3) {
                      throw _iteratorError3;
                    }
                  }
                }
              }
            });

            // handle out-of-bound exit by simply emitting a stopped state
            this.proc.on('exit', function (code, signal) {
              processIsAlive = false;
              if (_this.state !== Chromedriver.STATE_STOPPED && _this.state !== Chromedriver.STATE_STOPPING && _this.state !== Chromedriver.STATE_RESTARTING) {
                var msg = 'Chromedriver exited unexpectedly with code ' + code + ', ' + ('signal ' + signal);
                log.error(msg);
                _this.changeState(Chromedriver.STATE_STOPPED);
              }
            });
            log.info('Spawning chromedriver with: ' + this.chromedriver + ' ' + ('' + args.join(' ')));
            // start subproc and wait for startDetector
            context$2$0.next = 22;
            return _regeneratorRuntime.awrap(this.proc.start(startDetector));

          case 22:
            context$2$0.next = 24;
            return _regeneratorRuntime.awrap(this.waitForOnline());

          case 24:
            context$2$0.next = 26;
            return _regeneratorRuntime.awrap(this.startSession());

          case 26:
            context$2$0.next = 36;
            break;

          case 28:
            context$2$0.prev = 28;
            context$2$0.t0 = context$2$0['catch'](10);

            this.emit(Chromedriver.EVENT_ERROR, context$2$0.t0);
            // just because we had an error doesn't mean the chromedriver process
            // finished; we should clean up if necessary

            if (!processIsAlive) {
              context$2$0.next = 34;
              break;
            }

            context$2$0.next = 34;
            return _regeneratorRuntime.awrap(this.proc.stop());

          case 34:

            // often the user's Chrome version is too low for the version of Chromedriver
            if (context$2$0.t0.message.indexOf('Chrome version must be') !== -1) {
              log.error('Unable to automate Chrome version because it is too old for this version of Chromedriver.');
              if (webviewVersion) {
                log.error('Chrome version on device: ' + webviewVersion);
              }
              log.error('Please see \'https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/web/chromedriver.md\'');
            }
            log.errorAndThrow(context$2$0.t0);

          case 36:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[10, 28]]);
    }
  }, {
    key: 'sessionId',
    value: function sessionId() {
      if (this.state !== Chromedriver.STATE_ONLINE) {
        return null;
      }

      return this.jwproxy.sessionId;
    }
  }, {
    key: 'restart',
    value: function restart() {
      return _regeneratorRuntime.async(function restart$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            log.info("Restarting chromedriver");

            if (!(this.state !== Chromedriver.STATE_ONLINE)) {
              context$2$0.next = 3;
              break;
            }

            throw new Error("Can't restart when we're not online");

          case 3:
            this.changeState(Chromedriver.STATE_RESTARTING);
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.stop(false));

          case 6:
            context$2$0.next = 8;
            return _regeneratorRuntime.awrap(this.start(this.capabilities, false));

          case 8:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'waitForOnline',
    value: function waitForOnline() {
      var chromedriverStopped;
      return _regeneratorRuntime.async(function waitForOnline$(context$2$0) {
        var _this2 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            chromedriverStopped = false;
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(20, 200, function callee$2$0() {
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    if (!(this.state === Chromedriver.STATE_STOPPED)) {
                      context$3$0.next = 3;
                      break;
                    }

                    // we are either stopped or stopping, so something went wrong
                    chromedriverStopped = true;
                    return context$3$0.abrupt('return');

                  case 3:
                    context$3$0.next = 5;
                    return _regeneratorRuntime.awrap(this.getStatus());

                  case 5:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this2);
            }));

          case 3:
            if (!chromedriverStopped) {
              context$2$0.next = 5;
              break;
            }

            throw new Error('ChromeDriver crashed during startup.');

          case 5:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getStatus',
    value: function getStatus() {
      return _regeneratorRuntime.async(function getStatus$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.jwproxy.command('/status', 'GET'));

          case 2:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'startSession',
    value: function startSession() {
      return _regeneratorRuntime.async(function startSession$(context$2$0) {
        var _this3 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(4, 200, function callee$2$0() {
              var res;
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    context$3$0.prev = 0;
                    context$3$0.next = 3;
                    return _regeneratorRuntime.awrap(this.jwproxy.command('/session', 'POST', { desiredCapabilities: this.capabilities }));

                  case 3:
                    res = context$3$0.sent;

                    if (!res.status) {
                      context$3$0.next = 6;
                      break;
                    }

                    throw new Error(res.value.message);

                  case 6:
                    context$3$0.next = 11;
                    break;

                  case 8:
                    context$3$0.prev = 8;
                    context$3$0.t0 = context$3$0['catch'](0);

                    log.errorAndThrow('Failed to start Chromedriver session: ' + context$3$0.t0.message);

                  case 11:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this3, [[0, 8]]);
            }));

          case 2:
            this.changeState(Chromedriver.STATE_ONLINE);

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'stop',
    value: function stop() {
      var emitStates = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];
      return _regeneratorRuntime.async(function stop$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (emitStates) {
              this.changeState(Chromedriver.STATE_STOPPING);
            }
            context$2$0.prev = 1;
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.jwproxy.command('', 'DELETE'));

          case 4:
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.proc.stop('SIGTERM', 20000));

          case 6:
            if (emitStates) {
              this.changeState(Chromedriver.STATE_STOPPED);
            }
            context$2$0.next = 12;
            break;

          case 9:
            context$2$0.prev = 9;
            context$2$0.t0 = context$2$0['catch'](1);

            log.error(context$2$0.t0);

          case 12:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[1, 9]]);
    }
  }, {
    key: 'changeState',
    value: function changeState(state) {
      this.state = state;
      log.debug('Changed state to \'' + state + '\'');
      this.emit(Chromedriver.EVENT_CHANGED, { state: state });
    }
  }, {
    key: 'sendCommand',
    value: function sendCommand(url, method, body) {
      return _regeneratorRuntime.async(function sendCommand$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.jwproxy.command(url, method, body));

          case 2:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'proxyReq',
    value: function proxyReq(req, res) {
      return _regeneratorRuntime.async(function proxyReq$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.jwproxy.proxyReqRes(req, res));

          case 2:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'killAll',
    value: function killAll() {
      var cmd, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, conn, params;

      return _regeneratorRuntime.async(function killAll$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            cmd = undefined;

            if (_appiumSupport.system.isWindows()) {
              // js hint cannot handle backticks, even escaped, within template literals
              cmd = "FOR /F \"usebackq tokens=5\" %a in (`netstat -nao ^| " + "findstr /R /C:\"" + this.proxyPort + " \"`) do (" + "FOR /F \"usebackq\" %b in (`TASKLIST /FI \"PID eq %a\" ^| " + "findstr /I chromedriver.exe`) do (IF NOT %b==\"\" TASKKILL " + "/F /PID %a))";
            } else {
              cmd = 'pkill -15 -f "' + this.chromedriver + '.*--port=' + this.proxyPort + '"';
            }
            log.debug('Killing any old chromedrivers, running: ' + cmd);
            context$2$0.prev = 3;
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(_bluebird2['default'].promisify(_child_process2['default'].exec)(cmd));

          case 6:
            log.debug("Successfully cleaned up old chromedrivers");
            context$2$0.next = 12;
            break;

          case 9:
            context$2$0.prev = 9;
            context$2$0.t0 = context$2$0['catch'](3);

            log.warn("No old chromedrivers seemed to exist");

          case 12:
            if (!this.adb) {
              context$2$0.next = 52;
              break;
            }

            log.debug('Cleaning any old adb forwarded port socket connections');
            context$2$0.prev = 14;
            _iteratorNormalCompletion4 = true;
            _didIteratorError4 = false;
            _iteratorError4 = undefined;
            context$2$0.prev = 18;
            context$2$0.next = 21;
            return _regeneratorRuntime.awrap(this.adb.getForwardList());

          case 21:
            context$2$0.t1 = _Symbol$iterator;
            _iterator4 = context$2$0.sent[context$2$0.t1]();

          case 23:
            if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
              context$2$0.next = 33;
              break;
            }

            conn = _step4.value;

            if (!(conn.indexOf('webview_devtools') !== -1)) {
              context$2$0.next = 30;
              break;
            }

            params = conn.split(/\s+/);

            if (!(params.length > 1)) {
              context$2$0.next = 30;
              break;
            }

            context$2$0.next = 30;
            return _regeneratorRuntime.awrap(this.adb.removePortForward(params[1].replace(/[\D]*/, '')));

          case 30:
            _iteratorNormalCompletion4 = true;
            context$2$0.next = 23;
            break;

          case 33:
            context$2$0.next = 39;
            break;

          case 35:
            context$2$0.prev = 35;
            context$2$0.t2 = context$2$0['catch'](18);
            _didIteratorError4 = true;
            _iteratorError4 = context$2$0.t2;

          case 39:
            context$2$0.prev = 39;
            context$2$0.prev = 40;

            if (!_iteratorNormalCompletion4 && _iterator4['return']) {
              _iterator4['return']();
            }

          case 42:
            context$2$0.prev = 42;

            if (!_didIteratorError4) {
              context$2$0.next = 45;
              break;
            }

            throw _iteratorError4;

          case 45:
            return context$2$0.finish(42);

          case 46:
            return context$2$0.finish(39);

          case 47:
            context$2$0.next = 52;
            break;

          case 49:
            context$2$0.prev = 49;
            context$2$0.t3 = context$2$0['catch'](14);

            log.warn('Unable to clean forwarded ports. Error: \'' + context$2$0.t3.message + '\'. Continuing.');

          case 52:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[3, 9], [14, 49], [18, 35, 39, 47], [40,, 42, 46]]);
    }
  }, {
    key: 'hasWorkingWebview',
    value: function hasWorkingWebview() {
      return _regeneratorRuntime.async(function hasWorkingWebview$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.prev = 0;
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.jwproxy.command('/url', 'GET'));

          case 3:
            return context$2$0.abrupt('return', true);

          case 6:
            context$2$0.prev = 6;
            context$2$0.t0 = context$2$0['catch'](0);
            return context$2$0.abrupt('return', false);

          case 9:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[0, 6]]);
    }
  }]);

  return Chromedriver;
})(_events2['default'].EventEmitter);

Chromedriver.EVENT_ERROR = 'chromedriver_error';
Chromedriver.EVENT_CHANGED = 'stateChanged';
Chromedriver.STATE_STOPPED = 'stopped';
Chromedriver.STATE_STARTING = 'starting';
Chromedriver.STATE_ONLINE = 'online';
Chromedriver.STATE_STOPPING = 'stopping';
Chromedriver.STATE_RESTARTING = 'restarting';

exports['default'] = Chromedriver;
module.exports = exports['default'];

// go through the versions available

// unable to get the chrome version

// this is a chrome above the latest version we know about,
// and we have a chromedriver that is beyond what we know,
// so use the most recent chromedriver that we found
//eslint-disable-line curly

// we need to make sure that CD hasn't crashed

// retry session start 4 times, sometimes this fails due to adb

// ChromeDriver can return a positive status despite failing

// chromedriver will ask ADB to forward a port like "deviceId tcp:port localabstract:webview_devtools_remote_port"

// sometimes chromedriver stops automating webviews. this method runs a
// simple command to determine our state, and responds accordingly
//# sourceMappingURL=data:application/json;charset=utf8;base64,
