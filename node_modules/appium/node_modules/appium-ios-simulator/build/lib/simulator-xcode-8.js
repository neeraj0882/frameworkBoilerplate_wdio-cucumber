'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _simulatorXcode6 = require('./simulator-xcode-6');

var _simulatorXcode7 = require('./simulator-xcode-7');

var _simulatorXcode72 = _interopRequireDefault(_simulatorXcode7);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _asyncbox = require('asyncbox');

var _teen_process = require('teen_process');

var _nodeSimctl = require('node-simctl');

// these sims are sloooooooow
var STARTUP_TIMEOUT = 120 * 1000;
var SAFARI_STARTUP_TIMEOUT = 25 * 1000;
var SPRINGBOARD_BUNDLE_ID = 'com.apple.springboard';
var MOBILE_SAFARI_BUNDLE_ID = 'com.apple.mobilesafari';
var PROCESS_LAUNCH_OK_PATTERN = function PROCESS_LAUNCH_OK_PATTERN(bundleId) {
  return new RegExp(bundleId.replace('.', '\\.') + ':\\s+\\d+');
};

var SimulatorXcode8 = (function (_SimulatorXcode7) {
  _inherits(SimulatorXcode8, _SimulatorXcode7);

  function SimulatorXcode8(udid, xcodeVersion) {
    _classCallCheck(this, SimulatorXcode8);

    _get(Object.getPrototypeOf(SimulatorXcode8.prototype), 'constructor', this).call(this, udid, xcodeVersion);

    // list of files to check for when seeing if a simulator is "fresh"
    // (meaning it has never been booted).
    // If these files are present, we assume it's been successfully booted
    this.isFreshFiles = ['Library/Cookies', 'Library/Preferences/.GlobalPreferences.plist', 'Library/Preferences/com.apple.springboard.plist', 'var/run/syslog.pid'];
  }

  _createClass(SimulatorXcode8, [{
    key: 'isAppInstalled',
    value: function isAppInstalled(bundleId) {
      var appContainer;
      return _regeneratorRuntime.async(function isAppInstalled$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.prev = 0;
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap((0, _nodeSimctl.getAppContainer)(this.udid, bundleId, false));

          case 3:
            appContainer = context$2$0.sent;
            return context$2$0.abrupt('return', appContainer.endsWith('.app'));

          case 7:
            context$2$0.prev = 7;
            context$2$0.t0 = context$2$0['catch'](0);
            return context$2$0.abrupt('return', false);

          case 10:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[0, 7]]);
    }
  }, {
    key: 'waitForBoot',
    value: function waitForBoot(startupTimeout) {
      var startupTimestamp, lastError;
      return _regeneratorRuntime.async(function waitForBoot$(context$2$0) {
        var _this2 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            startupTimestamp = process.hrtime();
            lastError = null;
            context$2$0.prev = 2;
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap((function callee$2$0() {
              var isOnBootCompletedEmitted;
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                var _this = this;

                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    isOnBootCompletedEmitted = false;
                    context$3$0.next = 3;
                    return _regeneratorRuntime.awrap((0, _asyncbox.waitForCondition)(function callee$3$0() {
                      var _ref,
                      // 'springboard' process should be the last one to start after boot
                      // 'simctl launch' will block until this process is running or fail if booting is still in progress
                      stdout;

                      return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                        while (1) switch (context$4$0.prev = context$4$0.next) {
                          case 0:
                            context$4$0.prev = 0;
                            context$4$0.next = 3;
                            return _regeneratorRuntime.awrap((0, _teen_process.exec)('xcrun', ['simctl', 'launch', this.udid, this.startupPollBundleId]));

                          case 3:
                            _ref = context$4$0.sent;
                            stdout = _ref.stdout;

                            if (!PROCESS_LAUNCH_OK_PATTERN(this.startupPollBundleId).test(stdout)) {
                              context$4$0.next = 8;
                              break;
                            }

                            if (!isOnBootCompletedEmitted) {
                              isOnBootCompletedEmitted = true;
                              this.emit(_simulatorXcode6.BOOT_COMPLETED_EVENT);
                            }

                            return context$4$0.abrupt('return', true);

                          case 8:
                            context$4$0.next = 13;
                            break;

                          case 10:
                            context$4$0.prev = 10;
                            context$4$0.t0 = context$4$0['catch'](0);

                            lastError = context$4$0.t0.stderr || context$4$0.t0.message;

                          case 13:
                            return context$4$0.abrupt('return', false);

                          case 14:
                          case 'end':
                            return context$4$0.stop();
                        }
                      }, null, _this, [[0, 10]]);
                    }, { waitMs: startupTimeout, intervalMs: 500 }));

                  case 3:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this2);
            })());

          case 5:
            context$2$0.next = 10;
            break;

          case 7:
            context$2$0.prev = 7;
            context$2$0.t0 = context$2$0['catch'](2);

            _logger2['default'].errorAndThrow('Simulator is not booted after ' + process.hrtime(startupTimestamp)[0] + ' seconds because of ' + ('"' + (lastError ? "`${lastError}`" : 'an unknown error') + '"'));

          case 10:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[2, 7]]);
    }
  }, {
    key: 'openUrl',
    value: function openUrl(url) {
      var launchTimestamp, lastError;
      return _regeneratorRuntime.async(function openUrl$(context$2$0) {
        var _this3 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.isRunning());

          case 2:
            if (context$2$0.sent) {
              context$2$0.next = 4;
              break;
            }

            throw new Error('Tried to open ' + url + ', but Simulator is not in Booted state');

          case 4:
            launchTimestamp = process.hrtime();
            lastError = null;
            context$2$0.prev = 6;
            context$2$0.next = 9;
            return _regeneratorRuntime.awrap((0, _asyncbox.waitForCondition)(function callee$2$0() {
              var _ref2,
              // This is to make sure Safari is already running
              stdout;

              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    context$3$0.prev = 0;
                    context$3$0.next = 3;
                    return _regeneratorRuntime.awrap((0, _teen_process.exec)('xcrun', ['simctl', 'launch', this.udid, MOBILE_SAFARI_BUNDLE_ID]));

                  case 3:
                    _ref2 = context$3$0.sent;
                    stdout = _ref2.stdout;

                    if (!PROCESS_LAUNCH_OK_PATTERN(MOBILE_SAFARI_BUNDLE_ID).test(stdout)) {
                      context$3$0.next = 9;
                      break;
                    }

                    context$3$0.next = 8;
                    return _regeneratorRuntime.awrap((0, _nodeSimctl.openUrl)(this.udid, url));

                  case 8:
                    return context$3$0.abrupt('return', true);

                  case 9:
                    context$3$0.next = 15;
                    break;

                  case 11:
                    context$3$0.prev = 11;
                    context$3$0.t0 = context$3$0['catch'](0);

                    _logger2['default'].error('Failed to open \'' + url + '\' in Safari. Retrying...');
                    lastError = context$3$0.t0.stderr || context$3$0.t0.message;

                  case 15:
                    return context$3$0.abrupt('return', false);

                  case 16:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this3, [[0, 11]]);
            }, { waitMs: SAFARI_STARTUP_TIMEOUT, intervalMs: 500 }));

          case 9:
            context$2$0.next = 14;
            break;

          case 11:
            context$2$0.prev = 11;
            context$2$0.t0 = context$2$0['catch'](6);

            _logger2['default'].errorAndThrow('Safari cannot open \'' + url + '\' after ' + process.hrtime(launchTimestamp)[0] + ' seconds ' + ('because of ' + (lastError ? "`${lastError}`" : 'an unknown error')));

          case 14:
            _logger2['default'].debug('Safari has successfully opened \'' + url + '\' in ' + process.hrtime(launchTimestamp)[0] + ' seconds');

          case 15:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[6, 11]]);
    }
  }, {
    key: 'cleanSafari',
    value: function cleanSafari() {
      var keepPrefs = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];
      return _regeneratorRuntime.async(function cleanSafari$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.prev = 0;
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap((0, _nodeSimctl.terminate)(this.udid, MOBILE_SAFARI_BUNDLE_ID));

          case 3:
            context$2$0.next = 7;
            break;

          case 5:
            context$2$0.prev = 5;
            context$2$0.t0 = context$2$0['catch'](0);

          case 7:
            context$2$0.next = 9;
            return _regeneratorRuntime.awrap(_get(Object.getPrototypeOf(SimulatorXcode8.prototype), 'cleanSafari', this).call(this, keepPrefs));

          case 9:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[0, 5]]);
    }
  }, {
    key: 'cleanCustomApp',
    value: function cleanCustomApp(appFile, appBundleId) {
      var scrub = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];
      return _regeneratorRuntime.async(function cleanCustomApp$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.prev = 0;
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap((0, _nodeSimctl.terminate)(this.udid, appBundleId));

          case 3:
            context$2$0.next = 7;
            break;

          case 5:
            context$2$0.prev = 5;
            context$2$0.t0 = context$2$0['catch'](0);

          case 7:
            context$2$0.next = 9;
            return _regeneratorRuntime.awrap(_get(Object.getPrototypeOf(SimulatorXcode8.prototype), 'cleanCustomApp', this).call(this, appFile, appBundleId, scrub));

          case 9:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[0, 5]]);
    }
  }, {
    key: 'startupPollBundleId',
    get: function get() {
      return SPRINGBOARD_BUNDLE_ID;
    }
  }, {
    key: 'startupTimeout',
    get: function get() {
      return STARTUP_TIMEOUT;
    }
  }]);

  return SimulatorXcode8;
})(_simulatorXcode72['default']);

exports['default'] = SimulatorXcode8;
module.exports = exports['default'];

// ignore error

// ignore error
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9zaW11bGF0b3IteGNvZGUtOC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7K0JBQXFDLHFCQUFxQjs7K0JBQzlCLHFCQUFxQjs7OztzQkFDakMsVUFBVTs7Ozt3QkFDTyxVQUFVOzs0QkFDdEIsY0FBYzs7MEJBQ2tDLGFBQWE7OztBQUlsRixJQUFNLGVBQWUsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDO0FBQ25DLElBQU0sc0JBQXNCLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQztBQUN6QyxJQUFNLHFCQUFxQixHQUFHLHVCQUF1QixDQUFDO0FBQ3RELElBQU0sdUJBQXVCLEdBQUcsd0JBQXdCLENBQUM7QUFDekQsSUFBTSx5QkFBeUIsR0FBRyxTQUE1Qix5QkFBeUIsQ0FBSSxRQUFRO1NBQUssSUFBSSxNQUFNLENBQUksUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLGVBQVk7Q0FBQSxDQUFDOztJQUVqRyxlQUFlO1lBQWYsZUFBZTs7QUFDUCxXQURSLGVBQWUsQ0FDTixJQUFJLEVBQUUsWUFBWSxFQUFFOzBCQUQ3QixlQUFlOztBQUVqQiwrQkFGRSxlQUFlLDZDQUVYLElBQUksRUFBRSxZQUFZLEVBQUU7Ozs7O0FBSzFCLFFBQUksQ0FBQyxZQUFZLEdBQUcsQ0FDbEIsaUJBQWlCLEVBQ2pCLDhDQUE4QyxFQUM5QyxpREFBaUQsRUFDakQsb0JBQW9CLENBQ3JCLENBQUM7R0FDSDs7ZUFiRyxlQUFlOztXQWVFLHdCQUFDLFFBQVE7VUFFdEIsWUFBWTs7Ozs7OzZDQUFTLGlDQUFnQixJQUFJLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUM7OztBQUFoRSx3QkFBWTtnREFDVCxZQUFZLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQzs7Ozs7Z0RBRTdCLEtBQUs7Ozs7Ozs7S0FFZjs7O1dBVWlCLHFCQUFDLGNBQWM7VUFDekIsZ0JBQWdCLEVBQ2xCLFNBQVM7Ozs7OztBQURQLDRC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QUksRUFBRSxXQUFXLENBQUM7Ozs7Ozs7Ozs7Ozt3RUFwR3ZDLGVBQWUsZ0RBd0dVLE9BQU8sRUFBRSxXQUFXLEVBQUUsS0FBSzs7Ozs7OztLQUN2RDs7O1NBakZ1QixlQUFHO0FBQ3pCLGFBQU8scUJBQXFCLENBQUM7S0FDOUI7OztTQUVrQixlQUFHO0FBQ3BCLGFBQU8sZUFBZSxDQUFDO0tBQ3hCOzs7U0E5QkcsZUFBZTs7O3FCQTZHTixlQUFlIiwiZmlsZSI6ImxpYi9zaW11bGF0b3IteGNvZGUtOC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJPT1RfQ09NUExFVEVEX0VWRU5UIH0gZnJvbSAnLi9zaW11bGF0b3IteGNvZGUtNic7XG5pbXBvcnQgU2ltdWxhdG9yWGNvZGU3IGZyb20gJy4vc2ltdWxhdG9yLXhjb2RlLTcnO1xuaW1wb3J0IGxvZyBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgeyB3YWl0Rm9yQ29uZGl0aW9uIH0gZnJvbSAnYXN5bmNib3gnO1xuaW1wb3J0IHsgZXhlYyB9IGZyb20gJ3RlZW5fcHJvY2Vzcyc7XG5pbXBvcnQgeyBnZXRBcHBDb250YWluZXIsIG9wZW5VcmwgYXMgc2ltY3RsT3BlblVybCwgdGVybWluYXRlIH0gZnJvbSAnbm9kZS1zaW1jdGwnO1xuXG5cbi8vIHRoZXNlIHNpbXMgYXJlIHNsb29vb29vb293XG5jb25zdCBTVEFSVFVQX1RJTUVPVVQgPSAxMjAgKiAxMDAwO1xuY29uc3QgU0FGQVJJX1NUQVJUVVBfVElNRU9VVCA9IDI1ICogMTAwMDtcbmNvbnN0IFNQUklOR0JPQVJEX0JVTkRMRV9JRCA9ICdjb20uYXBwbGUuc3ByaW5nYm9hcmQnO1xuY29uc3QgTU9CSUxFX1NBRkFSSV9CVU5ETEVfSUQgPSAnY29tLmFwcGxlLm1vYmlsZXNhZmFyaSc7XG5jb25zdCBQUk9DRVNTX0xBVU5DSF9PS19QQVRURVJOID0gKGJ1bmRsZUlkKSA9PiBuZXcgUmVnRXhwKGAke2J1bmRsZUlkLnJlcGxhY2UoJy4nLCAnXFxcXC4nKX06XFxcXHMrXFxcXGQrYCk7XG5cbmNsYXNzIFNpbXVsYXRvclhjb2RlOCBleHRlbmRzIFNpbXVsYXRvclhjb2RlNyB7XG4gIGNvbnN0cnVjdG9yICh1ZGlkLCB4Y29kZVZlcnNpb24pIHtcbiAgICBzdXBlcih1ZGlkLCB4Y29kZVZlcnNpb24pO1xuXG4gICAgLy8gbGlzdCBvZiBmaWxlcyB0byBjaGVjayBmb3Igd2hlbiBzZWVpbmcgaWYgYSBzaW11bGF0b3IgaXMgXCJmcmVzaFwiXG4gICAgLy8gKG1lYW5pbmcgaXQgaGFzIG5ldmVyIGJlZW4gYm9vdGVkKS5cbiAgICAvLyBJZiB0aGVzZSBmaWxlcyBhcmUgcHJlc2VudCwgd2UgYXNzdW1lIGl0J3MgYmVlbiBzdWNjZXNzZnVsbHkgYm9vdGVkXG4gICAgdGhpcy5pc0ZyZXNoRmlsZXMgPSBbXG4gICAgICAnTGlicmFyeS9Db29raWVzJyxcbiAgICAgICdMaWJyYXJ5L1ByZWZlcmVuY2VzLy5HbG9iYWxQcmVmZXJlbmNlcy5wbGlzdCcsXG4gICAgICAnTGlicmFyeS9QcmVmZXJlbmNlcy9jb20uYXBwbGUuc3ByaW5nYm9hcmQucGxpc3QnLFxuICAgICAgJ3Zhci9ydW4vc3lzbG9nLnBpZCdcbiAgICBdO1xuICB9XG5cbiAgYXN5bmMgaXNBcHBJbnN0YWxsZWQgKGJ1bmRsZUlkKSB7XG4gICAgdHJ5IHtcbiAgICAgIGxldCBhcHBDb250YWluZXIgPSBhd2FpdCBnZXRBcHBDb250YWluZXIodGhpcy51ZGlkLCBidW5kbGVJZCwgZmFsc2UpO1xuICAgICAgcmV0dXJuIGFwcENvbnRhaW5lci5lbmRzV2l0aCgnLmFwcCcpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGdldCBzdGFydHVwUG9sbEJ1bmRsZUlkICgpIHtcbiAgICByZXR1cm4gU1BSSU5HQk9BUkRfQlVORExFX0lEO1xuICB9XG5cbiAgZ2V0IHN0YXJ0dXBUaW1lb3V0ICgpIHtcbiAgICByZXR1cm4gU1RBUlRVUF9USU1FT1VUO1xuICB9XG5cbiAgYXN5bmMgd2FpdEZvckJvb3QgKHN0YXJ0dXBUaW1lb3V0KSB7XG4gICAgY29uc3Qgc3RhcnR1cFRpbWVzdGFtcCA9IHByb2Nlc3MuaHJ0aW1lKCk7XG4gICAgbGV0IGxhc3RFcnJvciA9IG51bGw7XG4gICAgdHJ5IHtcbiAgICAgIGxldCBpc09uQm9vdENvbXBsZXRlZEVtaXR0ZWQgPSBmYWxzZTtcbiAgICAgIGF3YWl0IHdhaXRGb3JDb25kaXRpb24oYXN5bmMgKCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vICdzcHJpbmdib2FyZCcgcHJvY2VzcyBzaG91bGQgYmUgdGhlIGxhc3Qgb25lIHRvIHN0YXJ0IGFmdGVyIGJvb3RcbiAgICAgICAgICAvLyAnc2ltY3RsIGxhdW5jaCcgd2lsbCBibG9jayB1bnRpbCB0aGlzIHByb2Nlc3MgaXMgcnVubmluZyBvciBmYWlsIGlmIGJvb3RpbmcgaXMgc3RpbGwgaW4gcHJvZ3Jlc3NcbiAgICAgICAgICBjb25zdCB7c3Rkb3V0fSA9IGF3YWl0IGV4ZWMoJ3hjcnVuJywgWydzaW1jdGwnLCAnbGF1bmNoJywgdGhpcy51ZGlkLCB0aGlzLnN0YXJ0dXBQb2xsQnVuZGxlSWRdKTtcbiAgICAgICAgICBpZiAoUFJPQ0VTU19MQVVOQ0hfT0tfUEFUVEVSTih0aGlzLnN0YXJ0dXBQb2xsQnVuZGxlSWQpLnRlc3Qoc3Rkb3V0KSkge1xuICAgICAgICAgICAgaWYgKCFpc09uQm9vdENvbXBsZXRlZEVtaXR0ZWQpIHtcbiAgICAgICAgICAgICAgaXNPbkJvb3RDb21wbGV0ZWRFbWl0dGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgdGhpcy5lbWl0KEJPT1RfQ09NUExFVEVEX0VWRU5UKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBsYXN0RXJyb3IgPSBlcnIuc3RkZXJyIHx8IGVyci5tZXNzYWdlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0sIHt3YWl0TXM6IHN0YXJ0dXBUaW1lb3V0LCBpbnRlcnZhbE1zOiA1MDB9KTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGxvZy5lcnJvckFuZFRocm93KGBTaW11bGF0b3IgaXMgbm90IGJvb3RlZCBhZnRlciAke3Byb2Nlc3MuaHJ0aW1lKHN0YXJ0dXBUaW1lc3RhbXApWzBdfSBzZWNvbmRzIGJlY2F1c2Ugb2YgYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgXCIke2xhc3RFcnJvciA/IFwiYCR7bGFzdEVycm9yfWBcIiA6ICdhbiB1bmtub3duIGVycm9yJ31cImApO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIG9wZW5VcmwgKHVybCkge1xuICAgIGlmICghYXdhaXQgdGhpcy5pc1J1bm5pbmcoKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBUcmllZCB0byBvcGVuICR7dXJsfSwgYnV0IFNpbXVsYXRvciBpcyBub3QgaW4gQm9vdGVkIHN0YXRlYCk7XG4gICAgfVxuICAgIGNvbnN0IGxhdW5jaFRpbWVzdGFtcCA9IHByb2Nlc3MuaHJ0aW1lKCk7XG4gICAgbGV0IGxhc3RFcnJvciA9IG51bGw7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHdhaXRGb3JDb25kaXRpb24oYXN5bmMgKCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgaXMgdG8gbWFrZSBzdXJlIFNhZmFyaSBpcyBhbHJlYWR5IHJ1bm5pbmdcbiAgICAgICAgICBjb25zdCB7c3Rkb3V0fSA9IGF3YWl0IGV4ZWMoJ3hjcnVuJywgWydzaW1jdGwnLCAnbGF1bmNoJywgdGhpcy51ZGlkLCBNT0JJTEVfU0FGQVJJX0JVTkRMRV9JRF0pO1xuICAgICAgICAgIGlmIChQUk9DRVNTX0xBVU5DSF9PS19QQVRURVJOKE1PQklMRV9TQUZBUklfQlVORExFX0lEKS50ZXN0KHN0ZG91dCkpIHtcbiAgICAgICAgICAgIGF3YWl0IHNpbWN0bE9wZW5VcmwodGhpcy51ZGlkLCB1cmwpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBsb2cuZXJyb3IoYEZhaWxlZCB0byBvcGVuICcke3VybH0nIGluIFNhZmFyaS4gUmV0cnlpbmcuLi5gKTtcbiAgICAgICAgICBsYXN0RXJyb3IgPSBlcnIuc3RkZXJyIHx8IGVyci5tZXNzYWdlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0sIHt3YWl0TXM6IFNBRkFSSV9TVEFSVFVQX1RJTUVPVVQsIGludGVydmFsTXM6IDUwMH0pO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgbG9nLmVycm9yQW5kVGhyb3coYFNhZmFyaSBjYW5ub3Qgb3BlbiAnJHt1cmx9JyBhZnRlciAke3Byb2Nlc3MuaHJ0aW1lKGxhdW5jaFRpbWVzdGFtcClbMF19IHNlY29uZHMgYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgYmVjYXVzZSBvZiAke2xhc3RFcnJvciA/IFwiYCR7bGFzdEVycm9yfWBcIiA6ICdhbiB1bmtub3duIGVycm9yJ31gKTtcbiAgICB9XG4gICAgbG9nLmRlYnVnKGBTYWZhcmkgaGFzIHN1Y2Nlc3NmdWxseSBvcGVuZWQgJyR7dXJsfScgaW4gJHtwcm9jZXNzLmhydGltZShsYXVuY2hUaW1lc3RhbXApWzBdfSBzZWNvbmRzYCk7XG4gIH1cblxuICBhc3luYyBjbGVhblNhZmFyaSAoa2VlcFByZWZzID0gdHJ1ZSkge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0ZXJtaW5hdGUodGhpcy51ZGlkLCBNT0JJTEVfU0FGQVJJX0JVTkRMRV9JRCk7XG4gICAgfSBjYXRjaCAoaWduKSB7XG4gICAgICAvLyBpZ25vcmUgZXJyb3JcbiAgICB9XG4gICAgYXdhaXQgc3VwZXIuY2xlYW5TYWZhcmkoa2VlcFByZWZzKTtcbiAgfVxuXG4gIGFzeW5jIGNsZWFuQ3VzdG9tQXBwIChhcHBGaWxlLCBhcHBCdW5kbGVJZCwgc2NydWIgPSBmYWxzZSkge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0ZXJtaW5hdGUodGhpcy51ZGlkLCBhcHBCdW5kbGVJZCk7XG4gICAgfSBjYXRjaCAoaWduKSB7XG4gICAgICAvLyBpZ25vcmUgZXJyb3JcbiAgICB9XG4gICAgYXdhaXQgc3VwZXIuY2xlYW5DdXN0b21BcHAoYXBwRmlsZSwgYXBwQnVuZGxlSWQsIHNjcnViKTtcbiAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFNpbXVsYXRvclhjb2RlODtcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
