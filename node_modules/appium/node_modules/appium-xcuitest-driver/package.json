{
  "_args": [
    [
      {
        "raw": "appium-xcuitest-driver@https://registry.npmjs.org/appium-xcuitest-driver/-/appium-xcuitest-driver-2.76.2.tgz",
        "scope": null,
        "escapedName": "appium-xcuitest-driver",
        "name": "appium-xcuitest-driver",
        "rawSpec": "https://registry.npmjs.org/appium-xcuitest-driver/-/appium-xcuitest-driver-2.76.2.tgz",
        "spec": "https://registry.npmjs.org/appium-xcuitest-driver/-/appium-xcuitest-driver-2.76.2.tgz",
        "type": "remote"
      },
      "/Users/saxenan3/myprojects/uiAutomation/mytest_project/node_modules/appium"
    ]
  ],
  "_from": "appium-xcuitest-driver@https://registry.npmjs.org/appium-xcuitest-driver/-/appium-xcuitest-driver-2.76.2.tgz",
  "_id": "appium-xcuitest-driver@2.76.2",
  "_inCache": true,
  "_location": "/appium/appium-xcuitest-driver",
  "_phantomChildren": {
    "appium-support": "2.15.0",
    "appium-xcode": "3.4.1",
    "async-lock": "1.1.2",
    "asyncbox": "2.3.3",
    "babel-runtime": "5.8.24",
    "cliui": "3.2.0",
    "decamelize": "1.2.0",
    "execa": "0.7.0",
    "fkill": "5.3.0",
    "get-caller-file": "1.0.2",
    "graceful-fs": "4.1.11",
    "lcid": "1.0.0",
    "locate-path": "2.0.0",
    "lodash": "4.17.5",
    "mem": "1.1.0",
    "node-simctl": "3.11.8",
    "normalize-package-data": "2.4.0",
    "openssl-wrapper": "0.3.4",
    "parse-json": "2.2.0",
    "pify": "2.3.0",
    "request-promise-core": "1.1.1",
    "require-directory": "2.1.1",
    "require-main-filename": "1.0.1",
    "semver-compare": "1.0.0",
    "set-blocking": "2.0.0",
    "stealthy-require": "1.1.1",
    "teen_process": "1.12.0",
    "tough-cookie": "2.3.4",
    "y18n": "3.2.1"
  },
  "_requested": {
    "raw": "appium-xcuitest-driver@https://registry.npmjs.org/appium-xcuitest-driver/-/appium-xcuitest-driver-2.76.2.tgz",
    "scope": null,
    "escapedName": "appium-xcuitest-driver",
    "name": "appium-xcuitest-driver",
    "rawSpec": "https://registry.npmjs.org/appium-xcuitest-driver/-/appium-xcuitest-driver-2.76.2.tgz",
    "spec": "https://registry.npmjs.org/appium-xcuitest-driver/-/appium-xcuitest-driver-2.76.2.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/appium",
    "/appium/appium-youiengine-driver"
  ],
  "_resolved": "https://registry.npmjs.org/appium-xcuitest-driver/-/appium-xcuitest-driver-2.76.2.tgz",
  "_shasum": "8a3337ad4a2c5dcef21a8030775be72210de5543",
  "_shrinkwrap": null,
  "_spec": "appium-xcuitest-driver@https://registry.npmjs.org/appium-xcuitest-driver/-/appium-xcuitest-driver-2.76.2.tgz",
  "_where": "/Users/saxenan3/myprojects/uiAutomation/mytest_project/node_modules/appium",
  "author": {
    "name": "appium"
  },
  "bin": {},
  "bugs": {
    "url": "https://github.com/appium/appium-xcuitest-driver/issues"
  },
  "dependencies": {
    "appium-base-driver": "^2.20.3",
    "appium-ios-driver": "^2.1.0",
    "appium-ios-simulator": "^2.9.0",
    "appium-remote-debugger": "^3.10.0",
    "appium-support": "^2.13.0",
    "appium-xcode": "^3.2.0",
    "async-lock": "^1.0.0",
    "asyncbox": "^2.3.1",
    "babel-runtime": "=5.8.24",
    "bluebird": "^3.1.1",
    "js2xmlparser2": "^0.2.0",
    "lodash": "^4.0.0",
    "node-simctl": "^3.10.0",
    "request": "^2.79.0",
    "request-promise": "^4.1.1",
    "source-map-support": "^0.4.0",
    "teen_process": "^1.7.1",
    "xmldom": "^0.1.27",
    "yargs": "^8.0.2"
  },
  "description": "Appium driver for iOS using XCUITest for backend",
  "devDependencies": {
    "appium-event-parser": "^1.0.0",
    "appium-gulp-plugins": "^2.2.0",
    "appium-test-support": "^1.0.0",
    "babel-eslint": "^7.1.1",
    "chai": "^3.0.0",
    "chai-as-promised": "^5.1.0",
    "eslint": "^3.18.0",
    "eslint-config-appium": "^2.0.1",
    "eslint-plugin-babel": "^3.3.0",
    "eslint-plugin-import": "^2.2.0",
    "eslint-plugin-mocha": "^4.7.0",
    "eslint-plugin-promise": "^3.3.1",
    "glob": "^7.1.0",
    "gulp": "^3.8.11",
    "ios-test-app": "^2.5.7",
    "ios-uicatalog": "^1.0.4",
    "mocha": "^3.4.2",
    "pem": "^1.8.3",
    "pngjs": "^3.3.1",
    "pre-commit": "^1.1.3",
    "sinon": "^1.17.4",
    "through2": "^2.0.0",
    "unzip": "^0.1.11",
    "wd": "^1.5.0"
  },
  "directories": {
    "lib": "lib"
  },
  "engines": [
    "node"
  ],
  "homepage": "https://github.com/appium/appium-xcuitest-driver#readme",
  "keywords": [
    "appium",
    "ios",
    "webdriveragent",
    "xcuitest",
    "xctest"
  ],
  "license": "Apache-2.0",
  "main": "./build/index.js",
  "name": "appium-xcuitest-driver",
  "optionalDependencies": {},
  "pre-commit": [
    "precommit-msg",
    "precommit-test"
  ],
  "readme": "# appium-xcuitest-driver\n\n[![NPM version](http://img.shields.io/npm/v/appium-xcuitest-driver.svg)](https://npmjs.org/package/appium-xcuitest-driver)\n[![Downloads](http://img.shields.io/npm/dm/appium-xcuitest-driver.svg)](https://npmjs.org/package/appium-xcuitest-driver)\n[![Dependency Status](https://david-dm.org/appium/appium-xcuitest-driver.svg)](https://david-dm.org/appium/appium-xcuitest-driver)\n[![devDependency Status](https://david-dm.org/appium/appium-xcuitest-driver/dev-status.svg)](https://david-dm.org/appium/appium-xcuitest-driver#info=devDependencies)\n\n[![Build Status](https://api.travis-ci.org/appium/appium-xcuitest-driver.png?branch=master)](https://travis-ci.org/appium/appium-xcuitest-driver)\n[![Coverage Status](https://coveralls.io/repos/appium/appium-xcuitest-driver/badge.svg?branch=master)](https://coveralls.io/r/appium/appium-xcuitest-driver?branch=master)\n\n*Note*: Issue tracking for this repo has been disabled. Please use the [main Appium issue tracker](https://github.com/appium/appium/issues) instead.\n\n\n## Missing functionality\n\n* Auto accepting/dismissing alerts (https://github.com/appium/appium/issues/6863)\n* Touch Actions support is limited. Only basic actions, like drag-n-drop, long tap, double tap and tap are supported. Gestures, which are natively supported by XCTest, are implemented via the corresponding [\"mobile:\" endpoints](https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/ios-xctest-mobile-gestures.md)\n\n\n## Known issues\n\n* `shake` is implemented via AppleScript and works only on Simulator due to lack of support from Apple\n* Setting geo-location is implemented via AppleScript and works only on Simulator due to lack of support from Apple. In order to make it work on real devices one should have `idevicelocation` tool available.\n* Through multi action API, `zoom` works but `pinch` does not, due to Apple issue.\n\n\n## External dependencies\n\nIn addition to the git submodules mentioned below (see [Development](#development)), this package currently depends\non `libimobiledevice` to do certain things. Install it with [Homebrew](http://brew.sh/),\n\n```\nbrew install libimobiledevice --HEAD  # install from HEAD to get important updates\nbrew install ideviceinstaller         # only works for ios 9. for ios 10, see below\n```\n\nThere is also a dependency, made necessary by Facebook's [WebDriverAgent](https://github.com/facebook/WebDriverAgent),\nfor the [Carthage](https://github.com/Carthage/Carthage) dependency manager. If you\ndo not have Carthage on your system, it can also be installed with\n[Homebrew](http://brew.sh/)\n\n```\nbrew install carthage\n```\n\n`ideviceinstaller` doesn't work with iOS 10 yet. So we need to install [ios-deploy](https://github.com/phonegap/ios-deploy)\n\n```\nnpm install -g ios-deploy\n```\n\nFor real devices we can use [xcpretty](https://github.com/supermarin/xcpretty) to make Xcode output more reasonable. This can be installed by\n\n```\ngem install xcpretty\n```\n\n\n## Sim Resetting\n\nBy default, this driver will create a new iOS simulator and run tests on it, deleting the simulator afterward.\n\nIf you specify a specific simulator using the `udid` capability, this driver will boot the specified simulator and shut it down afterwards.\n\nIf a udid is provided and the simulator is already running, this driver will leave it running after the test run.\n\nIn short, this driver tries to leave things as it found them.\n\nYou can use the `noReset` capability to adjust this behavior.\nSetting `noReset` to `true` will leave the simulator running at the end of a test session.\n\n\n## Real devices\n\n### Configuration\n\nSee [real device configuration documentation](docs/real-device-config.md).\n\n### Known problems\n\nAfter many failures on real devices, there can be a state where the device will no longer accept connections. To possibly remedy this reboot the device. Read https://github.com/facebook/WebDriverAgent/issues/507 for more details. [Getting full control](https://github.com/appium/appium/blob/master/docs/en/advanced-concepts/wda-custom-server.md) over WDA server might help to workaround the problem.\n\n#### Weird state\n\n**Note:** Running WebDriverAgent tests on a real device is particularly flakey. If things stop responding, the only recourse is, most often, to restart the device. Logs in the form of the following _may_ start to occur:\n\n```shell\ninfo JSONWP Proxy Proxying [POST /session] to [POST http://10.35.4.122:8100/session] with body: {\"desiredCapabilities\":{\"ap...\"\ndbug WebDriverAgent Device: Jul 26 13:20:42 iamPhone XCTRunner[240] <Warning>: Listening on USB\ndbug WebDriverAgent Device: Jul 26 13:21:42 iamPhone XCTRunner[240] <Warning>: Enqueue Failure: UI Testing Failure - Unable to update application state promptly. <unknown> 0 1\ndbug WebDriverAgent Device: Jul 26 13:21:57 iamPhone XCTRunner[240] <Warning>: Enqueue Failure: UI Testing Failure - Failed to get screenshot within 15s <unknown> 0 1\ndbug WebDriverAgent Device: Jul 26 13:22:57 iamPhone XCTRunner[240] <Warning>: Enqueue Failure: UI Testing Failure - App state of (null) is still unknown <unknown> 0 1\n```\n\n### Real device security settings\n\nOn some systems there are Accessibility restrictions that make the `WebDriverAgent` system unable to run. This is usually manifest\nby `xcodebuild` returning an error code `65`. A workaround for this is to use a private key that is not stored on the system\nkeychain. See [this issue](https://github.com/appium/appium/issues/6955) and [this Stack Exchange post](http://stackoverflow.com/questions/16550594/jenkins-xcode-build-works-codesign-fails).\n\nTo export the key, use\n\n```\nsecurity create-keychain -p [keychain_password] MyKeychain.keychain\nsecurity import MyPrivateKey.p12 -t agg -k MyKeychain.keychain -P [p12_Password] -A\n```\n\nwhere `MyPrivateKey.p12` is the private development key exported from the system keychain.\n\nThe full path to the keychain can then be sent to the Appium system using the `keychainPath` desired capability,\nand the password sent through the `keychainPassword` capability.\n\n## Desired Capabilities\n\nShould be the same for [Appium](https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/caps.md)\n\nDifferences noted here\n\n|Capability|Description|Values|\n|----------|-----------|------|\n|`noReset`|Do not destroy or shut down sim after test. Start tests running on whichever sim is running, or device is plugged in. Default `false`|`true`, `false`|\n|`processArguments`|Process arguments and environment which will be sent to the WebDriverAgent server.|`{ args: [\"a\", \"b\", \"c\"] , env: { \"a\": \"b\", \"c\": \"d\" } }` or `'{\"args\": [\"a\", \"b\", \"c\"], \"env\": { \"a\": \"b\", \"c\": \"d\" }}'`|\n|`wdaLocalPort`|This value if specified, will be used to forward traffic from Mac host to real ios devices over USB. Default value is same as port number used by WDA on device.|e.g., `8100`|\n|`showXcodeLog`|Whether to display the output of the Xcode command used to run the tests. If this is `true`, there will be **lots** of extra logging at startup. Defaults to `false`|e.g., `true`|\n|`iosInstallPause`|Time in milliseconds to pause between installing the application and starting WebDriverAgent on the device. Used particularly for larger applications. Defaults to `0`|e.g., `8000`|\n|`xcodeOrgId`|Apple developer team identifier string. Must be used in conjunction with `xcodeSigningId` to take effect.|e.g., `JWL241K123`|\n|`xcodeSigningId`|String representing a signing certificate. Must be used in conjunction with `xcodeOrgId`. This is usually just `iPhone Developer`, so the default (if not included) is `iPhone Developer`|e.g., `iPhone Developer`|\n|`xcodeConfigFile`|Full path to an optional Xcode configuration file that specifies the code signing identity and team for running the WebDriverAgent on the real device.|e.g., `/path/to/myconfig.xcconfig`|\n|`updatedWDABundleId`|Bundle id to update WDA to before building and launching on real devices. This bundle id _must_ be associated with a valid provisioning profile.|e.g., `io.appium.WebDriverAgentRunner`|\n|`keychainPath`|Full path to the private development key exported from the system keychain. Used in conjunction with `keychainPassword` when testing on real devices.|e.g., `/path/to/MyPrivateKey.p12`|\n|`keychainPassword`|Password for unlocking keychain specified in `keychainPath`.|e.g., `super awesome password`|\n|`scaleFactor`|Simulator scale factor. This is useful to have if the default resolution of simulated device is greater than the actual display resolution. So you can scale the simulator to see the whole device screen without scrolling.|Acceptable values for simulators running Xcode SDK 8 and older are: `'1.0', '0.75', '0.5', '0.33' and '0.25'`, where '1.0' means 100% scale. For simulators running Xcode SDK 9 and above the value could be any valid positive float number. The capability must be of a string type.|\n|`usePrebuiltWDA`|Skips the build phase of running the WDA app. Building is then the responsibility of the user. Only works for Xcode 8+. Defaults to `false`.|e.g., `true`|\n|`preventWDAAttachments`|Sets read only permissions to Attachments subfolder of WebDriverAgent root inside Xcode's DerivedData. This is necessary to prevent XCTest framework from creating tons of unnecessary screenshots and logs, which was impossible to turn off prior to XCTest@Xcode9 using programming interfaces provided by Apple.|Setting the capability to `true` will set POSIX permissions of the folder to `555` and `false` will reset them back to `755`. `false` by default if Xcode SDK is at version 9 or newer otherwise `true`|\n|`webDriverAgentUrl`|If provided, Appium will connect to an existing WebDriverAgent instance at this URL instead of starting a new one.|e.g., `http://localhost:8100`|\n|`useNewWDA`|If `true`, forces uninstall of any existing WebDriverAgent app on device. Set it to `true` if you want to apply different startup options for WebDriverAgent for each session. Although, it is only guaranteed to work stable on Simulator. Real devices require WebDriverAgent client to run for as long as possible without reinstall/restart to avoid issues like https://github.com/facebook/WebDriverAgent/issues/507. The `false` value (the default behaviour since driver version 2.35.0) will try to detect currently running WDA listener executed by previous testing session(s) and reuse it if possible, which is highly recommended for real device testing and to speed up suites of multiple tests in general. A new WDA session will be triggered at the default URL (http://localhost:8100) if WDA is not listening and `webDriverAgentUrl` capability is not set. The negative/unset value of `useNewWDA` capability has no effect prior to xcuitest driver version 2.35.0.|e.g., `true`|\n|`wdaLaunchTimeout`|Time, in ms, to wait for WebDriverAgent to be pingable. Defaults to 60000ms.|e.g., `30000`|\n|`wdaConnectionTimeout`|Timeout, in ms, for waiting for a response from WebDriverAgent. Defaults to 240000ms.|e.g., `1000`|\n|`resetOnSessionStartOnly`|Whether to perform reset on test session finish (`false`) or not (`true`). Keeping this variable set to `true` and Simulator running (the default behaviour since version 1.6.4) may significantly shorten the duratiuon of test session initialization.|Either `true` or `false`. Defaults to `true`|\n|`commandTimeouts`|Custom timeout(s) in milliseconds for WDA backend commands execution. This might be useful if WDA backend freezes unexpectedly or requires too much time to fail and blocks automated test execution. The value is expected to be of type string and can either contain max milliseconds to wait for each WDA command to be executed before terminating the session forcefully or a valid JSON string, where keys are internal Appium command names (you can find these in logs, look for \"Executing command 'command_name'\" records) and values are timeouts in milliseconds. You can also set the 'default' key to assign the timeout for all other commands not explicitly enumerated as JSON keys.|`'120000'`, `'{\"findElement\": 40000, \"findElements\": 40000, \"setValue\": 20000, \"default\": 120000}'`|\n|`wdaStartupRetries`|Number of times to try to build and launch WebDriverAgent onto the device. Defaults to 2.|e.g., `4`|\n|`wdaStartupRetryInterval`|Time, in ms, to wait between tries to build and launch WebDriverAgent. Defaults to 10000ms.|e.g., `20000`|\n|`connectHardwareKeyboard`|Set this option to `true` in order to enable hardware keyboard in Simulator. It is set to `false` by default, because this helps to workaround some XCTest bugs.|`true` or `false`|\n|`maxTypingFrequency`|Maximum frequency of keystrokes for typing and clear. If your tests are failing because of typing errors, you may want to adjust this. Defaults to 60 keystrokes per minute.|e.g., `30`|\n|`simpleIsVisibleCheck`|Use native methods for determining visibility of elements. In some cases this takes a long time. Setting this capability to `false` will cause the system to use the position and size of elements to make sure they are visible on the screen. This can, however, lead to false results in some situations. Defaults to `false`, except iOS 9.3, where it defaults to `true`.|e.g., `true`, `false`|\n|`useCarthageSsl`|Use SSL to download dependencies for WebDriverAgent. Defaults to `false`|e.g., `true`|\n|`shouldUseSingletonTestManager`|Use default proxy for test management within WebDriverAgent. Setting this to `false` sometimes helps with socket hangup problems. Defaults to `true`.|e.g., `false`|\n|`startIWDP`|Set this to `true` if you want to start ios_webkit_debug proxy server automatically for accessing webviews on iOS. The capatibility only works for real device automation. Defaults to `false`.|e.g., `true`|\n|`calendarAccessAuthorized`|Set this to `true` if you want to enable calendar access on IOS Simulator with given bundleId. Set to `false`, if you want to disable calendar access on IOS Simulator with given bundleId. If not set, the calendar authorization status will not be set.|e.g., `true`|\n|`isHeadless`|Set this capability to `true` if automated tests are running on Simulator and the device display is not needed to be visible. This only has an effect since Xcode9 and only for simulators. All running instances of Simulator UI are going to be automatically terminated if headless test is started. `false` is the default value.|e.g., `true`|\n|`webkitDebugProxyPort`|Local port number used for communication with ios-webkit-debug-proxy. Only relevant for real devices. The default value equals to `27753`.|e.g. `20000`|\n|`useXctestrunFile`|Use Xctestrun file to launch WDA. It will search for such file in `bootstrapPath`. Expected name of file is `WebDriverAgentRunner_iphoneos<platformVersion>-arm64.xctestrun` for real device and `WebDriverAgentRunner_iphonesimulator<platformVersion>-x86_64.xctestrun` for simulator. One can do `build-for-testing` for `WebDriverAgent` project for simulator and real device and then you will see [Product Folder like this](docs/useXctestrunFile.png) and you need to copy content of this folder at `bootstrapPath` location. Since, this capability expects that you have already built `WDA` project, it neither check whether you have necessary dependencies to build `WDA` nor it try to build project. Defaults to `false`|e.g., `true`|\n|`absoluteWebLocations`|This capability will direct the `Get Element Location` command, when used within webviews, to return coordinates which are relative to the origin of the page, rather than relative to the current scroll offset. This capability has no effect outside of webviews. Default `false`.|e.g., `true`|\n|`simulatorWindowCenter`|Allows to explicitly set the coordinates of Simulator window center for Xcode9+ SDK. This capability only has an effect if Simulator window has not been opened yet for the current session before it started.|e.g. `{-100.0,100.0}` or `{500,500}`, spaces are not allowed|\n|`useJSONSource`|Get JSON source from WDA and parse into XML on Appium server. This can be much faster, especially on large devices. Defaults to `false`.|e.g., `true`|\n|`shutdownOtherSimulators`|If this capability set to `true` and the current device under test is an iOS Simulator then Appium will try to shutdown all the other running Simulators before to start a new session. This might be useful while executing webview tests on different devices, since only one device can be debugged remotely at once due to an Apple bug. The capability only has an effect if `--relaxed-security` command line argument is provided to the server. Defaults to `false`.|e.g. `true`|\n|`keepKeyChains`|Set the capability to `true` in order to preserve Simulator keychains folder after full reset. This feature has no effect on real devices. Defaults to `false`|e.g. `true`|\n|`keychainsExcludePatterns`|This capability accepts comma-separated path patterns, which are going to be excluded from keychains restore while full reset is being performed on Simulator. It might be useful if you want to exclude only particular keychain types from being restored, like the applications keychain. This feature has no effect on real devices.|e.g. `*keychain*.db*` to exclude applications keychain from being restored|\n\n## Development<a id=\"development\"></a>\n\nThis project has git submodules!\n\nClone with the `git clone --recursive` flag. Or, after cloning normally run `git submodule init` and then `git submodule update`\n\nThe `git diff --submodule` flag is useful here. It can also be set as the default `diff` format: `git config --global diff.submodule log`\n\n`git config status.submodulesummary 1` is also useful.\n\n\n### Watch\n\n```\nnpm run watch\n```\n\n\n### Test\n\n```\nnpm test\n```\n\nThere are also a number of environment variables that can be used when running\nthe tests locally. These include:\n\n* `REAL_DEVICE` - set to anything truthy, makes the tests use real device capabilities\n* `_FORCE_LOGS` - set to `1` to get the log output, not just spec\n* `PLATFORM_VERSION` - change the version to run the tests against (defaults to `9.3`)\n* `XCCONFIG_FILE` - specify where the xcode config file is for a real device run (if\n  blank, and running a real device test, it will search for the first file in\n  the root directory of the repo with the extension \"xcconfig\")\n* `UICATALOG_REAL_DEVICE` - path to the real device build of UICatalog, in case\n  the npm installed one is not built for real device\n\n\n### WebDriverAgent Updating\n\nUpdating FaceBook's [WebDriverAgent](https://github.com/facebook/WebDriverAgent)\nis as simple as running updating the submodule and then committing the change:\n\n```\ngit checkout -b <update-branch-name>\ngit submodule update --remote\ngit add WebDriverAgent\ngit commit -m \"Updating upstream WebDriverAgent changes\"\n```\n\nThere is a chance that the update changed something critical, which will manifest\nitself as `xcodebuild` throwing errors. The easiest remedy is to delete the\nfiles, which are somewhere like `/Users/isaac/Library/Developer/Xcode/DerivedData/WebDriverAgent-eoyoecqmiqfeodgstkwbxkfyagll`.\nThis is also necessary when switching SDKs (e.g., moving from Xcode 7.3 to 8).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/appium/appium-xcuitest-driver.git"
  },
  "scripts": {
    "build": "gulp transpile",
    "coverage": "gulp coveralls",
    "e2e-test": "gulp e2e-test",
    "lint": "gulp eslint",
    "lint:fix": "gulp eslint --fix",
    "mocha": "mocha",
    "precommit-msg": "echo 'Pre-commit checks...' && exit 0",
    "precommit-test": "REPORTER=dot gulp once",
    "prepublish": "gulp prepublish",
    "test": "gulp once",
    "watch": "gulp watch"
  },
  "version": "2.76.2"
}
