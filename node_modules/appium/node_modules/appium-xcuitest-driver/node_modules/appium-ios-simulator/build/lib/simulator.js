'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _simulatorXcode6 = require('./simulator-xcode-6');

var _simulatorXcode62 = _interopRequireDefault(_simulatorXcode6);

var _simulatorXcode7 = require('./simulator-xcode-7');

var _simulatorXcode72 = _interopRequireDefault(_simulatorXcode7);

var _simulatorXcode73 = require('./simulator-xcode-7.3');

var _simulatorXcode732 = _interopRequireDefault(_simulatorXcode73);

var _simulatorXcode8 = require('./simulator-xcode-8');

var _simulatorXcode82 = _interopRequireDefault(_simulatorXcode8);

var _simulatorXcode9 = require('./simulator-xcode-9');

var _simulatorXcode92 = _interopRequireDefault(_simulatorXcode9);

var _simulatorXcode93 = require('./simulator-xcode-9.3');

var _simulatorXcode932 = _interopRequireDefault(_simulatorXcode93);

var _utils = require('./utils');

var _appiumXcode = require('appium-xcode');

var _appiumXcode2 = _interopRequireDefault(_appiumXcode);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

function handleUnsupportedXcode(xcodeVersion) {
  if (xcodeVersion.major < 6) {
    throw new Error('Tried to use an iOS simulator with xcode ' + ('version ' + xcodeVersion.versionString + ' but only Xcode version ') + '6.0.0 and up are supported');
  } else if (xcodeVersion.major >= 10) {
    throw new Error('Xcode version ' + xcodeVersion.versionString + ' is ' + 'not yet supported');
  }
}

/**
 * Finds and returns the corresponding Simulator instance for the given ID.
 *
 * @param {string} udid - The ID of an existing Simulator.
 * @throws {Error} If the Simulator with given udid does not exist in devices list.
 *   If you want to create a new simulator, you can use the `createDevice()` method of
 *   [node-simctl](github.com/appium/node-simctl).
 * @return {object} Simulator object associated with the udid passed in.
 */
function getSimulator(udid) {
  var xcodeVersion;
  return _regeneratorRuntime.async(function getSimulator$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_appiumXcode2['default'].getVersion(true));

      case 2:
        xcodeVersion = context$1$0.sent;
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap((0, _utils.simExists)(udid));

      case 5:
        if (context$1$0.sent) {
          context$1$0.next = 7;
          break;
        }

        throw new Error('No sim found with udid ' + udid);

      case 7:

        handleUnsupportedXcode(xcodeVersion);

        _logger2['default'].info('Constructing iOS simulator for Xcode version ' + xcodeVersion.versionString + ' ' + ('with udid \'' + udid + '\''));

        if (!(xcodeVersion.major === 6)) {
          context$1$0.next = 13;
          break;
        }

        return context$1$0.abrupt('return', new _simulatorXcode62['default'](udid, xcodeVersion));

      case 13:
        if (!(xcodeVersion.major >= 7 && xcodeVersion.major < 8)) {
          context$1$0.next = 21;
          break;
        }

        if (!(xcodeVersion.minor < 3)) {
          context$1$0.next = 18;
          break;
        }

        return context$1$0.abrupt('return', new _simulatorXcode72['default'](udid, xcodeVersion));

      case 18:
        return context$1$0.abrupt('return', new _simulatorXcode732['default'](udid, xcodeVersion));

      case 19:
        context$1$0.next = 31;
        break;

      case 21:
        if (!(xcodeVersion.major === 8)) {
          context$1$0.next = 25;
          break;
        }

        return context$1$0.abrupt('return', new _simulatorXcode82['default'](udid, xcodeVersion));

      case 25:
        if (!(xcodeVersion.major === 9)) {
          context$1$0.next = 31;
          break;
        }

        if (!(xcodeVersion.minor < 3)) {
          context$1$0.next = 30;
          break;
        }

        return context$1$0.abrupt('return', new _simulatorXcode92['default'](udid, xcodeVersion));

      case 30:
        return context$1$0.abrupt('return', new _simulatorXcode932['default'](udid, xcodeVersion));

      case 31:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

/**
 * Takes a set of options and finds the correct device string in order for Instruments to
 * identify the correct simulator.
 *
 * @param {object} opts - The options available are:
 *   - `deviceName` - a name for the device. If the given device name starts with `=`, the name, less the equals sign, is returned.
 *   - `platformVersion` - the version of iOS to use. Defaults to the current Xcode's maximum SDK version.
 *   - `forceIphone` - force the configuration of the device string to iPhone. Defaults to `false`.
 *   - `forceIpad` - force the configuration of the device string to iPad. Defaults to `false`.
 *   If both `forceIphone` and `forceIpad` are true, the device will be forced to iPhone.
 *
 * @return {string} The found device string, for example:
 *   'iPhone 5 (8.4)' with Xcode 7+
 *   'iPhone 5 (8.4 Simulator)' with Xcode 6+
 */
function getDeviceString(opts) {
  var xcodeVersion;
  return _regeneratorRuntime.async(function getDeviceString$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_appiumXcode2['default'].getVersion(true));

      case 2:
        xcodeVersion = context$1$0.sent;

        handleUnsupportedXcode(xcodeVersion);

        _logger2['default'].info('Retrieving device name string for Xcode version ' + xcodeVersion.versionString);

        if (!(xcodeVersion.major >= 8)) {
          context$1$0.next = 9;
          break;
        }

        return context$1$0.abrupt('return', _simulatorXcode72['default'].getDeviceString(opts));

      case 9:
        if (!(xcodeVersion.major === 7)) {
          context$1$0.next = 13;
          break;
        }

        return context$1$0.abrupt('return', _simulatorXcode72['default'].getDeviceString(opts));

      case 13:
        if (!(xcodeVersion.major === 6)) {
          context$1$0.next = 15;
          break;
        }

        return context$1$0.abrupt('return', _simulatorXcode62['default'].getDeviceString(opts));

      case 15:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

exports.getSimulator = getSimulator;
exports.getDeviceString = getDeviceString;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9zaW11bGF0b3IuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OzsrQkFBNEIscUJBQXFCOzs7OytCQUNyQixxQkFBcUI7Ozs7Z0NBQ3BCLHVCQUF1Qjs7OzsrQkFDeEIscUJBQXFCOzs7OytCQUNyQixxQkFBcUI7Ozs7Z0NBQ3BCLHVCQUF1Qjs7OztxQkFDMUIsU0FBUzs7MkJBQ2pCLGNBQWM7Ozs7c0JBQ2hCLFVBQVU7Ozs7QUFHMUIsU0FBUyxzQkFBc0IsQ0FBRSxZQUFZLEVBQUU7QUFDN0MsTUFBSSxZQUFZLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRTtBQUMxQixVQUFNLElBQUksS0FBSyxDQUFDLDREQUNXLFlBQVksQ0FBQyxhQUFhLDhCQUEwQiwrQkFDbkMsQ0FBQyxDQUFDO0dBQy9DLE1BQU0sSUFBSSxZQUFZLENBQUMsS0FBSyxJQUFJLEVBQUUsRUFBRTtBQUNuQyxVQUFNLElBQUksS0FBSyxDQUFDLG1CQUFpQixZQUFZLENBQUMsYUFBYSwrQkFDeEIsQ0FBQyxDQUFDO0dBQ3RDO0NBQ0Y7Ozs7Ozs7Ozs7O0FBV0QsU0FBZSxZQUFZLENBQUUsSUFBSTtNQUMzQixZQUFZOzs7Ozt5Q0FBUyx5QkFBTSxVQUFVLENBQUMsSUFBSSxDQUFDOzs7QUFBM0Msb0JBQVk7O3lDQUVMLHNCQUFVLElBQUksQ0FBQzs7Ozs7Ozs7Y0FDbEIsSUFBSSxLQUFLLDZCQUEyQixJQUFJLENBQUc7Ozs7QUFHbkQsOEJBQXNCLENBQUMsWUFBWSxDQUFDLENBQUM7O0FBRXJDLDRCQUFJLElBQUksQ0FBQyxrREFBZ0QsWUFBWSxDQUFDLGFBQWEsMkJBQzVELElBQUksUUFBRyxDQUFDLENBQUM7O2NBQzVCLFlBQVksQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFBOzs7Ozs0Q0FDbkIsaUNBQW9CLElBQUksRUFBRSxZQUFZLENBQUM7OztjQUNyQyxZQUFZLENBQUMsS0FBSyxJQUFJLENBQUMsSUFBSSxZQUFZLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQTs7Ozs7Y0FDdEQsWUFBWSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUE7Ozs7OzRDQUNqQixpQ0FBb0IsSUFBSSxFQUFFLFlBQVksQ0FBQzs7OzRDQUV2QyxrQ0FBcUIsSUFBSSxFQUFFLFlBQVksQ0FBQzs7Ozs7OztjQUV4QyxZQUFZLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQTs7Ozs7NENBQzFCLGlDQUFvQixJQUFJLEVBQUUsWUFBWSxDQUFDOzs7Y0FDckMsWUFBWSxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUE7Ozs7O2NBQzdCLFlBQVksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFBOzs7Ozs0Q0FDakIsaUNBQW9CLElBQUksRUFBRSxZQUFZLENBQUM7Ozs0Q0FFdkMsa0NBQXFCLElBQUksRUFBRSxZQUFZLENBQUM7Ozs7Ozs7Q0FHcEQ7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJELFNBQWUsZUFBZSxDQUFFLElBQUk7TUFDOUIsWUFBWTs7Ozs7eUNBQVMseUJBQU0sVUFBVSxDQUFDLElBQUksQ0FBQzs7O0FBQTNDLG9CQUFZOztBQUVoQiw4QkFBc0IsQ0FBQyxZQUFZLENBQUMsQ0FBQzs7QUFFckMsNEJBQUksSUFBSSxzREFBb0QsWUFBWSxDQUFDLGFBQWEsQ0FBRyxDQUFDOztjQUN0RixZQUFZLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQTs7Ozs7NENBQ2xCLDZCQUFnQixlQUFlLENBQUMsSUFBSSxDQUFDOzs7Y0FDbkMsWUFBWSxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUE7Ozs7OzRDQUMxQiw2QkFBZ0IsZUFBZSxDQUFDLElBQUksQ0FBQzs7O2NBQ25DLFlBQVksQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFBOzs7Ozs0Q0FDMUIsNkJBQWdCLGVBQWUsQ0FBQyxJQUFJLENBQUM7Ozs7Ozs7Q0FFL0M7O1FBRVEsWUFBWSxHQUFaLFlBQVk7UUFBRSxlQUFlLEdBQWYsZUFBZSIsImZpbGUiOiJsaWIvc2ltdWxhdG9yLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFNpbXVsYXRvclhjb2RlNiBmcm9tICcuL3NpbXVsYXRvci14Y29kZS02JztcbmltcG9ydCBTaW11bGF0b3JYY29kZTcgZnJvbSAnLi9zaW11bGF0b3IteGNvZGUtNyc7XG5pbXBvcnQgU2ltdWxhdG9yWGNvZGU3MyBmcm9tICcuL3NpbXVsYXRvci14Y29kZS03LjMnO1xuaW1wb3J0IFNpbXVsYXRvclhjb2RlOCBmcm9tICcuL3NpbXVsYXRvci14Y29kZS04JztcbmltcG9ydCBTaW11bGF0b3JYY29kZTkgZnJvbSAnLi9zaW11bGF0b3IteGNvZGUtOSc7XG5pbXBvcnQgU2ltdWxhdG9yWGNvZGU5MyBmcm9tICcuL3NpbXVsYXRvci14Y29kZS05LjMnO1xuaW1wb3J0IHsgc2ltRXhpc3RzIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgeGNvZGUgZnJvbSAnYXBwaXVtLXhjb2RlJztcbmltcG9ydCBsb2cgZnJvbSAnLi9sb2dnZXInO1xuXG5cbmZ1bmN0aW9uIGhhbmRsZVVuc3VwcG9ydGVkWGNvZGUgKHhjb2RlVmVyc2lvbikge1xuICBpZiAoeGNvZGVWZXJzaW9uLm1ham9yIDwgNikge1xuICAgIHRocm93IG5ldyBFcnJvcihgVHJpZWQgdG8gdXNlIGFuIGlPUyBzaW11bGF0b3Igd2l0aCB4Y29kZSBgICtcbiAgICAgICAgICAgICAgICAgICAgYHZlcnNpb24gJHt4Y29kZVZlcnNpb24udmVyc2lvblN0cmluZ30gYnV0IG9ubHkgWGNvZGUgdmVyc2lvbiBgICtcbiAgICAgICAgICAgICAgICAgICAgYDYuMC4wIGFuZCB1cCBhcmUgc3VwcG9ydGVkYCk7XG4gIH0gZWxzZSBpZiAoeGNvZGVWZXJzaW9uLm1ham9yID49IDEwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBYY29kZSB2ZXJzaW9uICR7eGNvZGVWZXJzaW9uLnZlcnNpb25TdHJpbmd9IGlzIGAgK1xuICAgICAgICAgICAgICAgICAgICBgbm90IHlldCBzdXBwb3J0ZWRgKTtcbiAgfVxufVxuXG4vKipcbiAqIEZpbmRzIGFuZCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIFNpbXVsYXRvciBpbnN0YW5jZSBmb3IgdGhlIGdpdmVuIElELlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1ZGlkIC0gVGhlIElEIG9mIGFuIGV4aXN0aW5nIFNpbXVsYXRvci5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgU2ltdWxhdG9yIHdpdGggZ2l2ZW4gdWRpZCBkb2VzIG5vdCBleGlzdCBpbiBkZXZpY2VzIGxpc3QuXG4gKiAgIElmIHlvdSB3YW50IHRvIGNyZWF0ZSBhIG5ldyBzaW11bGF0b3IsIHlvdSBjYW4gdXNlIHRoZSBgY3JlYXRlRGV2aWNlKClgIG1ldGhvZCBvZlxuICogICBbbm9kZS1zaW1jdGxdKGdpdGh1Yi5jb20vYXBwaXVtL25vZGUtc2ltY3RsKS5cbiAqIEByZXR1cm4ge29iamVjdH0gU2ltdWxhdG9yIG9iamVjdCBhc3NvY2lhdGVkIHdpdGggdGhlIHVkaWQgcGFzc2VkIGluLlxuICovXG5hc3luYyBmdW5jdGlvbiBnZXRTaW11bGF0b3IgKHVkaWQpIHtcbiAgbGV0IHhjb2RlVmVyc2lvbiA9IGF3YWl0IHhjb2RlLmdldFZlcnNpb24odHJ1ZSk7XG5cbiAgaWYgKCFhd2FpdCBzaW1FeGlzdHModWRpZCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIHNpbSBmb3VuZCB3aXRoIHVkaWQgJHt1ZGlkfWApO1xuICB9XG5cbiAgaGFuZGxlVW5zdXBwb3J0ZWRYY29kZSh4Y29kZVZlcnNpb24pO1xuXG4gIGxvZy5pbmZvKGBDb25zdHJ1Y3RpbmcgaU9TIHNpbXVsYXRvciBmb3IgWGNvZGUgdmVyc2lvbiAke3hjb2RlVmVyc2lvbi52ZXJzaW9uU3RyaW5nfSBgICtcbiAgICAgICAgICAgYHdpdGggdWRpZCAnJHt1ZGlkfSdgKTtcbiAgaWYgKHhjb2RlVmVyc2lvbi5tYWpvciA9PT0gNikge1xuICAgIHJldHVybiBuZXcgU2ltdWxhdG9yWGNvZGU2KHVkaWQsIHhjb2RlVmVyc2lvbik7XG4gIH0gZWxzZSBpZiAoeGNvZGVWZXJzaW9uLm1ham9yID49IDcgJiYgeGNvZGVWZXJzaW9uLm1ham9yIDwgOCkge1xuICAgIGlmICh4Y29kZVZlcnNpb24ubWlub3IgPCAzKSB7XG4gICAgICByZXR1cm4gbmV3IFNpbXVsYXRvclhjb2RlNyh1ZGlkLCB4Y29kZVZlcnNpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IFNpbXVsYXRvclhjb2RlNzModWRpZCwgeGNvZGVWZXJzaW9uKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoeGNvZGVWZXJzaW9uLm1ham9yID09PSA4KSB7XG4gICAgcmV0dXJuIG5ldyBTaW11bGF0b3JYY29kZTgodWRpZCwgeGNvZGVWZXJzaW9uKTtcbiAgfSBlbHNlIGlmICh4Y29kZVZlcnNpb24ubWFqb3IgPT09IDkpIHtcbiAgICBpZiAoeGNvZGVWZXJzaW9uLm1pbm9yIDwgMykge1xuICAgICAgcmV0dXJuIG5ldyBTaW11bGF0b3JYY29kZTkodWRpZCwgeGNvZGVWZXJzaW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBTaW11bGF0b3JYY29kZTkzKHVkaWQsIHhjb2RlVmVyc2lvbik7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVGFrZXMgYSBzZXQgb2Ygb3B0aW9ucyBhbmQgZmluZHMgdGhlIGNvcnJlY3QgZGV2aWNlIHN0cmluZyBpbiBvcmRlciBmb3IgSW5zdHJ1bWVudHMgdG9cbiAqIGlkZW50aWZ5IHRoZSBjb3JyZWN0IHNpbXVsYXRvci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0cyAtIFRoZSBvcHRpb25zIGF2YWlsYWJsZSBhcmU6XG4gKiAgIC0gYGRldmljZU5hbWVgIC0gYSBuYW1lIGZvciB0aGUgZGV2aWNlLiBJZiB0aGUgZ2l2ZW4gZGV2aWNlIG5hbWUgc3RhcnRzIHdpdGggYD1gLCB0aGUgbmFtZSwgbGVzcyB0aGUgZXF1YWxzIHNpZ24sIGlzIHJldHVybmVkLlxuICogICAtIGBwbGF0Zm9ybVZlcnNpb25gIC0gdGhlIHZlcnNpb24gb2YgaU9TIHRvIHVzZS4gRGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgWGNvZGUncyBtYXhpbXVtIFNESyB2ZXJzaW9uLlxuICogICAtIGBmb3JjZUlwaG9uZWAgLSBmb3JjZSB0aGUgY29uZmlndXJhdGlvbiBvZiB0aGUgZGV2aWNlIHN0cmluZyB0byBpUGhvbmUuIERlZmF1bHRzIHRvIGBmYWxzZWAuXG4gKiAgIC0gYGZvcmNlSXBhZGAgLSBmb3JjZSB0aGUgY29uZmlndXJhdGlvbiBvZiB0aGUgZGV2aWNlIHN0cmluZyB0byBpUGFkLiBEZWZhdWx0cyB0byBgZmFsc2VgLlxuICogICBJZiBib3RoIGBmb3JjZUlwaG9uZWAgYW5kIGBmb3JjZUlwYWRgIGFyZSB0cnVlLCB0aGUgZGV2aWNlIHdpbGwgYmUgZm9yY2VkIHRvIGlQaG9uZS5cbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBmb3VuZCBkZXZpY2Ugc3RyaW5nLCBmb3IgZXhhbXBsZTpcbiAqICAgJ2lQaG9uZSA1ICg4LjQpJyB3aXRoIFhjb2RlIDcrXG4gKiAgICdpUGhvbmUgNSAoOC40IFNpbXVsYXRvciknIHdpdGggWGNvZGUgNitcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0RGV2aWNlU3RyaW5nIChvcHRzKSB7XG4gIGxldCB4Y29kZVZlcnNpb24gPSBhd2FpdCB4Y29kZS5nZXRWZXJzaW9uKHRydWUpO1xuXG4gIGhhbmRsZVVuc3VwcG9ydGVkWGNvZGUoeGNvZGVWZXJzaW9uKTtcblxuICBsb2cuaW5mbyhgUmV0cmlldmluZyBkZXZpY2UgbmFtZSBzdHJpbmcgZm9yIFhjb2RlIHZlcnNpb24gJHt4Y29kZVZlcnNpb24udmVyc2lvblN0cmluZ31gKTtcbiAgaWYgKHhjb2RlVmVyc2lvbi5tYWpvciA+PSA4KSB7XG4gICAgcmV0dXJuIFNpbXVsYXRvclhjb2RlNy5nZXREZXZpY2VTdHJpbmcob3B0cyk7XG4gIH0gZWxzZSBpZiAoeGNvZGVWZXJzaW9uLm1ham9yID09PSA3KSB7XG4gICAgcmV0dXJuIFNpbXVsYXRvclhjb2RlNy5nZXREZXZpY2VTdHJpbmcob3B0cyk7XG4gIH0gZWxzZSBpZiAoeGNvZGVWZXJzaW9uLm1ham9yID09PSA2KSB7XG4gICAgcmV0dXJuIFNpbXVsYXRvclhjb2RlNi5nZXREZXZpY2VTdHJpbmcob3B0cyk7XG4gIH1cbn1cblxuZXhwb3J0IHsgZ2V0U2ltdWxhdG9yLCBnZXREZXZpY2VTdHJpbmcgfTtcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
