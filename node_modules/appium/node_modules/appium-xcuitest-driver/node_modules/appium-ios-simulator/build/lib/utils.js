'use strict';

var _toConsumableArray = require('babel-runtime/helpers/to-consumable-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _teen_process = require('teen_process');

var _asyncbox = require('asyncbox');

var _appiumXcode = require('appium-xcode');

var _nodeSimctl = require('node-simctl');

var _appiumSupport = require('appium-support');

var _certificate = require('./certificate');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _simulatorXcode6 = require('./simulator-xcode-6');

var _simulatorXcode62 = _interopRequireDefault(_simulatorXcode6);

var _fkill = require('fkill');

var _fkill2 = _interopRequireDefault(_fkill);

var DEFAULT_SIM_SHUTDOWN_TIMEOUT = 30000;

// pgrep/pkill exit codes:
// 0       One or more processes were matched.
// 1       No processes were matched.
// 2       Invalid options were specified on the command line.
// 3       An internal error occurred.

function pkill(appName) {
  var forceKill = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
  var args;
  return _regeneratorRuntime.async(function pkill$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        args = forceKill ? ['-9'] : [];

        args.push('-x', appName);
        context$1$0.prev = 2;
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('pkill', args));

      case 5:
        return context$1$0.abrupt('return', 0);

      case 8:
        context$1$0.prev = 8;
        context$1$0.t0 = context$1$0['catch'](2);

        if (_lodash2['default'].isUndefined(context$1$0.t0.code)) {
          context$1$0.next = 12;
          break;
        }

        throw new Error('Cannot forcefully terminate ' + appName + '. pkill error code: ' + context$1$0.t0.code);

      case 12:
        _logger2['default'].error('Received unexpected error while trying to kill ' + appName + ': ' + context$1$0.t0.message);
        throw context$1$0.t0;

      case 14:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[2, 8]]);
}

function killAllSimulators() {
  var timeout = arguments.length <= 0 || arguments[0] === undefined ? DEFAULT_SIM_SHUTDOWN_TIMEOUT : arguments[0];

  var xcodeVersion, appName, pids, _ref, stdout, _ref2, uniquePids, remainingDevices, allSimsAreDown, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, device;

  return _regeneratorRuntime.async(function killAllSimulators$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        allSimsAreDown = function allSimsAreDown() {
          var devices;
          return _regeneratorRuntime.async(function allSimsAreDown$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                remainingDevices = [];
                context$2$0.next = 3;
                return _regeneratorRuntime.awrap((0, _nodeSimctl.getDevices)());

              case 3:
                devices = context$2$0.sent;

                devices = _lodash2['default'].flatten(_lodash2['default'].values(devices));
                return context$2$0.abrupt('return', _lodash2['default'].every(devices, function (sim) {
                  var state = sim.state.toLowerCase();
                  var done = state === 'shutdown' || state === 'unavailable' || state === 'disconnected';
                  if (!done) {
                    remainingDevices.push(sim.name + ' (' + sim.sdk + ', udid: ' + sim.udid + ') is still in state \'' + state + '\'');
                  }
                  return done;
                }));

              case 6:
              case 'end':
                return context$2$0.stop();
            }
          }, null, this);
        };

        _logger2['default'].debug('Killing all iOS Simulators');
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap((0, _appiumXcode.getVersion)(true));

      case 4:
        xcodeVersion = context$1$0.sent;
        appName = xcodeVersion.major >= 7 ? 'Simulator' : 'iOS Simulator';

        // later versions are slower to close
        timeout = timeout * (xcodeVersion.major >= 8 ? 2 : 1);

        context$1$0.prev = 7;
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('xcrun', ['simctl', 'shutdown', xcodeVersion.major > 8 ? 'all' : 'booted'], { timeout: timeout }));

      case 10:
        context$1$0.next = 14;
        break;

      case 12:
        context$1$0.prev = 12;
        context$1$0.t0 = context$1$0['catch'](7);

      case 14:
        pids = [];
        context$1$0.prev = 15;
        context$1$0.next = 18;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('osascript', ['-e', 'tell application "System Events" to unix id of processes whose bundle identifier is "com.apple.iphonesimulator"']));

      case 18:
        _ref = context$1$0.sent;
        stdout = _ref.stdout;

        if (stdout.trim()) {
          pids.push.apply(pids, _toConsumableArray(stdout.trim().split(/\s+/)));
        }
        context$1$0.next = 25;
        break;

      case 23:
        context$1$0.prev = 23;
        context$1$0.t1 = context$1$0['catch'](15);

      case 25:
        context$1$0.prev = 25;
        context$1$0.next = 28;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('pgrep', ['-x', appName]));

      case 28:
        _ref2 = context$1$0.sent;
        stdout = _ref2.stdout;

        if (stdout.trim()) {
          pids.push.apply(pids, _toConsumableArray(stdout.trim().split('\n')));
        }
        context$1$0.next = 39;
        break;

      case 33:
        context$1$0.prev = 33;
        context$1$0.t2 = context$1$0['catch'](25);

        if (!(context$1$0.t2.code === 1 && !pids.length)) {
          context$1$0.next = 38;
          break;
        }

        _logger2['default'].debug(appName + ' is not running. Continuing...');
        return context$1$0.abrupt('return');

      case 38:
        if (!pids.length) {
          _logger2['default'].warn('pgrep error ' + context$1$0.t2.code + ' while detecting whether ' + appName + ' is running. Trying to kill anyway.');
        }

      case 39:
        if (!pids.length) {
          context$1$0.next = 49;
          break;
        }

        uniquePids = _lodash2['default'].uniq(pids);

        _logger2['default'].debug('Using fkill to kill processes: ' + uniquePids.join(', '));
        context$1$0.prev = 42;
        context$1$0.next = 45;
        return _regeneratorRuntime.awrap((0, _fkill2['default'])(uniquePids, { force: true }));

      case 45:
        context$1$0.next = 49;
        break;

      case 47:
        context$1$0.prev = 47;
        context$1$0.t3 = context$1$0['catch'](42);

      case 49:

        _logger2['default'].debug('Using pkill to kill application: ' + appName);
        context$1$0.prev = 50;
        context$1$0.next = 53;
        return _regeneratorRuntime.awrap(pkill(appName, true));

      case 53:
        context$1$0.next = 57;
        break;

      case 55:
        context$1$0.prev = 55;
        context$1$0.t4 = context$1$0['catch'](50);

      case 57:
        remainingDevices = [];
        context$1$0.prev = 58;
        context$1$0.next = 61;
        return _regeneratorRuntime.awrap((0, _asyncbox.waitForCondition)(allSimsAreDown, {
          waitMs: timeout,
          intervalMs: 200
        }));

      case 61:
        context$1$0.next = 87;
        break;

      case 63:
        context$1$0.prev = 63;
        context$1$0.t5 = context$1$0['catch'](58);

        if (!(remainingDevices.length > 0)) {
          context$1$0.next = 86;
          break;
        }

        _logger2['default'].warn('The following devices are still not in the correct state after ' + timeout + ' ms:');
        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 70;
        for (_iterator = _getIterator(remainingDevices); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          device = _step.value;

          _logger2['default'].warn('    ' + device);
        }
        context$1$0.next = 78;
        break;

      case 74:
        context$1$0.prev = 74;
        context$1$0.t6 = context$1$0['catch'](70);
        _didIteratorError = true;
        _iteratorError = context$1$0.t6;

      case 78:
        context$1$0.prev = 78;
        context$1$0.prev = 79;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 81:
        context$1$0.prev = 81;

        if (!_didIteratorError) {
          context$1$0.next = 84;
          break;
        }

        throw _iteratorError;

      case 84:
        return context$1$0.finish(81);

      case 85:
        return context$1$0.finish(78);

      case 86:
        throw context$1$0.t5;

      case 87:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[7, 12], [15, 23], [25, 33], [42, 47], [50, 55], [58, 63], [70, 74, 78, 86], [79,, 81, 85]]);
}

function endAllSimulatorDaemons() {
  var _arr, _i, servicePattern, launchCtlCommand, stopCmd, removeCmd;

  return _regeneratorRuntime.async(function endAllSimulatorDaemons$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Ending all simulator daemons');
        _arr = ['com.apple.iphonesimulator', 'com.apple.CoreSimulator'];
        _i = 0;

      case 3:
        if (!(_i < _arr.length)) {
          context$1$0.next = 28;
          break;
        }

        servicePattern = _arr[_i];

        _logger2['default'].debug('Killing any other ' + servicePattern + ' daemons');
        launchCtlCommand = 'launchctl list | grep ' + servicePattern + ' | cut -f 3 | xargs -n 1 launchctl';
        context$1$0.prev = 7;
        stopCmd = launchCtlCommand + ' stop';
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('bash', ['-c', stopCmd]));

      case 11:
        context$1$0.next = 16;
        break;

      case 13:
        context$1$0.prev = 13;
        context$1$0.t0 = context$1$0['catch'](7);

        _logger2['default'].warn('Could not stop ' + servicePattern + ' daemons, carrying on anyway!');

      case 16:
        context$1$0.prev = 16;
        removeCmd = launchCtlCommand + ' remove';
        context$1$0.next = 20;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('bash', ['-c', removeCmd]));

      case 20:
        context$1$0.next = 25;
        break;

      case 22:
        context$1$0.prev = 22;
        context$1$0.t1 = context$1$0['catch'](16);

        _logger2['default'].warn('Could not remove ' + servicePattern + ' daemons, carrying on anyway!');

      case 25:
        _i++;
        context$1$0.next = 3;
        break;

      case 28:
        context$1$0.prev = 28;
        context$1$0.next = 31;
        return _regeneratorRuntime.awrap((0, _asyncbox.waitForCondition)(function callee$1$0() {
          var _ref3, stdout;

          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap((0, _teen_process.exec)('bash', ['-c', 'ps -e  | grep launchd_sim | grep -v bash | grep -v grep | awk {\'print$1\'}']));

              case 2:
                _ref3 = context$2$0.sent;
                stdout = _ref3.stdout;
                return context$2$0.abrupt('return', stdout.trim().length === 0);

              case 5:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        }, { waitMs: 5000, intervalMs: 500 }));

      case 31:
        context$1$0.next = 36;
        break;

      case 33:
        context$1$0.prev = 33;
        context$1$0.t2 = context$1$0['catch'](28);

        _logger2['default'].warn('Could not end all simulator daemons, carrying on!');

      case 36:
        _logger2['default'].debug('Finishing ending all simulator daemons');

      case 37:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[7, 13], [16, 22], [28, 33]]);
}

function simExists(udid) {
  var devices;
  return _regeneratorRuntime.async(function simExists$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap((0, _nodeSimctl.getDevices)());

      case 2:
        devices = context$1$0.sent;

        devices = _lodash2['default'].toPairs(devices).map(function (pair) {
          return pair[1];
        }).reduce(function (a, b) {
          return a.concat(b);
        }, []);
        return context$1$0.abrupt('return', !!_lodash2['default'].find(devices, function (sim) {
          return sim.udid === udid;
        }));

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function safeRimRaf(delPath) {
  var tryNum = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];
  return _regeneratorRuntime.async(function safeRimRaf$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(delPath));

      case 3:
        context$1$0.next = 16;
        break;

      case 5:
        context$1$0.prev = 5;
        context$1$0.t0 = context$1$0['catch'](0);

        if (!(tryNum < 20)) {
          context$1$0.next = 16;
          break;
        }

        if (!(context$1$0.t0.message.indexOf('ENOTEMPTY') !== -1)) {
          context$1$0.next = 13;
          break;
        }

        _logger2['default'].debug('Path \'' + delPath + '\' was not empty during delete; retrying');
        return context$1$0.abrupt('return', safeRimRaf(delPath, tryNum + 1));

      case 13:
        if (!(context$1$0.t0.message.indexOf('ENOENT') !== -1)) {
          context$1$0.next = 16;
          break;
        }

        _logger2['default'].debug('Path \'' + delPath + '\'\' did not exist when we tried to delete, ignoring');
        return context$1$0.abrupt('return', safeRimRaf(delPath, tryNum + 1));

      case 16:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 5]]);
}

/**
 * Install an SSL certificate to a device with given udid
 * @param {string} pemText SSL pem text
 * @param {string} udid Identifier of the Simulator
 */
function installSSLCert(pemText, udid) {
  var tempFileName, pathToKeychain, certificate;
  return _regeneratorRuntime.async(function installSSLCert$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.which('openssl'));

      case 3:
        context$1$0.next = 9;
        break;

      case 5:
        context$1$0.prev = 5;
        context$1$0.t0 = context$1$0['catch'](0);

        _logger2['default'].debug('customSSLCert requires openssl to be available on path');
        _logger2['default'].errorAndThrow('Command \'openssl\' not found');

      case 9:
        context$1$0.prev = 9;
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.which('sqlite3'));

      case 12:
        context$1$0.next = 18;
        break;

      case 14:
        context$1$0.prev = 14;
        context$1$0.t1 = context$1$0['catch'](9);

        _logger2['default'].debug('customSSLCert requires sqlite3 to be available on path');
        _logger2['default'].errorAndThrow('Command \'sqlite3\' not found');

      case 18:
        context$1$0.t2 = _path2['default'];
        context$1$0.next = 21;
        return _regeneratorRuntime.awrap(_appiumSupport.tempDir.openDir());

      case 21:
        context$1$0.t3 = context$1$0.sent;
        tempFileName = context$1$0.t2.resolve.call(context$1$0.t2, context$1$0.t3, 'temp-ssl-cert.pem');
        pathToKeychain = new _simulatorXcode62['default'](udid).getDir();
        context$1$0.next = 26;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(tempFileName, pemText));

      case 26:
        context$1$0.prev = 26;
        context$1$0.next = 29;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.stat(pathToKeychain));

      case 29:
        context$1$0.next = 35;
        break;

      case 31:
        context$1$0.prev = 31;
        context$1$0.t4 = context$1$0['catch'](26);

        _logger2['default'].debug('Could not install SSL certificate. No simulator with udid \'' + udid + '\'');
        _logger2['default'].errorAndThrow(context$1$0.t4);

      case 35:
        certificate = new _certificate.Certificate(tempFileName);

        _logger2['default'].debug('Installing certificate to ' + pathToKeychain);
        context$1$0.next = 39;
        return _regeneratorRuntime.awrap(certificate.add(pathToKeychain));

      case 39:
        context$1$0.next = 41;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.unlink(tempFileName));

      case 41:
        return context$1$0.abrupt('return', certificate);

      case 42:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 5], [9, 14], [26, 31]]);
}

function uninstallSSLCert(pemText, udid) {
  var tempFileName, pathToKeychain, certificate;
  return _regeneratorRuntime.async(function uninstallSSLCert$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;
        tempFileName = _path2['default'].resolve(__dirname, 'temp-ssl-cert.pem');
        pathToKeychain = _path2['default'].resolve(new _simulatorXcode62['default'](udid).getDir());
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(tempFileName, pemText));

      case 5:
        certificate = new _certificate.Certificate(tempFileName);
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(certificate.remove(pathToKeychain));

      case 8:
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.unlink(tempFileName));

      case 10:
        return context$1$0.abrupt('return', certificate);

      case 13:
        context$1$0.prev = 13;
        context$1$0.t0 = context$1$0['catch'](0);

        _logger2['default'].debug('Could not uninstall SSL certificate. No simulator with udid \'' + udid + '\'');
        _logger2['default'].errorAndThrow(context$1$0.t0);

      case 17:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 13]]);
}

/**
 * Check if the Simulator already has this SSL certificate
 * @param {string} pemText PEM text of SSL cert
 * @param {string} udid Identifier of the Simulator
 */
function hasSSLCert(pemText, udid) {
  var tempFileName, pathToKeychain, certificate;
  return _regeneratorRuntime.async(function hasSSLCert$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.t0 = _path2['default'];
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(_appiumSupport.tempDir.openDir());

      case 3:
        context$1$0.t1 = context$1$0.sent;
        tempFileName = context$1$0.t0.resolve.call(context$1$0.t0, context$1$0.t1, 'temp-ssl-cert.pem');
        pathToKeychain = new _simulatorXcode62['default'](udid).getDir();
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(tempFileName, pemText));

      case 8:
        certificate = new _certificate.Certificate(tempFileName);
        return context$1$0.abrupt('return', certificate.has(pathToKeychain));

      case 10:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

/**
 * Runs a command line sqlite3 query
 */
function execSQLiteQuery(db, query) {
  for (var _len = arguments.length, queryParams = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    queryParams[_key - 2] = arguments[_key];
  }

  var queryTokens, formattedQuery;
  return _regeneratorRuntime.async(function execSQLiteQuery$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        queryTokens = query.split('?');
        formattedQuery = [];

        queryParams.forEach(function (param, i) {
          formattedQuery.push(queryTokens[i]);
          formattedQuery.push(param.replace(/'/g, "''"));
        });
        formattedQuery.push(queryTokens[queryTokens.length - 1]);

        context$1$0.next = 6;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('sqlite3', ['-line', db, formattedQuery.join('')]));

      case 6:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

exports.killAllSimulators = killAllSimulators;
exports.endAllSimulatorDaemons = endAllSimulatorDaemons;
exports.safeRimRaf = safeRimRaf;
exports.simExists = simExists;
exports.installSSLCert = installSSLCert;
exports.uninstallSSLCert = uninstallSSLCert;
exports.hasSSLCert = hasSSLCert;
exports.execSQLiteQuery = execSQLiteQuery;

// wait for all the devices to be shutdown before Continuing
// but only print out the failed ones when they are actually fully failed

// waiting until the simulator service has died.

// see the README for github.com/appium/node-simctl for example output of getDevices()

// Check that openssl is installed on the path

// Check that sqlite3 is installed on the path

// Create a temporary file to store PEM text
// (a temp file is necessary to run `openssl` shell commands, can't be done in memory)

// Do the certificate installation

// Remove the temporary file
//# sourceMappingURL=data:application/json;charset=utf8;base64,
