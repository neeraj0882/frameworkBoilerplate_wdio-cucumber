'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumBaseDriver = require('appium-base-driver');

var _appiumIosDriver = require('appium-ios-driver');

var _appiumSupport = require('appium-support');

var _asyncbox = require('asyncbox');

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var commands = {},
    extensions = {};

// pull in all the element commands and helpers from ios-driver,
// then override anything we want below
_Object$assign(extensions, _appiumIosDriver.iosCommands.element);

commands.getAttribute = function callee$0$0(attribute, el) {
  var value, atomsElement;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        el = _appiumSupport.util.unwrapElement(el);

        if (this.isWebContext()) {
          context$1$0.next = 11;
          break;
        }

        if (!(attribute === "contentSize")) {
          context$1$0.next = 6;
          break;
        }

        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.getContentSize(el));

      case 5:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 6:
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.proxyCommand('/element/' + el + '/attribute/' + attribute, 'GET'));

      case 8:
        value = context$1$0.sent;

        // Transform the result for the case when WDA returns an integer representation for a boolean value
        if ([0, 1].indexOf(value) !== -1) {
          value = !!value;
        }
        // The returned value must be of type string according to https://www.w3.org/TR/webdriver/#get-element-attribute
        return context$1$0.abrupt('return', _lodash2['default'].isNull(value) || _lodash2['default'].isString(value) ? value : JSON.stringify(value));

      case 11:
        atomsElement = this.getAtomsElement(el);

        if (!_lodash2['default'].isNull(atomsElement)) {
          context$1$0.next = 14;
          break;
        }

        throw new _appiumBaseDriver.errors.UnknownError('Error converting element ID for using in WD atoms: \'' + el);

      case 14:
        context$1$0.next = 16;
        return _regeneratorRuntime.awrap(this.executeAtom('get_attribute_value', [atomsElement, attribute]));

      case 16:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 17:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getText = function callee$0$0(el) {
  var atomsElement;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        el = _appiumSupport.util.unwrapElement(el);

        if (this.isWebContext()) {
          context$1$0.next = 5;
          break;
        }

        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.proxyCommand('/element/' + el + '/text', 'GET'));

      case 4:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 5:
        atomsElement = this.useAtomsElement(el);
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.executeAtom('get_text', [atomsElement]));

      case 8:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getRect = function callee$0$0(el) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        el = _appiumSupport.util.unwrapElement(el);

        if (!this.isWebContext()) {
          context$1$0.next = 3;
          break;
        }

        throw new _appiumBaseDriver.errors.NotYetImplementedError('Support for getRect for webcontext is not yet implemented. Please contact an Appium dev');

      case 3:
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.getNativeRect(el));

      case 5:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 6:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

extensions.getNativeRect = function callee$0$0(el) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.proxyCommand('/element/' + el + '/rect', 'GET'));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getLocation = function callee$0$0(el) {
  var atomsElement, loc, script, _ref, _ref2, xOffset, yOffset, rect;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        el = el.ELEMENT ? el.ELEMENT : el;

        if (!this.isWebContext()) {
          context$1$0.next = 21;
          break;
        }

        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.useAtomsElement(el));

      case 4:
        atomsElement = context$1$0.sent;
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.executeAtom('get_top_left_coordinates', [atomsElement]));

      case 7:
        loc = context$1$0.sent;

        if (!this.opts.absoluteWebLocations) {
          context$1$0.next = 18;
          break;
        }

        script = 'return [document.body.scrollLeft, document.body.scrollTop];';
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(this.execute(script));

      case 12:
        _ref = context$1$0.sent;
        _ref2 = _slicedToArray(_ref, 2);
        xOffset = _ref2[0];
        yOffset = _ref2[1];

        loc.x += xOffset;
        loc.y += yOffset;

      case 18:
        return context$1$0.abrupt('return', loc);

      case 21:
        context$1$0.next = 23;
        return _regeneratorRuntime.awrap(this.getRect(el));

      case 23:
        rect = context$1$0.sent;
        return context$1$0.abrupt('return', { x: rect.x, y: rect.y });

      case 25:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getLocationInView = function callee$0$0(el) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.getLocation(el));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getSize = function callee$0$0(el) {
  var atomsElement, rect;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        el = el.ELEMENT ? el.ELEMENT : el;

        if (!this.isWebContext()) {
          context$1$0.next = 12;
          break;
        }

        atomsElement = this.getAtomsElement(el);

        if (!(atomsElement === null)) {
          context$1$0.next = 7;
          break;
        }

        throw new _appiumBaseDriver.errors.UnknownError('Error converting element ID for using in WD atoms: \'' + el + '\'');

      case 7:
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(this.executeAtom('get_size', [atomsElement]));

      case 9:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 10:
        context$1$0.next = 16;
        break;

      case 12:
        context$1$0.next = 14;
        return _regeneratorRuntime.awrap(this.getRect(el));

      case 14:
        rect = context$1$0.sent;
        return context$1$0.abrupt('return', { width: rect.width, height: rect.height });

      case 16:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

function hasSpecialKeys(keys) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = _getIterator(keys), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var char = _step.value;

      if (isSpecialKey(char)) {
        return true;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator['return']) {
        _iterator['return']();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return false;
}

function isSpecialKey(k) {
  if (k === '' || k === '') {
    // BACKSPACE or DELETE
    return true;
  } else if (k === '' || k === '') {
    // RETURN or ENTER
    return true;
  }
  return false;
}

function translateKey(k) {
  if (k === '' || k === '') {
    // RETURN or ENTER
    return '\n';
  } else if (k === '' || k === '') {
    // BACKSPACE or DELETE
    return '\b';
  }
  return k;
}

extensions.bringUpKeyboard = function callee$0$0(element) {
  var implicitWaitMs;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        implicitWaitMs = this.implicitWaitMs;
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.setImplicitWait(0));

      case 3:
        context$1$0.prev = 3;
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(10, 10, function callee$1$0() {
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.prev = 0;
                context$2$0.next = 3;
                return _regeneratorRuntime.awrap(this.findNativeElementOrElements('class name', 'XCUIElementTypeKeyboard', false));

              case 3:
                _logger2['default'].debug('Keyboard found. Continuing with text input.');
                context$2$0.next = 13;
                break;

              case 6:
                context$2$0.prev = 6;
                context$2$0.t0 = context$2$0['catch'](0);

                // no keyboard found
                _logger2['default'].debug('No keyboard found. Clicking element to open it.');
                context$2$0.next = 11;
                return _regeneratorRuntime.awrap(this.nativeClick(element));

              case 11:
                context$2$0.next = 13;
                return _regeneratorRuntime.awrap(this.findNativeElementOrElements('class name', 'XCUIElementTypeKeyboard', false));

              case 13:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this, [[0, 6]]);
        }));

      case 6:
        context$1$0.prev = 6;
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(this.setImplicitWait(implicitWaitMs));

      case 9:
        return context$1$0.finish(6);

      case 10:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[3,, 6, 10]]);
};

commands.setValueImmediate = function callee$0$0(value, el) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        // WDA does not provide no way to set the value directly
        _logger2['default'].info('There is currently no way to bypass typing using XCUITest. Setting value through keyboard');
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.setValue(value, el));

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.setValue = function callee$0$0(value, el) {
  var atomsElement, setFormattedValue, buffer, isFirstChar, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, k, char;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this2 = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        el = _appiumSupport.util.unwrapElement(el);

        if (!this.isWebContext()) {
          context$1$0.next = 9;
          break;
        }

        atomsElement = this.useAtomsElement(el);
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.executeAtom('click', [atomsElement]));

      case 5:
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.executeAtom('type', [atomsElement, value]));

      case 7:
        context$1$0.next = 56;
        break;

      case 9:
        setFormattedValue = function setFormattedValue(input, isKeyboardPresenceCheckEnabled) {
          return _regeneratorRuntime.async(function setFormattedValue$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                if (typeof input !== 'string' && !(input instanceof Array)) {
                  input = input.toString().split('');
                }
                context$2$0.prev = 1;
                context$2$0.next = 4;
                return _regeneratorRuntime.awrap(this.proxyCommand('/element/' + el + '/value', 'POST', { value: input }));

              case 4:
                context$2$0.next = 23;
                break;

              case 6:
                context$2$0.prev = 6;
                context$2$0.t0 = context$2$0['catch'](1);
                context$2$0.t1 = isKeyboardPresenceCheckEnabled;

                if (!context$2$0.t1) {
                  context$2$0.next = 14;
                  break;
                }

                context$2$0.next = 12;
                return _regeneratorRuntime.awrap(this.getAttribute('type', el));

              case 12:
                context$2$0.t2 = context$2$0.sent;
                context$2$0.t1 = context$2$0.t2 === 'XCUIElementTypeTextField';

              case 14:
                if (!context$2$0.t1) {
                  context$2$0.next = 22;
                  break;
                }

                _logger2['default'].info('Cannot type in the text field because of ' + context$2$0.t0 + '.\nTrying to apply a workaround...');
                context$2$0.next = 18;
                return _regeneratorRuntime.awrap(this.bringUpKeyboard(el));

              case 18:
                context$2$0.next = 20;
                return _regeneratorRuntime.awrap(this.proxyCommand('/element/' + el + '/value', 'POST', { value: input }));

              case 20:
                context$2$0.next = 23;
                break;

              case 22:
                throw context$2$0.t0;

              case 23:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this2, [[1, 6]]);
        };

        if (!(_lodash2['default'].isNull(value) || _lodash2['default'].isUndefined(value) || _lodash2['default'].isPlainObject(value))) {
          context$1$0.next = 12;
          break;
        }

        throw new Error('Only strings and arrays of strings are supported as input arguments. Received: \'' + JSON.stringify(value) + '\'');

      case 12:
        if (_lodash2['default'].isArray(value)) {
          // make sure that all the strings inside are a single character long
          value = _lodash2['default'].flatMap(value, function (v) {
            return (_lodash2['default'].isString(v) ? v : JSON.stringify(v)).split('');
          });
        } else {
          // make it into an array of characters
          value = (value || '').toString().split('');
        }

        if (hasSpecialKeys(value)) {
          context$1$0.next = 17;
          break;
        }

        context$1$0.next = 16;
        return _regeneratorRuntime.awrap(setFormattedValue(value, true));

      case 16:
        return context$1$0.abrupt('return');

      case 17:
        buffer = [];
        isFirstChar = true;
        _iteratorNormalCompletion2 = true;
        _didIteratorError2 = false;
        _iteratorError2 = undefined;
        context$1$0.prev = 22;
        _iterator2 = _getIterator(value);

      case 24:
        if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
          context$1$0.next = 39;
          break;
        }

        k = _step2.value;
        char = translateKey(k);

        if (!(char === k)) {
          context$1$0.next = 30;
          break;
        }

        buffer.push(char);
        return context$1$0.abrupt('continue', 36);

      case 30:
        context$1$0.next = 32;
        return _regeneratorRuntime.awrap(setFormattedValue(buffer, isFirstChar));

      case 32:
        isFirstChar = false;
        buffer = [];

        // write the character
        context$1$0.next = 36;
        return _regeneratorRuntime.awrap(setFormattedValue([char], isFirstChar));

      case 36:
        _iteratorNormalCompletion2 = true;
        context$1$0.next = 24;
        break;

      case 39:
        context$1$0.next = 45;
        break;

      case 41:
        context$1$0.prev = 41;
        context$1$0.t0 = context$1$0['catch'](22);
        _didIteratorError2 = true;
        _iteratorError2 = context$1$0.t0;

      case 45:
        context$1$0.prev = 45;
        context$1$0.prev = 46;

        if (!_iteratorNormalCompletion2 && _iterator2['return']) {
          _iterator2['return']();
        }

      case 48:
        context$1$0.prev = 48;

        if (!_didIteratorError2) {
          context$1$0.next = 51;
          break;
        }

        throw _iteratorError2;

      case 51:
        return context$1$0.finish(48);

      case 52:
        return context$1$0.finish(45);

      case 53:
        if (!buffer.length) {
          context$1$0.next = 56;
          break;
        }

        context$1$0.next = 56;
        return _regeneratorRuntime.awrap(setFormattedValue(buffer, false));

      case 56:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[22, 41, 45, 53], [46,, 48, 52]]);
};

commands.keys = function callee$0$0(value) {
  var buffer, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, k, char;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (_lodash2['default'].isArray(value)) {
          // concatenate any individual strings
          value = value.join('');
        }
        if (_lodash2['default'].isString(value)) {
          // split into component characters
          value = value.split('');
        }

        buffer = [];
        _iteratorNormalCompletion3 = true;
        _didIteratorError3 = false;
        _iteratorError3 = undefined;
        context$1$0.prev = 6;

        for (_iterator3 = _getIterator(value); !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          k = _step3.value;
          char = translateKey(k);

          buffer.push(char);
        }
        context$1$0.next = 14;
        break;

      case 10:
        context$1$0.prev = 10;
        context$1$0.t0 = context$1$0['catch'](6);
        _didIteratorError3 = true;
        _iteratorError3 = context$1$0.t0;

      case 14:
        context$1$0.prev = 14;
        context$1$0.prev = 15;

        if (!_iteratorNormalCompletion3 && _iterator3['return']) {
          _iterator3['return']();
        }

      case 17:
        context$1$0.prev = 17;

        if (!_didIteratorError3) {
          context$1$0.next = 20;
          break;
        }

        throw _iteratorError3;

      case 20:
        return context$1$0.finish(17);

      case 21:
        return context$1$0.finish(14);

      case 22:
        context$1$0.next = 24;
        return _regeneratorRuntime.awrap(this.proxyCommand('/wda/keys', 'POST', { value: buffer }));

      case 24:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[6, 10, 14, 22], [15,, 17, 21]]);
};

commands.clear = function callee$0$0(el) {
  var atomsElement;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        el = _appiumSupport.util.unwrapElement(el);

        if (!this.isWebContext()) {
          context$1$0.next = 6;
          break;
        }

        atomsElement = this.useAtomsElement(el);
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.executeAtom('clear', [atomsElement]));

      case 5:
        return context$1$0.abrupt('return');

      case 6:
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap((0, _asyncbox.retry)(5, this.proxyCommand.bind(this), '/element/' + el + '/clear', 'POST'));

      case 8:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getContentSize = function callee$0$0(el) {
  var type, locator, contentHeight, children, rect, firstRect, lastRect, elsInRow, initialRects, i, spaceBetweenEls, numRows, size, origin;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.isWebContext()) {
          context$1$0.next = 2;
          break;
        }

        throw new _appiumBaseDriver.errors.NotYetImplementedError('Support for getContentSize for webcontext is not yet implemented. Please contact an Appium dev');

      case 2:
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.getAttribute('type', el));

      case 4:
        type = context$1$0.sent;

        if (!(type !== "XCUIElementTypeTable" && type !== "XCUIElementTypeCollectionView")) {
          context$1$0.next = 7;
          break;
        }

        throw new Error('Can\'t get content size for type \'' + type + '\', only for ' + 'tables and collection views');

      case 7:
        locator = "*";

        if (type === "XCUIElementTypeTable") {
          // only find table cells, not just any children
          locator = "XCUIElementTypeCell";
        }

        contentHeight = 0;
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(this.findElOrEls('class chain', locator, true, el));

      case 12:
        children = context$1$0.sent;

        if (!(children.length === 1)) {
          context$1$0.next = 20;
          break;
        }

        context$1$0.next = 16;
        return _regeneratorRuntime.awrap(this.getRect(_lodash2['default'].head(children)));

      case 16:
        rect = context$1$0.sent;

        contentHeight = rect.height;
        context$1$0.next = 54;
        break;

      case 20:
        if (!children.length) {
          context$1$0.next = 54;
          break;
        }

        context$1$0.t0 = type;
        context$1$0.next = context$1$0.t0 === "XCUIElementTypeTable" ? 24 : context$1$0.t0 === "XCUIElementTypeCollectionView" ? 32 : 53;
        break;

      case 24:
        context$1$0.next = 26;
        return _regeneratorRuntime.awrap(this.getRect(_lodash2['default'].head(children)));

      case 26:
        firstRect = context$1$0.sent;
        context$1$0.next = 29;
        return _regeneratorRuntime.awrap(this.getRect(_lodash2['default'].last(children)));

      case 29:
        lastRect = context$1$0.sent;

        contentHeight = lastRect.y + lastRect.height - firstRect.y;
        return context$1$0.abrupt('break', 54);

      case 32:
        elsInRow = 1;
        context$1$0.next = 35;
        return _regeneratorRuntime.awrap(this.getRect(_lodash2['default'].head(children)));

      case 35:
        firstRect = context$1$0.sent;
        initialRects = [firstRect];
        i = 1;

      case 38:
        if (!(i < children.length)) {
          context$1$0.next = 49;
          break;
        }

        context$1$0.next = 41;
        return _regeneratorRuntime.awrap(this.getRect(children[i]));

      case 41:
        rect = context$1$0.sent;

        initialRects.push(rect);

        if (!(rect.y !== firstRect.y)) {
          context$1$0.next = 46;
          break;
        }

        elsInRow = i;
        return context$1$0.abrupt('break', 49);

      case 46:
        i++;
        context$1$0.next = 38;
        break;

      case 49:
        spaceBetweenEls = initialRects[elsInRow].y - initialRects[elsInRow - 1].y - initialRects[elsInRow - 1].height;
        numRows = Math.ceil(children.length / elsInRow);

        // assume all cells are the same height
        contentHeight = numRows * firstRect.height + spaceBetweenEls * (numRows - 1);
        return context$1$0.abrupt('break', 54);

      case 53:
        throw new Error('Programming error: type \'' + type + '\' was not ' + 'valid but should have already been rejected');

      case 54:
        context$1$0.next = 56;
        return _regeneratorRuntime.awrap(this.getSize(el));

      case 56:
        size = context$1$0.sent;
        context$1$0.next = 59;
        return _regeneratorRuntime.awrap(this.getLocationInView(el));

      case 59:
        origin = context$1$0.sent;
        return context$1$0.abrupt('return', JSON.stringify({
          width: size.width,
          height: size.height,
          top: origin.y,
          left: origin.x,
          scrollableOffset: contentHeight
        }));

      case 61:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

_Object$assign(extensions, commands);
exports.commands = commands;
exports['default'] = extensions;

// don't proxy requests for the content size of a scrollable element

// otherwise let WDA handle attribute requests

// sometimes input is attempted before we have a keyboard. Try to bring one up
// but we want to handle the retries on find

// no matter what we do, make sure we have the implicit wait set up correctly

// make sure there is a keyboard if this is a text field

// possible values of `value`:
//   ['some text']
//   ['s', 'o', 'm', 'e', ' ', 't', 'e', 'x', 't']
//   'some text'

// nothing special, so just send it in

// if there are special characters, go through the value until we get to one,
// and then print it individually
// currently only supporting return, enter, backspace, and delete

// write and clear the buffer

// finally, send anything that might be left

// if we know there's only one element, we can optimize to make just one
// call to WDA

// otherwise if we have multiple elements, logic differs based on element
// type
// we know there must be at least one element in the row

// attributes have to be strings, so stringify this up
//# sourceMappingURL=data:application/json;charset=utf8;base64,
