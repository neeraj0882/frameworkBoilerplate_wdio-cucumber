'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _appiumBaseDriver = require('appium-base-driver');

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var GET = 'GET';
var POST = 'POST';
var DELETE = 'DELETE';
var SUPPORTED_METHODS = [GET, POST, DELETE];

var helpers = {},
    extensions = {};

var WDA_ROUTES = {
  '/wda/touch/perform': {
    POST: 'performTouch'
  },
  '/wda/touch/multi/perform': {
    POST: 'performMultiAction'
  },
  '/wda/screen': {
    GET: 'getScreenInfo'
  },
  '/wda/alert/buttons': {
    GET: 'getAlertButtons'
  },
  '/wda/apps/launch': {
    POST: 'mobileLaunchApp'
  },
  '/wda/apps/terminate': {
    POST: 'mobileTerminateApp'
  },
  '/wda/apps/activate': {
    POST: 'mobileActivateApp'
  },
  '/wda/apps/state': {
    POST: 'mobileQueryAppState'
  },
  '/wda/keys': {
    POST: 'keys'
  },
  '/wda/touch_id': {
    POST: 'touchId'
  },
  '/wda/keyboard/dismiss': {
    POST: 'hideKeyboard'
  },
  '/wda/lock': {
    POST: 'lock'
  },
  '/wda/unlock': {
    POST: 'unlock'
  },
  '/wda/locked': {
    GET: 'isLocked'
  },
  '/wda/tap/nil': {
    POST: 'clickCoords'
  },
  '/window/size': {
    GET: 'getWindowSize'
  }
};

function wdaRouteToCommandName(endpoint, method) {
  return WDA_ROUTES[endpoint] ? WDA_ROUTES[endpoint][method] : null;
}

helpers.proxyCommand = function callee$0$0(endpoint, method, body) {
  var isSessionCommand = arguments.length <= 3 || arguments[3] === undefined ? true : arguments[3];
  var proxy, cmdName, timeout, res, isCommandExpired, errMsg;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.shutdownUnexpectedly) {
          context$1$0.next = 2;
          break;
        }

        return context$1$0.abrupt('return');

      case 2:

        if (!endpoint) {
          _logger2['default'].errorAndThrow('Proxying requires an endpoint');
        } else if (SUPPORTED_METHODS.indexOf(method) === -1) {
          _logger2['default'].errorAndThrow('Proxying only works for the following requests: ' + SUPPORTED_METHODS.join(', '));
        }

        if (this.wda) {
          context$1$0.next = 5;
          break;
        }

        throw new Error('Cannot call proxyCommand without WDA driver active');

      case 5:
        proxy = isSessionCommand ? this.wda.jwproxy : this.wda.noSessionProxy;

        if (proxy) {
          context$1$0.next = 8;
          break;
        }

        throw new Error('Cannot call proxyCommand without WDA proxy active');

      case 8:
        cmdName = wdaRouteToCommandName(endpoint, method) || (0, _appiumBaseDriver.routeToCommandName)(endpoint, method);
        timeout = this._getCommandTimeout(cmdName);

        if (!cmdName) {
          // this should never happen except when adding new routes
          cmdName = 'Unknown'; // just for logging purposes below
          _logger2['default'].warn('Proxying to WDA with an unknown route: ' + method + ' ' + endpoint);
        }

        res = null;

        if (!timeout) {
          context$1$0.next = 26;
          break;
        }

        _logger2['default'].debug('Setting custom timeout to ' + timeout + ' ms for \'' + cmdName + '\' command');
        isCommandExpired = false;
        context$1$0.next = 17;
        return _regeneratorRuntime.awrap(_bluebird2['default'].resolve(proxy.command(endpoint, method, body)).timeout(timeout)['catch'](_bluebird2['default'].Promise.TimeoutError, function () {
          isCommandExpired = true;
        }));

      case 17:
        res = context$1$0.sent;

        if (!isCommandExpired) {
          context$1$0.next = 24;
          break;
        }

        proxy.cancelActiveRequests();
        errMsg = 'Appium did not get any response from \'' + cmdName + '\' command in ' + timeout + ' ms';
        context$1$0.next = 23;
        return _regeneratorRuntime.awrap(this.startUnexpectedShutdown(new _appiumBaseDriver.errors.TimeoutError(errMsg)));

      case 23:
        _logger2['default'].errorAndThrow(errMsg);

      case 24:
        context$1$0.next = 29;
        break;

      case 26:
        context$1$0.next = 28;
        return _regeneratorRuntime.awrap(proxy.command(endpoint, method, body));

      case 28:
        res = context$1$0.sent;

      case 29:
        if (!(res && res.status && parseInt(res.status, 10) !== 0)) {
          context$1$0.next = 31;
          break;
        }

        throw (0, _appiumBaseDriver.errorFromCode)(res.status, res.value);

      case 31:
        return context$1$0.abrupt('return', res);

      case 32:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

_Object$assign(extensions, helpers);
exports.helpers = helpers;
exports['default'] = extensions;

// temporarily handle errors that can be returned
//# sourceMappingURL=data:application/json;charset=utf8;base64,
