'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumBaseDriver = require('appium-base-driver');

var _appiumIosDriver = require('appium-ios-driver');

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var commands = {};

commands.active = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.isWebContext()) {
          context$1$0.next = 4;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.executeAtom('active_element', []));

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 4:
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.proxyCommand('/element/active', 'GET'));

      case 6:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Close app (simulate device home button). It is possible to restore
 * the app after the timeout or keep it minimized based on the parameter value.
 *
 * Possible values for `duration`:
 * - any positive number of seconds: come back after X seconds, show deprecation warning
 * - any negative number of seconds: never come back, show deprecation warning
 * - undefined: come back after the default timeout (defined by WDA), show deprecation warning. After deprecation: never come back
 * - {timeout: 5000}: come back after 5 seconds
 * - {timeout: null}, {timeout: -2}: never come back
 */
commands.background = function callee$0$0(duration) {
  var homescreenEndpoint, deactivateAppEndpoint, endpoint, params;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        homescreenEndpoint = '/wda/homescreen';
        deactivateAppEndpoint = '/wda/deactivateApp';
        endpoint = undefined;
        params = undefined;

        if (_lodash2['default'].isUndefined(duration)) {
          // TODO: Replace the block after deprecated stuff is removed
          // endpoint = homescreenEndpoint;
          _logger2['default'].warn('commands.background: Application under test will never be restored in the future if no duration is provided. ' + 'See https://github.com/appium/appium/issues/7741');
          endpoint = deactivateAppEndpoint;
          params = {};
        } else if (_lodash2['default'].isNumber(duration)) {
          // TODO: deprecate this case
          _logger2['default'].warn('commands.background: Passing numbers to \'duration\' argument is deprecated. ' + 'See https://github.com/appium/appium/issues/7741');
          if (duration >= 0) {
            params = { duration: duration };
            endpoint = deactivateAppEndpoint;
          } else {
            endpoint = homescreenEndpoint;
          }
        } else if (_lodash2['default'].isPlainObject(duration)) {
          if (_lodash2['default'].has(duration, 'timeout')) {
            if (duration.timeout === null) {
              endpoint = homescreenEndpoint;
            } else if (_lodash2['default'].isNumber(duration.timeout)) {
              if (duration.timeout >= 0) {
                params = { duration: duration.timeout / 1000.0 };
                endpoint = deactivateAppEndpoint;
              } else {
                endpoint = homescreenEndpoint;
              }
            }
          }
        }
        if (_lodash2['default'].isUndefined(endpoint)) {
          _logger2['default'].errorAndThrow('commands.background: Argument value is expected to be an object or \'undefined\'. ' + ('\'' + duration + '\' value has been provided instead. ') + 'The \'timeout\' attribute can be \'null\' or any negative number to put the app under test ' + 'into background and never come back or a positive number of milliseconds to wait until the app is restored.');
        }
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.proxyCommand(endpoint, 'POST', params, endpoint !== homescreenEndpoint));

      case 8:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/*
 * Simulate Touch ID with either valid (match === true) or invalid (match === false)
 * fingerprint (Simulator only)
 */
commands.touchId = function callee$0$0() {
  var match = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (this.isSimulator()) {
          context$1$0.next = 2;
          break;
        }

        throw new _appiumBaseDriver.errors.UnknownError('Touch ID simulation not supported on real devices');

      case 2:
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.proxyCommand('/wda/touch_id', 'POST', { match: match }));

      case 4:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Toggle enrollment of touchId (Simulator only)
 *
 * @param {boolean} enabled - Equals to true if TouchID enrollment should be enabled.
 *   All the further calls to this method will only change the state of TouchID
 *   enrollment if _enabled_ argument value has been inverted. It is mandatory
 *   that Appium daemon process (or its parent process) has access to MacOS accessibility
 *   in System Preferences, otherwise this call will throw an error.
 * @throws errors.UnknownError If current device is a real device.
 * @throws Error If Simulator appication is not running or Appium process has
 *   no access to system accessibility.
 */
commands.toggleEnrollTouchId = function callee$0$0() {
  var enabled = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (this.isSimulator()) {
          context$1$0.next = 2;
          break;
        }

        throw new _appiumBaseDriver.errors.UnknownError('Touch ID simulation not supported on real devices');

      case 2:
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.opts.device.enrollTouchID(enabled));

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getWindowSize = function callee$0$0() {
  var windowHandle = arguments.length <= 0 || arguments[0] === undefined ? 'current' : arguments[0];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(windowHandle !== "current")) {
          context$1$0.next = 2;
          break;
        }

        throw new _appiumBaseDriver.errors.NotYetImplementedError('Currently only getting current window size is supported.');

      case 2:
        if (this.isWebContext()) {
          context$1$0.next = 8;
          break;
        }

        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.proxyCommand('/window/size', 'GET'));

      case 5:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 8:
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(this.executeAtom('get_window_size', []));

      case 10:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 11:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

// For W3C
commands.getWindowRect = function callee$0$0() {
  var _ref, width, height;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.getWindowSize());

      case 2:
        _ref = context$1$0.sent;
        width = _ref.width;
        height = _ref.height;
        return context$1$0.abrupt('return', {
          width: width,
          height: height,
          x: 0,
          y: 0
        });

      case 6:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.hideKeyboard = function callee$0$0(strategy) {
  for (var _len = arguments.length, possibleKeys = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    possibleKeys[_key - 1] = arguments[_key];
  }

  var keyboard, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, key, el, buttons;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!((this.opts.deviceName || '').indexOf('iPhone') === -1)) {
          context$1$0.next = 10;
          break;
        }

        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.proxyCommand('/wda/keyboard/dismiss', 'POST'));

      case 4:
        return context$1$0.abrupt('return');

      case 7:
        context$1$0.prev = 7;
        context$1$0.t0 = context$1$0['catch'](1);

        _logger2['default'].debug('Cannot dismiss the keyboard using the native call. Trying to apply a workaround...');

      case 10:
        keyboard = undefined;
        context$1$0.prev = 11;
        context$1$0.next = 14;
        return _regeneratorRuntime.awrap(this.findNativeElementOrElements('class name', 'XCUIElementTypeKeyboard', false));

      case 14:
        keyboard = context$1$0.sent;
        context$1$0.next = 21;
        break;

      case 17:
        context$1$0.prev = 17;
        context$1$0.t1 = context$1$0['catch'](11);

        // no keyboard found
        _logger2['default'].debug('No keyboard found. Unable to hide.');
        return context$1$0.abrupt('return');

      case 21:
        possibleKeys.pop(); // last parameter is the session id
        possibleKeys = possibleKeys.filter(function (element) {
          return !!element;
        }); // get rid of undefined elements

        if (!possibleKeys.length) {
          context$1$0.next = 60;
          break;
        }

        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 27;
        _iterator = _getIterator(possibleKeys);

      case 29:
        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
          context$1$0.next = 44;
          break;
        }

        key = _step.value;
        context$1$0.t2 = _lodash2['default'];
        context$1$0.next = 34;
        return _regeneratorRuntime.awrap(this.findNativeElementOrElements('accessibility id', key, true, keyboard));

      case 34:
        context$1$0.t3 = context$1$0.sent;
        el = context$1$0.t2.last.call(context$1$0.t2, context$1$0.t3);

        if (!el) {
          context$1$0.next = 41;
          break;
        }

        _logger2['default'].debug('Attempting to hide keyboard by pressing \'' + key + '\' key.');
        context$1$0.next = 40;
        return _regeneratorRuntime.awrap(this.nativeClick(el));

      case 40:
        return context$1$0.abrupt('return');

      case 41:
        _iteratorNormalCompletion = true;
        context$1$0.next = 29;
        break;

      case 44:
        context$1$0.next = 50;
        break;

      case 46:
        context$1$0.prev = 46;
        context$1$0.t4 = context$1$0['catch'](27);
        _didIteratorError = true;
        _iteratorError = context$1$0.t4;

      case 50:
        context$1$0.prev = 50;
        context$1$0.prev = 51;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 53:
        context$1$0.prev = 53;

        if (!_didIteratorError) {
          context$1$0.next = 56;
          break;
        }

        throw _iteratorError;

      case 56:
        return context$1$0.finish(53);

      case 57:
        return context$1$0.finish(50);

      case 58:
        context$1$0.next = 72;
        break;

      case 60:
        // find the keyboard, and hit the last Button
        _logger2['default'].debug('Finding keyboard and clicking final button to close');
        context$1$0.next = 63;
        return _regeneratorRuntime.awrap(this.getAttribute('visible', keyboard));

      case 63:
        context$1$0.t5 = context$1$0.sent;

        if (!(context$1$0.t5 === 'false')) {
          context$1$0.next = 67;
          break;
        }

        _logger2['default'].debug('No visible keyboard found. Returning');
        return context$1$0.abrupt('return');

      case 67:
        context$1$0.next = 69;
        return _regeneratorRuntime.awrap(this.findNativeElementOrElements('class name', 'XCUIElementTypeButton', true, keyboard));

      case 69:
        buttons = context$1$0.sent;
        context$1$0.next = 72;
        return _regeneratorRuntime.awrap(this.nativeClick(_lodash2['default'].last(buttons)));

      case 72:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 7], [11, 17], [27, 46, 50, 58], [51,, 53, 57]]);
};

commands.getDeviceTime = _appiumIosDriver.iosCommands.general.getDeviceTime;

commands.getStrings = _appiumIosDriver.iosCommands.general.getStrings;

commands.removeApp = function callee$0$0(bundleId) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.mobileRemoveApp({ bundleId: bundleId }));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.launchApp = _appiumIosDriver.iosCommands.general.launchApp;

commands.closeApp = _appiumIosDriver.iosCommands.general.closeApp;

commands.keys = function callee$0$0(keys) {
  var el;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (this.isWebContext()) {
          context$1$0.next = 2;
          break;
        }

        throw new _appiumBaseDriver.errors.UnknownError('Command should be proxied to WDA');

      case 2:
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.active());

      case 4:
        el = context$1$0.sent;

        if (!_lodash2['default'].isUndefined(el.ELEMENT)) {
          context$1$0.next = 7;
          break;
        }

        throw new _appiumBaseDriver.errors.NoSuchElementError();

      case 7:
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(this.setValue(keys, el.ELEMENT));

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.setUrl = function callee$0$0(url) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(!this.isWebContext() && this.isRealDevice())) {
          context$1$0.next = 4;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.proxyCommand('/url', 'POST', { url: url }));

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 4:
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(_appiumIosDriver.iosCommands.general.setUrl.call(this, url));

      case 6:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getViewportRect = _appiumIosDriver.iosCommands.device.getViewportRect;

commands.getScreenInfo = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.proxyCommand('/wda/screen', 'GET'));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getStatusBarHeight = function callee$0$0() {
  var _ref2, statusBarSize;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.getScreenInfo());

      case 2:
        _ref2 = context$1$0.sent;
        statusBarSize = _ref2.statusBarSize;
        return context$1$0.abrupt('return', statusBarSize.height);

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

// this function is memoized in the constructor
commands.getDevicePixelRatio = function callee$0$0() {
  var _ref3, scale;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.getScreenInfo());

      case 2:
        _ref3 = context$1$0.sent;
        scale = _ref3.scale;
        return context$1$0.abrupt('return', scale);

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

exports.commands = commands;
exports['default'] = commands;

// TODO should probably memoize this as it is not likely to change in
// a session

// TODO: once WDA can handle dismissing keyboard for iphone, take away conditional
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9nZW5lcmFsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztzQkFBYyxRQUFROzs7O2dDQUNDLG9CQUFvQjs7K0JBQ2YsbUJBQW1COztzQkFDL0IsV0FBVzs7OztBQUUzQixJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7O0FBRWxCLFFBQVEsQ0FBQyxNQUFNLEdBQUc7Ozs7YUFDWixJQUFJLENBQUMsWUFBWSxFQUFFOzs7Ozs7eUNBQ1IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLENBQUM7Ozs7Ozs7eUNBRXhDLElBQUksQ0FBQyxZQUFZLG9CQUFvQixLQUFLLENBQUM7Ozs7Ozs7Ozs7Q0FDekQsQ0FBQzs7Ozs7Ozs7Ozs7OztBQWFGLFFBQVEsQ0FBQyxVQUFVLEdBQUcsb0JBQWdCLFFBQVE7TUFDdEMsa0JBQWtCLEVBQ2xCLHFCQUFxQixFQUN2QixRQUFRLEVBQ1IsTUFBTTs7OztBQUhKLDBCQUFrQixHQUFHLGlCQUFpQjtBQUN0Qyw2QkFBcUIsR0FBRyxvQkFBb0I7QUFDOUMsZ0JBQVE7QUFDUixjQUFNOztBQUNWLFlBQUksb0JBQUUsV0FBVyxDQUFDLFFBQVEsQ0FBQyxFQUFFOzs7QUFHM0IsOEJBQUksSUFBSSxDQUFDLCtHQUErRyxHQUMvRyxrREFBa0QsQ0FBQyxDQUFDO0FBQzdELGtCQUFRLEdBQUcscUJBQXFCLENBQUM7QUFDakMsZ0JBQU0sR0FBRyxFQUFFLENBQUM7U0FDYixNQUFNLElBQUksb0JBQUUsUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFOztBQUUvQiw4QkFBSSxJQUFJLENBQUMsK0VBQStFLEdBQy9FLGtEQUFrRCxDQUFDLENBQUM7QUFDN0QsY0FBSSxRQUFRLElBQUksQ0FBQyxFQUFFO0FBQ2pCLGtCQUFNLEdBQUcsRUFBQyxRQUFRLEVBQVIsUUFBUSxFQUFDLENBQUM7QUFDcEIsb0JBQVEsR0FBRyxxQkFBcUIsQ0FBQztXQUNsQyxNQUFNO0FBQ0wsb0JBQVEsR0FB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Ozs7Ozt5Q0FFMUMsNkJBQVksT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQzs7Ozs7Ozs7OztDQUN4RCxDQUFDOztBQUVGLFFBQVEsQ0FBQyxlQUFlLEdBQUcsNkJBQVksTUFBTSxDQUFDLGVBQWUsQ0FBQzs7QUFFOUQsUUFBUSxDQUFDLGFBQWEsR0FBRzs7Ozs7eUNBQ1YsSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDOzs7Ozs7Ozs7O0NBQ3JELENBQUM7O0FBRUYsUUFBUSxDQUFDLGtCQUFrQixHQUFHO2FBQ3JCLGFBQWE7Ozs7Ozt5Q0FBVSxJQUFJLENBQUMsYUFBYSxFQUFFOzs7O0FBQTNDLHFCQUFhLFNBQWIsYUFBYTs0Q0FDYixhQUFhLENBQUMsTUFBTTs7Ozs7OztDQUM1QixDQUFDOzs7QUFHRixRQUFRLENBQUMsbUJBQW1CLEdBQUc7YUFDdEIsS0FBSzs7Ozs7O3lDQUFVLElBQUksQ0FBQyxhQUFhLEVBQUU7Ozs7QUFBbkMsYUFBSyxTQUFMLEtBQUs7NENBQ0wsS0FBSzs7Ozs7OztDQUNiLENBQUM7O1FBRU8sUUFBUSxHQUFSLFFBQVE7cUJBQ0YsUUFBUSIsImZpbGUiOiJsaWIvY29tbWFuZHMvZ2VuZXJhbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBlcnJvcnMgfSBmcm9tICdhcHBpdW0tYmFzZS1kcml2ZXInO1xuaW1wb3J0IHsgaW9zQ29tbWFuZHMgfSBmcm9tICdhcHBpdW0taW9zLWRyaXZlcic7XG5pbXBvcnQgbG9nIGZyb20gJy4uL2xvZ2dlcic7XG5cbmxldCBjb21tYW5kcyA9IHt9O1xuXG5jb21tYW5kcy5hY3RpdmUgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmlzV2ViQ29udGV4dCgpKSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZXhlY3V0ZUF0b20oJ2FjdGl2ZV9lbGVtZW50JywgW10pO1xuICB9XG4gIHJldHVybiBhd2FpdCB0aGlzLnByb3h5Q29tbWFuZChgL2VsZW1lbnQvYWN0aXZlYCwgJ0dFVCcpO1xufTtcblxuLyoqXG4gKiBDbG9zZSBhcHAgKHNpbXVsYXRlIGRldmljZSBob21lIGJ1dHRvbikuIEl0IGlzIHBvc3NpYmxlIHRvIHJlc3RvcmVcbiAqIHRoZSBhcHAgYWZ0ZXIgdGhlIHRpbWVvdXQgb3Iga2VlcCBpdCBtaW5pbWl6ZWQgYmFzZWQgb24gdGhlIHBhcmFtZXRlciB2YWx1ZS5cbiAqXG4gKiBQb3NzaWJsZSB2YWx1ZXMgZm9yIGBkdXJhdGlvbmA6XG4gKiAtIGFueSBwb3NpdGl2ZSBudW1iZXIgb2Ygc2Vjb25kczogY29tZSBiYWNrIGFmdGVyIFggc2Vjb25kcywgc2hvdyBkZXByZWNhdGlvbiB3YXJuaW5nXG4gKiAtIGFueSBuZWdhdGl2ZSBudW1iZXIgb2Ygc2Vjb25kczogbmV2ZXIgY29tZSBiYWNrLCBzaG93IGRlcHJlY2F0aW9uIHdhcm5pbmdcbiAqIC0gdW5kZWZpbmVkOiBjb21lIGJhY2sgYWZ0ZXIgdGhlIGRlZmF1bHQgdGltZW91dCAoZGVmaW5lZCBieSBXREEpLCBzaG93IGRlcHJlY2F0aW9uIHdhcm5pbmcuIEFmdGVyIGRlcHJlY2F0aW9uOiBuZXZlciBjb21lIGJhY2tcbiAqIC0ge3RpbWVvdXQ6IDUwMDB9OiBjb21lIGJhY2sgYWZ0ZXIgNSBzZWNvbmRzXG4gKiAtIHt0aW1lb3V0OiBudWxsfSwge3RpbWVvdXQ6IC0yfTogbmV2ZXIgY29tZSBiYWNrXG4gKi9cbmNvbW1hbmRzLmJhY2tncm91bmQgPSBhc3luYyBmdW5jdGlvbiAoZHVyYXRpb24pIHtcbiAgY29uc3QgaG9tZXNjcmVlbkVuZHBvaW50ID0gJy93ZGEvaG9tZXNjcmVlbic7XG4gIGNvbnN0IGRlYWN0aXZhdGVBcHBFbmRwb2ludCA9ICcvd2RhL2RlYWN0aXZhdGVBcHAnO1xuICBsZXQgZW5kcG9pbnQ7XG4gIGxldCBwYXJhbXM7XG4gIGlmIChfLmlzVW5kZWZpbmVkKGR1cmF0aW9uKSkge1xuICAgIC8vIFRPRE86IFJlcGxhY2UgdGhlIGJsb2NrIGFmdGVyIGRlcHJlY2F0ZWQgc3R1ZmYgaXMgcmVtb3ZlZFxuICAgIC8vIGVuZHBvaW50ID0gaG9tZXNjcmVlbkVuZHBvaW50O1xuICAgIGxvZy53YXJuKCdjb21tYW5kcy5iYWNrZ3JvdW5kOiBBcHBsaWNhdGlvbiB1bmRlciB0ZXN0IHdpbGwgbmV2ZXIgYmUgcmVzdG9yZWQgaW4gdGhlIGZ1dHVyZSBpZiBubyBkdXJhdGlvbiBpcyBwcm92aWRlZC4gJyArXG4gICAgICAgICAgICAgJ1NlZSBodHRwczovL2dpdGh1Yi5jb20vYXBwaXVtL2FwcGl1bS9pc3N1ZXMvNzc0MScpO1xuICAgIGVuZHBvaW50ID0gZGVhY3RpdmF0ZUFwcEVuZHBvaW50O1xuICAgIHBhcmFtcyA9IHt9O1xuICB9IGVsc2UgaWYgKF8uaXNOdW1iZXIoZHVyYXRpb24pKSB7XG4gICAgLy8gVE9ETzogZGVwcmVjYXRlIHRoaXMgY2FzZVxuICAgIGxvZy53YXJuKCdjb21tYW5kcy5iYWNrZ3JvdW5kOiBQYXNzaW5nIG51bWJlcnMgdG8gXFwnZHVyYXRpb25cXCcgYXJndW1lbnQgaXMgZGVwcmVjYXRlZC4gJyArXG4gICAgICAgICAgICAgJ1NlZSBodHRwczovL2dpdGh1Yi5jb20vYXBwaXVtL2FwcGl1bS9pc3N1ZXMvNzc0MScpO1xuICAgIGlmIChkdXJhdGlvbiA+PSAwKSB7XG4gICAgICBwYXJhbXMgPSB7ZHVyYXRpb259O1xuICAgICAgZW5kcG9pbnQgPSBkZWFjdGl2YXRlQXBwRW5kcG9pbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVuZHBvaW50ID0gaG9tZXNjcmVlbkVuZHBvaW50O1xuICAgIH1cbiAgfSBlbHNlIGlmIChfLmlzUGxhaW5PYmplY3QoZHVyYXRpb24pKSB7XG4gICAgaWYgKF8uaGFzKGR1cmF0aW9uLCAndGltZW91dCcpKSB7XG4gICAgICBpZiAoZHVyYXRpb24udGltZW91dCA9PT0gbnVsbCkge1xuICAgICAgICBlbmRwb2ludCA9IGhvbWVzY3JlZW5FbmRwb2ludDtcbiAgICAgIH0gZWxzZSBpZiAoXy5pc051bWJlcihkdXJhdGlvbi50aW1lb3V0KSkge1xuICAgICAgICBpZiAoZHVyYXRpb24udGltZW91dCA+PSAwKSB7XG4gICAgICAgICAgcGFyYW1zID0ge2R1cmF0aW9uOiBkdXJhdGlvbi50aW1lb3V0IC8gMTAwMC4wfTtcbiAgICAgICAgICBlbmRwb2ludCA9IGRlYWN0aXZhdGVBcHBFbmRwb2ludDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbmRwb2ludCA9IGhvbWVzY3JlZW5FbmRwb2ludDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoXy5pc1VuZGVmaW5lZChlbmRwb2ludCkpIHtcbiAgICBsb2cuZXJyb3JBbmRUaHJvdygnY29tbWFuZHMuYmFja2dyb3VuZDogQXJndW1lbnQgdmFsdWUgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gb2JqZWN0IG9yIFxcJ3VuZGVmaW5lZFxcJy4gJyArXG4gICAgICAgICAgICAgICAgICAgICAgYCcke2R1cmF0aW9ufScgdmFsdWUgaGFzIGJlZW4gcHJvdmlkZWQgaW5zdGVhZC4gYCArXG4gICAgICAgICAgICAgICAgICAgICAgJ1RoZSBcXCd0aW1lb3V0XFwnIGF0dHJpYnV0ZSBjYW4gYmUgXFwnbnVsbFxcJyBvciBhbnkgbmVnYXRpdmUgbnVtYmVyIHRvIHB1dCB0aGUgYXBwIHVuZGVyIHRlc3QgJyArXG4gICAgICAgICAgICAgICAgICAgICAgJ2ludG8gYmFja2dyb3VuZCBhbmQgbmV2ZXIgY29tZSBiYWNrIG9yIGEgcG9zaXRpdmUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB3YWl0IHVudGlsIHRoZSBhcHAgaXMgcmVzdG9yZWQuJyk7XG4gIH1cbiAgcmV0dXJuIGF3YWl0IHRoaXMucHJveHlDb21tYW5kKGVuZHBvaW50LCAnUE9TVCcsIHBhcmFtcywgZW5kcG9pbnQgIT09IGhvbWVzY3JlZW5FbmRwb2ludCk7XG59O1xuXG4vKlxuICogU2ltdWxhdGUgVG91Y2ggSUQgd2l0aCBlaXRoZXIgdmFsaWQgKG1hdGNoID09PSB0cnVlKSBvciBpbnZhbGlkIChtYXRjaCA9PT0gZmFsc2UpXG4gKiBmaW5nZXJwcmludCAoU2ltdWxhdG9yIG9ubHkpXG4gKi9cbmNvbW1hbmRzLnRvdWNoSWQgPSBhc3luYyBmdW5jdGlvbiAobWF0Y2ggPSB0cnVlKSB7XG4gIGlmICghdGhpcy5pc1NpbXVsYXRvcigpKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5Vbmtub3duRXJyb3IoJ1RvdWNoIElEIHNpbXVsYXRpb24gbm90IHN1cHBvcnRlZCBvbiByZWFsIGRldmljZXMnKTtcbiAgfVxuXG4gIHJldHVybiBhd2FpdCB0aGlzLnByb3h5Q29tbWFuZCgnL3dkYS90b3VjaF9pZCcsICdQT1NUJywge21hdGNofSk7XG59O1xuXG4vKipcbiAqIFRvZ2dsZSBlbnJvbGxtZW50IG9mIHRvdWNoSWQgKFNpbXVsYXRvciBvbmx5KVxuICpcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gZW5hYmxlZCAtIEVxdWFscyB0byB0cnVlIGlmIFRvdWNoSUQgZW5yb2xsbWVudCBzaG91bGQgYmUgZW5hYmxlZC5cbiAqICAgQWxsIHRoZSBmdXJ0aGVyIGNhbGxzIHRvIHRoaXMgbWV0aG9kIHdpbGwgb25seSBjaGFuZ2UgdGhlIHN0YXRlIG9mIFRvdWNoSURcbiAqICAgZW5yb2xsbWVudCBpZiBfZW5hYmxlZF8gYXJndW1lbnQgdmFsdWUgaGFzIGJlZW4gaW52ZXJ0ZWQuIEl0IGlzIG1hbmRhdG9yeVxuICogICB0aGF0IEFwcGl1bSBkYWVtb24gcHJvY2VzcyAob3IgaXRzIHBhcmVudCBwcm9jZXNzKSBoYXMgYWNjZXNzIHRvIE1hY09TIGFjY2Vzc2liaWxpdHlcbiAqICAgaW4gU3lzdGVtIFByZWZlcmVuY2VzLCBvdGhlcndpc2UgdGhpcyBjYWxsIHdpbGwgdGhyb3cgYW4gZXJyb3IuXG4gKiBAdGhyb3dzIGVycm9ycy5Vbmtub3duRXJyb3IgSWYgY3VycmVudCBkZXZpY2UgaXMgYSByZWFsIGRldmljZS5cbiAqIEB0aHJvd3MgRXJyb3IgSWYgU2ltdWxhdG9yIGFwcGljYXRpb24gaXMgbm90IHJ1bm5pbmcgb3IgQXBwaXVtIHByb2Nlc3MgaGFzXG4gKiAgIG5vIGFjY2VzcyB0byBzeXN0ZW0gYWNjZXNzaWJpbGl0eS5cbiAqL1xuY29tbWFuZHMudG9nZ2xlRW5yb2xsVG91Y2hJZCA9IGFzeW5jIGZ1bmN0aW9uIChlbmFibGVkID0gdHJ1ZSkge1xuICBpZiAoIXRoaXMuaXNTaW11bGF0b3IoKSkge1xuICAgIHRocm93IG5ldyBlcnJvcnMuVW5rbm93bkVycm9yKCdUb3VjaCBJRCBzaW11bGF0aW9uIG5vdCBzdXBwb3J0ZWQgb24gcmVhbCBkZXZpY2VzJyk7XG4gIH1cblxuICBhd2FpdCB0aGlzLm9wdHMuZGV2aWNlLmVucm9sbFRvdWNoSUQoZW5hYmxlZCk7XG59O1xuXG5jb21tYW5kcy5nZXRXaW5kb3dTaXplID0gYXN5bmMgZnVuY3Rpb24gKHdpbmRvd0hhbmRsZSA9ICdjdXJyZW50Jykge1xuICBpZiAod2luZG93SGFuZGxlICE9PSBcImN1cnJlbnRcIikge1xuICAgIHRocm93IG5ldyBlcnJvcnMuTm90WWV0SW1wbGVtZW50ZWRFcnJvcignQ3VycmVudGx5IG9ubHkgZ2V0dGluZyBjdXJyZW50IHdpbmRvdyBzaXplIGlzIHN1cHBvcnRlZC4nKTtcbiAgfVxuXG4gIGlmICghdGhpcy5pc1dlYkNvbnRleHQoKSkge1xuICAgIC8vIFRPRE8gc2hvdWxkIHByb2JhYmx5IG1lbW9pemUgdGhpcyBhcyBpdCBpcyBub3QgbGlrZWx5IHRvIGNoYW5nZSBpblxuICAgIC8vIGEgc2Vzc2lvblxuICAgIHJldHVybiBhd2FpdCB0aGlzLnByb3h5Q29tbWFuZChgL3dpbmRvdy9zaXplYCwgJ0dFVCcpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmV4ZWN1dGVBdG9tKCdnZXRfd2luZG93X3NpemUnLCBbXSk7XG4gIH1cbn07XG5cbi8vIEZvciBXM0NcbmNvbW1hbmRzLmdldFdpbmRvd1JlY3QgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IHt3aWR0aCwgaGVpZ2h0fSA9IGF3YWl0IHRoaXMuZ2V0V2luZG93U2l6ZSgpO1xuICByZXR1cm4ge1xuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICB4OiAwLFxuICAgIHk6IDBcbiAgfTtcbn07XG5cbmNvbW1hbmRzLmhpZGVLZXlib2FyZCA9IGFzeW5jIGZ1bmN0aW9uIChzdHJhdGVneSwgLi4ucG9zc2libGVLZXlzKSB7XG4gIGlmICgodGhpcy5vcHRzLmRldmljZU5hbWUgfHwgJycpLmluZGV4T2YoJ2lQaG9uZScpID09PSAtMSkge1xuICAgIC8vIFRPRE86IG9uY2UgV0RBIGNhbiBoYW5kbGUgZGlzbWlzc2luZyBrZXlib2FyZCBmb3IgaXBob25lLCB0YWtlIGF3YXkgY29uZGl0aW9uYWxcbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy5wcm94eUNvbW1hbmQoJy93ZGEva2V5Ym9hcmQvZGlzbWlzcycsICdQT1NUJyk7XG4gICAgICByZXR1cm47XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBsb2cuZGVidWcoJ0Nhbm5vdCBkaXNtaXNzIHRoZSBrZXlib2FyZCB1c2luZyB0aGUgbmF0aXZlIGNhbGwuIFRyeWluZyB0byBhcHBseSBhIHdvcmthcm91bmQuLi4nKTtcbiAgICB9XG4gIH1cblxuICBsZXQga2V5Ym9hcmQ7XG4gIHRyeSB7XG4gICAga2V5Ym9hcmQgPSBhd2FpdCB0aGlzLmZpbmROYXRpdmVFbGVtZW50T3JFbGVtZW50cygnY2xhc3MgbmFtZScsICdYQ1VJRWxlbWVudFR5cGVLZXlib2FyZCcsIGZhbHNlKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gbm8ga2V5Ym9hcmQgZm91bmRcbiAgICBsb2cuZGVidWcoJ05vIGtleWJvYXJkIGZvdW5kLiBVbmFibGUgdG8gaGlkZS4nKTtcbiAgICByZXR1cm47XG4gIH1cbiAgcG9zc2libGVLZXlzLnBvcCgpOyAvLyBsYXN0IHBhcmFtZXRlciBpcyB0aGUgc2Vzc2lvbiBpZFxuICBwb3NzaWJsZUtleXMgPSBwb3NzaWJsZUtleXMuZmlsdGVyKChlbGVtZW50KSA9PiAhIWVsZW1lbnQpOyAvLyBnZXQgcmlkIG9mIHVuZGVmaW5lZCBlbGVtZW50c1xuICBpZiAocG9zc2libGVLZXlzLmxlbmd0aCkge1xuICAgIGZvciAobGV0IGtleSBvZiBwb3NzaWJsZUtleXMpIHtcbiAgICAgIGxldCBlbCA9IF8ubGFzdChhd2FpdCB0aGlzLmZpbmROYXRpdmVFbGVtZW50T3JFbGVtZW50cygnYWNjZXNzaWJpbGl0eSBpZCcsIGtleSwgdHJ1ZSwga2V5Ym9hcmQpKTtcbiAgICAgIGlmIChlbCkge1xuICAgICAgICBsb2cuZGVidWcoYEF0dGVtcHRpbmcgdG8gaGlkZSBrZXlib2FyZCBieSBwcmVzc2luZyAnJHtrZXl9JyBrZXkuYCk7XG4gICAgICAgIGF3YWl0IHRoaXMubmF0aXZlQ2xpY2soZWwpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIGZpbmQgdGhlIGtleWJvYXJkLCBhbmQgaGl0IHRoZSBsYXN0IEJ1dHRvblxuICAgIGxvZy5kZWJ1ZygnRmluZGluZyBrZXlib2FyZCBhbmQgY2xpY2tpbmcgZmluYWwgYnV0dG9uIHRvIGNsb3NlJyk7XG4gICAgaWYgKGF3YWl0IHRoaXMuZ2V0QXR0cmlidXRlKCd2aXNpYmxlJywga2V5Ym9hcmQpID09PSAnZmFsc2UnKSB7XG4gICAgICBsb2cuZGVidWcoJ05vIHZpc2libGUga2V5Ym9hcmQgZm91bmQuIFJldHVybmluZycpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgYnV0dG9ucyA9IGF3YWl0IHRoaXMuZmluZE5hdGl2ZUVsZW1lbnRPckVsZW1lbnRzKCdjbGFzcyBuYW1lJywgJ1hDVUlFbGVtZW50VHlwZUJ1dHRvbicsIHRydWUsIGtleWJvYXJkKTtcbiAgICBhd2FpdCB0aGlzLm5hdGl2ZUNsaWNrKF8ubGFzdChidXR0b25zKSk7XG4gIH1cbn07XG5cbmNvbW1hbmRzLmdldERldmljZVRpbWUgPSBpb3NDb21tYW5kcy5nZW5lcmFsLmdldERldmljZVRpbWU7XG5cbmNvbW1hbmRzLmdldFN0cmluZ3MgPSBpb3NDb21tYW5kcy5nZW5lcmFsLmdldFN0cmluZ3M7XG5cbmNvbW1hbmRzLnJlbW92ZUFwcCA9IGFzeW5jIGZ1bmN0aW9uIChidW5kbGVJZCkge1xuICByZXR1cm4gYXdhaXQgdGhpcy5tb2JpbGVSZW1vdmVBcHAoe2J1bmRsZUlkfSk7XG59O1xuXG5jb21tYW5kcy5sYXVuY2hBcHAgPSBpb3NDb21tYW5kcy5nZW5lcmFsLmxhdW5jaEFwcDtcblxuY29tbWFuZHMuY2xvc2VBcHAgPSBpb3NDb21tYW5kcy5nZW5lcmFsLmNsb3NlQXBwO1xuXG5jb21tYW5kcy5rZXlzID0gYXN5bmMgZnVuY3Rpb24gKGtleXMpIHtcbiAgaWYgKCF0aGlzLmlzV2ViQ29udGV4dCgpKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5Vbmtub3duRXJyb3IoJ0NvbW1hbmQgc2hvdWxkIGJlIHByb3hpZWQgdG8gV0RBJyk7XG4gIH1cbiAgbGV0IGVsID0gYXdhaXQgdGhpcy5hY3RpdmUoKTtcbiAgaWYgKF8uaXNVbmRlZmluZWQoZWwuRUxFTUVOVCkpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLk5vU3VjaEVsZW1lbnRFcnJvcigpO1xuICB9XG4gIGF3YWl0IHRoaXMuc2V0VmFsdWUoa2V5cywgZWwuRUxFTUVOVCk7XG59O1xuXG5jb21tYW5kcy5zZXRVcmwgPSBhc3luYyBmdW5jdGlvbiAodXJsKSB7XG4gIGlmICghdGhpcy5pc1dlYkNvbnRleHQoKSAmJiB0aGlzLmlzUmVhbERldmljZSgpKSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMucHJveHlDb21tYW5kKCcvdXJsJywgJ1BPU1QnLCB7dXJsfSk7XG4gIH1cbiAgcmV0dXJuIGF3YWl0IGlvc0NvbW1hbmRzLmdlbmVyYWwuc2V0VXJsLmNhbGwodGhpcywgdXJsKTtcbn07XG5cbmNvbW1hbmRzLmdldFZpZXdwb3J0UmVjdCA9IGlvc0NvbW1hbmRzLmRldmljZS5nZXRWaWV3cG9ydFJlY3Q7XG5cbmNvbW1hbmRzLmdldFNjcmVlbkluZm8gPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBhd2FpdCB0aGlzLnByb3h5Q29tbWFuZCgnL3dkYS9zY3JlZW4nLCAnR0VUJyk7XG59O1xuXG5jb21tYW5kcy5nZXRTdGF0dXNCYXJIZWlnaHQgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IHtzdGF0dXNCYXJTaXplfSA9IGF3YWl0IHRoaXMuZ2V0U2NyZWVuSW5mbygpO1xuICByZXR1cm4gc3RhdHVzQmFyU2l6ZS5oZWlnaHQ7XG59O1xuXG4vLyB0aGlzIGZ1bmN0aW9uIGlzIG1lbW9pemVkIGluIHRoZSBjb25zdHJ1Y3RvclxuY29tbWFuZHMuZ2V0RGV2aWNlUGl4ZWxSYXRpbyA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgY29uc3Qge3NjYWxlfSA9IGF3YWl0IHRoaXMuZ2V0U2NyZWVuSW5mbygpO1xuICByZXR1cm4gc2NhbGU7XG59O1xuXG5leHBvcnQgeyBjb21tYW5kcyB9O1xuZXhwb3J0IGRlZmF1bHQgY29tbWFuZHM7XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
