'use strict';

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _appiumIosDriver = require('appium-ios-driver');

var _appiumRemoteDebugger = require('appium-remote-debugger');

var extensions = {};

_Object$assign(extensions, _appiumIosDriver.iosCommands.context);

// override, as appium-ios-driver's version uses UI Automation to close
extensions.closeAlertBeforeTest = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        return context$1$0.abrupt('return', true);

      case 1:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

// the appium-ios-driver version of this function fails in CI,
// and the wrong webview is almost always retrieved
extensions._getLatestWebviewContextForTitle = extensions.getLatestWebviewContextForTitle;
extensions.getLatestWebviewContextForTitle = function callee$0$0(regExp) {
  var currentUrl, contexts, matchingCtx, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, ctx, url;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        currentUrl = this.getCurrentUrl();

        if (currentUrl) {
          context$1$0.next = 3;
          break;
        }

        return context$1$0.abrupt('return', this._getLatestWebviewContextForTitle(regExp));

      case 3:
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.getContextsAndViews());

      case 5:
        contexts = context$1$0.sent;
        matchingCtx = undefined;
        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 10;
        _iterator = _getIterator(contexts);

      case 12:
        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
          context$1$0.next = 22;
          break;
        }

        ctx = _step.value;

        if (!ctx.view) {
          context$1$0.next = 19;
          break;
        }

        url = ctx.view.url || '';

        if (!(url === this.getCurrentUrl())) {
          context$1$0.next = 19;
          break;
        }

        matchingCtx = ctx;
        return context$1$0.abrupt('break', 22);

      case 19:
        _iteratorNormalCompletion = true;
        context$1$0.next = 12;
        break;

      case 22:
        context$1$0.next = 28;
        break;

      case 24:
        context$1$0.prev = 24;
        context$1$0.t0 = context$1$0['catch'](10);
        _didIteratorError = true;
        _iteratorError = context$1$0.t0;

      case 28:
        context$1$0.prev = 28;
        context$1$0.prev = 29;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 31:
        context$1$0.prev = 31;

        if (!_didIteratorError) {
          context$1$0.next = 34;
          break;
        }

        throw _iteratorError;

      case 34:
        return context$1$0.finish(31);

      case 35:
        return context$1$0.finish(28);

      case 36:
        if (!matchingCtx) {
          context$1$0.next = 40;
          break;
        }

        return context$1$0.abrupt('return', matchingCtx.id);

      case 40:
        context$1$0.next = 42;
        return _regeneratorRuntime.awrap(this._getLatestWebviewContextForTitle(regExp));

      case 42:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 43:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[10, 24, 28, 36], [29,, 31, 35]]);
};

extensions.isWebContext = function () {
  return !!this.curContext && this.curContext !== _appiumIosDriver.iosCommands.context.NATIVE_WIN;
};

extensions.isWebview = function () {
  return this.isWebContext();
};

extensions.getNewRemoteDebugger = function callee$0$0() {
  var socketPath;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.opts.device.getWebInspectorSocket());

      case 2:
        socketPath = context$1$0.sent;
        return context$1$0.abrupt('return', new _appiumRemoteDebugger.RemoteDebugger({
          bundleId: this.opts.bundleId,
          useNewSafari: this.useNewSafari(),
          pageLoadMs: this.pageLoadMs,
          platformVersion: this.opts.platformVersion,
          socketPath: socketPath
        }));

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

exports['default'] = extensions;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9jb250ZXh0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OzsrQkFBNEIsbUJBQW1COztvQ0FDaEIsd0JBQXdCOztBQUd2RCxJQUFJLFVBQVUsR0FBRyxFQUFFLENBQUM7O0FBRXBCLGVBQWMsVUFBVSxFQUFFLDZCQUFZLE9BQU8sQ0FBQyxDQUFDOzs7QUFHL0MsVUFBVSxDQUFDLG9CQUFvQixHQUFHOzs7OzRDQUN6QixJQUFJOzs7Ozs7O0NBQ1osQ0FBQzs7OztBQUlGLFVBQVUsQ0FBQyxnQ0FBZ0MsR0FBRyxVQUFVLENBQUMsK0JBQStCLENBQUM7QUFDekYsVUFBVSxDQUFDLCtCQUErQixHQUFHLG9CQUFnQixNQUFNO01BQzdELFVBQVUsRUFLVixRQUFRLEVBQ1IsV0FBVyxrRkFDTixHQUFHLEVBRUosR0FBRzs7Ozs7QUFUUCxrQkFBVSxHQUFHLElBQUksQ0FBQyxhQUFhLEVBQUU7O1lBQ2hDLFVBQVU7Ozs7OzRDQUNOLElBQUksQ0FBQyxnQ0FBZ0MsQ0FBQyxNQUFNLENBQUM7Ozs7eUNBR2pDLElBQUksQ0FBQyxtQkFBbUIsRUFBRTs7O0FBQTNDLGdCQUFRO0FBQ1IsbUJBQVc7Ozs7O2lDQUNDLFFBQVE7Ozs7Ozs7O0FBQWYsV0FBRzs7YUFDTixHQUFHLENBQUMsSUFBSTs7Ozs7QUFDTixXQUFHLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksRUFBRTs7Y0FDeEIsR0FBRyxLQUFLLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQTs7Ozs7QUFDOUIsbUJBQVcsR0FBRyxHQUFHLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7YUFLcEIsV0FBVzs7Ozs7NENBQ04sV0FBVyxDQUFDLEVBQUU7Ozs7eUNBRVIsSUFBSSxDQUFDLGdDQUFnQyxDQUFDLE1BQU0sQ0FBQzs7Ozs7Ozs7OztDQUU3RCxDQUFDOztBQUVGLFVBQVUsQ0FBQyxZQUFZLEdBQUcsWUFBWTtBQUNwQyxTQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssNkJBQVksT0FBTyxDQUFDLFVBQVUsQ0FBQztDQUNoRixDQUFDOztBQUVGLFVBQVUsQ0FBQyxTQUFTLEdBQUcsWUFBWTtBQUNqQyxTQUFPLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztDQUM1QixDQUFDOztBQUVGLFVBQVUsQ0FBQyxvQkFBb0IsR0FBRztNQUMxQixVQUFVOzs7Ozt5Q0FBUyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRTs7O0FBQTNELGtCQUFVOzRDQUNULHlDQUFtQjtBQUN4QixrQkFBUSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUTtBQUM1QixzQkFBWSxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUU7QUFDakMsb0JBQVUsRUFBRSxJQUFJLENBQUMsVUFBVTtBQUMzQix5QkFBZSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZTtBQUMxQyxvQkFBVSxFQUFWLFVBQVU7U0FDWCxDQUFDOzs7Ozs7O0NBQ0gsQ0FBQzs7cUJBR2EsVUFBVSIsImZpbGUiOiJsaWIvY29tbWFuZHMvY29udGV4dC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlvc0NvbW1hbmRzIH0gZnJvbSAnYXBwaXVtLWlvcy1kcml2ZXInO1xuaW1wb3J0IHsgUmVtb3RlRGVidWdnZXIgfSBmcm9tICdhcHBpdW0tcmVtb3RlLWRlYnVnZ2VyJztcblxuXG5sZXQgZXh0ZW5zaW9ucyA9IHt9O1xuXG5PYmplY3QuYXNzaWduKGV4dGVuc2lvbnMsIGlvc0NvbW1hbmRzLmNvbnRleHQpO1xuXG4vLyBvdmVycmlkZSwgYXMgYXBwaXVtLWlvcy1kcml2ZXIncyB2ZXJzaW9uIHVzZXMgVUkgQXV0b21hdGlvbiB0byBjbG9zZVxuZXh0ZW5zaW9ucy5jbG9zZUFsZXJ0QmVmb3JlVGVzdCA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vLyB0aGUgYXBwaXVtLWlvcy1kcml2ZXIgdmVyc2lvbiBvZiB0aGlzIGZ1bmN0aW9uIGZhaWxzIGluIENJLFxuLy8gYW5kIHRoZSB3cm9uZyB3ZWJ2aWV3IGlzIGFsbW9zdCBhbHdheXMgcmV0cmlldmVkXG5leHRlbnNpb25zLl9nZXRMYXRlc3RXZWJ2aWV3Q29udGV4dEZvclRpdGxlID0gZXh0ZW5zaW9ucy5nZXRMYXRlc3RXZWJ2aWV3Q29udGV4dEZvclRpdGxlO1xuZXh0ZW5zaW9ucy5nZXRMYXRlc3RXZWJ2aWV3Q29udGV4dEZvclRpdGxlID0gYXN5bmMgZnVuY3Rpb24gKHJlZ0V4cCkge1xuICBsZXQgY3VycmVudFVybCA9IHRoaXMuZ2V0Q3VycmVudFVybCgpO1xuICBpZiAoIWN1cnJlbnRVcmwpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0TGF0ZXN0V2Vidmlld0NvbnRleHRGb3JUaXRsZShyZWdFeHApO1xuICB9XG5cbiAgbGV0IGNvbnRleHRzID0gYXdhaXQgdGhpcy5nZXRDb250ZXh0c0FuZFZpZXdzKCk7XG4gIGxldCBtYXRjaGluZ0N0eDtcbiAgZm9yIChsZXQgY3R4IG9mIGNvbnRleHRzKSB7XG4gICAgaWYgKGN0eC52aWV3KSB7XG4gICAgICBsZXQgdXJsID0gY3R4LnZpZXcudXJsIHx8ICcnO1xuICAgICAgaWYgKHVybCA9PT0gdGhpcy5nZXRDdXJyZW50VXJsKCkpIHtcbiAgICAgICAgbWF0Y2hpbmdDdHggPSBjdHg7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAobWF0Y2hpbmdDdHgpIHtcbiAgICByZXR1cm4gbWF0Y2hpbmdDdHguaWQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuX2dldExhdGVzdFdlYnZpZXdDb250ZXh0Rm9yVGl0bGUocmVnRXhwKTtcbiAgfVxufTtcblxuZXh0ZW5zaW9ucy5pc1dlYkNvbnRleHQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhIXRoaXMuY3VyQ29udGV4dCAmJiB0aGlzLmN1ckNvbnRleHQgIT09IGlvc0NvbW1hbmRzLmNvbnRleHQuTkFUSVZFX1dJTjtcbn07XG5cbmV4dGVuc2lvbnMuaXNXZWJ2aWV3ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5pc1dlYkNvbnRleHQoKTtcbn07XG5cbmV4dGVuc2lvbnMuZ2V0TmV3UmVtb3RlRGVidWdnZXIgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IHNvY2tldFBhdGggPSBhd2FpdCB0aGlzLm9wdHMuZGV2aWNlLmdldFdlYkluc3BlY3RvclNvY2tldCgpO1xuICByZXR1cm4gbmV3IFJlbW90ZURlYnVnZ2VyKHtcbiAgICBidW5kbGVJZDogdGhpcy5vcHRzLmJ1bmRsZUlkLFxuICAgIHVzZU5ld1NhZmFyaTogdGhpcy51c2VOZXdTYWZhcmkoKSxcbiAgICBwYWdlTG9hZE1zOiB0aGlzLnBhZ2VMb2FkTXMsXG4gICAgcGxhdGZvcm1WZXJzaW9uOiB0aGlzLm9wdHMucGxhdGZvcm1WZXJzaW9uLFxuICAgIHNvY2tldFBhdGgsXG4gIH0pO1xufTtcblxuXG5leHBvcnQgZGVmYXVsdCBleHRlbnNpb25zO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
