'use strict';

var _defineProperty = require('babel-runtime/helpers/define-property')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign2 = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _appiumSupport = require('appium-support');

var _teen_process = require('teen_process');

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var _utils = require('../utils');

var _asyncbox = require('asyncbox');

var commands = {};

var RECORDERS_CACHE = {};
var DEFAULT_TIMEOUT_MS = 5 * 60 * 1000;
var STOP_TIMEOUT_MS = 3 * 60 * 1000;
var START_TIMEOUT_MS = 15 * 1000;
var DEFAULT_PROFILE_NAME = 'Activity Monitor';
var DEFAULT_EXT = '.trace';

function finishPerfRecord(proc) {
  var stopGracefully = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];
  return _regeneratorRuntime.async(function finishPerfRecord$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (proc.isRunning) {
          context$1$0.next = 2;
          break;
        }

        return context$1$0.abrupt('return');

      case 2:
        if (!stopGracefully) {
          context$1$0.next = 7;
          break;
        }

        _logger2['default'].debug('Sending SIGINT to the running instruments process');
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(proc.stop('SIGINT', STOP_TIMEOUT_MS));

      case 6:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 7:
        _logger2['default'].debug('Sending SIGTERM to the running instruments process');
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(proc.stop());

      case 10:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function uploadTrace(localFile) {
  var remotePath = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
  var uploadOptions = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
  return _regeneratorRuntime.async(function uploadTrace$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap((0, _utils.encodeBase64OrUpload)(localFile, remotePath, uploadOptions));

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 4:
        context$1$0.prev = 4;
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(localFile));

      case 7:
        return context$1$0.finish(4);

      case 8:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0,, 4, 8]]);
}

/**
 * @typedef {Object} StartPerfRecordOptions
 *
 * @property {?number|string} timeout [300000] - The maximum count of milliseconds to record the profiling information.
 * @property {?string} profileName [Activity Monitor] - The name of existing performance profile to apply.
 *                                                      Execute `instruments -s` to show the list of available profiles.
 *                                                      Note, that not all profiles are supported on mobile devices.
 * @property {?string|number} pid - The ID of the process to meassure the performance for.
 *                                  Set it to `current` in order to meassure the performance of
 *                                  the process, which belongs to the currently active application.
 *                                  All processes running on the device are meassured if
 *                                  pid is unset (the default setting).
 */

/**
 * Starts performance profiling for the device under test.
 * The `instruments` developer utility is used for this purpose under the hood.
 * It is possible to record multiple profiles at the same time.
 * Read https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/Recording,Pausing,andStoppingTraces.html
 * for more details.
 *
 * @param {?StartPerfRecordOptions} opts - The set of possible start record options
 */
commands.mobileStartPerfRecord = function callee$0$0() {
  var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  var _opts$timeout, timeout, _opts$profileName, profileName, pid, runningRecorders, _runningRecorders$opts$device$udid, _proc, _localPath, localPath, args, appInfo, proc;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.relaxedSecurityEnabled && !process.env.CI && !this.isRealDevice()) {
          _logger2['default'].errorAndThrow('Appium server must have relaxed security flag set in order ' + 'for Simulator performance measurement to work');
        }

        _opts$timeout = opts.timeout;
        timeout = _opts$timeout === undefined ? DEFAULT_TIMEOUT_MS : _opts$timeout;
        _opts$profileName = opts.profileName;
        profileName = _opts$profileName === undefined ? DEFAULT_PROFILE_NAME : _opts$profileName;
        pid = opts.pid;
        runningRecorders = RECORDERS_CACHE[profileName];

        if (!(_lodash2['default'].isPlainObject(runningRecorders) && runningRecorders[this.opts.device.udid])) {
          context$1$0.next = 19;
          break;
        }

        _runningRecorders$opts$device$udid = runningRecorders[this.opts.device.udid];
        _proc = _runningRecorders$opts$device$udid.proc;
        _localPath = _runningRecorders$opts$device$udid.localPath;
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap(finishPerfRecord(_proc, false));

      case 13:
        context$1$0.next = 15;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(_localPath));

      case 15:
        if (!context$1$0.sent) {
          context$1$0.next = 18;
          break;
        }

        context$1$0.next = 18;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(_localPath));

      case 18:
        delete runningRecorders[this.opts.device.udid];

      case 19:
        context$1$0.next = 21;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.which('instruments'));

      case 21:
        if (context$1$0.sent) {
          context$1$0.next = 23;
          break;
        }

        _logger2['default'].errorAndThrow('Cannot start performance recording, because \'instruments\' ' + 'tool cannot be found in PATH. Are Xcode development tools installed?');

      case 23:
        context$1$0.next = 25;
        return _regeneratorRuntime.awrap(_appiumSupport.tempDir.path({
          prefix: ('appium_perf_' + profileName + '_' + Date.now()).replace(/\W/g, '_'),
          suffix: DEFAULT_EXT
        }));

      case 25:
        localPath = context$1$0.sent;
        args = ['-w', this.opts.device.udid, '-t', profileName, '-D', localPath, '-l', timeout];

        if (!pid) {
          context$1$0.next = 36;
          break;
        }

        if (!(('' + pid).toLowerCase() === 'current')) {
          context$1$0.next = 35;
          break;
        }

        context$1$0.next = 31;
        return _regeneratorRuntime.awrap(this.proxyCommand('/wda/activeAppInfo', 'GET'));

      case 31:
        appInfo = context$1$0.sent;

        args.push('-p', appInfo.pid);
        context$1$0.next = 36;
        break;

      case 35:
        args.push('-p', pid);

      case 36:
        proc = new _teen_process.SubProcess('instruments', args);

        _logger2['default'].info('Starting \'instruments\' with arguments: ' + args.join(' '));
        proc.on('exit', function (code) {
          var msg = 'instruments exited with code \'' + code + '\'';
          if (code) {
            _logger2['default'].warn(msg);
          } else {
            _logger2['default'].debug(msg);
          }
        });
        proc.on('output', function (stdout, stderr) {
          (stdout || stderr).split('\n').filter(function (x) {
            return x.length;
          }).map(function (x) {
            return _logger2['default'].debug('[instruments] ' + x);
          });
        });

        context$1$0.next = 42;
        return _regeneratorRuntime.awrap(proc.start(0));

      case 42:
        context$1$0.prev = 42;
        context$1$0.next = 45;
        return _regeneratorRuntime.awrap((0, _asyncbox.waitForCondition)(function callee$1$0() {
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(localPath));

              case 2:
                return context$2$0.abrupt('return', context$2$0.sent);

              case 3:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        }, {
          waitMs: START_TIMEOUT_MS,
          intervalMs: 500
        }));

      case 45:
        context$1$0.next = 57;
        break;

      case 47:
        context$1$0.prev = 47;
        context$1$0.t0 = context$1$0['catch'](42);
        context$1$0.prev = 49;
        context$1$0.next = 52;
        return _regeneratorRuntime.awrap(proc.stop('SIGKILL'));

      case 52:
        context$1$0.next = 56;
        break;

      case 54:
        context$1$0.prev = 54;
        context$1$0.t1 = context$1$0['catch'](49);

      case 56:
        _logger2['default'].errorAndThrow('Cannot start performance monitoring for \'' + profileName + '\' profile in ' + START_TIMEOUT_MS + 'ms. ' + 'Make sure you can execute it manually.');

      case 57:
        RECORDERS_CACHE[profileName] = _Object$assign2({}, RECORDERS_CACHE[profileName] || {}, _defineProperty({}, this.opts.device.udid, { proc: proc, localPath: localPath }));

      case 58:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[42, 47], [49, 54]]);
};

/**
 * @typedef {Object} StopRecordingOptions
 *
 * @property {?string} remotePath - The path to the remote location, where the resulting zipped .trace file should be uploaded.
 *                                  The following protocols are supported: http/https, ftp.
 *                                  Null or empty string value (the default setting) means the content of resulting
 *                                  file should be zipped, encoded as Base64 and passed as the endpount response value.
 *                                  An exception will be thrown if the generated file is too big to
 *                                  fit into the available process memory.
 * @property {?string} user - The name of the user for the remote authentication. Only works if `remotePath` is provided.
 * @property {?string} pass - The password for the remote authentication. Only works if `remotePath` is provided.
 * @property {?string} method [PUT] - The http multipart upload method name. Only works if `remotePath` is provided.
 * @property {?string} profileName [Activity Monitor] - The name of an existing performance profile for which the recording has been made.
 */

/**
 * Stops performance profiling for the device under test.
 * The resulting file in .trace format can be either returned
 * directly as base64-encoded zip archive or uploaded to a remote location
 * (such files can be pretty large). Afterwards it is possible to unarchive and
 * open such file with Xcode Dev Tools.
 *
 * @param {?StopRecordingOptions} opts - The set of possible stop record options
 * @return {string} Either an empty string if the upload wqaas successful or base-64 encoded
 * content of zipped .trace file.
 * @throws {Error} If no performance recording with given profile name/device udid combination
 * has been started before or the resulting .trace file has not been generated properly.
 */
commands.mobileStopPerfRecord = function callee$0$0() {
  var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  var remotePath, user, pass, method, _opts$profileName2, profileName, runningRecorders, _runningRecorders$opts$device$udid2, proc, localPath, zipPath, zipArgs;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.relaxedSecurityEnabled && !process.env.CI && !this.isRealDevice()) {
          _logger2['default'].errorAndThrow('Appium server must have relaxed security flag set in order ' + 'for Simulator performance measurement to work');
        }

        remotePath = opts.remotePath;
        user = opts.user;
        pass = opts.pass;
        method = opts.method;
        _opts$profileName2 = opts.profileName;
        profileName = _opts$profileName2 === undefined ? DEFAULT_PROFILE_NAME : _opts$profileName2;
        runningRecorders = RECORDERS_CACHE[profileName];

        if (!_lodash2['default'].isPlainObject(runningRecorders) || !runningRecorders[this.opts.device.udid]) {
          _logger2['default'].errorAndThrow('There are no records for performance profile \'' + profileName + '\' ' + ('and device ' + this.opts.device.udid + '. ') + 'Have you started the profiling before?');
        }

        _runningRecorders$opts$device$udid2 = runningRecorders[this.opts.device.udid];
        proc = _runningRecorders$opts$device$udid2.proc;
        localPath = _runningRecorders$opts$device$udid2.localPath;
        context$1$0.next = 14;
        return _regeneratorRuntime.awrap(finishPerfRecord(proc, true));

      case 14:
        context$1$0.next = 16;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(localPath));

      case 16:
        if (context$1$0.sent) {
          context$1$0.next = 18;
          break;
        }

        _logger2['default'].errorAndThrow('There is no .trace file found for performance profile \'' + profileName + '\' ' + ('and device ' + this.opts.device.udid + '. ') + 'Make sure the profile is supported on this device. ' + 'You can use \'instruments -s\' command to see the list of all available profiles.');

      case 18:
        zipPath = localPath + '.zip';
        zipArgs = ['-9', '-r', zipPath, _path2['default'].basename(localPath)];

        _logger2['default'].info('Found perf trace record \'' + localPath + '\'. Compressing it with \'zip ' + zipArgs.join(' ') + '\'');
        context$1$0.prev = 21;
        context$1$0.next = 24;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('zip', zipArgs, {
          cwd: _path2['default'].dirname(localPath)
        }));

      case 24:
        context$1$0.next = 26;
        return _regeneratorRuntime.awrap(uploadTrace(zipPath, remotePath, { user: user, pass: pass, method: method }));

      case 26:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 27:
        context$1$0.prev = 27;

        delete runningRecorders[this.opts.device.udid];
        context$1$0.next = 31;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(localPath));

      case 31:
        if (!context$1$0.sent) {
          context$1$0.next = 34;
          break;
        }

        context$1$0.next = 34;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(localPath));

      case 34:
        return context$1$0.finish(27);

      case 35:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[21,, 27, 35]]);
};

exports.commands = commands;
exports['default'] = commands;

// Cleanup the process if it is already running
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9wZXJmb3JtYW5jZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztzQkFBYyxRQUFROzs7O29CQUNMLE1BQU07Ozs7NkJBQ0ssZ0JBQWdCOzs0QkFDWCxjQUFjOztzQkFDL0IsV0FBVzs7OztxQkFDVSxVQUFVOzt3QkFDZCxVQUFVOztBQUczQyxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7O0FBRWxCLElBQU0sZUFBZSxHQUFHLEVBQUUsQ0FBQztBQUMzQixJQUFNLGtCQUFrQixHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDO0FBQ3pDLElBQU0sZUFBZSxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDO0FBQ3RDLElBQU0sZ0JBQWdCLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQztBQUNuQyxJQUFNLG9CQUFvQixHQUFFLGtCQUFrQixDQUFDO0FBQy9DLElBQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQzs7QUFHN0IsU0FBZSxnQkFBZ0IsQ0FBRSxJQUFJO01BQUUsY0FBYyx5REFBRyxJQUFJOzs7O1lBQ3JELElBQUksQ0FBQyxTQUFTOzs7Ozs7OzthQUdmLGNBQWM7Ozs7O0FBQ2hCLDRCQUFJLEtBQUsscURBQXFELENBQUM7O3lDQUNsRCxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxlQUFlLENBQUM7Ozs7OztBQUVuRCw0QkFBSSxLQUFLLHNEQUFzRCxDQUFDOzt5Q0FDMUQsSUFBSSxDQUFDLElBQUksRUFBRTs7Ozs7OztDQUNsQjs7QUFFRCxTQUFlLFdBQVcsQ0FBRSxTQUFTO01BQUUsVUFBVSx5REFBRyxJQUFJO01BQUUsYUFBYSx5REFBRyxFQUFFOzs7Ozs7eUNBRTNELGlDQUFxQixTQUFTLEVBQUUsVUFBVSxFQUFFLGFBQWEsQ0FBQzs7Ozs7Ozs7eUNBRWpFLGtCQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUM7Ozs7Ozs7Ozs7Q0FFN0I7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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REFDYyxzRkFDNEIsQ0FBQyxDQUFDOzs7QUFHakcsZUFBTyxHQUFNLFNBQVM7QUFDdEIsZUFBTyxHQUFHLENBQ2QsSUFBSSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQ25CLGtCQUFLLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FDekI7O0FBQ0QsNEJBQUksSUFBSSxnQ0FBNkIsU0FBUyxzQ0FBK0IsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBSSxDQUFDOzs7eUNBRTNGLHdCQUFLLEtBQUssRUFBRSxPQUFPLEVBQUU7QUFDekIsYUFBRyxFQUFFLGtCQUFLLE9BQU8sQ0FBQyxTQUFTLENBQUM7U0FDN0IsQ0FBQzs7Ozt5Q0FDVyxXQUFXLENBQUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxFQUFDLElBQUksRUFBSixJQUFJLEVBQUUsSUFBSSxFQUFKLElBQUksRUFBRSxNQUFNLEVBQU4sTUFBTSxFQUFDLENBQUM7Ozs7Ozs7O0FBRW5FLGVBQU8sZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7O3lDQUNyQyxrQkFBRyxNQUFNLENBQUMsU0FBUyxDQUFDOzs7Ozs7Ozs7eUNBQ3RCLGtCQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUM7Ozs7Ozs7Ozs7Q0FHL0IsQ0FBQzs7UUFHTyxRQUFRLEdBQVIsUUFBUTtxQkFDRixRQUFRIiwiZmlsZSI6ImxpYi9jb21tYW5kcy9wZXJmb3JtYW5jZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IGZzLCB0ZW1wRGlyIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuaW1wb3J0IHsgU3ViUHJvY2VzcywgZXhlYyB9IGZyb20gJ3RlZW5fcHJvY2Vzcyc7XG5pbXBvcnQgbG9nIGZyb20gJy4uL2xvZ2dlcic7XG5pbXBvcnQgeyBlbmNvZGVCYXNlNjRPclVwbG9hZCB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IHdhaXRGb3JDb25kaXRpb24gfSBmcm9tICdhc3luY2JveCc7XG5cblxubGV0IGNvbW1hbmRzID0ge307XG5cbmNvbnN0IFJFQ09SREVSU19DQUNIRSA9IHt9O1xuY29uc3QgREVGQVVMVF9USU1FT1VUX01TID0gNSAqIDYwICogMTAwMDtcbmNvbnN0IFNUT1BfVElNRU9VVF9NUyA9IDMgKiA2MCAqIDEwMDA7XG5jb25zdCBTVEFSVF9USU1FT1VUX01TID0gMTUgKiAxMDAwO1xuY29uc3QgREVGQVVMVF9QUk9GSUxFX05BTUU9ICdBY3Rpdml0eSBNb25pdG9yJztcbmNvbnN0IERFRkFVTFRfRVhUID0gJy50cmFjZSc7XG5cblxuYXN5bmMgZnVuY3Rpb24gZmluaXNoUGVyZlJlY29yZCAocHJvYywgc3RvcEdyYWNlZnVsbHkgPSB0cnVlKSB7XG4gIGlmICghcHJvYy5pc1J1bm5pbmcpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHN0b3BHcmFjZWZ1bGx5KSB7XG4gICAgbG9nLmRlYnVnKGBTZW5kaW5nIFNJR0lOVCB0byB0aGUgcnVubmluZyBpbnN0cnVtZW50cyBwcm9jZXNzYCk7XG4gICAgcmV0dXJuIGF3YWl0IHByb2Muc3RvcCgnU0lHSU5UJywgU1RPUF9USU1FT1VUX01TKTtcbiAgfVxuICBsb2cuZGVidWcoYFNlbmRpbmcgU0lHVEVSTSB0byB0aGUgcnVubmluZyBpbnN0cnVtZW50cyBwcm9jZXNzYCk7XG4gIGF3YWl0IHByb2Muc3RvcCgpO1xufVxuXG5hc3luYyBmdW5jdGlvbiB1cGxvYWRUcmFjZSAobG9jYWxGaWxlLCByZW1vdGVQYXRoID0gbnVsbCwgdXBsb2FkT3B0aW9ucyA9IHt9KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGF3YWl0IGVuY29kZUJhc2U2NE9yVXBsb2FkKGxvY2FsRmlsZSwgcmVtb3RlUGF0aCwgdXBsb2FkT3B0aW9ucyk7XG4gIH0gZmluYWxseSB7XG4gICAgYXdhaXQgZnMucmltcmFmKGxvY2FsRmlsZSk7XG4gIH1cbn1cblxuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFN0YXJ0UGVyZlJlY29yZE9wdGlvbnNcbiAqXG4gKiBAcHJvcGVydHkgez9udW1iZXJ8c3RyaW5nfSB0aW1lb3V0IFszMDAwMDBdIC0gVGhlIG1heGltdW0gY291bnQgb2YgbWlsbGlzZWNvbmRzIHRvIHJlY29yZCB0aGUgcHJvZmlsaW5nIGluZm9ybWF0aW9uLlxuICogQHByb3BlcnR5IHs/c3RyaW5nfSBwcm9maWxlTmFtZSBbQWN0aXZpdHkgTW9uaXRvcl0gLSBUaGUgbmFtZSBvZiBleGlzdGluZyBwZXJmb3JtYW5jZSBwcm9maWxlIHRvIGFwcGx5LlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFeGVjdXRlIGBpbnN0cnVtZW50cyAtc2AgdG8gc2hvdyB0aGUgbGlzdCBvZiBhdmFpbGFibGUgcHJvZmlsZXMuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5vdGUsIHRoYXQgbm90IGFsbCBwcm9maWxlcyBhcmUgc3VwcG9ydGVkIG9uIG1vYmlsZSBkZXZpY2VzLlxuICogQHByb3BlcnR5IHs/c3RyaW5nfG51bWJlcn0gcGlkIC0gVGhlIElEIG9mIHRoZSBwcm9jZXNzIHRvIG1lYXNzdXJlIHRoZSBwZXJmb3JtYW5jZSBmb3IuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTZXQgaXQgdG8gYGN1cnJlbnRgIGluIG9yZGVyIHRvIG1lYXNzdXJlIHRoZSBwZXJmb3JtYW5jZSBvZlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHByb2Nlc3MsIHdoaWNoIGJlbG9uZ3MgdG8gdGhlIGN1cnJlbnRseSBhY3RpdmUgYXBwbGljYXRpb24uXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBbGwgcHJvY2Vzc2VzIHJ1bm5pbmcgb24gdGhlIGRldmljZSBhcmUgbWVhc3N1cmVkIGlmXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaWQgaXMgdW5zZXQgKHRoZSBkZWZhdWx0IHNldHRpbmcpLlxuICovXG5cbi8qKlxuICogU3RhcnRzIHBlcmZvcm1hbmNlIHByb2ZpbGluZyBmb3IgdGhlIGRldmljZSB1bmRlciB0ZXN0LlxuICogVGhlIGBpbnN0cnVtZW50c2AgZGV2ZWxvcGVyIHV0aWxpdHkgaXMgdXNlZCBmb3IgdGhpcyBwdXJwb3NlIHVuZGVyIHRoZSBob29kLlxuICogSXQgaXMgcG9zc2libGUgdG8gcmVjb3JkIG11bHRpcGxlIHByb2ZpbGVzIGF0IHRoZSBzYW1lIHRpbWUuXG4gKiBSZWFkIGh0dHBzOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9saWJyYXJ5L2NvbnRlbnQvZG9jdW1lbnRhdGlvbi9EZXZlbG9wZXJUb29scy9Db25jZXB0dWFsL0luc3RydW1lbnRzVXNlckd1aWRlL1JlY29yZGluZyxQYXVzaW5nLGFuZFN0b3BwaW5nVHJhY2VzLmh0bWxcbiAqIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogQHBhcmFtIHs/U3RhcnRQZXJmUmVjb3JkT3B0aW9uc30gb3B0cyAtIFRoZSBzZXQgb2YgcG9zc2libGUgc3RhcnQgcmVjb3JkIG9wdGlvbnNcbiAqL1xuY29tbWFuZHMubW9iaWxlU3RhcnRQZXJmUmVjb3JkID0gYXN5bmMgZnVuY3Rpb24gKG9wdHMgPSB7fSkge1xuICBpZiAoIXRoaXMucmVsYXhlZFNlY3VyaXR5RW5hYmxlZCAmJiAhcHJvY2Vzcy5lbnYuQ0kgJiYgIXRoaXMuaXNSZWFsRGV2aWNlKCkpIHtcbiAgICBsb2cuZXJyb3JBbmRUaHJvdyhgQXBwaXVtIHNlcnZlciBtdXN0IGhhdmUgcmVsYXhlZCBzZWN1cml0eSBmbGFnIHNldCBpbiBvcmRlciBgICtcbiAgICAgICAgICAgICAgICAgICAgICBgZm9yIFNpbXVsYXRvciBwZXJmb3JtYW5jZSBtZWFzdXJlbWVudCB0byB3b3JrYCk7XG4gIH1cblxuICBjb25zdCB7dGltZW91dD1ERUZBVUxUX1RJTUVPVVRfTVMsIHByb2ZpbGVOYW1lPURFRkFVTFRfUFJPRklMRV9OQU1FLCBwaWR9ID0gb3B0cztcblxuICAvLyBDbGVhbnVwIHRoZSBwcm9jZXNzIGlmIGl0IGlzIGFscmVhZHkgcnVubmluZ1xuICBjb25zdCBydW5uaW5nUmVjb3JkZXJzID0gUkVDT1JERVJTX0NBQ0hFW3Byb2ZpbGVOYW1lXTtcbiAgaWYgKF8uaXNQbGFpbk9iamVjdChydW5uaW5nUmVjb3JkZXJzKSAmJiBydW5uaW5nUmVjb3JkZXJzW3RoaXMub3B0cy5kZXZpY2UudWRpZF0pIHtcbiAgICBjb25zdCB7cHJvYywgbG9jYWxQYXRofSA9IHJ1bm5pbmdSZWNvcmRlcnNbdGhpcy5vcHRzLmRldmljZS51ZGlkXTtcbiAgICBhd2FpdCBmaW5pc2hQZXJmUmVjb3JkKHByb2MsIGZhbHNlKTtcbiAgICBpZiAoYXdhaXQgZnMuZXhpc3RzKGxvY2FsUGF0aCkpIHtcbiAgICAgIGF3YWl0IGZzLnJpbXJhZihsb2NhbFBhdGgpO1xuICAgIH1cbiAgICBkZWxldGUgcnVubmluZ1JlY29yZGVyc1t0aGlzLm9wdHMuZGV2aWNlLnVkaWRdO1xuICB9XG5cbiAgaWYgKCFhd2FpdCBmcy53aGljaCgnaW5zdHJ1bWVudHMnKSkge1xuICAgIGxvZy5lcnJvckFuZFRocm93KGBDYW5ub3Qgc3RhcnQgcGVyZm9ybWFuY2UgcmVjb3JkaW5nLCBiZWNhdXNlICdpbnN0cnVtZW50cycgYCArXG4gICAgICAgICAgICAgICAgICAgICAgYHRvb2wgY2Fubm90IGJlIGZvdW5kIGluIFBBVEguIEFyZSBYY29kZSBkZXZlbG9wbWVudCB0b29scyBpbnN0YWxsZWQ/YCk7XG4gIH1cblxuICBjb25zdCBsb2NhbFBhdGggPSBhd2FpdCB0ZW1wRGlyLnBhdGgoe1xuICAgIHByZWZpeDogYGFwcGl1bV9wZXJmXyR7cHJvZmlsZU5hbWV9XyR7RGF0ZS5ub3coKX1gLnJlcGxhY2UoL1xcVy9nLCAnXycpLFxuICAgIHN1ZmZpeDogREVGQVVMVF9FWFQsXG4gIH0pO1xuICBjb25zdCBhcmdzID0gW1xuICAgICctdycsIHRoaXMub3B0cy5kZXZpY2UudWRpZCxcbiAgICAnLXQnLCBwcm9maWxlTmFtZSxcbiAgICAnLUQnLCBsb2NhbFBhdGgsXG4gICAgJy1sJywgdGltZW91dCxcbiAgXTtcbiAgaWYgKHBpZCkge1xuICAgIGlmIChgJHtwaWR9YC50b0xvd2VyQ2FzZSgpID09PSAnY3VycmVudCcpIHtcbiAgICAgIGNvbnN0IGFwcEluZm8gPSBhd2FpdCB0aGlzLnByb3h5Q29tbWFuZCgnL3dkYS9hY3RpdmVBcHBJbmZvJywgJ0dFVCcpO1xuICAgICAgYXJncy5wdXNoKCctcCcsIGFwcEluZm8ucGlkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXJncy5wdXNoKCctcCcsIHBpZCk7XG4gICAgfVxuICB9XG4gIGNvbnN0IHByb2MgPSBuZXcgU3ViUHJvY2VzcygnaW5zdHJ1bWVudHMnLCBhcmdzKTtcbiAgbG9nLmluZm8oYFN0YXJ0aW5nICdpbnN0cnVtZW50cycgd2l0aCBhcmd1bWVudHM6ICR7YXJncy5qb2luKCcgJyl9YCk7XG4gIHByb2Mub24oJ2V4aXQnLCAoY29kZSkgPT4ge1xuICAgIGNvbnN0IG1zZyA9IGBpbnN0cnVtZW50cyBleGl0ZWQgd2l0aCBjb2RlICcke2NvZGV9J2A7XG4gICAgaWYgKGNvZGUpIHtcbiAgICAgIGxvZy53YXJuKG1zZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZy5kZWJ1Zyhtc2cpO1xuICAgIH1cbiAgfSk7XG4gIHByb2Mub24oJ291dHB1dCcsIChzdGRvdXQsIHN0ZGVycikgPT4ge1xuICAgIChzdGRvdXQgfHwgc3RkZXJyKS5zcGxpdCgnXFxuJylcbiAgICAgIC5maWx0ZXIoeCA9PiB4Lmxlbmd0aClcbiAgICAgIC5tYXAoeCA9PiBsb2cuZGVidWcoYFtpbnN0cnVtZW50c10gJHt4fWApKTtcbiAgfSk7XG5cbiAgYXdhaXQgcHJvYy5zdGFydCgwKTtcbiAgdHJ5IHtcbiAgICBhd2FpdCB3YWl0Rm9yQ29uZGl0aW9uKGFzeW5jICgpID0+IGF3YWl0IGZzLmV4aXN0cyhsb2NhbFBhdGgpLCB7XG4gICAgICB3YWl0TXM6IFNUQVJUX1RJTUVPVVRfTVMsXG4gICAgICBpbnRlcnZhbE1zOiA1MDAsXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBwcm9jLnN0b3AoJ1NJR0tJTEwnKTtcbiAgICB9IGNhdGNoIChpZ24pIHt9XG4gICAgbG9nLmVycm9yQW5kVGhyb3coYENhbm5vdCBzdGFydCBwZXJmb3JtYW5jZSBtb25pdG9yaW5nIGZvciAnJHtwcm9maWxlTmFtZX0nIHByb2ZpbGUgaW4gJHtTVEFSVF9USU1FT1VUX01TfW1zLiBgICtcbiAgICAgICAgICAgICAgICAgICAgICBgTWFrZSBzdXJlIHlvdSBjYW4gZXhlY3V0ZSBpdCBtYW51YWxseS5gKTtcbiAgfVxuICBSRUNPUkRFUlNfQ0FDSEVbcHJvZmlsZU5hbWVdID0gT2JqZWN0LmFzc2lnbih7fSwgKFJFQ09SREVSU19DQUNIRVtwcm9maWxlTmFtZV0gfHwge30pLCB7XG4gICAgW3RoaXMub3B0cy5kZXZpY2UudWRpZF06IHtwcm9jLCBsb2NhbFBhdGh9LFxuICB9KTtcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gU3RvcFJlY29yZGluZ09wdGlvbnNcbiAqXG4gKiBAcHJvcGVydHkgez9zdHJpbmd9IHJlbW90ZVBhdGggLSBUaGUgcGF0aCB0byB0aGUgcmVtb3RlIGxvY2F0aW9uLCB3aGVyZSB0aGUgcmVzdWx0aW5nIHppcHBlZCAudHJhY2UgZmlsZSBzaG91bGQgYmUgdXBsb2FkZWQuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaGUgZm9sbG93aW5nIHByb3RvY29scyBhcmUgc3VwcG9ydGVkOiBodHRwL2h0dHBzLCBmdHAuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOdWxsIG9yIGVtcHR5IHN0cmluZyB2YWx1ZSAodGhlIGRlZmF1bHQgc2V0dGluZykgbWVhbnMgdGhlIGNvbnRlbnQgb2YgcmVzdWx0aW5nXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlIHNob3VsZCBiZSB6aXBwZWQsIGVuY29kZWQgYXMgQmFzZTY0IGFuZCBwYXNzZWQgYXMgdGhlIGVuZHBvdW50IHJlc3BvbnNlIHZhbHVlLlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQW4gZXhjZXB0aW9uIHdpbGwgYmUgdGhyb3duIGlmIHRoZSBnZW5lcmF0ZWQgZmlsZSBpcyB0b28gYmlnIHRvXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXQgaW50byB0aGUgYXZhaWxhYmxlIHByb2Nlc3MgbWVtb3J5LlxuICogQHByb3BlcnR5IHs/c3RyaW5nfSB1c2VyIC0gVGhlIG5hbWUgb2YgdGhlIHVzZXIgZm9yIHRoZSByZW1vdGUgYXV0aGVudGljYXRpb24uIE9ubHkgd29ya3MgaWYgYHJlbW90ZVBhdGhgIGlzIHByb3ZpZGVkLlxuICogQHByb3BlcnR5IHs/c3RyaW5nfSBwYXNzIC0gVGhlIHBhc3N3b3JkIGZvciB0aGUgcmVtb3RlIGF1dGhlbnRpY2F0aW9uLiBPbmx5IHdvcmtzIGlmIGByZW1vdGVQYXRoYCBpcyBwcm92aWRlZC5cbiAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gbWV0aG9kIFtQVVRdIC0gVGhlIGh0dHAgbXVsdGlwYXJ0IHVwbG9hZCBtZXRob2QgbmFtZS4gT25seSB3b3JrcyBpZiBgcmVtb3RlUGF0aGAgaXMgcHJvdmlkZWQuXG4gKiBAcHJvcGVydHkgez9zdHJpbmd9IHByb2ZpbGVOYW1lIFtBY3Rpdml0eSBNb25pdG9yXSAtIFRoZSBuYW1lIG9mIGFuIGV4aXN0aW5nIHBlcmZvcm1hbmNlIHByb2ZpbGUgZm9yIHdoaWNoIHRoZSByZWNvcmRpbmcgaGFzIGJlZW4gbWFkZS5cbiAqL1xuXG4vKipcbiAqIFN0b3BzIHBlcmZvcm1hbmNlIHByb2ZpbGluZyBmb3IgdGhlIGRldmljZSB1bmRlciB0ZXN0LlxuICogVGhlIHJlc3VsdGluZyBmaWxlIGluIC50cmFjZSBmb3JtYXQgY2FuIGJlIGVpdGhlciByZXR1cm5lZFxuICogZGlyZWN0bHkgYXMgYmFzZTY0LWVuY29kZWQgemlwIGFyY2hpdmUgb3IgdXBsb2FkZWQgdG8gYSByZW1vdGUgbG9jYXRpb25cbiAqIChzdWNoIGZpbGVzIGNhbiBiZSBwcmV0dHkgbGFyZ2UpLiBBZnRlcndhcmRzIGl0IGlzIHBvc3NpYmxlIHRvIHVuYXJjaGl2ZSBhbmRcbiAqIG9wZW4gc3VjaCBmaWxlIHdpdGggWGNvZGUgRGV2IFRvb2xzLlxuICpcbiAqIEBwYXJhbSB7P1N0b3BSZWNvcmRpbmdPcHRpb25zfSBvcHRzIC0gVGhlIHNldCBvZiBwb3NzaWJsZSBzdG9wIHJlY29yZCBvcHRpb25zXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEVpdGhlciBhbiBlbXB0eSBzdHJpbmcgaWYgdGhlIHVwbG9hZCB3cWFhcyBzdWNjZXNzZnVsIG9yIGJhc2UtNjQgZW5jb2RlZFxuICogY29udGVudCBvZiB6aXBwZWQgLnRyYWNlIGZpbGUuXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgbm8gcGVyZm9ybWFuY2UgcmVjb3JkaW5nIHdpdGggZ2l2ZW4gcHJvZmlsZSBuYW1lL2RldmljZSB1ZGlkIGNvbWJpbmF0aW9uXG4gKiBoYXMgYmVlbiBzdGFydGVkIGJlZm9yZSBvciB0aGUgcmVzdWx0aW5nIC50cmFjZSBmaWxlIGhhcyBub3QgYmVlbiBnZW5lcmF0ZWQgcHJvcGVybHkuXG4gKi9cbmNvbW1hbmRzLm1vYmlsZVN0b3BQZXJmUmVjb3JkID0gYXN5bmMgZnVuY3Rpb24gKG9wdHMgPSB7fSkge1xuICBpZiAoIXRoaXMucmVsYXhlZFNlY3VyaXR5RW5hYmxlZCAmJiAhcHJvY2Vzcy5lbnYuQ0kgJiYgIXRoaXMuaXNSZWFsRGV2aWNlKCkpIHtcbiAgICBsb2cuZXJyb3JBbmRUaHJvdyhgQXBwaXVtIHNlcnZlciBtdXN0IGhhdmUgcmVsYXhlZCBzZWN1cml0eSBmbGFnIHNldCBpbiBvcmRlciBgICtcbiAgICAgICAgICAgICAgICAgICAgICBgZm9yIFNpbXVsYXRvciBwZXJmb3JtYW5jZSBtZWFzdXJlbWVudCB0byB3b3JrYCk7XG4gIH1cblxuICBjb25zdCB7cmVtb3RlUGF0aCwgdXNlciwgcGFzcywgbWV0aG9kLCBwcm9maWxlTmFtZT1ERUZBVUxUX1BST0ZJTEVfTkFNRX0gPSBvcHRzO1xuICBjb25zdCBydW5uaW5nUmVjb3JkZXJzID0gUkVDT1JERVJTX0NBQ0hFW3Byb2ZpbGVOYW1lXTtcbiAgaWYgKCFfLmlzUGxhaW5PYmplY3QocnVubmluZ1JlY29yZGVycykgfHwgIXJ1bm5pbmdSZWNvcmRlcnNbdGhpcy5vcHRzLmRldmljZS51ZGlkXSkge1xuICAgIGxvZy5lcnJvckFuZFRocm93KGBUaGVyZSBhcmUgbm8gcmVjb3JkcyBmb3IgcGVyZm9ybWFuY2UgcHJvZmlsZSAnJHtwcm9maWxlTmFtZX0nIGAgK1xuICAgICAgICAgICAgICAgICAgICAgIGBhbmQgZGV2aWNlICR7dGhpcy5vcHRzLmRldmljZS51ZGlkfS4gYCArXG4gICAgICAgICAgICAgICAgICAgICAgYEhhdmUgeW91IHN0YXJ0ZWQgdGhlIHByb2ZpbGluZyBiZWZvcmU/YCk7XG4gIH1cblxuICBjb25zdCB7cHJvYywgbG9jYWxQYXRofSA9IHJ1bm5pbmdSZWNvcmRlcnNbdGhpcy5vcHRzLmRldmljZS51ZGlkXTtcbiAgYXdhaXQgZmluaXNoUGVyZlJlY29yZChwcm9jLCB0cnVlKTtcbiAgaWYgKCFhd2FpdCBmcy5leGlzdHMobG9jYWxQYXRoKSkge1xuICAgIGxvZy5lcnJvckFuZFRocm93KGBUaGVyZSBpcyBubyAudHJhY2UgZmlsZSBmb3VuZCBmb3IgcGVyZm9ybWFuY2UgcHJvZmlsZSAnJHtwcm9maWxlTmFtZX0nIGAgK1xuICAgICAgICAgICAgICAgICAgICAgIGBhbmQgZGV2aWNlICR7dGhpcy5vcHRzLmRldmljZS51ZGlkfS4gYCArXG4gICAgICAgICAgICAgICAgICAgICAgYE1ha2Ugc3VyZSB0aGUgcHJvZmlsZSBpcyBzdXBwb3J0ZWQgb24gdGhpcyBkZXZpY2UuIGAgK1xuICAgICAgICAgICAgICAgICAgICAgIGBZb3UgY2FuIHVzZSAnaW5zdHJ1bWVudHMgLXMnIGNvbW1hbmQgdG8gc2VlIHRoZSBsaXN0IG9mIGFsbCBhdmFpbGFibGUgcHJvZmlsZXMuYCk7XG4gIH1cblxuICBjb25zdCB6aXBQYXRoID0gYCR7bG9jYWxQYXRofS56aXBgO1xuICBjb25zdCB6aXBBcmdzID0gW1xuICAgICctOScsICctcicsIHppcFBhdGgsXG4gICAgcGF0aC5iYXNlbmFtZShsb2NhbFBhdGgpLFxuICBdO1xuICBsb2cuaW5mbyhgRm91bmQgcGVyZiB0cmFjZSByZWNvcmQgJyR7bG9jYWxQYXRofScuIENvbXByZXNzaW5nIGl0IHdpdGggJ3ppcCAke3ppcEFyZ3Muam9pbignICcpfSdgKTtcbiAgdHJ5IHtcbiAgICBhd2FpdCBleGVjKCd6aXAnLCB6aXBBcmdzLCB7XG4gICAgICBjd2Q6IHBhdGguZGlybmFtZShsb2NhbFBhdGgpLFxuICAgIH0pO1xuICAgIHJldHVybiBhd2FpdCB1cGxvYWRUcmFjZSh6aXBQYXRoLCByZW1vdGVQYXRoLCB7dXNlciwgcGFzcywgbWV0aG9kfSk7XG4gIH0gZmluYWxseSB7XG4gICAgZGVsZXRlIHJ1bm5pbmdSZWNvcmRlcnNbdGhpcy5vcHRzLmRldmljZS51ZGlkXTtcbiAgICBpZiAoYXdhaXQgZnMuZXhpc3RzKGxvY2FsUGF0aCkpIHtcbiAgICAgIGF3YWl0IGZzLnJpbXJhZihsb2NhbFBhdGgpO1xuICAgIH1cbiAgfVxufTtcblxuXG5leHBvcnQgeyBjb21tYW5kcyB9O1xuZXhwb3J0IGRlZmF1bHQgY29tbWFuZHM7XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
