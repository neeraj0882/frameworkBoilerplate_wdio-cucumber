'use strict';

var _toConsumableArray = require('babel-runtime/helpers/to-consumable-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _asyncbox = require('asyncbox');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _nodeSimctl = require('node-simctl');

var _teen_process = require('teen_process');

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var _appiumSupport = require('appium-support');

var commands = {};

function getScreenshotWithIdevicelib(udid, isLandscape) {
  var pathToScreenshotTiff, pathToResultPng, sipsArgs;
  return _regeneratorRuntime.async(function getScreenshotWithIdevicelib$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_appiumSupport.tempDir.path({ prefix: 'screenshot-' + udid, suffix: '.tiff' }));

      case 2:
        pathToScreenshotTiff = context$1$0.sent;
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(pathToScreenshotTiff));

      case 5:
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(_appiumSupport.tempDir.path({ prefix: 'screenshot-' + udid, suffix: '.png' }));

      case 7:
        pathToResultPng = context$1$0.sent;
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(pathToResultPng));

      case 10:
        context$1$0.prev = 10;
        context$1$0.prev = 11;
        context$1$0.next = 14;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('idevicescreenshot', ['-u', udid, pathToScreenshotTiff]));

      case 14:
        context$1$0.next = 19;
        break;

      case 16:
        context$1$0.prev = 16;
        context$1$0.t0 = context$1$0['catch'](11);
        throw new Error('Cannot take a screenshot from the device \'' + udid + '\' using ' + ('idevicescreenshot. Original error: ' + context$1$0.t0.message));

      case 19:
        sipsArgs = ['-s', 'format', 'png', pathToScreenshotTiff, '--out', pathToResultPng];

        if (isLandscape) {
          sipsArgs = ['-r', '-90'].concat(_toConsumableArray(sipsArgs));
        }
        context$1$0.prev = 21;
        context$1$0.next = 24;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('sips', sipsArgs));

      case 24:
        context$1$0.next = 29;
        break;

      case 26:
        context$1$0.prev = 26;
        context$1$0.t1 = context$1$0['catch'](21);
        throw new Error('Cannot convert a screenshot from TIFF to PNG using sips tool. ' + ('Original error: ' + context$1$0.t1.message));

      case 29:
        context$1$0.next = 31;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(pathToResultPng));

      case 31:
        if (context$1$0.sent) {
          context$1$0.next = 33;
          break;
        }

        throw new Error('Cannot convert a screenshot from TIFF to PNG. The conversion ' + ('result does not exist at \'' + pathToResultPng + '\''));

      case 33:
        context$1$0.next = 35;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(pathToResultPng));

      case 35:
        return context$1$0.abrupt('return', context$1$0.sent.toString('base64'));

      case 36:
        context$1$0.prev = 36;
        context$1$0.next = 39;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(pathToScreenshotTiff));

      case 39:
        context$1$0.next = 41;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(pathToResultPng));

      case 41:
        return context$1$0.finish(36);

      case 42:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[10,, 36, 42], [11, 16], [21, 26]]);
}

function isIdevicescreenshotAvailable() {
  return _regeneratorRuntime.async(function isIdevicescreenshotAvailable$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.which('idevicescreenshot'));

      case 2:
        return context$1$0.abrupt('return', !!context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

commands.getScreenshot = function callee$0$0() {
  var getScreenshotFromWDA, orientation;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        getScreenshotFromWDA = function getScreenshotFromWDA() {
          var data;
          return _regeneratorRuntime.async(function getScreenshotFromWDA$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(this.proxyCommand('/screenshot', 'GET'));

              case 2:
                data = context$2$0.sent;

                if (_lodash2['default'].isString(data)) {
                  context$2$0.next = 5;
                  break;
                }

                throw new Error('Unable to take screenshot. WDA returned \'' + JSON.stringify(data) + '\'');

              case 5:
                return context$2$0.abrupt('return', data);

              case 6:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        };

        context$1$0.prev = 1;

        _logger2['default'].debug('Taking screenshot with WDA');
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(getScreenshotFromWDA());

      case 5:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 8:
        context$1$0.prev = 8;
        context$1$0.t0 = context$1$0['catch'](1);

        _logger2['default'].warn('Error getting screenshot: ' + context$1$0.t0.message);

        if (!this.isSimulator()) {
          context$1$0.next = 17;
          break;
        }

        if (this.xcodeVersion.versionFloat < 8.1) {
          _logger2['default'].errorAndThrow('No command line screenshot ability with Xcode ' + (this.xcodeVersion.versionFloat + '. Please upgrade to ') + 'at least Xcode 8.1');
        }
        _logger2['default'].info('Falling back to \'simctl io screenshot\' API');
        context$1$0.next = 16;
        return _regeneratorRuntime.awrap((0, _nodeSimctl.getScreenshot)(this.opts.udid));

      case 16:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 17:
        context$1$0.prev = 17;
        context$1$0.next = 20;
        return _regeneratorRuntime.awrap(isIdevicescreenshotAvailable());

      case 20:
        if (!context$1$0.sent) {
          context$1$0.next = 28;
          break;
        }

        _logger2['default'].debug('Taking screenshot with \'idevicescreenshot\'');
        context$1$0.next = 24;
        return _regeneratorRuntime.awrap(this.proxyCommand('/orientation', 'GET'));

      case 24:
        orientation = context$1$0.sent;
        context$1$0.next = 27;
        return _regeneratorRuntime.awrap(getScreenshotWithIdevicelib(this.opts.udid, orientation === 'LANDSCAPE'));

      case 27:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 28:
        _logger2['default'].info('No \'idevicescreenshot\' program found. To use, install ' + 'using \'brew install --HEAD libimobiledevice\'');
        context$1$0.next = 34;
        break;

      case 31:
        context$1$0.prev = 31;
        context$1$0.t1 = context$1$0['catch'](17);

        _logger2['default'].warn('Error getting screenshot through \'idevicescreenshot\': ' + context$1$0.t1.message);

      case 34:

        // Retry for real devices only. Fail fast on Simulator if simctl does not work as expected
        _logger2['default'].debug('Retrying screenshot through WDA');
        context$1$0.next = 37;
        return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(2, 1000, getScreenshotFromWDA));

      case 37:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 38:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 8], [17, 31]]);
};

commands.getElementScreenshot = function callee$0$0(el) {
  var atomsElement, data;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        el = _appiumSupport.util.unwrapElement(el);

        if (!this.isWebContext()) {
          context$1$0.next = 6;
          break;
        }

        atomsElement = this.useAtomsElement(el);
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.executeAtom('getElementScreenshot', [atomsElement]));

      case 5:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 6:

        if (this.xcodeVersion.major < 9) {
          _logger2['default'].errorAndThrow('Element screenshots are only available since Xcode 9. ' + ('The current Xcode version is ' + this.xcodeVersion.major + '.' + this.xcodeVersion.minor));
        }
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(this.proxyCommand('/element/' + el + '/screenshot', 'GET'));

      case 9:
        data = context$1$0.sent;

        if (!_lodash2['default'].isString(data)) {
          _logger2['default'].errorAndThrow('Unable to take a screenshot of the element ' + el + '. WDA returned \'' + JSON.stringify(data) + '\'');
        }
        return context$1$0.abrupt('return', data);

      case 12:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getViewportScreenshot = function callee$0$0() {
  var statusBarHeight, screenshot, scale, windowSize, rect, newScreenshot;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.getStatusBarHeight());

      case 2:
        statusBarHeight = context$1$0.sent;
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.getScreenshot());

      case 5:
        screenshot = context$1$0.sent;

        if (!(statusBarHeight === 0)) {
          context$1$0.next = 8;
          break;
        }

        return context$1$0.abrupt('return', screenshot);

      case 8:
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(this.getDevicePixelRatio());

      case 10:
        scale = context$1$0.sent;

        // status bar height comes in unscaled, so scale it
        statusBarHeight = Math.round(statusBarHeight * scale);
        context$1$0.next = 14;
        return _regeneratorRuntime.awrap(this.getWindowSize());

      case 14:
        windowSize = context$1$0.sent;
        rect = {
          left: 0,
          top: statusBarHeight,
          width: windowSize.width * scale,
          height: windowSize.height * scale - statusBarHeight
        };
        context$1$0.next = 18;
        return _regeneratorRuntime.awrap(_appiumSupport.imageUtil.cropBase64Image(screenshot, rect));

      case 18:
        newScreenshot = context$1$0.sent;
        return context$1$0.abrupt('return', newScreenshot);

      case 20:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

exports['default'] = commands;
module.exports = exports['default'];

// The sips tool is only present on Mac OS

// all simulator scenarios are finished
// real device, so try idevicescreenshot if possible

// if we don't have a status bar, there's nothing to crop, so we can avoid
// extra calls and return straightaway
//# sourceMappingURL=data:application/json;charset=utf8;base64,
