'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _asyncbox = require('asyncbox');

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _appiumSupport = require('appium-support');

var _teen_process = require('teen_process');

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var _utils = require('../utils');

var commands = {};

var RETRY_PAUSE = 1000;
var MAX_RECORDING_TIME_SEC = 60 * 10;
var DEFAULT_RECORDING_TIME_SEC = 60 * 3;
var PROCESS_SHUTDOWN_TIMEOUT_SEC = 5;
var REAL_DEVICE_BINARY = 'xrecord';
var REAL_DEVICE_PGREP_PATTERN = function REAL_DEVICE_PGREP_PATTERN(udid) {
  return REAL_DEVICE_BINARY + '.*' + udid;
};
var SIMULATOR_BINARY = 'xcrun';
var SIMULATOR_PGREP_PATTERN = function SIMULATOR_PGREP_PATTERN(udid) {
  return 'simctl io ' + udid + ' recordVideo';
};
var DEFAULT_EXT = '.mp4';

function extractCurrentRecordingPath(pid) {
  var _ref, output, pattern, matches;

  return _regeneratorRuntime.async(function extractCurrentRecordingPath$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('ps', ['o', 'command', '-p', pid]));

      case 2:
        _ref = context$1$0.sent;
        output = _ref.output;

        _logger2['default'].debug('Got the following output from ps: ' + output);
        pattern = new RegExp(/[\s="'](\/.*\.mp4)/);
        matches = pattern.exec(output);
        return context$1$0.abrupt('return', _lodash2['default'].isEmpty(matches) ? null : _lodash2['default'].last(matches));

      case 8:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function finishScreenCapture(pid) {
  return _regeneratorRuntime.async(function finishScreenCapture$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('kill', ['-2', pid]));

      case 3:
        context$1$0.next = 8;
        break;

      case 5:
        context$1$0.prev = 5;
        context$1$0.t0 = context$1$0['catch'](0);
        return context$1$0.abrupt('return', true);

      case 8:
        context$1$0.prev = 8;
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap((0, _asyncbox.waitForCondition)(function callee$1$0() {
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.prev = 0;
                context$2$0.next = 3;
                return _regeneratorRuntime.awrap((0, _teen_process.exec)('kill', ['-0', pid]));

              case 3:
                context$2$0.next = 8;
                break;

              case 5:
                context$2$0.prev = 5;
                context$2$0.t0 = context$2$0['catch'](0);
                return context$2$0.abrupt('return', true);

              case 8:
                return context$2$0.abrupt('return', false);

              case 9:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this, [[0, 5]]);
        }, { waitMs: PROCESS_SHUTDOWN_TIMEOUT_SEC * 1000, intervalMs: 300 }));

      case 11:
        context$1$0.next = 16;
        break;

      case 13:
        context$1$0.prev = 13;
        context$1$0.t1 = context$1$0['catch'](8);
        return context$1$0.abrupt('return', false);

      case 16:
        return context$1$0.abrupt('return', true);

      case 17:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 5], [8, 13]]);
}

function uploadRecordedMedia(localFile) {
  var remotePath = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
  var uploadOptions = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
  return _regeneratorRuntime.async(function uploadRecordedMedia$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap((0, _utils.encodeBase64OrUpload)(localFile, remotePath, uploadOptions));

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 4:
        context$1$0.prev = 4;
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(localFile));

      case 7:
        return context$1$0.finish(4);

      case 8:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0,, 4, 8]]);
}

/**
 * @typedef {Object} StartRecordingOptions
 *
 * @property {?string} remotePath - The path to the remote location, where the resulting video should be uploaded.
 *                                  The following protocols are supported: http/https, ftp.
 *                                  Null or empty string value (the default setting) means the content of resulting
 *                                  file should be encoded as Base64 and passed as the endpount response value.
 *                                  An exception will be thrown if the generated media file is too big to
 *                                  fit into the available process memory.
 *                                  This option only has an effect if there is screen recording process in progreess
 *                                  and `forceRestart` parameter is not set to `true`.
 * @property {?string} user - The name of the user for the remote authentication. Only works if `remotePath` is provided.
 * @property {?string} pass - The password for the remote authentication. Only works if `remotePath` is provided.
 * @property {?string} method - The http multipart upload method name. The 'PUT' one is used by default.
 *                              Only works if `remotePath` is provided.
 * @property {?string} videoType - The format of the screen capture to be recorded.
 *                                 Available formats: "h264", "mp4" or "fmp4". Default is "mp4".
 *                                 Only works for Simulator.
 * @property {?string} videoQuality - The video encoding quality (low, medium, high, photo - defaults to medium).
 *                                    Only works for real devices.
 * @property {?boolean} forceRestart - Whether to try to catch and upload/return the currently running screen recording
 *                                     (`false`, the default setting) or ignore the result of it and start a new recording
 *                                     immediately.
 * @property {?string|number} timeLimit - The maximum recording time, in seconds.
 *                                        The default value is 180, the maximum value is 600 (10 minutes).
 */

/**
 * Record the display of devices running iOS Simulator since Xcode 8.3 or real devices since iOS 8
 * (xrecord utility is required: https://github.com/WPO-Foundation/xrecord).
 * It records screen activity to an MPEG-4 file. Audio is not recorded with the video file.
 * If screen recording has been already started then the command will stop it forcefully and start a new one.
 * The previously recorded video file will be deleted.
 *
 * @param {?StartRecordingOptions} options - The available options.
 * @returns {string} Base64-encoded content of the recorded media file if
 *                   any screen recording is currently running or an empty string.
 * @throws {Error} If screen recording has failed to start.
 */
commands.startRecordingScreen = function callee$0$0() {
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  var videoType, _options$timeLimit, timeLimit, _options$videoQuality, videoQuality, forceRestart, result, pgrepPattern, pid, localPath, binaryName, args;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this3 = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        videoType = options.videoType;
        _options$timeLimit = options.timeLimit;
        timeLimit = _options$timeLimit === undefined ? DEFAULT_RECORDING_TIME_SEC : _options$timeLimit;
        _options$videoQuality = options.videoQuality;
        videoQuality = _options$videoQuality === undefined ? 'medium' : _options$videoQuality;
        forceRestart = options.forceRestart;
        result = '';

        if (forceRestart) {
          context$1$0.next = 12;
          break;
        }

        _logger2['default'].info('Checking if there is/was a previous screen recording. ' + 'Set \'forceRestart\' option to \'true\' if you\'d like to skip this step.');
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(this.stopRecordingScreen(options));

      case 11:
        result = context$1$0.sent;

      case 12:
        pgrepPattern = this.isRealDevice() ? REAL_DEVICE_PGREP_PATTERN : SIMULATOR_PGREP_PATTERN;
        context$1$0.next = 15;
        return _regeneratorRuntime.awrap((0, _utils.getPidUsingPattern)(pgrepPattern(this.opts.device.udid)));

      case 15:
        pid = context$1$0.sent;

        if (_lodash2['default'].isEmpty(pid)) {
          context$1$0.next = 25;
          break;
        }

        context$1$0.prev = 17;
        context$1$0.next = 20;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('kill', [pid]));

      case 20:
        context$1$0.next = 25;
        break;

      case 22:
        context$1$0.prev = 22;
        context$1$0.t0 = context$1$0['catch'](17);

        _logger2['default'].errorAndThrow('Unable to stop screen recording process: ' + context$1$0.t0.message);

      case 25:
        if (_lodash2['default'].isEmpty(this._recentScreenRecordingPath)) {
          context$1$0.next = 29;
          break;
        }

        context$1$0.next = 28;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(this._recentScreenRecordingPath));

      case 28:
        this._recentScreenRecordingPath = null;

      case 29:
        context$1$0.next = 31;
        return _regeneratorRuntime.awrap(_appiumSupport.tempDir.path({
          prefix: 'appium_' + Math.random().toString(16).substring(2, 8),
          suffix: DEFAULT_EXT
        }));

      case 31:
        localPath = context$1$0.sent;
        binaryName = undefined;
        args = undefined;

        if (!this.isRealDevice()) {
          context$1$0.next = 45;
          break;
        }

        binaryName = REAL_DEVICE_BINARY;
        context$1$0.next = 38;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.which(binaryName));

      case 38:
        if (context$1$0.sent) {
          context$1$0.next = 40;
          break;
        }

        _logger2['default'].errorAndThrow('\'' + binaryName + '\' binary is not found in PATH. Make sure it is present on the system. ' + 'Check https://github.com/WPO-Foundation/xrecord for more details.');

      case 40:
        args = ['--quicktime', '--id', this.opts.device.udid, '--out', localPath, '--force'];
        if (_appiumSupport.util.hasValue(timeLimit)) {
          args.push('--time', '' + timeLimit);
        }
        if (_appiumSupport.util.hasValue(videoQuality)) {
          args.push('--quality', '' + videoQuality);
        }
        context$1$0.next = 49;
        break;

      case 45:
        binaryName = SIMULATOR_BINARY;
        args = ['simctl', 'io', this.opts.device.udid, 'recordVideo'];
        if (_appiumSupport.util.hasValue(videoType)) {
          args.push('--type', videoType);
        }
        args.push(localPath);

      case 49:
        context$1$0.next = 51;
        return _regeneratorRuntime.awrap(new _bluebird2['default'](function callee$1$0(resolve, reject) {
          var err, timeout;
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            var _this2 = this;

            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                err = null;
                timeout = Math.floor(parseFloat(timeLimit) * 1000);

                if (!(timeout > MAX_RECORDING_TIME_SEC * 1000 || timeout <= 0)) {
                  context$2$0.next = 4;
                  break;
                }

                return context$2$0.abrupt('return', reject(new Error('The timeLimit value must be in range (0, ' + MAX_RECORDING_TIME_SEC + '] seconds. ' + ('The value of ' + timeLimit + ' has been passed instead.'))));

              case 4:
                _logger2['default'].debug('Beginning screen recording with command: \'' + binaryName + ' ' + args.join(' ') + '\'' + ('Will timeout in ' + timeout / 1000 + ' s'));
                if (this.isRealDevice()) {
                  // xrecord has its owen timer, so we only use this one as a safety precaution
                  // although simctl has no built-in timer and we have to be precise in such case
                  timeout += PROCESS_SHUTDOWN_TIMEOUT_SEC * 1000 * 2;
                }
                // do not await here, as the call runs in the background and we check for its product
                (0, _teen_process.exec)(binaryName, args, { timeout: timeout, killSignal: 'SIGINT' })['catch'](function (e) {
                  err = e;
                });

                // there is the delay time to start recording the screen for real devices, so, wait until it is ready.
                // the ready condition is
                //   1. check the movie file is created
                //   2. check the screen capture has been started
                //
                // simctl keeps the file in an internal buffer instead and only creates it when the recording is done.

                if (!this.isRealDevice()) {
                  context$2$0.next = 16;
                  break;
                }

                context$2$0.prev = 8;
                context$2$0.next = 11;
                return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(10, RETRY_PAUSE, function callee$2$0() {
                  var _ref2, size;

                  return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                    while (1) switch (context$3$0.prev = context$3$0.next) {
                      case 0:
                        if (!err) {
                          context$3$0.next = 2;
                          break;
                        }

                        return context$3$0.abrupt('return');

                      case 2:
                        context$3$0.next = 4;
                        return _regeneratorRuntime.awrap(_appiumSupport.fs.stat(localPath));

                      case 4:
                        _ref2 = context$3$0.sent;
                        size = _ref2.size;

                        if (!(size <= 32)) {
                          context$3$0.next = 8;
                          break;
                        }

                        throw new Error('Remote file \'' + localPath + '\' found but it is still too small: ' + size + ' bytes');

                      case 8:
                      case 'end':
                        return context$3$0.stop();
                    }
                  }, null, _this2);
                }));

              case 11:
                context$2$0.next = 16;
                break;

              case 13:
                context$2$0.prev = 13;
                context$2$0.t0 = context$2$0['catch'](8);

                err = context$2$0.t0;

              case 16:
                if (!err) {
                  context$2$0.next = 19;
                  break;
                }

                _logger2['default'].error('Error recording screen: ' + err.message);
                return context$2$0.abrupt('return', reject(err));

              case 19:
                this._recentScreenRecordingPath = localPath;
                resolve(result);

              case 21:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this3, [[8, 13]]);
        }));

      case 51:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 52:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[17, 22]]);
};

/**
 * @typedef {Object} StopRecordingOptions
 *
 * @property {?string} remotePath - The path to the remote location, where the resulting video should be uploaded.
 *                                  The following protocols are supported: http/https, ftp.
 *                                  Null or empty string value (the default setting) means the content of resulting
 *                                  file should be encoded as Base64 and passed as the endpount response value.
 *                                  An exception will be thrown if the generated media file is too big to
 *                                  fit into the available process memory.
 * @property {?string} user - The name of the user for the remote authentication. Only works if `remotePath` is provided.
 * @property {?string} pass - The password for the remote authentication. Only works if `remotePath` is provided.
 * @property {?string} method - The http multipart upload method name. The 'PUT' one is used by default.
 *                              Only works if `remotePath` is provided.
 */

/**
 * Stop recording the screen. If no screen recording process is running then
 * the endpoint will try to get the recently recorded file.
 * If no previously recorded file is found and no active screen recording
 * processes are running then the method returns an empty string.
 *
 * @param {?StopRecordingOptions} options - The available options.
 * @returns {string} Base64-encoded content of the recorded media file if 'remotePath'
 *                   parameter is empty or null or an empty string.
 * @throws {Error} If there was an error while getting the name of a media file
 *                 or the file content cannot be uploaded to the remote location.
 */
commands.stopRecordingScreen = function callee$0$0() {
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  var remotePath, user, pass, method, pgrepPattern, pid, localPath, result;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        remotePath = options.remotePath;
        user = options.user;
        pass = options.pass;
        method = options.method;
        pgrepPattern = this.isRealDevice() ? REAL_DEVICE_PGREP_PATTERN : SIMULATOR_PGREP_PATTERN;
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap((0, _utils.getPidUsingPattern)(pgrepPattern(this.opts.device.udid)));

      case 7:
        pid = context$1$0.sent;
        localPath = this._recentScreenRecordingPath;

        if (!_lodash2['default'].isEmpty(pid)) {
          context$1$0.next = 13;
          break;
        }

        _logger2['default'].info('Screen recording is not running. There is nothing to stop.');
        context$1$0.next = 27;
        break;

      case 13:
        context$1$0.t0 = localPath;

        if (context$1$0.t0) {
          context$1$0.next = 18;
          break;
        }

        context$1$0.next = 17;
        return _regeneratorRuntime.awrap(extractCurrentRecordingPath(pid));

      case 17:
        context$1$0.t0 = context$1$0.sent;

      case 18:
        localPath = context$1$0.t0;
        context$1$0.prev = 19;

        if (_lodash2['default'].isEmpty(localPath)) {
          _logger2['default'].errorAndThrow('Cannot parse the path to the file created by ' + 'screen recorder process from \'ps\' output. ' + 'Did you start screen recording before?');
        }

      case 21:
        context$1$0.prev = 21;
        context$1$0.next = 24;
        return _regeneratorRuntime.awrap(finishScreenCapture(pid));

      case 24:
        if (context$1$0.sent) {
          context$1$0.next = 26;
          break;
        }

        _logger2['default'].warn('Unable to stop screen recording. Continuing anyway');

      case 26:
        return context$1$0.finish(21);

      case 27:
        result = '';

        if (_lodash2['default'].isEmpty(localPath)) {
          context$1$0.next = 36;
          break;
        }

        context$1$0.prev = 29;
        context$1$0.next = 32;
        return _regeneratorRuntime.awrap(uploadRecordedMedia(localPath, remotePath, { user: user, pass: pass, method: method }));

      case 32:
        result = context$1$0.sent;

      case 33:
        context$1$0.prev = 33;

        this._recentScreenRecordingPath = null;
        return context$1$0.finish(33);

      case 36:
        return context$1$0.abrupt('return', result);

      case 37:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[19,, 21, 27], [29,, 33, 36]]);
};

exports.commands = commands;
exports['default'] = commands;

// wrap in a manual Promise so we can handle errors in exec operation
//# sourceMappingURL=data:application/json;charset=utf8;base64,
