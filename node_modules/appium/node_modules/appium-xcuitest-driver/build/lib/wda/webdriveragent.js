'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _url2 = require('url');

var _url3 = _interopRequireDefault(_url2);

var _appiumBaseDriver = require('appium-base-driver');

var _appiumSupport = require('appium-support');

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var _noSessionProxy = require("./no-session-proxy");

var _utils = require('./utils');

var _utils2 = require('../utils');

var _xcodebuild = require('./xcodebuild');

var _xcodebuild2 = _interopRequireDefault(_xcodebuild);

var _iproxy = require('./iproxy');

var _iproxy2 = _interopRequireDefault(_iproxy);

var _teen_process = require('teen_process');

var BOOTSTRAP_PATH = _path2['default'].resolve(__dirname, '..', '..', '..', 'WebDriverAgent');
var WDA_BUNDLE_ID = 'com.apple.test.WebDriverAgentRunner-Runner';
var WDA_LAUNCH_TIMEOUT = 60 * 1000;
var WDA_AGENT_PORT = 8100;
var WDA_BASE_URL = 'http://localhost';

var WebDriverAgent = (function () {
  function WebDriverAgent(xcodeVersion) {
    var args = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    _classCallCheck(this, WebDriverAgent);

    this.xcodeVersion = xcodeVersion;

    this.device = args.device;
    this.platformVersion = args.platformVersion;
    this.host = args.host;
    this.realDevice = !!args.realDevice;

    this.setWDAPaths(args.bootstrapPath, args.agentPath);

    this.wdaLocalPort = args.wdaLocalPort;

    this.prebuildWDA = args.prebuildWDA;

    this.webDriverAgentUrl = args.webDriverAgentUrl;

    this.started = false;

    this.wdaConnectionTimeout = args.wdaConnectionTimeout;

    this.useCarthageSsl = _lodash2['default'].isBoolean(args.useCarthageSsl) && args.useCarthageSsl;

    this.useXctestrunFile = args.useXctestrunFile;

    this.xcodebuild = new _xcodebuild2['default'](this.xcodeVersion, this.device, {
      platformVersion: this.platformVersion,
      agentPath: this.agentPath,
      bootstrapPath: this.bootstrapPath,
      realDevice: this.realDevice,
      showXcodeLog: !!args.showXcodeLog,
      xcodeConfigFile: args.xcodeConfigFile,
      xcodeOrgId: args.xcodeOrgId,
      xcodeSigningId: args.xcodeSigningId,
      keychainPath: args.keychainPath,
      keychainPassword: args.keychainPassword,
      useSimpleBuildTest: args.useSimpleBuildTest,
      usePrebuiltWDA: args.usePrebuiltWDA,
      updatedWDABundleId: args.updatedWDABundleId,
      launchTimeout: args.wdaLaunchTimeout || WDA_LAUNCH_TIMEOUT,
      wdaRemotePort: this.realDevice ? WDA_AGENT_PORT : this.wdaLocalPort || WDA_AGENT_PORT,
      useXctestrunFile: this.useXctestrunFile
    });
  }

  _createClass(WebDriverAgent, [{
    key: 'setWDAPaths',
    value: function setWDAPaths(bootstrapPath, agentPath) {
      // allow the user to specify a place for WDA. This is undocumented and
      // only here for the purposes of testing development of WDA
      this.bootstrapPath = bootstrapPath || BOOTSTRAP_PATH;
      _logger2['default'].info('Using WDA path: \'' + this.bootstrapPath + '\'');

      // for backward compatibility we need to be able to specify agentPath too
      this.agentPath = agentPath || _path2['default'].resolve(this.bootstrapPath, 'WebDriverAgent.xcodeproj');
      _logger2['default'].info('Using WDA agent: \'' + this.agentPath + '\'');
    }
  }, {
    key: 'cleanupObsoleteProcesses',
    value: function cleanupObsoleteProcesses() {
      var pids;
      return _regeneratorRuntime.async(function cleanupObsoleteProcesses$(context$2$0) {
        var _this = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap((0, _utils2.getPIDsListeningOnPort)(this.url.port, function (cmdLine) {
              return (cmdLine.includes('/WebDriverAgentRunner') || cmdLine.includes('/iproxy')) && !cmdLine.toLowerCase().includes(_this.device.udid.toLowerCase());
            }));

          case 2:
            pids = context$2$0.sent;

            if (pids.length) {
              context$2$0.next = 6;
              break;
            }

            _logger2['default'].debug('No obsolete cached processes from previous WDA sessions ' + ('listening on port ' + this.url.port + ' have been found'));
            return context$2$0.abrupt('return');

          case 6:

            _logger2['default'].info('Detected ' + pids.length + ' obsolete cached process' + (pids.length === 1 ? '' : 'es') + ' ' + 'from previous WDA sessions. Cleaning up...');
            context$2$0.prev = 7;
            context$2$0.next = 10;
            return _regeneratorRuntime.awrap((0, _teen_process.exec)('kill', pids));

          case 10:
            context$2$0.next = 15;
            break;

          case 12:
            context$2$0.prev = 12;
            context$2$0.t0 = context$2$0['catch'](7);

            _logger2['default'].warn('Failed to kill obsolete cached process' + (pids.length === 1 ? '' : 'es') + ' \'' + pids + '\'. ' + ('Original error: ' + context$2$0.t0.message));

          case 15:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[7, 12]]);
    }
  }, {
    key: 'isRunning',
    value: function isRunning() {
      var noSessionProxy, _status;

      return _regeneratorRuntime.async(function isRunning$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            noSessionProxy = new _noSessionProxy.NoSessionProxy({
              server: this.url.hostname,
              port: this.url.port,
              base: '',
              timeout: 3000
            });
            context$2$0.prev = 1;
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(noSessionProxy.command('/status', 'GET'));

          case 4:
            _status = context$2$0.sent;

            if (_status) {
              context$2$0.next = 7;
              break;
            }

            throw new Error('WDA response to /status command should be defined.');

          case 7:
            return context$2$0.abrupt('return', true);

          case 10:
            context$2$0.prev = 10;
            context$2$0.t0 = context$2$0['catch'](1);

            _logger2['default'].debug('WDA is not listening at \'' + this.url.href + '\'');
            return context$2$0.abrupt('return', false);

          case 14:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[1, 10]]);
    }
  }, {
    key: 'uninstall',
    value: function uninstall() {
      return _regeneratorRuntime.async(function uninstall$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Removing WDA application from device');
            context$2$0.prev = 1;
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.device.removeApp(WDA_BUNDLE_ID));

          case 4:
            context$2$0.next = 9;
            break;

          case 6:
            context$2$0.prev = 6;
            context$2$0.t0 = context$2$0['catch'](1);

            _logger2['default'].warn('WebDriverAgent uninstall failed. Perhaps, it is already uninstalled? Original error: ' + JSON.stringify(context$2$0.t0));

          case 9:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[1, 6]]);
    }
  }, {
    key: 'launch',
    value: function launch(sessionId) {
      return _regeneratorRuntime.async(function launch$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!this.webDriverAgentUrl) {
              context$2$0.next = 5;
              break;
            }

            _logger2['default'].info('Using provided WebdriverAgent at \'' + this.webDriverAgentUrl + '\'');
            this.url = this.webDriverAgentUrl;
            this.setupProxies(sessionId);
            return context$2$0.abrupt('return');

          case 5:

            _logger2['default'].info('Launching WebDriverAgent on the device');

            this.setupProxies(sessionId);

            context$2$0.t0 = !this.useXctestrunFile;

            if (!context$2$0.t0) {
              context$2$0.next = 12;
              break;
            }

            context$2$0.next = 11;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(this.agentPath));

          case 11:
            context$2$0.t0 = !context$2$0.sent;

          case 12:
            if (!context$2$0.t0) {
              context$2$0.next = 14;
              break;
            }

            throw new Error('Trying to use WebDriverAgent project at \'' + this.agentPath + '\' but the ' + 'file does not exist');

          case 14:
            if (this.useXctestrunFile) {
              context$2$0.next = 17;
              break;
            }

            context$2$0.next = 17;
            return _regeneratorRuntime.awrap((0, _utils.checkForDependencies)(this.bootstrapPath, this.useCarthageSsl));

          case 17:
            context$2$0.next = 19;
            return _regeneratorRuntime.awrap((0, _utils2.resetXCTestProcesses)(this.device.udid, !this.realDevice, { wdaLocalPort: this.url.port }));

          case 19:
            if (!this.realDevice) {
              context$2$0.next = 23;
              break;
            }

            this.iproxy = new _iproxy2['default'](this.device.udid, this.url.port, WDA_AGENT_PORT);
            context$2$0.next = 23;
            return _regeneratorRuntime.awrap(this.iproxy.start());

          case 23:
            context$2$0.next = 25;
            return _regeneratorRuntime.awrap(this.xcodebuild.init(this.noSessionProxy));

          case 25:
            if (!this.prebuildWDA) {
              context$2$0.next = 28;
              break;
            }

            context$2$0.next = 28;
            return _regeneratorRuntime.awrap(this.xcodebuild.prebuild());

          case 28:
            context$2$0.next = 30;
            return _regeneratorRuntime.awrap(this.xcodebuild.start());

          case 30:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 31:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'setupProxies',
    value: function setupProxies(sessionId) {
      var proxyOpts = {
        server: this.url.hostname,
        port: this.url.port,
        base: '',
        timeout: this.wdaConnectionTimeout
      };

      this.jwproxy = new _appiumBaseDriver.JWProxy(proxyOpts);
      this.jwproxy.sessionId = sessionId;
      this.proxyReqRes = this.jwproxy.proxyReqRes.bind(this.jwproxy);

      this.noSessionProxy = new _noSessionProxy.NoSessionProxy(proxyOpts);
      this.noSessionProxyReqRes = this.noSessionProxy.proxyReqRes.bind(this.noSessionProxy);
    }
  }, {
    key: 'quit',
    value: function quit() {
      return _regeneratorRuntime.async(function quit$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].info('Shutting down sub-processes');

            if (!this.iproxy) {
              context$2$0.next = 4;
              break;
            }

            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.iproxy.quit());

          case 4:
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.xcodebuild.quit());

          case 6:
            context$2$0.next = 8;
            return _regeneratorRuntime.awrap(this.xcodebuild.reset());

          case 8:

            if (this.jwproxy) {
              this.jwproxy.sessionId = null;
            }

            this.started = false;

          case 10:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'retrieveDerivedDataPath',
    value: function retrieveDerivedDataPath() {
      return _regeneratorRuntime.async(function retrieveDerivedDataPath$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.xcodebuild.retrieveDerivedDataPath());

          case 2:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'url',
    get: function get() {
      if (!this._url) {
        var port = this.wdaLocalPort || WDA_AGENT_PORT;
        this._url = _url3['default'].parse(WDA_BASE_URL + ':' + port);
      }
      return this._url;
    },
    set: function set(_url) {
      this._url = _url3['default'].parse(_url);
    }
  }, {
    key: 'fullyStarted',
    get: function get() {
      return this.started;
    },
    set: function set() {
      var started = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];

      // before WDA is started we expect errors from iproxy, since it is not
      // communicating with anything yet
      this.started = started;
      if (this.iproxy) {
        this.iproxy.expectIProxyErrors = !started;
      }
    }
  }]);

  return WebDriverAgent;
})();

exports['default'] = WebDriverAgent;
exports.WebDriverAgent = WebDriverAgent;
exports.WDA_BUNDLE_ID = WDA_BUNDLE_ID;
exports.BOOTSTRAP_PATH = BOOTSTRAP_PATH;

// make sure that the WDA dependencies have been built

// We need to provide WDA local port, because it might be occupied with
// iproxy instance initiated by some preceeding run with a real device
// (iproxy instances are not killed on session termination by default)

// Start the xcodebuild process
//# sourceMappingURL=data:application/json;charset=utf8;base64,
