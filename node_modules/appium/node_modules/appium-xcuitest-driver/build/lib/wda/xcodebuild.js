'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _asyncbox = require('asyncbox');

var _teen_process = require('teen_process');

var _appiumSupport = require('appium-support');

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _utils = require('./utils');

var _utils2 = require('../utils');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var DEFAULT_SIGNING_ID = "iPhone Developer";
var BUILD_TEST_DELAY = 1000;

var DERIVED_DATA_FOLDER_REGEXP = /(\/.+\/DerivedData\/WebDriverAgent-[^\/]+)/;
var DERIVED_DATA_LOG_REGEXP = /\s+(\/.+\/WebDriverAgentRunner-.+\/.+\.log)/;
var DERIVED_DATA_GREP_EXPRESSION = '/WebDriverAgentRunner-';

var xcodeLog = _appiumSupport.logger.getLogger('Xcode');

var XcodeBuild = (function () {
  function XcodeBuild(xcodeVersion, device) {
    var args = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

    _classCallCheck(this, XcodeBuild);

    this.xcodeVersion = xcodeVersion;

    this.device = device;

    this.realDevice = args.realDevice;

    this.agentPath = args.agentPath;
    this.bootstrapPath = args.bootstrapPath;

    this.platformVersion = args.platformVersion;

    this.showXcodeLog = !!args.showXcodeLog;

    this.xcodeConfigFile = args.xcodeConfigFile;
    this.xcodeOrgId = args.xcodeOrgId;
    this.xcodeSigningId = args.xcodeSigningId || DEFAULT_SIGNING_ID;
    this.keychainPath = args.keychainPath;
    this.keychainPassword = args.keychainPassword;

    this.prebuildWDA = args.prebuildWDA;
    this.usePrebuiltWDA = args.usePrebuiltWDA;
    this.useSimpleBuildTest = args.useSimpleBuildTest;

    this.useXctestrunFile = args.useXctestrunFile;

    this.launchTimeout = args.launchTimeout;

    this.wdaRemotePort = args.wdaRemotePort;

    this.updatedWDABundleId = args.updatedWDABundleId;
  }

  _createClass(XcodeBuild, [{
    key: 'init',
    value: function init(noSessionProxy) {
      return _regeneratorRuntime.async(function init$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            this.noSessionProxy = noSessionProxy;

            if (!this.useXctestrunFile) {
              context$2$0.next = 7;
              break;
            }

            if (this.xcodeVersion.major <= 7) {
              _logger2['default'].errorAndThrow('useXctestrunFile can only be used with xcode version 8 onwards');
            }
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap((0, _utils.setXctestrunFile)(this.realDevice, this.device.udid, this.platformVersion, this.bootstrapPath, this.wdaRemotePort));

          case 5:
            this.xctestrunFilePath = context$2$0.sent;
            return context$2$0.abrupt('return');

          case 7:
            if (!(this.xcodeVersion.major === 7 || this.xcodeVersion.major === 8 && this.xcodeVersion.minor === 0)) {
              context$2$0.next = 11;
              break;
            }

            _logger2['default'].debug('Using Xcode ' + this.xcodeVersion.versionString + ', so fixing WDA codebase');
            context$2$0.next = 11;
            return _regeneratorRuntime.awrap((0, _utils.fixForXcode7)(this.bootstrapPath, true));

          case 11:
            if (!(this.xcodeVersion.major === 9)) {
              context$2$0.next = 15;
              break;
            }

            _logger2['default'].debug('Using Xcode ' + this.xcodeVersion.versionString + ', so fixing WDA codebase');
            context$2$0.next = 15;
            return _regeneratorRuntime.awrap((0, _utils.fixForXcode9)(this.bootstrapPath, true));

          case 15:
            if (!this.realDevice) {
              context$2$0.next = 21;
              break;
            }

            context$2$0.next = 18;
            return _regeneratorRuntime.awrap((0, _utils.resetProjectFile)(this.agentPath));

          case 18:
            if (!this.updatedWDABundleId) {
              context$2$0.next = 21;
              break;
            }

            context$2$0.next = 21;
            return _regeneratorRuntime.awrap((0, _utils.updateProjectFile)(this.agentPath, this.updatedWDABundleId));

          case 21:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'retrieveDerivedDataPath',
    value: function retrieveDerivedDataPath() {
      var pid, stdout, execInfo, match, logFile, grepData;
      return _regeneratorRuntime.async(function retrieveDerivedDataPath$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!this._derivedDataPath) {
              context$2$0.next = 2;
              break;
            }

            return context$2$0.abrupt('return', this._derivedDataPath);

          case 2:
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap((0, _utils2.getPidUsingPattern)('xcodebuild.*' + this.device.udid));

          case 4:
            pid = context$2$0.sent;

            if (pid) {
              context$2$0.next = 8;
              break;
            }

            _logger2['default'].debug('Cannot find xcodebuild\'s process id, so unable to retrieve DerivedData folder path');
            return context$2$0.abrupt('return');

          case 8:
            stdout = '';
            context$2$0.prev = 9;
            context$2$0.next = 12;
            return _regeneratorRuntime.awrap((0, _teen_process.exec)('lsof', ['-p', pid]));

          case 12:
            execInfo = context$2$0.sent;

            stdout = execInfo.stdout;
            context$2$0.next = 20;
            break;

          case 16:
            context$2$0.prev = 16;
            context$2$0.t0 = context$2$0['catch'](9);

            _logger2['default'].debug('Cannot get the list of files opened by xcodebuild process (pid: ' + pid + ') because of \'' + context$2$0.t0.stderr + '\'');
            return context$2$0.abrupt('return');

          case 20:
            match = DERIVED_DATA_FOLDER_REGEXP.exec(stdout);

            if (match) {
              context$2$0.next = 42;
              break;
            }

            // no match found, so try to find the log file and search inside for the derived data instead
            _logger2['default'].debug('Cannot find a match for DerivedData folder path from lsof. Trying to access logs');
            match = DERIVED_DATA_LOG_REGEXP.exec(stdout);

            if (match) {
              context$2$0.next = 27;
              break;
            }

            // still no go. We are done
            _logger2['default'].debug('Cannot find a match for xcodebuild log file. No derived data folder will be found');
            return context$2$0.abrupt('return');

          case 27:
            logFile = match[1];
            context$2$0.prev = 28;
            context$2$0.next = 31;
            return _regeneratorRuntime.awrap((0, _teen_process.exec)('grep', [DERIVED_DATA_GREP_EXPRESSION, logFile]));

          case 31:
            grepData = context$2$0.sent;

            match = DERIVED_DATA_FOLDER_REGEXP.exec(grepData.stdout);

            if (match) {
              context$2$0.next = 36;
              break;
            }

            // nothing found. We are done
            _logger2['default'].debug('Cannot find the derived data location from the xcodebuild log file \'' + logFile + '\'');
            return context$2$0.abrupt('return');

          case 36:
            context$2$0.next = 42;
            break;

          case 38:
            context$2$0.prev = 38;
            context$2$0.t1 = context$2$0['catch'](28);

            _logger2['default'].warn('Cannot grep on the the xcodebuild log file \'' + logFile + '\'. Original error: ' + context$2$0.t1.message);
            return context$2$0.abrupt('return');

          case 42:

            // at this point we have gotten a match by one of the two ways above, so save it
            this._derivedDataPath = match[1];

            return context$2$0.abrupt('return', this._derivedDataPath);

          case 44:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[9, 16], [28, 38]]);
    }
  }, {
    key: 'reset',
    value: function reset() {
      return _regeneratorRuntime.async(function reset$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!(this.realDevice && this.updatedWDABundleId)) {
              context$2$0.next = 3;
              break;
            }

            context$2$0.next = 3;
            return _regeneratorRuntime.awrap((0, _utils.resetProjectFile)(this.agentPath));

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'prebuild',
    value: function prebuild() {
      return _regeneratorRuntime.async(function prebuild$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!(this.xcodeVersion.major === 7)) {
              context$2$0.next = 3;
              break;
            }

            _logger2['default'].debug('Capability \'prebuildWDA\' set, but on xcode version ' + this.xcodeVersion.versionString + ' so skipping');
            return context$2$0.abrupt('return');

          case 3:

            // first do a build phase
            _logger2['default'].debug('Pre-building WDA before launching test');
            this.usePrebuiltWDA = true;
            context$2$0.next = 7;
            return _regeneratorRuntime.awrap(this.createSubProcess(true));

          case 7:
            this.xcodebuild = context$2$0.sent;
            context$2$0.next = 10;
            return _regeneratorRuntime.awrap(this.start(true));

          case 10:

            this.xcodebuild = null;

            // pause a moment
            context$2$0.next = 13;
            return _regeneratorRuntime.awrap(_bluebird2['default'].delay(BUILD_TEST_DELAY));

          case 13:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getCommand',
    value: function getCommand() {
      var buildOnly = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];

      var cmd = 'xcodebuild';
      var args = undefined;

      // figure out the targets for xcodebuild
      if (this.xcodeVersion.major < 8) {
        args = ['build', 'test'];
      } else {
        var _ref = this.useSimpleBuildTest ? ['build', 'test'] : ['build-for-testing', 'test-without-building'];

        var _ref2 = _slicedToArray(_ref, 2);

        var buildCmd = _ref2[0];
        var testCmd = _ref2[1];

        if (buildOnly) {
          args = [buildCmd];
        } else if (this.usePrebuiltWDA || this.useXctestrunFile) {
          args = [testCmd];
        } else {
          args = [buildCmd, testCmd];
        }
      }

      if (this.useXctestrunFile) {
        args.push('-xctestrun', this.xctestrunFilePath);
      } else {
        args.push('-project', this.agentPath, '-scheme', 'WebDriverAgentRunner');
      }
      args.push('-destination', 'id=' + this.device.udid);

      var versionMatch = new RegExp(/^(\d+)\.(\d+)/).exec(this.platformVersion);
      if (versionMatch) {
        args.push('IPHONEOS_DEPLOYMENT_TARGET=' + versionMatch[1] + '.' + versionMatch[2]);
      } else {
        _logger2['default'].warn('Cannot parse major and minor version numbers from platformVersion "' + this.platformVersion + '". ' + 'Will build for the default platform instead');
      }

      if (this.realDevice && this.xcodeConfigFile) {
        _logger2['default'].debug('Using Xcode configuration file: \'' + this.xcodeConfigFile + '\'');
        args.push('-xcconfig', this.xcodeConfigFile);
      }

      return { cmd: cmd, args: args };
    }
  }, {
    key: 'createSubProcess',
    value: function createSubProcess() {
      var buildOnly = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];

      var _getCommand, cmd, args, env, xcodebuild, logXcodeOutput;

      return _regeneratorRuntime.async(function createSubProcess$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (this.useXctestrunFile) {
              context$2$0.next = 9;
              break;
            }

            if (!this.realDevice) {
              context$2$0.next = 9;
              break;
            }

            if (!(this.keychainPath && this.keychainPassword)) {
              context$2$0.next = 5;
              break;
            }

            context$2$0.next = 5;
            return _regeneratorRuntime.awrap((0, _utils.setRealDeviceSecurity)(this.keychainPath, this.keychainPassword));

          case 5:
            if (!(this.xcodeOrgId && this.xcodeSigningId && !this.xcodeConfigFile)) {
              context$2$0.next = 9;
              break;
            }

            context$2$0.next = 8;
            return _regeneratorRuntime.awrap((0, _utils.generateXcodeConfigFile)(this.xcodeOrgId, this.xcodeSigningId));

          case 8:
            this.xcodeConfigFile = context$2$0.sent;

          case 9:
            _getCommand = this.getCommand(buildOnly);
            cmd = _getCommand.cmd;
            args = _getCommand.args;

            _logger2['default'].debug('Beginning ' + (buildOnly ? 'build' : 'test') + ' with command \'' + cmd + ' ' + args.join(' ') + '\' ' + ('in directory \'' + this.bootstrapPath + '\''));
            env = _Object$assign({}, process.env, { USE_PORT: this.wdaRemotePort });
            xcodebuild = new _teen_process.SubProcess(cmd, args, {
              cwd: this.bootstrapPath,
              env: env,
              detached: true,
              stdio: ['ignore', 'pipe', 'pipe']
            });
            logXcodeOutput = this.showXcodeLog;

            _logger2['default'].debug('Output from xcodebuild ' + (logXcodeOutput ? 'will' : 'will not') + ' be logged. To change this, use \'showXcodeLog\' desired capability');
            xcodebuild.on('output', function (stdout, stderr) {
              var out = stdout || stderr;
              // we want to pull out the log file that is created, and highlight it
              // for diagnostic purposes
              if (out.indexOf('Writing diagnostic log for test session to') !== -1) {
                // pull out the first line that begins with the path separator
                // which *should* be the line indicating the log file generated
                xcodebuild.logLocation = _lodash2['default'].first(_lodash2['default'].remove(out.trim().split('\n'), function (v) {
                  return v.indexOf(_path2['default'].sep) === 0;
                }));
                _logger2['default'].debug('Log file for xcodebuild test: ' + xcodebuild.logLocation);
              }

              // if we have an error we want to output the logs
              // otherwise the failure is inscrutible
              // but do not log permission errors from trying to write to attachments folder
              if (out.indexOf('Error Domain=') !== -1 && out.indexOf('Error writing attachment data to file') === -1 && out.indexOf('Failed to remove screenshot at path') === -1) {
                logXcodeOutput = true;

                // terrible hack to handle case where xcode return 0 but is failing
                xcodebuild._wda_error_occurred = true;
              }

              if (logXcodeOutput) {
                // do not log permission errors from trying to write to attachments folder
                if (out.indexOf('Error writing attachment data to file') === -1) {
                  var _iteratorNormalCompletion = true;
                  var _didIteratorError = false;
                  var _iteratorError = undefined;

                  try {
                    for (var _iterator = _getIterator(out.split('\n')), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                      var line = _step.value;

                      xcodeLog.info(line);
                    }
                  } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion && _iterator['return']) {
                        _iterator['return']();
                      }
                    } finally {
                      if (_didIteratorError) {
                        throw _iteratorError;
                      }
                    }
                  }
                }
              }
            });

            return context$2$0.abrupt('return', xcodebuild);

          case 19:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'start',
    value: function start() {
      var buildOnly = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];
      return _regeneratorRuntime.async(function start$(context$2$0) {
        var _this = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.createSubProcess(buildOnly));

          case 2:
            this.xcodebuild = context$2$0.sent;
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap(new _bluebird2['default'](function (resolve, reject) {
              _this.xcodebuild.on('exit', function callee$3$0(code, signal) {
                var data, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, line;

                return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                  while (1) switch (context$4$0.prev = context$4$0.next) {
                    case 0:
                      _logger2['default'].info('xcodebuild exited with code \'' + code + '\' and signal \'' + signal + '\'');
                      // print out the xcodebuild file if users have asked for it

                      if (!(this.showXcodeLog && this.xcodebuild.logLocation)) {
                        context$4$0.next = 31;
                        break;
                      }

                      xcodeLog.info('Contents of xcodebuild log file \'' + this.xcodebuild.logLocation + '\':');
                      context$4$0.prev = 3;
                      context$4$0.next = 6;
                      return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(this.xcodebuild.logLocation, 'utf-8'));

                    case 6:
                      data = context$4$0.sent;
                      _iteratorNormalCompletion2 = true;
                      _didIteratorError2 = false;
                      _iteratorError2 = undefined;
                      context$4$0.prev = 10;

                      for (_iterator2 = _getIterator(data.split('\n')); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        line = _step2.value;

                        xcodeLog.info(line);
                      }
                      context$4$0.next = 18;
                      break;

                    case 14:
                      context$4$0.prev = 14;
                      context$4$0.t0 = context$4$0['catch'](10);
                      _didIteratorError2 = true;
                      _iteratorError2 = context$4$0.t0;

                    case 18:
                      context$4$0.prev = 18;
                      context$4$0.prev = 19;

                      if (!_iteratorNormalCompletion2 && _iterator2['return']) {
                        _iterator2['return']();
                      }

                    case 21:
                      context$4$0.prev = 21;

                      if (!_didIteratorError2) {
                        context$4$0.next = 24;
                        break;
                      }

                      throw _iteratorError2;

                    case 24:
                      return context$4$0.finish(21);

                    case 25:
                      return context$4$0.finish(18);

                    case 26:
                      context$4$0.next = 31;
                      break;

                    case 28:
                      context$4$0.prev = 28;
                      context$4$0.t1 = context$4$0['catch'](3);

                      _logger2['default'].debug('Unable to access xcodebuild log file: \'' + context$4$0.t1.message + '\'');

                    case 31:
                      this.xcodebuild.processExited = true;

                      if (!(this.xcodebuild._wda_error_occurred || !signal && code !== 0)) {
                        context$4$0.next = 34;
                        break;
                      }

                      return context$4$0.abrupt('return', reject(new Error('xcodebuild failed with code ' + code)));

                    case 34:
                      if (!buildOnly) {
                        context$4$0.next = 36;
                        break;
                      }

                      return context$4$0.abrupt('return', resolve());

                    case 36:
                    case 'end':
                      return context$4$0.stop();
                  }
                }, null, _this, [[3, 28], [10, 14, 18, 26], [19,, 21, 25]]);
              });

              return (function callee$3$0() {
                var startTime, _status, msg;

                return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                  while (1) switch (context$4$0.prev = context$4$0.next) {
                    case 0:
                      context$4$0.prev = 0;
                      startTime = process.hrtime();
                      context$4$0.next = 4;
                      return _regeneratorRuntime.awrap(this.xcodebuild.start());

                    case 4:
                      this.xcodebuild.proc.unref();

                      if (buildOnly) {
                        context$4$0.next = 10;
                        break;
                      }

                      context$4$0.next = 8;
                      return _regeneratorRuntime.awrap(this.waitForStart(startTime));

                    case 8:
                      _status = context$4$0.sent;

                      resolve(_status);

                    case 10:
                      context$4$0.next = 17;
                      break;

                    case 12:
                      context$4$0.prev = 12;
                      context$4$0.t0 = context$4$0['catch'](0);
                      msg = 'Unable to start WebDriverAgent: ' + context$4$0.t0;

                      _logger2['default'].error(msg);
                      reject(new Error(msg));

                    case 17:
                    case 'end':
                      return context$4$0.stop();
                  }
                }, null, _this, [[0, 12]]);
              })();
            }));

          case 5:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 6:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'waitForStart',
    value: function waitForStart(startTime) {
      var currentStatus, retries, endTime, startupTime;
      return _regeneratorRuntime.async(function waitForStart$(context$2$0) {
        var _this2 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            // try to connect once every 0.5 seconds, until `launchTimeout` is up
            _logger2['default'].debug('Waiting up to ' + this.launchTimeout + 'ms for WebDriverAgent to start');
            currentStatus = null;
            context$2$0.prev = 2;
            retries = parseInt(this.launchTimeout / 500, 10);
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(retries, 500, function callee$2$0() {
              var proxyTimeout;
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    if (!this.xcodebuild.processExited) {
                      context$3$0.next = 2;
                      break;
                    }

                    return context$3$0.abrupt('return');

                  case 2:
                    proxyTimeout = this.noSessionProxy.timeout;

                    this.noSessionProxy.timeout = 1000;
                    context$3$0.prev = 4;
                    context$3$0.next = 7;
                    return _regeneratorRuntime.awrap(this.noSessionProxy.command('/status', 'GET'));

                  case 7:
                    currentStatus = context$3$0.sent;

                    if (currentStatus && currentStatus.ios && currentStatus.ios.ip) {
                      this.agentUrl = currentStatus.ios.ip;
                      _logger2['default'].debug('WebDriverAgent running on ip \'' + this.agentUrl + '\'');
                    }
                    context$3$0.next = 14;
                    break;

                  case 11:
                    context$3$0.prev = 11;
                    context$3$0.t0 = context$3$0['catch'](4);
                    throw new Error('Unable to connect to running WebDriverAgent: ' + context$3$0.t0.message);

                  case 14:
                    context$3$0.prev = 14;

                    this.noSessionProxy.timeout = proxyTimeout;
                    return context$3$0.finish(14);

                  case 17:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this2, [[4, 11, 14, 17]]);
            }));

          case 6:
            if (!this.xcodebuild.processExited) {
              context$2$0.next = 8;
              break;
            }

            return context$2$0.abrupt('return', currentStatus);

          case 8:
            endTime = process.hrtime(startTime);
            startupTime = parseInt((endTime[0] * 1e9 + endTime[1]) / 1e6, 10);

            _logger2['default'].debug('WebDriverAgent successfully started after ' + startupTime + 'ms');
            context$2$0.next = 17;
            break;

          case 13:
            context$2$0.prev = 13;
            context$2$0.t0 = context$2$0['catch'](2);

            // at this point, if we have not had any errors from xcode itself (reported
            // elsewhere), we can let this go through and try to create the session
            _logger2['default'].debug(context$2$0.t0.message);
            _logger2['default'].warn('Getting status of WebDriverAgent on device timed out. Continuing');

          case 17:
            return context$2$0.abrupt('return', currentStatus);

          case 18:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[2, 13]]);
    }
  }, {
    key: 'quit',
    value: function quit() {
      return _regeneratorRuntime.async(function quit$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap((0, _utils.killProcess)('xcodebuild', this.xcodebuild));

          case 2:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }]);

  return XcodeBuild;
})();

exports.XcodeBuild = XcodeBuild;
exports['default'] = XcodeBuild;

// if necessary, update the bundleId to user's specification

// In case the project still has the user specific bundle ID, reset the project file first.
// - We do this reset even if updatedWDABundleId is not specified,
//   since the previous updatedWDABundleId test has generated the user specific bundle ID project file.
// - We don't call resetProjectFile for simulator,
//   since simulator test run will work with any user specific bundle ID.

// try a number of ways to find the derived data folder for this run

// try to find a derived data folder open by xcodebuild

// now parse the log file for the derived data folder

// grep on the log file, since it might be too big to fit it completely into the memory

// if necessary, reset the bundleId to original value

// wrap the start procedure in a promise so that we can catch, and report,
// any startup errors that are thrown as events

// in the case of just building, the process will exit and that is our finish

// there has been an error elsewhere and we need to short-circuit

// there has been an error elsewhere and we need to short-circuit

// must get [s, ns] array into ms
//# sourceMappingURL=data:application/json;charset=utf8;base64,
