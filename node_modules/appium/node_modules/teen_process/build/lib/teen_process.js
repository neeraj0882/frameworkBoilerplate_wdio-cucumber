/* eslint-disable promise/prefer-await-to-callbacks */

'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _child_process = require('child_process');

var _shellQuote = require('shell-quote');

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

var _through = require('through');

var _through2 = _interopRequireDefault(_through);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var EventEmitter = _events2['default'].EventEmitter;

function exec(cmd) {
  var args = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];
  var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

  // get a quoted representation of the command for error strings
  var rep = (0, _shellQuote.quote)([cmd].concat(args));

  // extend default options; we're basically re-implementing exec's options
  // for use here with spawn under the hood
  opts = _Object$assign({
    timeout: null,
    encoding: 'utf8',
    killSignal: 'SIGTERM',
    cwd: undefined,
    env: process.env,
    ignoreOutput: false,
    stdio: "inherit",
    isBuffer: false,
    shell: undefined
  }, opts);

  // this is an async function, so return a promise
  return new _bluebird2['default'](function (resolve, reject) {
    // spawn the child process with options; we don't currently expose any of
    // the other 'spawn' options through the API
    var proc = (0, _child_process.spawn)(cmd, args, { cwd: opts.cwd, env: opts.env, shell: opts.shell });
    var stdoutArr = [],
        stderrArr = [],
        timer = null;

    // if the process errors out, reject the promise
    proc.on('error', function (err) {
      var msg = 'Command \'' + rep + '\' errored out: ' + err.stack;
      if (err.errno === 'ENOENT') {
        msg = 'Command \'' + cmd + '\' not found. Is it installed?';
      }
      reject(new Error(msg));
    });
    if (proc.stdin) {
      proc.stdin.on('error', function (err) {
        reject(new Error('Standard input \'' + err.syscall + '\' error: ' + err.stack));
      });
    }
    if (proc.stdout) {
      proc.stdout.on('error', function (err) {
        reject(new Error('Standard output \'' + err.syscall + '\' error: ' + err.stack));
      });
    }
    if (proc.stderr) {
      proc.stderr.on('error', function (err) {
        reject(new Error('Standard error \'' + err.syscall + '\' error: ' + err.stack));
      });
    }

    // keep track of stdout/stderr if we haven't said not to
    if (!opts.ignoreOutput) {
      if (proc.stdout) {
        proc.stdout.on('data', function (data) {
          stdoutArr.push(data);
        });
      }
      if (proc.stderr) {
        proc.stderr.on('data', function (data) {
          stderrArr.push(data);
        });
      }
    }

    function getStdio(isBuffer) {
      var stdout = undefined,
          stderr = undefined;
      if (isBuffer) {
        stdout = Buffer.concat(stdoutArr);
        stderr = Buffer.concat(stderrArr);
      } else {
        stdout = Buffer.concat(stdoutArr).toString(opts.encoding);
        stderr = Buffer.concat(stderrArr).toString(opts.encoding);
      }
      return { stdout: stdout, stderr: stderr };
    }

    // if the process ends, either resolve or reject the promise based on the
    // exit code of the process. either way, attach stdout, stderr, and code.
    // Also clean up the timer if it exists
    proc.on('close', function (code) {
      if (timer) {
        clearTimeout(timer);
      }

      var _getStdio = getStdio(opts.isBuffer);

      var stdout = _getStdio.stdout;
      var stderr = _getStdio.stderr;

      if (code === 0) {
        resolve({ stdout: stdout, stderr: stderr, code: code });
      } else {
        var err = new Error('Command \'' + rep + '\' exited with code ' + code);
        err = _Object$assign(err, { stdout: stdout, stderr: stderr, code: code });
        reject(err);
      }
    });

    // if we set a timeout on the child process, cut into the execution and
    // reject if the timeout is reached. Attach the stdout/stderr we currently
    // have in case it's helpful in debugging
    if (opts.timeout) {
      timer = setTimeout(function () {
        var _getStdio2 = getStdio(opts.isBuffer);

        var stdout = _getStdio2.stdout;
        var stderr = _getStdio2.stderr;

        var err = new Error('Command \'' + rep + '\' timed out after ' + opts.timeout + 'ms');
        err = _Object$assign(err, { stdout: stdout, stderr: stderr, code: null });
        reject(err);
        // reject and THEN kill to avoid race conditions with the handlers
        // above
        proc.kill(opts.killSignal);
      }, opts.timeout);
    }
  });
}

var SubProcess = (function (_EventEmitter) {
  _inherits(SubProcess, _EventEmitter);

  function SubProcess(cmd) {
    var args = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];
    var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

    _classCallCheck(this, SubProcess);

    _get(Object.getPrototypeOf(SubProcess.prototype), 'constructor', this).call(this);
    if (!cmd) throw new Error("Command is required"); // eslint-disable-line curly
    if (typeof cmd !== "string") throw new Error("Command must be a string"); // eslint-disable-line curly
    if (!(args instanceof Array)) throw new Error("Args must be an array"); // eslint-disable-line curly
    this.cmd = cmd;
    this.args = args;
    this.proc = null;
    this.opts = opts;
    this.expectingExit = false;
  }

  _createClass(SubProcess, [{
    key: 'emitLines',
    value: function emitLines(stream, lines) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = _getIterator(lines), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var line = _step.value;

          this.emit('stream-line', '[' + stream.toUpperCase() + '] ' + line);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator['return']) {
            _iterator['return']();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }

    // spawn the subprocess and return control whenever we deem that it has fully
    // "started"
  }, {
    key: 'start',
    value: function start() {
      var startDetector = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];
      var timeoutMs = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
      var startDelay;
      return _regeneratorRuntime.async(function start$(context$2$0) {
        var _this = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            startDelay = 10;

            // the default start detector simply returns true when we get any output
            if (startDetector === null) {
              startDetector = function (stdout, stderr) {
                return stdout || stderr;
              };
            }

            // if the user passes a number, then we simply delay a certain amount of
            // time before returning control, rather than waiting for a condition
            if (typeof startDetector === 'number') {
              startDelay = startDetector;
              startDetector = null;
            }

            // return a promise so we can wrap the async behavior
            return context$2$0.abrupt('return', new _bluebird2['default'](function (resolve, reject) {
              // actually spawn the subproc
              _this.proc = (0, _child_process.spawn)(_this.cmd, _this.args, _this.opts);

              if (_this.proc.stdout) {
                _this.proc.stdout.setEncoding(_this.opts.encoding || 'utf8');
              }
              if (_this.proc.stderr) {
                _this.proc.stderr.setEncoding(_this.opts.encoding || 'utf8');
              }
              _this.lastLinePortion = { stdout: "", stderr: "" };

              // this function handles output that we collect from the subproc
              var handleOutput = function handleOutput(data) {
                // if we have a startDetector, run it on the output so we can resolve/
                // reject and move on from start
                try {
                  if (startDetector && startDetector(data.stdout, data.stderr)) {
                    startDetector = null;
                    resolve();
                  }
                } catch (e) {
                  reject(e);
                }

                // emit the actual output for whomever's listening
                _this.emit('output', data.stdout, data.stderr);

                // we also want to emit lines, but it's more complex since output
                // comes in chunks and a line could come in two different chunks, so
                // we have logic to handle that case (using this.lastLinePortion to
                // remember a line that started but did not finish in the last chunk)
                var _arr = ['stdout', 'stderr'];
                for (var _i = 0; _i < _arr.length; _i++) {
                  var stream = _arr[_i];
                  if (!data[stream]) continue; // eslint-disable-line curly
                  var lines = data[stream].split("\n");
                  if (lines.length > 1) {
                    var retLines = lines.slice(0, -1);
                    retLines[0] = _this.lastLinePortion[stream] + retLines[0];
                    _this.lastLinePortion[stream] = lines[lines.length - 1];
                    _this.emit('lines-' + stream, retLines);
                    _this.emitLines(stream, retLines);
                  } else {
                    _this.lastLinePortion[stream] += lines[0];
                  }
                }
              };

              // if we get an error spawning the proc, reject and clean up the proc
              _this.proc.on('error', function (err) {
                _this.proc.removeAllListeners('exit');
                _this.proc.kill('SIGINT');

                if (err.errno === 'ENOENT') {
                  err = new Error('Command \'' + _this.cmd + '\' not found. Is it installed?');
                }
                reject(err);
              });

              if (_this.proc.stdout) {
                _this.proc.stdout.pipe((0, _through2['default'])(function (stdout) {
                  handleOutput({ stdout: stdout, stderr: '' });
                }));
              }

              if (_this.proc.stderr) {
                _this.proc.stderr.pipe((0, _through2['default'])(function (stderr) {
                  handleOutput({ stdout: '', stderr: stderr });
                }));
              }

              // when the proc exits, we might still have a buffer of lines we were
              // waiting on more chunks to complete. Go ahead and emit those, then
              // re-emit the exit so a listener can handle the possibly-unexpected exit
              _this.proc.on('exit', function (code, signal) {
                _this.handleLastLines();

                _this.emit('exit', code, signal);

                // in addition to the bare exit event, also emit one of three other
                // events that contain more helpful information:
                // 'stop': we stopped this
                // 'die': the process ended out of our control with a non-zero exit
                // 'end': the process ended out of our control with a zero exit
                var event = _this.expectingExit ? 'stop' : 'die';
                if (!_this.expectingExit && code === 0) {
                  event = 'end';
                }
                _this.emit(event, code, signal);

                // finally clean up the proc and make sure to reset our exit
                // expectations
                _this.proc = null;
                _this.expectingExit = false;
              });

              // if the user hasn't given us a startDetector, instead just resolve
              // when startDelay ms have passed
              if (!startDetector) {
                setTimeout(function () {
                  resolve();
                }, startDelay);
              }

              // if the user has given us a timeout, start the clock for rejecting
              // the promise if we take too long to start
              if (typeof timeoutMs === "number") {
                setTimeout(function () {
                  reject(new Error("The process did not start in the allotted time " + ('(' + timeoutMs + 'ms)')));
                }, timeoutMs);
              }
            }));

          case 4:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'handleLastLines',
    value: function handleLastLines() {
      var _arr2 = ['stdout', 'stderr'];

      for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
        var stream = _arr2[_i2];
        if (this.lastLinePortion[stream]) {
          var lastLines = [this.lastLinePortion[stream]];
          this.emit('lines-' + stream, lastLines);
          this.emitLines(stream, lastLines);
          this.lastLinePortion[stream] = '';
        }
      }
    }
  }, {
    key: 'stop',
    value: function stop() {
      var signal = arguments.length <= 0 || arguments[0] === undefined ? 'SIGTERM' : arguments[0];
      var timeout = arguments.length <= 1 || arguments[1] === undefined ? 10000 : arguments[1];
      return _regeneratorRuntime.async(function stop$(context$2$0) {
        var _this2 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (this.isRunning) {
              context$2$0.next = 2;
              break;
            }

            throw new Error('Can\'t stop process; it\'s not currently running (cmd: \'' + this.cmd + '\')');

          case 2:
            // make sure to emit any data in our lines buffer whenever we're done with
            // the proc
            this.handleLastLines();
            return context$2$0.abrupt('return', new _bluebird2['default'](function (resolve, reject) {
              _this2.proc.on('close', resolve);
              _this2.expectingExit = true;
              _this2.proc.kill(signal);
              setTimeout(function () {
                reject(new Error('Process didn\'t end after ' + timeout + 'ms'));
              }, timeout);
            }));

          case 4:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'join',
    value: function join() {
      var allowedExitCodes = arguments.length <= 0 || arguments[0] === undefined ? [0] : arguments[0];
      return _regeneratorRuntime.async(function join$(context$2$0) {
        var _this3 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (this.isRunning) {
              context$2$0.next = 2;
              break;
            }

            throw new Error("Can't join process; it's not currently running");

          case 2:
            return context$2$0.abrupt('return', new _bluebird2['default'](function (resolve, reject) {
              _this3.proc.on('exit', function (code) {
                if (allowedExitCodes.indexOf(code) === -1) {
                  reject(new Error('Process ended with exitcode ' + code));
                } else {
                  resolve(code);
                }
              });
            }));

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'isRunning',
    get: function get() {
      // presence of `proc` means we have connected and started
      return !!this.proc;
    }
  }]);

  return SubProcess;
})(EventEmitter);

exports.exec = exec;
exports.spawn = _child_process.spawn;
exports.SubProcess = SubProcess;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
