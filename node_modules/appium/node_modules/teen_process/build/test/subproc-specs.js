require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _ = require('..');

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _helpers = require('./helpers');

var _appiumSupport = require('appium-support');

// Windows doesn't understand SIGHUP
var stopSignal = _appiumSupport.system.isWindows() ? 'SIGTERM' : 'SIGHUP';
var should = _chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('SubProcess', function () {
  it('should throw an error if initialized without a command', function () {
    should['throw'](function () {
      new _.SubProcess();
    });
  });
  it('should throw an error if initialized with a bad command', function () {
    should['throw'](function () {
      new _.SubProcess({ lol: true });
    });
    should['throw'](function () {
      new _.SubProcess(1);
    });
  });
  it('should throw an error if initialized with bad args', function () {
    should['throw'](function () {
      new _.SubProcess('ls', 'foo');
    });
    should['throw'](function () {
      new _.SubProcess('ls', 1);
    });
    should['throw'](function () {
      new _.SubProcess('ls', {});
    });
  });
  it('should default args list to []', function () {
    var x = new _.SubProcess('ls');
    x.args.should.eql([]);
  });
  it('should default opts dict to {}', function () {
    var x = new _.SubProcess('ls');
    x.opts.should.eql({});
  });
  it('should pass opts to spawn', function callee$1$0() {
    var cwd, subproc, lines;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cwd = _path2['default'].resolve((0, _helpers.getFixture)('.'));
          subproc = new _.SubProcess('ls', [], { cwd: cwd });
          lines = [];

          subproc.on('lines-stdout', function (newLines) {
            lines = lines.concat(newLines);
          });
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(subproc.start(0));

        case 6:
          context$2$0.next = 8;
          return _regeneratorRuntime.awrap(_bluebird2['default'].delay(50));

        case 8:
          lines.should.include('bad_exit.sh');
          lines.should.contain('bigbuffer.js');
          lines.should.contain('echo.sh');

        case 11:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  describe('#start', function () {
    it('should throw an error if command fails on startup', function callee$2$0() {
      var s;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            s = new _.SubProcess('blargimarg');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(s.start().should.eventually.be.rejectedWith(/not found/));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should have a default startDetector of waiting for output', function callee$2$0() {
      var hasData, s;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            hasData = false;
            s = new _.SubProcess('ls');

            s.on('output', function (stdout) {
              if (stdout) {
                hasData = true;
              }
            });
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(s.start());

          case 5:
            hasData.should.be['true'];

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should interpret a numeric startDetector as a start timeout', function callee$2$0() {
      var hasData, s;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            hasData = false;
            s = new _.SubProcess((0, _helpers.getFixture)('sleepyproc'), ['ls']);

            s.on('output', function (stdout) {
              if (stdout) {
                hasData = true;
              }
            });
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(s.start(0));

          case 5:
            hasData.should.be['false'];
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(_bluebird2['default'].delay(1200));

          case 8:
            hasData.should.be['true'];

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should fail even with a start timeout of 0 when command is bad', function callee$2$0() {
      var s;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            s = new _.SubProcess('blargimarg');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(s.start(0).should.eventually.be.rejectedWith(/not found/));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should be able to provide a custom startDetector function', function callee$2$0() {
      var sd, hasData, s;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sd = function sd(stdout) {
              return stdout;
            };

            hasData = false;
            s = new _.SubProcess('ls');

            s.on('output', function (stdout) {
              if (stdout) {
                hasData = true;
              }
            });
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(s.start(sd));

          case 6:
            hasData.should.be['true'];

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should pass on custom errors from startDetector', function callee$2$0() {
      var sd, s;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sd = function sd() {
              throw new Error('foo');
            };

            s = new _.SubProcess('ls');
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(s.start(sd).should.eventually.be.rejectedWith(/foo/));

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should time out starts that take longer than specified ms', function callee$2$0() {
      var sd, s, start;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sd = function sd(stdout) {
              return stdout.indexOf('nothere') !== -1;
            };

            s = new _.SubProcess('ls');
            start = Date.now();
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(s.start(sd, 500).should.eventually.be.rejectedWith(/did not start.+time/i));

          case 5:
            (Date.now() - start).should.be.below(600);

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });

  describe('listening for data', function () {
    var subproc = undefined;
    afterEach(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.prev = 0;
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(subproc.stop());

          case 3:
            context$3$0.next = 7;
            break;

          case 5:
            context$3$0.prev = 5;
            context$3$0.t0 = context$3$0['catch'](0);

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this, [[0, 5]]);
    });
    it('should get output as params', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        var _this = this;

        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(new _bluebird2['default'](function callee$3$0(resolve, reject) {
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    subproc = new _.SubProcess((0, _helpers.getFixture)('sleepyproc'), ['ls', _path2['default'].resolve(__dirname)]);
                    subproc.on('output', function (stdout) {
                      if (stdout && stdout.indexOf('subproc-specs') === -1) {
                        reject();
                      } else {
                        resolve();
                      }
                    });
                    context$4$0.next = 4;
                    return _regeneratorRuntime.awrap(subproc.start());

                  case 4:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, _this);
            }).should.eventually.not.be.rejected);

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should get output as params', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        var _this2 = this;

        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(new _bluebird2['default'](function callee$3$0(resolve, reject) {
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    subproc = new _.SubProcess((0, _helpers.getFixture)('echo'), ['foo', 'bar']);
                    subproc.on('output', function (stdout, stderr) {
                      if (stderr && stderr.indexOf('bar') === -1) {
                        reject();
                      } else {
                        resolve();
                      }
                    });
                    context$4$0.next = 4;
                    return _regeneratorRuntime.awrap(subproc.start());

                  case 4:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, _this2);
            }));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should get output by lines', function callee$2$0() {
      var lines;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            subproc = new _.SubProcess('ls', [_path2['default'].resolve(__dirname)]);
            lines = [];

            subproc.on('lines-stdout', function (newLines) {
              lines = lines.concat(newLines);
            });
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(subproc.start(0));

          case 5:
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(_bluebird2['default'].delay(50));

          case 7:
            lines.should.eql(['exec-specs.js', 'fixtures', 'helpers.js', 'subproc-specs.js']);

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });

  describe('#stop', function () {
    it('should send the right signal to stop a proc', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        var _this3 = this;

        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            return context$3$0.abrupt('return', new _bluebird2['default'](function callee$3$0(resolve, reject) {
              var subproc;
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    subproc = new _.SubProcess('tail', ['-f', _path2['default'].resolve(__filename)]);
                    context$4$0.next = 3;
                    return _regeneratorRuntime.awrap(subproc.start());

                  case 3:
                    subproc.on('exit', function (code, signal) {
                      try {
                        signal.should.equal(stopSignal);
                        resolve();
                      } catch (e) {
                        reject(e);
                      }
                    });
                    context$4$0.next = 6;
                    return _regeneratorRuntime.awrap(subproc.stop(stopSignal));

                  case 6:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, _this3);
            }));

          case 1:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should time out if stop doesnt complete fast enough', function callee$2$0() {
      var subproc;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            subproc = new _.SubProcess((0, _helpers.getFixture)('traphup'), ['tail', '-f', _path2['default'].resolve(__filename)]);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(subproc.start());

          case 3:
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(subproc.stop(stopSignal, 1).should.eventually.be.rejectedWith(/Process didn't end/));

          case 5:
            context$3$0.prev = 5;
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap((0, _.exec)('kill', ['-9', subproc.proc.pid + 1]));

          case 8:
            context$3$0.next = 12;
            break;

          case 10:
            context$3$0.prev = 10;
            context$3$0.t0 = context$3$0['catch'](5);

          case 12:
            context$3$0.prev = 12;
            context$3$0.next = 15;
            return _regeneratorRuntime.awrap((0, _.exec)('kill', ['-9', subproc.proc.pid]));

          case 15:
            context$3$0.next = 19;
            break;

          case 17:
            context$3$0.prev = 17;
            context$3$0.t1 = context$3$0['catch'](12);

          case 19:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this, [[5, 10], [12, 17]]);
    });

    it('should error if there is no process to stop', function callee$2$0() {
      var subproc;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            subproc = new _.SubProcess('ls');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(subproc.stop().should.eventually.be.rejectedWith(/Can't stop/));

          case 3:
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(subproc.start());

          case 5:
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(_bluebird2['default'].delay(10));

          case 7:
            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(subproc.stop().should.eventually.be.rejectedWith(/Can't stop/));

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });

  describe('#join', function () {
    it('should fail if the #start has not yet been called', function callee$2$0() {
      var proc;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            proc = new _.SubProcess((0, _helpers.getFixture)('sleepyproc.sh'), ['ls']);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(proc.join().should.eventually.be.rejectedWith(/Can't join/));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should wait until the process has been finished', function callee$2$0() {
      var proc, now, diff;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            proc = new _.SubProcess((0, _helpers.getFixture)('sleepyproc'), ['ls']);
            now = Date.now();
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(proc.start(0));

          case 4:
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(proc.join());

          case 6:
            diff = Date.now() - now;

            diff.should.be.above(1000);

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should throw if process ends with a invalid exitcode', function callee$2$0() {
      var proc;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            proc = new _.SubProcess((0, _helpers.getFixture)('bad_exit'));
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(proc.start(0));

          case 3:
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(proc.join().should.eventually.be.rejectedWith(/Process ended with exitcode/));

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should NOT throw if process ends with a custom allowed exitcode', function callee$2$0() {
      var proc;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            proc = new _.SubProcess((0, _helpers.getFixture)('bad_exit'));
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(proc.start(0));

          case 3:
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(proc.join([1]).should.eventually.be.become(1));

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });

  describe('#emitLines', function () {
    it('should emit single lines with stream in front', function callee$2$0() {
      var proc, lines;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            proc = new _.SubProcess((0, _helpers.getFixture)('sleepyproc.sh'), ['ls']);
            lines = [];

            proc.on('stream-line', lines.push.bind(lines));
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(proc.start());

          case 5:
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(proc.stop());

          case 7:
            lines.length.should.be.above(5);
            lines[0].slice(0, 8).should.eql("[STDOUT]");

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });

  describe('on exit / die', function () {
    it('should emit exit/end and no stop/die in normal exits', function callee$2$0() {
      var proc, exitCaught, dieCaught, stopCaught, endCaught;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            proc = new _.SubProcess((0, _helpers.getFixture)('sleepyproc'), ['ls']);
            exitCaught = [];
            dieCaught = false;
            stopCaught = false;
            endCaught = false;

            proc.on('exit', function (code, signal) {
              exitCaught = [code, signal];
            });
            proc.on('die', function () {
              dieCaught = true;
            });
            proc.on('stop', function () {
              stopCaught = true;
            });
            proc.on('end', function () {
              endCaught = true;
            });
            context$3$0.next = 11;
            return _regeneratorRuntime.awrap(proc.start());

          case 11:
            context$3$0.next = 13;
            return _regeneratorRuntime.awrap(proc.join());

          case 13:
            exitCaught.should.eql([0, null]);
            dieCaught.should.be['false'];
            stopCaught.should.be['false'];
            endCaught.should.be['true'];

          case 17:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should emit exit/stop and no end/die when we stop a proc', function callee$2$0() {
      var proc, exitCaught, dieCaught, stopCaught, endCaught;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            proc = new _.SubProcess('tail', ['-f', _path2['default'].resolve(__filename)]);
            exitCaught = [];
            dieCaught = false;
            stopCaught = [];
            endCaught = false;

            proc.on('exit', function (code, signal) {
              exitCaught = [code, signal];
            });
            proc.on('stop', function (code, signal) {
              stopCaught = [code, signal];
            });
            proc.on('die', function () {
              dieCaught = true;
            });
            proc.on('end', function () {
              endCaught = true;
            });
            context$3$0.next = 11;
            return _regeneratorRuntime.awrap(proc.start());

          case 11:
            context$3$0.next = 13;
            return _regeneratorRuntime.awrap(proc.stop());

          case 13:
            exitCaught.should.eql([null, 'SIGTERM']);
            stopCaught.should.eql(exitCaught);
            dieCaught.should.be['false'];
            endCaught.should.be['false'];

          case 17:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should emit exit/die and no stop/end when a proc is killed externally', function callee$2$0() {
      var proc, exitCaught, dieCaught, stopCaught, endCaught;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            proc = new _.SubProcess('tail', ['-f', _path2['default'].resolve(__filename)]);
            exitCaught = [];
            dieCaught = [];
            stopCaught = false;
            endCaught = false;

            proc.on('exit', function (code, signal) {
              exitCaught = [code, signal];
            });
            proc.on('die', function (code, signal) {
              dieCaught = [code, signal];
            });
            proc.on('stop', function () {
              stopCaught = true;
            });
            proc.on('end', function () {
              endCaught = true;
            });
            context$3$0.next = 11;
            return _regeneratorRuntime.awrap(proc.start());

          case 11:
            context$3$0.next = 13;
            return _regeneratorRuntime.awrap((0, _.exec)('pkill', ['-f', 'tail -f ' + _path2['default'].resolve(__filename)]));

          case 13:
            context$3$0.prev = 13;
            context$3$0.next = 16;
            return _regeneratorRuntime.awrap(proc.join());

          case 16:
            context$3$0.next = 20;
            break;

          case 18:
            context$3$0.prev = 18;
            context$3$0.t0 = context$3$0['catch'](13);

          case 20:
            exitCaught.should.eql([null, 'SIGTERM']);
            dieCaught.should.eql(exitCaught);
            stopCaught.should.be['false'];
            endCaught.should.be['false'];

          case 24:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this, [[13, 18]]);
    });
  });
});

// need to kill the process
// 1 for the trap, 1 for the tail
//# sourceMappingURL=data:application/json;charset=utf8;base64,
