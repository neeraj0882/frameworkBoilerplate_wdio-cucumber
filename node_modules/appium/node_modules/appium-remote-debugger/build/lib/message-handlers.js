'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _remoteDebugger = require('./remote-debugger');

var _helpers = require('./helpers');

/*
 * Generic callbacks used throughout the lifecycle of the Remote Debugger.
 * These will be added to the prototype.
 */

function onPageChange(appIdKey, pageDict) {
  // save the page dict for this app
  if (this.appDict[appIdKey]) {
    if (this.appDict[appIdKey].pageDict && this.appDict[appIdKey].pageDict.resolve) {
      // pageDict is a promise, so resolve
      this.appDict[appIdKey].pageDict.resolve(pageDict);
    }
    // keep track of the page dictionary
    this.appDict[appIdKey].pageDict = (0, _helpers.pageArrayFromDict)(pageDict);
  }

  // only act if this is the correct app
  if (this.appIdKey === appIdKey) {
    _logger2['default'].debug('Page changed: ' + (0, _helpers.simpleStringify)(pageDict));
    this.emit(_remoteDebugger.RemoteDebugger.EVENT_PAGE_CHANGE, {
      appIdKey: appIdKey.replace('PID:', ''),
      pageArray: (0, _helpers.pageArrayFromDict)(pageDict)
    });
  } else {
    _logger2['default'].debug('Received page change notice for app \'' + appIdKey + '\' ' + ('but listening for \'' + this.appIdKey + '\'. Ignoring.'));
  }
}

function onAppConnect(dict) {
  var appIdKey = dict.WIRApplicationIdentifierKey;
  _logger2['default'].debug('Notified that new application \'' + appIdKey + '\' has connected');

  this.updateAppsWithDict(dict);
}

function onAppDisconnect(dict) {
  var appIdKey;
  return _regeneratorRuntime.async(function onAppDisconnect$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        appIdKey = dict.WIRApplicationIdentifierKey;

        _logger2['default'].debug('Application \'' + appIdKey + '\' disconnected. Removing from app dictionary.');
        _logger2['default'].debug('Current app is ' + this.appIdKey);

        // get rid of the entry in our app dictionary,
        // since it is no longer available
        delete this.appDict[appIdKey];

        // if the disconnected app is the one we are connected to, try to find another
        if (this.appIdKey === appIdKey) {
          _logger2['default'].debug('No longer have app id. Attempting to find new one.');
          this.appIdKey = (0, _helpers.getDebuggerAppKey)(this.bundleId, this.platformVersion, this.appDict);
        }

        if (!this.appDict) {
          // this means we no longer have any apps. what the what?
          _logger2['default'].debug('Main app disconnected. Disconnecting altogether.');
          this.connected = false;
          this.emit(_remoteDebugger.RemoteDebugger.EVENT_DISCONNECT, true);
        }

      case 6:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function onAppUpdate(dict) {
  var appIdKey = dict.WIRApplicationIdentifierKey;
  _logger2['default'].debug('Notified that application \'' + appIdKey + '\' has been updated.');

  this.updateAppsWithDict(dict);
}

function onReportDriverList(dict) {
  _logger2['default'].debug('Notified of connected drivers: ' + JSON.stringify(dict.WIRDriverDictionaryKey) + '.');
}

var messageHandlers = {
  onPageChange: onPageChange,
  onAppConnect: onAppConnect,
  onAppDisconnect: onAppDisconnect,
  onAppUpdate: onAppUpdate,
  onReportDriverList: onReportDriverList
};

exports['default'] = messageHandlers;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,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U0FBUyxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxPQUFJLENBQUM7Q0FDN0Y7O0FBRUQsSUFBTSxlQUFlLEdBQUc7QUFDdEIsY0FBWSxFQUFaLFlBQVk7QUFDWixjQUFZLEVBQVosWUFBWTtBQUNaLGlCQUFlLEVBQWYsZUFBZTtBQUNmLGFBQVcsRUFBWCxXQUFXO0FBQ1gsb0JBQWtCLEVBQWxCLGtCQUFrQjtDQUNuQixDQUFDOztxQkFFYSxlQUFlIiwiZmlsZSI6ImxpYi9tZXNzYWdlLWhhbmRsZXJzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxvZyBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgeyBSZW1vdGVEZWJ1Z2dlciB9IGZyb20gJy4vcmVtb3RlLWRlYnVnZ2VyJztcbmltcG9ydCB7IHBhZ2VBcnJheUZyb21EaWN0LCBnZXREZWJ1Z2dlckFwcEtleSwgc2ltcGxlU3RyaW5naWZ5IH0gZnJvbSAnLi9oZWxwZXJzJztcblxuLypcbiAqIEdlbmVyaWMgY2FsbGJhY2tzIHVzZWQgdGhyb3VnaG91dCB0aGUgbGlmZWN5Y2xlIG9mIHRoZSBSZW1vdGUgRGVidWdnZXIuXG4gKiBUaGVzZSB3aWxsIGJlIGFkZGVkIHRvIHRoZSBwcm90b3R5cGUuXG4gKi9cblxuZnVuY3Rpb24gb25QYWdlQ2hhbmdlIChhcHBJZEtleSwgcGFnZURpY3QpIHtcbiAgLy8gc2F2ZSB0aGUgcGFnZSBkaWN0IGZvciB0aGlzIGFwcFxuICBpZiAodGhpcy5hcHBEaWN0W2FwcElkS2V5XSkge1xuICAgIGlmICh0aGlzLmFwcERpY3RbYXBwSWRLZXldLnBhZ2VEaWN0ICYmIHRoaXMuYXBwRGljdFthcHBJZEtleV0ucGFnZURpY3QucmVzb2x2ZSkge1xuICAgICAgLy8gcGFnZURpY3QgaXMgYSBwcm9taXNlLCBzbyByZXNvbHZlXG4gICAgICB0aGlzLmFwcERpY3RbYXBwSWRLZXldLnBhZ2VEaWN0LnJlc29sdmUocGFnZURpY3QpO1xuICAgIH1cbiAgICAvLyBrZWVwIHRyYWNrIG9mIHRoZSBwYWdlIGRpY3Rpb25hcnlcbiAgICB0aGlzLmFwcERpY3RbYXBwSWRLZXldLnBhZ2VEaWN0ID0gcGFnZUFycmF5RnJvbURpY3QocGFnZURpY3QpO1xuICB9XG5cbiAgLy8gb25seSBhY3QgaWYgdGhpcyBpcyB0aGUgY29ycmVjdCBhcHBcbiAgaWYgKHRoaXMuYXBwSWRLZXkgPT09IGFwcElkS2V5KSB7XG4gICAgbG9nLmRlYnVnKGBQYWdlIGNoYW5nZWQ6ICR7c2ltcGxlU3RyaW5naWZ5KHBhZ2VEaWN0KX1gKTtcbiAgICB0aGlzLmVtaXQoUmVtb3RlRGVidWdnZXIuRVZFTlRfUEFHRV9DSEFOR0UsIHtcbiAgICAgIGFwcElkS2V5OiBhcHBJZEtleS5yZXBsYWNlKCdQSUQ6JywgJycpLFxuICAgICAgcGFnZUFycmF5OiBwYWdlQXJyYXlGcm9tRGljdChwYWdlRGljdClcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBsb2cuZGVidWcoYFJlY2VpdmVkIHBhZ2UgY2hhbmdlIG5vdGljZSBmb3IgYXBwICcke2FwcElkS2V5fScgYCArXG4gICAgICAgICAgICAgIGBidXQgbGlzdGVuaW5nIGZvciAnJHt0aGlzLmFwcElkS2V5fScuIElnbm9yaW5nLmApO1xuICB9XG59XG5cbmZ1bmN0aW9uIG9uQXBwQ29ubmVjdCAoZGljdCkge1xuICBsZXQgYXBwSWRLZXkgPSBkaWN0LldJUkFwcGxpY2F0aW9uSWRlbnRpZmllcktleTtcbiAgbG9nLmRlYnVnKGBOb3RpZmllZCB0aGF0IG5ldyBhcHBsaWNhdGlvbiAnJHthcHBJZEtleX0nIGhhcyBjb25uZWN0ZWRgKTtcblxuICB0aGlzLnVwZGF0ZUFwcHNXaXRoRGljdChkaWN0KTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gb25BcHBEaXNjb25uZWN0IChkaWN0KSB7XG4gIGxldCBhcHBJZEtleSA9IGRpY3QuV0lSQXBwbGljYXRpb25JZGVudGlmaWVyS2V5O1xuICBsb2cuZGVidWcoYEFwcGxpY2F0aW9uICcke2FwcElkS2V5fScgZGlzY29ubmVjdGVkLiBSZW1vdmluZyBmcm9tIGFwcCBkaWN0aW9uYXJ5LmApO1xuICBsb2cuZGVidWcoYEN1cnJlbnQgYXBwIGlzICR7dGhpcy5hcHBJZEtleX1gKTtcblxuICAvLyBnZXQgcmlkIG9mIHRoZSBlbnRyeSBpbiBvdXIgYXBwIGRpY3Rpb25hcnksXG4gIC8vIHNpbmNlIGl0IGlzIG5vIGxvbmdlciBhdmFpbGFibGVcbiAgZGVsZXRlIHRoaXMuYXBwRGljdFthcHBJZEtleV07XG5cbiAgLy8gaWYgdGhlIGRpc2Nvbm5lY3RlZCBhcHAgaXMgdGhlIG9uZSB3ZSBhcmUgY29ubmVjdGVkIHRvLCB0cnkgdG8gZmluZCBhbm90aGVyXG4gIGlmICh0aGlzLmFwcElkS2V5ID09PSBhcHBJZEtleSkge1xuICAgIGxvZy5kZWJ1ZyhgTm8gbG9uZ2VyIGhhdmUgYXBwIGlkLiBBdHRlbXB0aW5nIHRvIGZpbmQgbmV3IG9uZS5gKTtcbiAgICB0aGlzLmFwcElkS2V5ID0gZ2V0RGVidWdnZXJBcHBLZXkodGhpcy5idW5kbGVJZCwgdGhpcy5wbGF0Zm9ybVZlcnNpb24sIHRoaXMuYXBwRGljdCk7XG4gIH1cblxuICBpZiAoIXRoaXMuYXBwRGljdCkge1xuICAgIC8vIHRoaXMgbWVhbnMgd2Ugbm8gbG9uZ2VyIGhhdmUgYW55IGFwcHMuIHdoYXQgdGhlIHdoYXQ/XG4gICAgbG9nLmRlYnVnKCdNYWluIGFwcCBkaXNjb25uZWN0ZWQuIERpc2Nvbm5lY3RpbmcgYWx0b2dldGhlci4nKTtcbiAgICB0aGlzLmNvbm5lY3RlZCA9IGZhbHNlO1xuICAgIHRoaXMuZW1pdChSZW1vdGVEZWJ1Z2dlci5FVkVOVF9ESVNDT05ORUNULCB0cnVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBvbkFwcFVwZGF0ZSAoZGljdCkge1xuICBsZXQgYXBwSWRLZXkgPSBkaWN0LldJUkFwcGxpY2F0aW9uSWRlbnRpZmllcktleTtcbiAgbG9nLmRlYnVnKGBOb3RpZmllZCB0aGF0IGFwcGxpY2F0aW9uICcke2FwcElkS2V5fScgaGFzIGJlZW4gdXBkYXRlZC5gKTtcblxuICB0aGlzLnVwZGF0ZUFwcHNXaXRoRGljdChkaWN0KTtcbn1cblxuZnVuY3Rpb24gb25SZXBvcnREcml2ZXJMaXN0IChkaWN0KSB7XG4gIGxvZy5kZWJ1ZyhgTm90aWZpZWQgb2YgY29ubmVjdGVkIGRyaXZlcnM6ICR7SlNPTi5zdHJpbmdpZnkoZGljdC5XSVJEcml2ZXJEaWN0aW9uYXJ5S2V5KX0uYCk7XG59XG5cbmNvbnN0IG1lc3NhZ2VIYW5kbGVycyA9IHtcbiAgb25QYWdlQ2hhbmdlLFxuICBvbkFwcENvbm5lY3QsXG4gIG9uQXBwRGlzY29ubmVjdCxcbiAgb25BcHBVcGRhdGUsXG4gIG9uUmVwb3J0RHJpdmVyTGlzdCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1lc3NhZ2VIYW5kbGVycztcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
