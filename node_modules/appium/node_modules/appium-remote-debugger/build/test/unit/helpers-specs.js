require('source-map-support').install();

'use strict';

var _defineProperty = require('babel-runtime/helpers/define-property')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _libHelpers = require('../../lib/helpers');

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var expect = _chai2['default'].expect;
_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('helpers', function () {
  describe('appInfoFromDict', function () {
    it('should return the id and entry for a dict', function () {
      var dict = {
        WIRApplicationIdentifierKey: '42',
        WIRApplicationNameKey: 'App Name',
        WIRApplicationBundleIdentifierKey: 'app.name',
        WIRIsApplicationProxyKey: 'false',
        WIRHostApplicationIdentifierKey: '43'
      };

      var _appInfoFromDict = (0, _libHelpers.appInfoFromDict)(dict);

      var _appInfoFromDict2 = _slicedToArray(_appInfoFromDict, 2);

      var id = _appInfoFromDict2[0];
      var entry = _appInfoFromDict2[1];

      id.should.equal(dict.WIRApplicationIdentifierKey);
      entry.id.should.equal(dict.WIRApplicationIdentifierKey);
      entry.name.should.equal(dict.WIRApplicationNameKey);
      entry.bundleId.should.equal(dict.WIRApplicationBundleIdentifierKey);
      entry.isProxy.should.equal(dict.WIRIsApplicationProxyKey === 'true');
      entry.hostId.should.equal(dict.WIRHostApplicationIdentifierKey);
    });
  });
  describe('getDebuggerAppKey', function () {
    it('should return the app key for the bundle', function () {
      var appDict = _defineProperty({}, '42', {
        bundleId: 'io.appium.bundle'
      });
      (0, _libHelpers.getDebuggerAppKey)('io.appium.bundle', '8.3', appDict).should.equal('42');
    });
    it('should return the app key for the bundle when proxied', function () {
      var _appDict2;

      var appDict = (_appDict2 = {}, _defineProperty(_appDict2, '42', {
        bundleId: 'io.appium.bundle',
        isProxy: false
      }), _defineProperty(_appDict2, '43', {
        bundleId: 'io.appium.proxied.bundle',
        isProxy: true,
        hostId: '42'
      }), _appDict2);
      (0, _libHelpers.getDebuggerAppKey)('io.appium.bundle', '8.3', appDict).should.equal('43');
    });
    it('should return undefined when there is no appropriate app', function () {
      expect((0, _libHelpers.getDebuggerAppKey)('io.appium.bundle', '8.3', {})).to.not.exist;
    });
  });
  describe('pageArrayFromDict', function () {
    var basePageDict = {
      1: {
        WIRTitleKey: 'Appium/welcome',
        WIRTypeKey: 'WIRTypeWeb',
        WIRURLKey: 'http://127.0.0.1:4723/welcome',
        WIRPageIdentifierKey: 1,
        WIRConnectionIdentifierKey: 'e777f792-c41e-4e5d-8722-68393af663b2'
      }
    };
    it('should return a valid page array', function () {
      var pageArray = (0, _libHelpers.pageArrayFromDict)(basePageDict);
      pageArray.should.have.length(1);
    });
    it('should not count WIRTypeWeb entries', function () {
      var pageDict = _lodash2['default'].defaults({
        2: {
          WIRTypeKey: 'WIRTypeJavaScript'
        }
      }, basePageDict);
      var pageArray = (0, _libHelpers.pageArrayFromDict)(pageDict);
      pageArray.should.have.length(1);
    });
  });
  describe('checkParams', function () {
    it('should not return error when not missing parameters', function () {
      expect((0, _libHelpers.checkParams)({ one: 'first', two: 'second', three: 'third' })).to.not.exist;
    });
    it('should return error when parameter is missing', function () {
      var errors = (0, _libHelpers.checkParams)({ one: 'first', two: null, three: 'third' });
      errors.should.have.length(1);
      errors[0].should.equal('two');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
