require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _indexJs = require('../../index.js');

var _helpersWebkitRemoteDebuggerServer = require('../helpers/webkit-remote-debugger-server');

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('WebKitRemoteDebugger', function () {
  var wrd = new _indexJs.WebKitRemoteDebugger({ host: 'localhost', port: 1337 });

  describe('websocket methods', function () {
    describe('#connect', function () {
      var server = new _helpersWebkitRemoteDebuggerServer.WebKitRemoteDebuggerServer();
      it('should instantiate an rpc client', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(server.start(true));

            case 2:
              context$4$0.next = 4;
              return _regeneratorRuntime.awrap(wrd.connect(1));

            case 4:
              wrd.rpcClient.should.exist;
              context$4$0.next = 7;
              return _regeneratorRuntime.awrap(server.stop());

            case 7:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
    });
    describe('#disconnect', function () {
      var server = new _helpersWebkitRemoteDebuggerServer.WebKitRemoteDebuggerServer();
      it('should call close on websocket', function callee$3$0() {
        var spy;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(server.start(true));

            case 2:
              context$4$0.next = 4;
              return _regeneratorRuntime.awrap(wrd.connect());

            case 4:

              wrd.rpcClient.should.exist;
              spy = _sinon2['default'].spy(wrd.rpcClient, 'disconnect');

              wrd.rpcClient.socket.disconnect = spy;
              wrd.disconnect();
              spy.calledOnce.should.be['true'];

              context$4$0.next = 11;
              return _regeneratorRuntime.awrap(server.stop());

            case 11:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
    });
  });
  describe('http methods', function () {
    var server = new _helpersWebkitRemoteDebuggerServer.WebKitRemoteDebuggerServer();
    beforeEach(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(server.start());

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    afterEach(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(server.stop());

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    describe('#pageArrayFromJson', function () {
      var data = [{
        webSocketDebuggerUrl: 'webkit/url/app/42',
        title: 'first page title',
        url: '/path/to/page.html'
      }, {
        webSocketDebuggerUrl: 'webkit/url/app/43',
        title: 'second page title',
        url: '/path/to/other_page.html'
      }];
      beforeEach(function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              server.respondWith(data);

            case 1:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });

      it('should get a page array', function callee$3$0() {
        var r;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(wrd.pageArrayFromJson());

            case 2:
              r = context$4$0.sent;

              r.should.be['instanceof'](Array);
              r.should.have.length(2);

            case 5:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
      it('should correctly map webSocketDebuggerUrl to id', function callee$3$0() {
        var r;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(wrd.pageArrayFromJson());

            case 2:
              r = context$4$0.sent;

              _lodash2['default'].map(r, 'id').should.eql(['42', '43']);

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
    });
    describe('#getJsonFromUrl', function () {
      it('should get an object', function callee$3$0() {
        var r;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              server.respondWith({ id: 42, type: 'fake' });

              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(wrd.getJsonFromUrl('localhost', 1337, '/json'));

            case 3:
              r = context$4$0.sent;

              r.should.be.an['instanceof'](Object);
              r.id.should.equal(42);

            case 6:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
    });
  });

  describe('utility methods', function () {
    describe('#isConnected', function () {
      it('should return false if there is no rpc client', function () {
        wrd.isConnected().should.be['false'];
      });
      it('should return false if there is an rpc client that is not connected', function () {
        var stub = _sinon2['default'].stub();
        stub.returns(false);
        wrd.rpcClient = {
          isConnected: stub
        };
        wrd.isConnected().should.be['false'];
      });
      it('should return true if there is an rpc client that is connected', function () {
        var stub = _sinon2['default'].stub();
        stub.returns(true);
        wrd.rpcClient = {
          isConnected: stub
        };
        wrd.isConnected().should.be['true'];
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
