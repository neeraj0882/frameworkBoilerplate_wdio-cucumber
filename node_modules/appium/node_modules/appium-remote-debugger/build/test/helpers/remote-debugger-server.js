require('source-map-support').install();

'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _defineProperty = require('babel-runtime/helpers/define-property')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _net = require('net');

var _net2 = _interopRequireDefault(_net);

var _bplistCreator = require('bplist-creator');

var _bplistCreator2 = _interopRequireDefault(_bplistCreator);

var _bplistParser = require('bplist-parser');

var _bplistParser2 = _interopRequireDefault(_bplistParser);

var _bufferpack = require('bufferpack');

var _bufferpack2 = _interopRequireDefault(_bufferpack);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _appiumSupport = require('appium-support');

var log = _appiumSupport.logger.getLogger('RemoteDebugger');

var DEVICE_INFO = {
  name: 'iPhone Simulator',
  build: 'WP42FJ'
};

var APP_INFO = {
  'PID:42': {
    id: 'PID:42',
    name: 'app',
    bundleId: 'io.appium.bundle',
    isProxy: false,
    hostId: '',
    isActive: '1',
    isAutomationEnabled: false
  }
};

// a bunch of new app info structures to simulate
// the app getting proxied through other apps
var UPDATED_APP_INFO = [{
  id: 'PID:44',
  name: 'proxy app 1',
  bundleId: 'io.appium.bundle.proxy1',
  isProxy: true,
  hostId: 'PID:42',
  isActive: '1'
}, {
  id: 'PID:46',
  name: 'proxy app 1',
  bundleId: 'io.appium.bundle.proxy1',
  isProxy: true,
  hostId: 'PID:44',
  isActive: '1'
}, {
  id: 'PID:48',
  name: 'proxy app 1',
  bundleId: 'io.appium.bundle.proxy1',
  isProxy: true,
  hostId: 'PID:46',
  isActive: '1'
}, {
  id: 'PID:50',
  name: 'proxy app 1',
  bundleId: 'io.appium.bundle.proxy1',
  isProxy: true,
  hostId: 'PID:48',
  isActive: '1'
}];

/*
 * A fake remote debugger server that can be told to send certain
 * messages back to the client, and to return certain values.
 * Used for testing the client.
 */

var RemoteDebuggerServer = (function () {
  function RemoteDebuggerServer() {
    _classCallCheck(this, RemoteDebuggerServer);

    this.server = null;
    this.client = null;
    this.pendingAppChange = false;
    this.appIdKey = 'PID:42';
    this.destinationKey = '2';
    this.app = 1;
    this.dataResponseValue = [];
  }

  _createClass(RemoteDebuggerServer, [{
    key: '_getConnectedApplicationList',
    value: function _getConnectedApplicationList(num) {
      var data = {
        __selector: '_rpc_reportConnectedApplicationList:',
        __argument: {
          WIRApplicationDictionaryKey: [{
            WIRApplicationIdentifierKey: APP_INFO['PID:42'].id,
            WIRApplicationNameKey: APP_INFO['PID:42'].name,
            WIRApplicationBundleIdentifierKey: APP_INFO['PID:42'].bundleId,
            WIRIsApplicationProxyKey: APP_INFO['PID:42'].isProxy,
            WIRHostApplicationIdentifierKey: APP_INFO['PID:42'].hostId,
            WIRIsApplicationActiveKey: APP_INFO['PID:42'].isActive
          }]
        }
      };

      // add more
      if (num > UPDATED_APP_INFO + 1) {
        // we only have so many to give!
        num = UPDATED_APP_INFO + 1;
      }
      for (var i = 0; i < num - 1; i++) {
        var entry = UPDATED_APP_INFO[i];
        data.__argument.WIRApplicationDictionaryKey.push(_defineProperty({}, entry.id, entry));
      }

      return data;
    }
  }, {
    key: 'handleReportIdentifier',
    value: function handleReportIdentifier() {
      var data = {
        __selector: '_rpc_reportSetup:',
        __argument: {
          WIRSimulatorNameKey: DEVICE_INFO.name,
          WIRSimulatorBuildKey: DEVICE_INFO.build
        }
      };
      this.send(data);

      if (this.dataResponseError) {
        data = {
          __selector: '_rpc_reportConnectedApplicationList:',
          __argument: {
            type: 'string',
            value: this.dataResponseError
          },
          wasThrown: true
        };
        this.dataResponseError = null;
      } else {
        data = this._getConnectedApplicationList(1);
      }
      this.send(data);
    }
  }, {
    key: 'handleGetListing',
    value: function handleGetListing() {
      // if we have pending app change events, send them
      if (this.pendingAppChange) {
        this.changeApp(this.pendingAppChange, true);
        this.pendingAppChange = 0;
      }

      // need to send an app dictionary back
      var data = {
        __selector: '_rpc_applicationSentListing:',
        __argument: {
          WIRApplicationIdentifierKey: 'PID:42',
          WIRListingKey: {
            '1': {
              WIRTypeKey: 'WIRTypeWeb',
              WIRPageIdentifierKey: 1,
              WIRTitleKey: '',
              WIRURLKey: 'about:blank'
            }
          }
        }
      };
      this.send(data);
    }
  }, {
    key: 'handleSocketData',
    value: function handleSocketData(plist) {
      var plistData = JSON.parse(plist.__argument.WIRSocketDataKey.toString('utf8'));

      var result = {};
      if (this.dataResponseError) {
        result = {
          result: {
            type: 'string',
            value: this.dataResponseError
          },
          wasThrown: true
        };
        this.dataResponseError = null;
      } else if (this.dataResponseValue.length > 0) {
        // add the response value
        result = {
          result: {
            type: 'string',
            value: this.dataResponseValue.shift()
          },
          wasThrown: false
        };
      }

      var dataKey = {
        result: result,
        id: plistData.id
      };
      dataKey = new Buffer(JSON.stringify(dataKey));
      var data = {
        __selector: '_rpc_applicationSentData:',
        __argument: {
          WIRDestinationKey: plist.__argument.WIRSenderKey,
          WIRApplicationIdentifierKey: plist.__argument.WIRApplicationIdentifierKey,
          WIRMessageDataKey: dataKey
        }
      };
      this.send(data);
    }
  }, {
    key: 'changeApp',
    value: function changeApp() {
      var num = arguments.length <= 0 || arguments[0] === undefined ? 1 : arguments[0];
      var immediate = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

      if (immediate) {
        if (num > UPDATED_APP_INFO.length - 1) {
          // we only have a certain number of info to send
          num = UPDATED_APP_INFO.length - 1;
        }
        for (var i = 0; i < num; i++) {
          var data = {
            __selector: '_rpc_applicationConnected:',
            __argument: {
              WIRApplicationIdentifierKey: UPDATED_APP_INFO[this.app - 1].id,
              WIRApplicationNameKey: UPDATED_APP_INFO[this.app - 1].name,
              WIRApplicationBundleIdentifierKey: UPDATED_APP_INFO[this.app - 1].bundleId,
              WIRIsApplicationProxyKey: UPDATED_APP_INFO[this.app - 1].isProxy,
              WIRHostApplicationIdentifierKey: UPDATED_APP_INFO[this.app - 1].hostId,
              WIRIsApplicationActiveKey: UPDATED_APP_INFO[this.app - 1].isActive
            }
          };
          this.send(data);

          this.app++;
        }
      } else {
        this.pendingAppChange = num;
      }
    }
  }, {
    key: 'sendPageInfoMessage',
    value: function sendPageInfoMessage(appIdKey) {
      var data = {
        __selector: '_rpc_applicationSentListing:',
        __argument: {
          WIRApplicationIdentifierKey: appIdKey,
          WIRListingKey: {
            '1': {
              WIRTypeKey: 'WIRTypeWeb',
              WIRPageIdentifierKey: 1,
              WIRTitleKey: '',
              WIRURLKey: 'about:blank'
            }
          }
        }
      };
      this.send(data);
    }
  }, {
    key: 'sendFrameNavigationMessage',
    value: function sendFrameNavigationMessage() {
      var dataKey = {
        method: 'Page.frameNavigated',
        result: {},
        id: 1
      };
      dataKey = new Buffer(JSON.stringify(dataKey));
      var data = {
        __selector: '_rpc_applicationSentData:',
        __argument: {
          WIRDestinationKey: this.destinationKey,
          WIRApplicationIdentifierKey: this.appIdKey,
          WIRMessageDataKey: dataKey
        }
      };
      this.send(data);
    }
  }, {
    key: 'setDataResponseError',
    value: function setDataResponseError(error) {
      this.dataResponseError = error;
    }
  }, {
    key: 'setDataResponseValue',
    value: function setDataResponseValue(value) {
      this.dataResponseValue.push(value);
    }
  }, {
    key: 'start',
    value: function start() {
      return _regeneratorRuntime.async(function start$(context$2$0) {
        var _this = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', new _bluebird2['default'](function (resolve, reject) {
              _this.server = _net2['default'].createServer(function (c) {
                _this.client = c;
                c.on('end', function () {
                  log.debug('client disconnected');
                });
                c.on('data', function (data) {
                  var plist = _bplistParser2['default'].parseBuffer(data.slice(4));

                  if (!plist[0].__selector) {
                    reject(new Error('Unable to decipher plist: ' + plist));
                    return;
                  }

                  switch (plist[0].__selector) {
                    case '_rpc_reportIdentifier:':
                      _this.handleReportIdentifier(plist[0]);
                      break;
                    case '_rpc_forwardGetListing:':
                      _this.handleGetListing(plist[0]);
                      break;
                    case '_rpc_forwardSocketSetup:':
                      // do nothing
                      break;
                    case '_rpc_forwardSocketData:':
                      _this.handleSocketData(plist[0]);
                      break;
                    case '_rpc_forwardIndicateWebView:':
                      reject(new Error('NOT YET IMPLEMENTED: ' + plist[0].__selector));
                      break;
                    default:
                      _this.client.write('do not compute');
                  }
                });
              });

              // don't use the real port, or any open sims will break the tests
              _this.server.listen(27754, '::1', function () {
                log.info('server bound: ' + JSON.stringify(_this.server.address()));
                resolve();
              });
            }));

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'stop',
    value: function stop() {
      return _regeneratorRuntime.async(function stop$(context$2$0) {
        var _this2 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', new _bluebird2['default'](function (resolve) {
              if (_this2.server) {
                if (_this2.client) {
                  _this2.client.end();
                }
                _this2.server.close(function (err) {
                  // eslint-disable-line promise/prefer-await-to-callbacks
                  resolve('Stopped listening: ' + err);
                });
              } else {
                resolve('Not listening.');
              }
            }));

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'send',
    value: function send(data) {
      var buf = (0, _bplistCreator2['default'])(data);
      var length = _bufferpack2['default'].pack('L', [buf.length]);
      this.client.write(Buffer.concat([length, buf]));
    }
  }]);

  return RemoteDebuggerServer;
})();

exports.RemoteDebuggerServer = RemoteDebuggerServer;
exports.APP_INFO = APP_INFO;
exports.DEVICE_INFO = DEVICE_INFO;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
