'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _remoteDebuggerServer = require('./remote-debugger-server');

function withConnectedServer(rds, fn) {
  // `rds` is a hack to allow us to
  return function () {
    var server = new _remoteDebuggerServer.RemoteDebuggerServer();

    beforeEach(function callee$2$0() {
      var rd;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(server.start());

          case 2:
            rd = rds[0];
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(rd.connect());

          case 5:

            // simulate selecting app and page
            rd.appIdKey = 1;
            rd.pageIdKey = 1;

            // set a really low page load timeout,
            // so we don't wait around too much
            rd.pageLoadMs = 10;

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    afterEach(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(server.stop());

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    fn(server);
  };
}

function withUnconnectedServer(fn) {
  return function () {
    var server = new _remoteDebuggerServer.RemoteDebuggerServer();

    beforeEach(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(server.start());

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    afterEach(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(server.stop());

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    fn(server);
  };
}

exports.withConnectedServer = withConnectedServer;
exports.withUnconnectedServer = withUnconnectedServer;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvaGVscGVycy9zZXJ2ZXItc2V0dXAuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7b0NBQXFDLDBCQUEwQjs7QUFHL0QsU0FBUyxtQkFBbUIsQ0FBRSxHQUFHLEVBQUUsRUFBRSxFQUFFOztBQUVyQyxTQUFPLFlBQU07QUFDWCxRQUFJLE1BQU0sR0FBRyxnREFBMEIsQ0FBQzs7QUFFeEMsY0FBVSxDQUFDO1VBRUwsRUFBRTs7Ozs7NkNBREEsTUFBTSxDQUFDLEtBQUssRUFBRTs7O0FBQ2hCLGNBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDOzs2Q0FDVCxFQUFFLENBQUMsT0FBTyxFQUFFOzs7OztBQUdsQixjQUFFLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQztBQUNoQixjQUFFLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQzs7OztBQUlqQixjQUFFLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQzs7Ozs7OztLQUNwQixDQUFDLENBQUM7QUFDSCxhQUFTLENBQUM7Ozs7OzZDQUNGLE1BQU0sQ0FBQyxJQUFJLEVBQUU7Ozs7Ozs7S0FDcEIsQ0FBQyxDQUFDO0FBQ0gsTUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0dBQ1osQ0FBQztDQUNIOztBQUVELFNBQVMscUJBQXFCLENBQUUsRUFBRSxFQUFFO0FBQ2xDLFNBQU8sWUFBTTtBQUNYLFFBQUksTUFBTSxHQUFHLGdEQUEwQixDQUFDOztBQUV4QyxjQUFVLENBQUM7Ozs7OzZDQUNILE1BQU0sQ0FBQyxLQUFLLEVBQUU7Ozs7Ozs7S0FDckIsQ0FBQyxDQUFDO0FBQ0gsYUFBUyxDQUFDOzs7Ozs2Q0FDRixNQUFNLENBQUMsSUFBSSxFQUFFOzs7Ozs7O0tBQ3BCLENBQUMsQ0FBQztBQUNILE1BQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztHQUNaLENBQUM7Q0FDSDs7UUFFUSxtQkFBbUIsR0FBbkIsbUJBQW1CO1FBQUUscUJBQXFCLEdBQXJCLHFCQUFxQiIsImZpbGUiOiJ0ZXN0L2hlbHBlcnMvc2VydmVyLXNldHVwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVtb3RlRGVidWdnZXJTZXJ2ZXIgfSBmcm9tICcuL3JlbW90ZS1kZWJ1Z2dlci1zZXJ2ZXInO1xuXG5cbmZ1bmN0aW9uIHdpdGhDb25uZWN0ZWRTZXJ2ZXIgKHJkcywgZm4pIHtcbiAgLy8gYHJkc2AgaXMgYSBoYWNrIHRvIGFsbG93IHVzIHRvXG4gIHJldHVybiAoKSA9PiB7XG4gICAgbGV0IHNlcnZlciA9IG5ldyBSZW1vdGVEZWJ1Z2dlclNlcnZlcigpO1xuXG4gICAgYmVmb3JlRWFjaChhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBhd2FpdCBzZXJ2ZXIuc3RhcnQoKTtcbiAgICAgIGxldCByZCA9IHJkc1swXTtcbiAgICAgIGF3YWl0IHJkLmNvbm5lY3QoKTtcblxuICAgICAgLy8gc2ltdWxhdGUgc2VsZWN0aW5nIGFwcCBhbmQgcGFnZVxuICAgICAgcmQuYXBwSWRLZXkgPSAxO1xuICAgICAgcmQucGFnZUlkS2V5ID0gMTtcblxuICAgICAgLy8gc2V0IGEgcmVhbGx5IGxvdyBwYWdlIGxvYWQgdGltZW91dCxcbiAgICAgIC8vIHNvIHdlIGRvbid0IHdhaXQgYXJvdW5kIHRvbyBtdWNoXG4gICAgICByZC5wYWdlTG9hZE1zID0gMTA7XG4gICAgfSk7XG4gICAgYWZ0ZXJFYWNoKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGF3YWl0IHNlcnZlci5zdG9wKCk7XG4gICAgfSk7XG4gICAgZm4oc2VydmVyKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gd2l0aFVuY29ubmVjdGVkU2VydmVyIChmbikge1xuICByZXR1cm4gKCkgPT4ge1xuICAgIGxldCBzZXJ2ZXIgPSBuZXcgUmVtb3RlRGVidWdnZXJTZXJ2ZXIoKTtcblxuICAgIGJlZm9yZUVhY2goYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgYXdhaXQgc2VydmVyLnN0YXJ0KCk7XG4gICAgfSk7XG4gICAgYWZ0ZXJFYWNoKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGF3YWl0IHNlcnZlci5zdG9wKCk7XG4gICAgfSk7XG4gICAgZm4oc2VydmVyKTtcbiAgfTtcbn1cblxuZXhwb3J0IHsgd2l0aENvbm5lY3RlZFNlcnZlciwgd2l0aFVuY29ubmVjdGVkU2VydmVyIH07XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
