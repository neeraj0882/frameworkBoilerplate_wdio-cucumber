// transpile :mocha

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _ = require('../..');

var _2 = _interopRequireDefault(_);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _appiumAdb = require('appium-adb');

var _appiumAdb2 = _interopRequireDefault(_appiumAdb);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('UiAutomator', function () {
  var uiAutomator = undefined,
      adb = undefined;
  var rootDir = _path2['default'].resolve(__dirname, '..', '..', process.env.NO_PRECOMPILE ? '' : '..');
  var bootstrapJar = _path2['default'].resolve(rootDir, 'test', 'fixtures', 'AppiumBootstrap.jar');
  beforeEach(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(_appiumAdb2['default'].createADB());

        case 2:
          adb = context$2$0.sent;

          uiAutomator = new _2['default'](adb);

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it("should start and shutdown uiAutomator", function callee$1$0() {
    var startDetector;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          startDetector = function startDetector(s) {
            return (/Appium Socket Server Ready/.test(s)
            );
          };

          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(uiAutomator.start(bootstrapJar, 'io.appium.android.bootstrap.Bootstrap', startDetector, '-e', 'disableAndroidWatchers', true));

        case 3:
          uiAutomator.state.should.eql('online');
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(uiAutomator.shutdown());

        case 6:
          uiAutomator.state.should.eql('stopped');

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZnVuY3Rpb25hbC91aWF1dG9tYXRvci1lMmUtc3BlY3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7b0JBRWlCLE1BQU07Ozs7OEJBQ0ksa0JBQWtCOzs7O2dCQUNyQixPQUFPOzs7O29CQUNkLE1BQU07Ozs7eUJBQ1AsWUFBWTs7OztBQUc1QixrQkFBSyxNQUFNLEVBQUUsQ0FBQztBQUNkLGtCQUFLLEdBQUcsNkJBQWdCLENBQUM7O0FBRXpCLFFBQVEsQ0FBQyxhQUFhLEVBQUUsWUFBWTtBQUNsQyxNQUFJLFdBQVcsWUFBQTtNQUFFLEdBQUcsWUFBQSxDQUFDO0FBQ3JCLE1BQUksT0FBTyxHQUFHLGtCQUFLLE9BQU8sQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLElBQUksRUFDckIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO0FBQ2xFLE1BQU0sWUFBWSxHQUFHLGtCQUFLLE9BQU8sQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO0FBQ3RGLFlBQVUsQ0FBQzs7Ozs7MkNBQ0csdUJBQUksU0FBUyxFQUFFOzs7QUFBM0IsYUFBRzs7QUFDSCxxQkFBVyxHQUFHLGtCQUFnQixHQUFHLENBQUMsQ0FBQzs7Ozs7OztHQUNwQyxDQUFDLENBQUM7O0FBRUgsSUFBRSxDQUFDLHVDQUF1QyxFQUFFO1FBQ3RDLGFBQWE7Ozs7QUFBYix1QkFBYSxHQUFHLFNBQWhCLGFBQWEsQ0FBSSxDQUFDLEVBQUs7QUFBRSxtQkFBTyw2QkFBNEIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2NBQUM7V0FBRTs7OzJDQUNyRSxXQUFXLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRSx1Q0FBdUMsRUFDckQsYUFBYSxFQUFFLElBQUksRUFBRSx3QkFBd0IsRUFBRSxJQUFJLENBQUM7OztBQUM1RSxxQkFBVyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDOzsyQ0FDakMsV0FBVyxDQUFDLFFBQVEsRUFBRTs7O0FBQzVCLHFCQUFXLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7Ozs7Ozs7R0FDekMsQ0FBQyxDQUFDO0NBQ0osQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3QvZnVuY3Rpb25hbC91aWF1dG9tYXRvci1lMmUtc3BlY3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0cmFuc3BpbGUgOm1vY2hhXG5cbmltcG9ydCBjaGFpIGZyb20gJ2NoYWknO1xuaW1wb3J0IGNoYWlBc1Byb21pc2VkIGZyb20gJ2NoYWktYXMtcHJvbWlzZWQnO1xuaW1wb3J0IFVpQXV0b21hdG9yIGZyb20gJy4uLy4uJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IEFEQiBmcm9tICdhcHBpdW0tYWRiJztcblxuXG5jaGFpLnNob3VsZCgpO1xuY2hhaS51c2UoY2hhaUFzUHJvbWlzZWQpO1xuXG5kZXNjcmliZSgnVWlBdXRvbWF0b3InLCBmdW5jdGlvbiAoKSB7XG4gIGxldCB1aUF1dG9tYXRvciwgYWRiO1xuICBsZXQgcm9vdERpciA9IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLicsICcuLicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PX1BSRUNPTVBJTEUgPyAnJyA6ICcuLicpO1xuICBjb25zdCBib290c3RyYXBKYXIgPSBwYXRoLnJlc29sdmUocm9vdERpciwgJ3Rlc3QnLCAnZml4dHVyZXMnLCAnQXBwaXVtQm9vdHN0cmFwLmphcicpO1xuICBiZWZvcmVFYWNoKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBhZGIgPSBhd2FpdCBBREIuY3JlYXRlQURCKCk7XG4gICAgdWlBdXRvbWF0b3IgPSBuZXcgVWlBdXRvbWF0b3IoYWRiKTtcbiAgfSk7XG5cbiAgaXQoXCJzaG91bGQgc3RhcnQgYW5kIHNodXRkb3duIHVpQXV0b21hdG9yXCIsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgc3RhcnREZXRlY3RvciA9IChzKSA9PiB7IHJldHVybiAvQXBwaXVtIFNvY2tldCBTZXJ2ZXIgUmVhZHkvLnRlc3Qocyk7IH07XG4gICAgYXdhaXQgdWlBdXRvbWF0b3Iuc3RhcnQoYm9vdHN0cmFwSmFyLCAnaW8uYXBwaXVtLmFuZHJvaWQuYm9vdHN0cmFwLkJvb3RzdHJhcCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnREZXRlY3RvciwgJy1lJywgJ2Rpc2FibGVBbmRyb2lkV2F0Y2hlcnMnLCB0cnVlKTtcbiAgICB1aUF1dG9tYXRvci5zdGF0ZS5zaG91bGQuZXFsKCdvbmxpbmUnKTtcbiAgICBhd2FpdCB1aUF1dG9tYXRvci5zaHV0ZG93bigpO1xuICAgIHVpQXV0b21hdG9yLnN0YXRlLnNob3VsZC5lcWwoJ3N0b3BwZWQnKTtcbiAgfSk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
