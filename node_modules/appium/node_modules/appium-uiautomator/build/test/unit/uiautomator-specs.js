// transpile :mocha

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _ = require('../..');

var _2 = _interopRequireDefault(_);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _appiumAdb = require('appium-adb');

var _appiumAdb2 = _interopRequireDefault(_appiumAdb);

var _appiumTestSupport = require('appium-test-support');

var _teen_process = require('teen_process');

var teen_process = _interopRequireWildcard(_teen_process);

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('UiAutomator', function () {
  var uiAutomator = undefined,
      adb = new _appiumAdb2['default']();
  var rootDir = _path2['default'].resolve(__dirname, process.env.NO_PRECOMPILE ? '../..' : '../../..');
  var bootstrapJar = _path2['default'].resolve(rootDir, 'test', 'fixtures', 'AppiumBootstrap.jar'),
      bootstrapClassName = 'io.appium.android.bootstrap.Bootstrap';
  before(function () {
    uiAutomator = new _2['default'](adb);
  });

  it('should throw an error if adb is not passed', function () {
    (function () {
      new _2['default']();
    }).should['throw'](/adb is required/);
  });
  it("parseJarNameFromPath should parse jarName from path and windows path", function () {
    uiAutomator.parseJarNameFromPath(bootstrapJar).should.equal('AppiumBootstrap.jar');
    var windowsJarName = 'C:\\\\appium\\bar.jar';
    uiAutomator.parseJarNameFromPath(windowsJarName).should.equal('bar.jar');
  });
  it("parseJarNameFromPath should throw error for invalid path", function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          (function () {
            uiAutomator.parseJarNameFromPath('foo/bar');
          }).should['throw'](/Unable to parse/);

        case 1:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });
  describe("start", (0, _appiumTestSupport.withSandbox)({ mocks: { adb: adb, teen_process: teen_process } }, function (S) {
    it("should return a subProcess", function callee$2$0() {
      var conn, args;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            conn = new _events2['default'].EventEmitter();

            conn.start = function () {};
            args = ["-P", 5037, "shell", "uiautomator", "runtest", 'AppiumBootstrap.jar', "-c", bootstrapClassName];

            S.mocks.adb.expects('push').once().withExactArgs(bootstrapJar, "/data/local/tmp/").returns('');
            S.mocks.adb.expects('getAdbPath').once().returns('adbPath');
            S.mocks.teen_process.expects("SubProcess").once().withExactArgs('adbPath', args).returns(conn);
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(uiAutomator.start(bootstrapJar, bootstrapClassName));

          case 8:
            uiAutomator.state.should.equal('online');
            S.verify();

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvdW5pdC91aWF1dG9tYXRvci1zcGVjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O29CQUVpQixNQUFNOzs7OzhCQUNJLGtCQUFrQjs7OztnQkFDckIsT0FBTzs7OztvQkFDZCxNQUFNOzs7O3lCQUNQLFlBQVk7Ozs7aUNBQ0EscUJBQXFCOzs0QkFDbkIsY0FBYzs7SUFBaEMsWUFBWTs7c0JBQ0wsUUFBUTs7OztBQUczQixrQkFBSyxNQUFNLEVBQUUsQ0FBQztBQUNkLGtCQUFLLEdBQUcsNkJBQWdCLENBQUM7O0FBRXpCLFFBQVEsQ0FBQyxhQUFhLEVBQUUsWUFBWTtBQUNsQyxNQUFJLFdBQVcsWUFBQTtNQUFFLEdBQUcsR0FBRSw0QkFBUyxDQUFDO0FBQ2hDLE1BQUksT0FBTyxHQUFHLGtCQUFLLE9BQU8sQ0FBQyxTQUFTLEVBQ1QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEdBQUcsT0FBTyxHQUFHLFVBQVUsQ0FBQyxDQUFDO0FBQzdFLE1BQU0sWUFBWSxHQUFHLGtCQUFLLE9BQU8sQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxxQkFBcUIsQ0FBQztNQUMvRSxrQkFBa0IsR0FBRyx1Q0FBdUMsQ0FBQztBQUNuRSxRQUFNLENBQUMsWUFBWTtBQUNqQixlQUFXLEdBQUcsa0JBQWdCLEdBQUcsQ0FBQyxDQUFDO0dBQ3BDLENBQUMsQ0FBQzs7QUFFSCxJQUFFLENBQUMsNENBQTRDLEVBQUUsWUFBWTtBQUMzRCxLQUFDLFlBQU07QUFBRSx5QkFBaUIsQ0FBQztLQUFFLENBQUEsQ0FBRSxNQUFNLFNBQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0dBQ2hFLENBQUMsQ0FBQztBQUNILElBQUUsQ0FBQyxzRUFBc0UsRUFBRSxZQUFZO0FBQ3JGLGVBQVcsQ0FBQyxvQkFBb0IsQ0FBQyxZQUFZLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUM7QUFDbkYsUUFBSSxjQUFjLDBCQUEwQixDQUFDO0FBQzdDLGVBQVcsQ0FBQyxvQkFBb0IsQ0FBQyxjQUFjLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0dBQzFFLENBQUMsQ0FBQztBQUNILElBQUUsQ0FBQywwREFBMEQsRUFBRTs7OztBQUM3RCxXQUFDLFlBQU07QUFBRSx1QkFBVyxDQUFDLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxDQUFDO1dBQUUsQ0FBQSxDQUFFLE1BQU0sU0FBTSxDQUFDLGlCQUFpQixDQUFDLENBQUM7Ozs7Ozs7R0FDMUYsQ0FBQyxDQUFDO0FBQ0gsVUFBUSxDQUFDLE9BQU8sRUFBRSxvQ0FBWSxFQUFDLEtBQUssRUFBRSxFQUFDLEdBQUcsRUFBSCxHQUFHLEVBQUUsWUFBWSxFQUFaLFlBQVksRUFBQyxFQUFDLEVBQUUsVUFBQyxDQUFDLEVBQUs7QUFDakUsTUFBRSxDQUFDLDRCQUE0QixFQUFFO1VBQzNCLElBQUksRUFFSixJQUFJOzs7O0FBRkosZ0JBQUksR0FBRyxJQUFJLG9CQUFPLFlBQVksRUFBRTs7QUFDcEMsZ0JBQUksQ0FBQyxLQUFLLEdBQUcsWUFBTSxFQUFHLENBQUM7QUFDbkIsZ0JBQUksR0FBRyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUscUJBQXFCLEVBQ3BFLElBQUksRUFBRSxrQkFBa0IsQ0FBQzs7QUFDckMsYUFBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxDQUMvQixhQUFhLENBQUMsWUFBWSxFQUFFLGtCQUFrQixDQUFDLENBQy9DLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNmLGFBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FDckMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3RCLGFBQUMsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FDdkMsSUFBSSxFQUFFLENBQUMsYUFBYSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FDckMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDOzs2Q0FDWCxXQUFXLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRSxrQkFBa0IsQ0FBQzs7O0FBQ3pELHVCQUFXLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDekMsYUFBQyxDQUFDLE1BQU0sRUFBRSxDQUFDOzs7Ozs7O0tBQ1osQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDLENBQUM7Q0FDTCxDQUFDLENBQUMiLCJmaWxlIjoidGVzdC91bml0L3VpYXV0b21hdG9yLXNwZWNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHJhbnNwaWxlIDptb2NoYVxuXG5pbXBvcnQgY2hhaSBmcm9tICdjaGFpJztcbmltcG9ydCBjaGFpQXNQcm9taXNlZCBmcm9tICdjaGFpLWFzLXByb21pc2VkJztcbmltcG9ydCBVaUF1dG9tYXRvciBmcm9tICcuLi8uLic7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBBREIgZnJvbSAnYXBwaXVtLWFkYic7XG5pbXBvcnQgeyB3aXRoU2FuZGJveCB9IGZyb20gJ2FwcGl1bS10ZXN0LXN1cHBvcnQnO1xuaW1wb3J0ICogYXMgdGVlbl9wcm9jZXNzIGZyb20gJ3RlZW5fcHJvY2Vzcyc7XG5pbXBvcnQgZXZlbnRzIGZyb20gJ2V2ZW50cyc7XG5cblxuY2hhaS5zaG91bGQoKTtcbmNoYWkudXNlKGNoYWlBc1Byb21pc2VkKTtcblxuZGVzY3JpYmUoJ1VpQXV0b21hdG9yJywgZnVuY3Rpb24gKCkge1xuICBsZXQgdWlBdXRvbWF0b3IsIGFkYj0gbmV3IEFEQigpO1xuICBsZXQgcm9vdERpciA9IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PX1BSRUNPTVBJTEUgPyAnLi4vLi4nIDogJy4uLy4uLy4uJyk7XG4gIGNvbnN0IGJvb3RzdHJhcEphciA9IHBhdGgucmVzb2x2ZShyb290RGlyLCAndGVzdCcsICdmaXh0dXJlcycsICdBcHBpdW1Cb290c3RyYXAuamFyJyksXG4gICAgICAgIGJvb3RzdHJhcENsYXNzTmFtZSA9ICdpby5hcHBpdW0uYW5kcm9pZC5ib290c3RyYXAuQm9vdHN0cmFwJztcbiAgYmVmb3JlKGZ1bmN0aW9uICgpIHtcbiAgICB1aUF1dG9tYXRvciA9IG5ldyBVaUF1dG9tYXRvcihhZGIpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHRocm93IGFuIGVycm9yIGlmIGFkYiBpcyBub3QgcGFzc2VkJywgZnVuY3Rpb24gKCkge1xuICAgICgoKSA9PiB7IG5ldyBVaUF1dG9tYXRvcigpOyB9KS5zaG91bGQudGhyb3coL2FkYiBpcyByZXF1aXJlZC8pO1xuICB9KTtcbiAgaXQoXCJwYXJzZUphck5hbWVGcm9tUGF0aCBzaG91bGQgcGFyc2UgamFyTmFtZSBmcm9tIHBhdGggYW5kIHdpbmRvd3MgcGF0aFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgdWlBdXRvbWF0b3IucGFyc2VKYXJOYW1lRnJvbVBhdGgoYm9vdHN0cmFwSmFyKS5zaG91bGQuZXF1YWwoJ0FwcGl1bUJvb3RzdHJhcC5qYXInKTtcbiAgICBsZXQgd2luZG93c0phck5hbWUgPSBgQzpcXFxcXFxcXGFwcGl1bVxcXFxiYXIuamFyYDtcbiAgICB1aUF1dG9tYXRvci5wYXJzZUphck5hbWVGcm9tUGF0aCh3aW5kb3dzSmFyTmFtZSkuc2hvdWxkLmVxdWFsKCdiYXIuamFyJyk7XG4gIH0pO1xuICBpdChcInBhcnNlSmFyTmFtZUZyb21QYXRoIHNob3VsZCB0aHJvdyBlcnJvciBmb3IgaW52YWxpZCBwYXRoXCIsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAoKCkgPT4geyB1aUF1dG9tYXRvci5wYXJzZUphck5hbWVGcm9tUGF0aCgnZm9vL2JhcicpOyB9KS5zaG91bGQudGhyb3coL1VuYWJsZSB0byBwYXJzZS8pO1xuICB9KTtcbiAgZGVzY3JpYmUoXCJzdGFydFwiLCB3aXRoU2FuZGJveCh7bW9ja3M6IHthZGIsIHRlZW5fcHJvY2Vzc319LCAoUykgPT4ge1xuICAgIGl0KFwic2hvdWxkIHJldHVybiBhIHN1YlByb2Nlc3NcIiwgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IGNvbm4gPSBuZXcgZXZlbnRzLkV2ZW50RW1pdHRlcigpO1xuICAgICAgY29ubi5zdGFydCA9ICgpID0+IHsgfTtcbiAgICAgIGxldCBhcmdzID0gW1wiLVBcIiwgNTAzNywgXCJzaGVsbFwiLCBcInVpYXV0b21hdG9yXCIsIFwicnVudGVzdFwiLCAnQXBwaXVtQm9vdHN0cmFwLmphcicsXG4gICAgICAgICAgICAgICAgICBcIi1jXCIsIGJvb3RzdHJhcENsYXNzTmFtZV07XG4gICAgICBTLm1vY2tzLmFkYi5leHBlY3RzKCdwdXNoJykub25jZSgpXG4gICAgICAgIC53aXRoRXhhY3RBcmdzKGJvb3RzdHJhcEphciwgXCIvZGF0YS9sb2NhbC90bXAvXCIpXG4gICAgICAgIC5yZXR1cm5zKCcnKTtcbiAgICAgIFMubW9ja3MuYWRiLmV4cGVjdHMoJ2dldEFkYlBhdGgnKS5vbmNlKClcbiAgICAgICAgLnJldHVybnMoJ2FkYlBhdGgnKTtcbiAgICAgIFMubW9ja3MudGVlbl9wcm9jZXNzLmV4cGVjdHMoXCJTdWJQcm9jZXNzXCIpXG4gICAgICAgIC5vbmNlKCkud2l0aEV4YWN0QXJncygnYWRiUGF0aCcsIGFyZ3MpXG4gICAgICAgIC5yZXR1cm5zKGNvbm4pO1xuICAgICAgYXdhaXQgdWlBdXRvbWF0b3Iuc3RhcnQoYm9vdHN0cmFwSmFyLCBib290c3RyYXBDbGFzc05hbWUpO1xuICAgICAgdWlBdXRvbWF0b3Iuc3RhdGUuc2hvdWxkLmVxdWFsKCdvbmxpbmUnKTtcbiAgICAgIFMudmVyaWZ5KCk7XG4gICAgfSk7XG4gIH0pKTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
