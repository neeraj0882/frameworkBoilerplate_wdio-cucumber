require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _ = require('../..');

var _2 = _interopRequireDefault(_);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('driver.js', function () {
  describe('constructor', function () {
    it('calls BaseDriver constructor with opts', function () {
      var driver = new _2['default']({ foo: 'bar' });
      driver.should.exist;
      driver.opts.foo.should.equal('bar');
    });
  });

  describe('createSession', function () {
    it('should set sessionId', function callee$2$0() {
      var driver;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver = new _2['default']({ app: 'myapp' }, false);

            _sinon2['default'].mock(driver).expects('startAppiumForMacSession').once().returns(_Promise.resolve());
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.createSession({ cap: 'foo' }));

          case 4:
            driver.sessionId.should.exist;
            driver.caps.cap.should.equal('foo');

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should set sessionId (W3C)', function callee$2$0() {
      var driver;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver = new _2['default']({ app: 'myapp' }, false);

            driver.shouldValidateCaps = false;
            _sinon2['default'].mock(driver).expects('startAppiumForMacSession').once().returns(_Promise.resolve());
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(driver.createSession(null, null, {
              alwaysMatch: { cap: 'foo' },
              firstMatch: [{}]
            }));

          case 5:
            driver.sessionId.should.exist;
            driver.caps.cap.should.equal('foo');

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });

  describe('proxying', function () {
    var driver = undefined;
    before(function () {
      driver = new _2['default']({}, false);
      driver.sessionId = 'abc';
    });
    describe('#proxyActive', function () {
      it('should exist', function () {
        driver.proxyActive.should.be.an['instanceof'](Function);
      });
      it('should return true', function () {
        driver.proxyActive('abc').should.be['true'];
      });
      it('should throw an error if session id is wrong', function () {
        (function () {
          driver.proxyActive('aaa');
        }).should['throw'];
      });
    });

    describe('#canProxy', function () {
      it('should exist', function () {
        driver.canProxy.should.be.an['instanceof'](Function);
      });
      it('should return true', function () {
        driver.canProxy('abc').should.be['true'];
      });
      it('should throw an error if session id is wrong', function () {
        (function () {
          driver.canProxy('aaa');
        }).should['throw'];
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvdW5pdC9kcml2ZXItc3BlY3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztnQkFFc0IsT0FBTzs7OztvQkFDWixNQUFNOzs7OzhCQUNJLGtCQUFrQjs7OztxQkFDM0IsT0FBTzs7OztBQUV6QixrQkFBSyxNQUFNLEVBQUUsQ0FBQztBQUNkLGtCQUFLLEdBQUcsNkJBQWdCLENBQUM7O0FBRXpCLFFBQVEsQ0FBQyxXQUFXLEVBQUUsWUFBWTtBQUNoQyxVQUFRLENBQUMsYUFBYSxFQUFFLFlBQVk7QUFDbEMsTUFBRSxDQUFDLHdDQUF3QyxFQUFFLFlBQVk7QUFDdkQsVUFBSSxNQUFNLEdBQUcsa0JBQWMsRUFBQyxHQUFHLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQztBQUN6QyxZQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztBQUNwQixZQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ3JDLENBQUMsQ0FBQztHQUNKLENBQUMsQ0FBQzs7QUFFSCxVQUFRLENBQUMsZUFBZSxFQUFFLFlBQVk7QUFDcEMsTUFBRSxDQUFDLHNCQUFzQixFQUFFO1VBQ3JCLE1BQU07Ozs7QUFBTixrQkFBTSxHQUFHLGtCQUFjLEVBQUMsR0FBRyxFQUFFLE9BQU8sRUFBQyxFQUFFLEtBQUssQ0FBQzs7QUFDakQsK0JBQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQyxDQUNqRCxJQUFJLEVBQUUsQ0FDTixPQUFPLENBQUMsU0FBUSxPQUFPLEVBQUUsQ0FBQyxDQUFDOzs2Q0FDMUIsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUMsQ0FBQzs7O0FBQ3hDLGtCQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7QUFDOUIsa0JBQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7Ozs7Ozs7S0FDckMsQ0FBQyxDQUFDO0FBQ0gsTUFBRSxDQUFDLDRCQUE0QixFQUFFO1VBQzNCLE1BQU07Ozs7QUFBTixrQkFBTSxHQUFHLGtCQUFjLEVBQUMsR0FBRyxFQUFFLE9BQU8sRUFBQyxFQUFFLEtBQUssQ0FBQzs7QUFDakQsa0JBQU0sQ0FBQyxrQkFBa0IsR0FBRyxLQUFLLENBQUM7QUFDbEMsK0JBQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQyxDQUNqRCxJQUFJLEVBQUUsQ0FDTixPQUFPLENBQUMsU0FBUSxPQUFPLEVBQUUsQ0FBQyxDQUFDOzs2Q0FDMUIsTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFO0FBQ3JDLHlCQUFXLEVBQUUsRUFBQyxHQUFHLEVBQUUsS0FBSyxFQUFDO0FBQ3pCLHdCQUFVLEVBQUUsQ0FBQyxFQUFFLENBQUM7YUFDakIsQ0FBQzs7O0FBQ0Ysa0JBQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztBQUM5QixrQkFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQzs7Ozs7OztLQUNyQyxDQUFDLENBQUM7R0FDSixDQUFDLENBQUM7O0FBRUgsVUFBUSxDQUFDLFVBQVUsRUFBRSxZQUFZO0FBQy9CLFFBQUksTUFBTSxZQUFBLENBQUM7QUFDWCxVQUFNLENBQUMsWUFBWTtBQUNqQixZQUFNLEdBQUcsa0JBQWMsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ2xDLFlBQU0sQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO0tBQzFCLENBQUMsQ0FBQztBQUNILFlBQVEsQ0FBQyxjQUFjLEVBQUUsWUFBWTtBQUNuQyxRQUFFLENBQUMsY0FBYyxFQUFFLFlBQVk7QUFDN0IsY0FBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsY0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO09BQ3RELENBQUMsQ0FBQztBQUNILFFBQUUsQ0FBQyxvQkFBb0IsRUFBRSxZQUFZO0FBQ25DLGNBQU0sQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsUUFBSyxDQUFDO09BQzFDLENBQUMsQ0FBQztBQUNILFFBQUUsQ0FBQyw4Q0FBOEMsRUFBRSxZQUFZO0FBQzdELFNBQUMsWUFBTTtBQUFDLGdCQUFNLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQUMsQ0FBQSxDQUFFLE1BQU0sU0FBTSxDQUFDO09BQ25ELENBQUMsQ0FBQztLQUNKLENBQUMsQ0FBQzs7QUFFSCxZQUFRLENBQUMsV0FBVyxFQUFFLFlBQVk7QUFDaEMsUUFBRSxDQUFDLGNBQWMsRUFBRSxZQUFZO0FBQzdCLGNBQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLGNBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztPQUNuRCxDQUFDLENBQUM7QUFDSCxRQUFFLENBQUMsb0JBQW9CLEVBQUUsWUFBWTtBQUNuQyxjQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLFFBQUssQ0FBQztPQUN2QyxDQUFDLENBQUM7QUFDSCxRQUFFLENBQUMsOENBQThDLEVBQUUsWUFBWTtBQUM3RCxTQUFDLFlBQU07QUFBQyxnQkFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUFFLENBQUEsQ0FBRSxNQUFNLFNBQU0sQ0FBQztPQUNqRCxDQUFDLENBQUM7S0FDSixDQUFDLENBQUM7R0FDSixDQUFDLENBQUM7Q0FDSixDQUFDLENBQUMiLCJmaWxlIjoidGVzdC91bml0L2RyaXZlci1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRyYW5zcGlsZTptb2NoYVxuXG5pbXBvcnQgTWFjRHJpdmVyIGZyb20gJy4uLy4uJztcbmltcG9ydCBjaGFpIGZyb20gJ2NoYWknO1xuaW1wb3J0IGNoYWlBc1Byb21pc2VkIGZyb20gJ2NoYWktYXMtcHJvbWlzZWQnO1xuaW1wb3J0IHNpbm9uIGZyb20gJ3Npbm9uJztcblxuY2hhaS5zaG91bGQoKTtcbmNoYWkudXNlKGNoYWlBc1Byb21pc2VkKTtcblxuZGVzY3JpYmUoJ2RyaXZlci5qcycsIGZ1bmN0aW9uICgpIHtcbiAgZGVzY3JpYmUoJ2NvbnN0cnVjdG9yJywgZnVuY3Rpb24gKCkge1xuICAgIGl0KCdjYWxscyBCYXNlRHJpdmVyIGNvbnN0cnVjdG9yIHdpdGggb3B0cycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBkcml2ZXIgPSBuZXcgTWFjRHJpdmVyKHtmb286ICdiYXInfSk7XG4gICAgICBkcml2ZXIuc2hvdWxkLmV4aXN0O1xuICAgICAgZHJpdmVyLm9wdHMuZm9vLnNob3VsZC5lcXVhbCgnYmFyJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdjcmVhdGVTZXNzaW9uJywgZnVuY3Rpb24gKCkge1xuICAgIGl0KCdzaG91bGQgc2V0IHNlc3Npb25JZCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBkcml2ZXIgPSBuZXcgTWFjRHJpdmVyKHthcHA6ICdteWFwcCd9LCBmYWxzZSk7XG4gICAgICBzaW5vbi5tb2NrKGRyaXZlcikuZXhwZWN0cygnc3RhcnRBcHBpdW1Gb3JNYWNTZXNzaW9uJylcbiAgICAgICAgICAub25jZSgpXG4gICAgICAgICAgLnJldHVybnMoUHJvbWlzZS5yZXNvbHZlKCkpO1xuICAgICAgYXdhaXQgZHJpdmVyLmNyZWF0ZVNlc3Npb24oe2NhcDogJ2Zvbyd9KTtcbiAgICAgIGRyaXZlci5zZXNzaW9uSWQuc2hvdWxkLmV4aXN0O1xuICAgICAgZHJpdmVyLmNhcHMuY2FwLnNob3VsZC5lcXVhbCgnZm9vJyk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBzZXQgc2Vzc2lvbklkIChXM0MpJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IGRyaXZlciA9IG5ldyBNYWNEcml2ZXIoe2FwcDogJ215YXBwJ30sIGZhbHNlKTtcbiAgICAgIGRyaXZlci5zaG91bGRWYWxpZGF0ZUNhcHMgPSBmYWxzZTtcbiAgICAgIHNpbm9uLm1vY2soZHJpdmVyKS5leHBlY3RzKCdzdGFydEFwcGl1bUZvck1hY1Nlc3Npb24nKVxuICAgICAgICAgIC5vbmNlKClcbiAgICAgICAgICAucmV0dXJucyhQcm9taXNlLnJlc29sdmUoKSk7XG4gICAgICBhd2FpdCBkcml2ZXIuY3JlYXRlU2Vzc2lvbihudWxsLCBudWxsLCB7XG4gICAgICAgIGFsd2F5c01hdGNoOiB7Y2FwOiAnZm9vJ30sXG4gICAgICAgIGZpcnN0TWF0Y2g6IFt7fV0sXG4gICAgICB9KTtcbiAgICAgIGRyaXZlci5zZXNzaW9uSWQuc2hvdWxkLmV4aXN0O1xuICAgICAgZHJpdmVyLmNhcHMuY2FwLnNob3VsZC5lcXVhbCgnZm9vJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdwcm94eWluZycsIGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgZHJpdmVyO1xuICAgIGJlZm9yZShmdW5jdGlvbiAoKSB7XG4gICAgICBkcml2ZXIgPSBuZXcgTWFjRHJpdmVyKHt9LCBmYWxzZSk7XG4gICAgICBkcml2ZXIuc2Vzc2lvbklkID0gJ2FiYyc7XG4gICAgfSk7XG4gICAgZGVzY3JpYmUoJyNwcm94eUFjdGl2ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGl0KCdzaG91bGQgZXhpc3QnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRyaXZlci5wcm94eUFjdGl2ZS5zaG91bGQuYmUuYW4uaW5zdGFuY2VvZihGdW5jdGlvbik7XG4gICAgICB9KTtcbiAgICAgIGl0KCdzaG91bGQgcmV0dXJuIHRydWUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRyaXZlci5wcm94eUFjdGl2ZSgnYWJjJykuc2hvdWxkLmJlLnRydWU7XG4gICAgICB9KTtcbiAgICAgIGl0KCdzaG91bGQgdGhyb3cgYW4gZXJyb3IgaWYgc2Vzc2lvbiBpZCBpcyB3cm9uZycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgKCgpID0+IHtkcml2ZXIucHJveHlBY3RpdmUoJ2FhYScpO30pLnNob3VsZC50aHJvdztcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJyNjYW5Qcm94eScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGl0KCdzaG91bGQgZXhpc3QnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRyaXZlci5jYW5Qcm94eS5zaG91bGQuYmUuYW4uaW5zdGFuY2VvZihGdW5jdGlvbik7XG4gICAgICB9KTtcbiAgICAgIGl0KCdzaG91bGQgcmV0dXJuIHRydWUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRyaXZlci5jYW5Qcm94eSgnYWJjJykuc2hvdWxkLmJlLnRydWU7XG4gICAgICB9KTtcbiAgICAgIGl0KCdzaG91bGQgdGhyb3cgYW4gZXJyb3IgaWYgc2Vzc2lvbiBpZCBpcyB3cm9uZycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgKCgpID0+IHtkcml2ZXIuY2FuUHJveHkoJ2FhYScpOyB9KS5zaG91bGQudGhyb3c7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
