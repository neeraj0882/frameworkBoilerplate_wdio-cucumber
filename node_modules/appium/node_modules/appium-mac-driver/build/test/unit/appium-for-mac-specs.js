require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _libAppiumForMac = require('../../lib/appium-for-mac');

var _libAppiumForMac2 = _interopRequireDefault(_libAppiumForMac);

var _appiumTestSupport = require('appium-test-support');

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

function buildAppiumForMacOpts() {
  return {
    app: 'foo',
    platformName: 'Mac',
    host: 'localhost',
    port: 4623
  };
}

describe('AppiumForMac', function () {
  describe('#startSession', (0, _appiumTestSupport.withMocks)({}, function (mocks, S) {
    var appium4MacDriver = new _libAppiumForMac2['default'](buildAppiumForMacOpts());

    it('should start a session', function callee$2$0() {
      var caps;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            caps = { foo: 'bar' };

            mocks.jwproxy = S.sandbox.mock(appium4MacDriver.jwproxy);
            mocks.jwproxy.expects("command").once().withExactArgs("/session", "POST", { desiredCapabilities: caps }).returns(_Promise.resolve());
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(appium4MacDriver.startSession(caps));

          case 5:
            mocks.jwproxy.verify();

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvdW5pdC9hcHBpdW0tZm9yLW1hYy1zcGVjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O29CQUVpQixNQUFNOzs7OzhCQUNJLGtCQUFrQjs7OzsrQkFDcEIsMEJBQTBCOzs7O2lDQUN6QixxQkFBcUI7O0FBRS9DLGtCQUFLLE1BQU0sRUFBRSxDQUFDO0FBQ2Qsa0JBQUssR0FBRyw2QkFBZ0IsQ0FBQzs7QUFFekIsU0FBUyxxQkFBcUIsR0FBSTtBQUNoQyxTQUFPO0FBQ0wsT0FBRyxFQUFFLEtBQUs7QUFDVixnQkFBWSxFQUFFLEtBQUs7QUFDbkIsUUFBSSxFQUFFLFdBQVc7QUFDakIsUUFBSSxFQUFFLElBQUk7R0FDWCxDQUFDO0NBQ0g7O0FBRUQsUUFBUSxDQUFDLGNBQWMsRUFBRSxZQUFZO0FBQ25DLFVBQVEsQ0FBQyxlQUFlLEVBQUUsa0NBQVUsRUFBRyxFQUFFLFVBQUMsS0FBSyxFQUFFLENBQUMsRUFBSztBQUNyRCxRQUFJLGdCQUFnQixHQUFHLGlDQUFpQixxQkFBcUIsRUFBRSxDQUFDLENBQUM7O0FBRWpFLE1BQUUsQ0FBQyx3QkFBd0IsRUFBRTtVQUN2QixJQUFJOzs7O0FBQUosZ0JBQUksR0FBRyxFQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUM7O0FBQ3ZCLGlCQUFLLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3pELGlCQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FDcEMsYUFBYSxDQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUUsRUFBQyxtQkFBbUIsRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUM5RCxPQUFPLENBQUMsU0FBUSxPQUFPLEVBQUUsQ0FBQyxDQUFDOzs2Q0FDeEIsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQzs7O0FBQ3pDLGlCQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDOzs7Ozs7O0tBQ3hCLENBQUMsQ0FBQztHQUNKLENBQUMsQ0FBQyxDQUFDO0NBQ0wsQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3QvdW5pdC9hcHBpdW0tZm9yLW1hYy1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRyYW5zcGlsZTptb2NoYVxuXG5pbXBvcnQgY2hhaSBmcm9tICdjaGFpJztcbmltcG9ydCBjaGFpQXNQcm9taXNlZCBmcm9tICdjaGFpLWFzLXByb21pc2VkJztcbmltcG9ydCBBcHBpdW1Gb3JNYWMgZnJvbSAnLi4vLi4vbGliL2FwcGl1bS1mb3ItbWFjJztcbmltcG9ydCB7IHdpdGhNb2NrcyB9IGZyb20gJ2FwcGl1bS10ZXN0LXN1cHBvcnQnO1xuXG5jaGFpLnNob3VsZCgpO1xuY2hhaS51c2UoY2hhaUFzUHJvbWlzZWQpO1xuXG5mdW5jdGlvbiBidWlsZEFwcGl1bUZvck1hY09wdHMgKCkge1xuICByZXR1cm4ge1xuICAgIGFwcDogJ2ZvbycsXG4gICAgcGxhdGZvcm1OYW1lOiAnTWFjJyxcbiAgICBob3N0OiAnbG9jYWxob3N0JyxcbiAgICBwb3J0OiA0NjIzXG4gIH07XG59XG5cbmRlc2NyaWJlKCdBcHBpdW1Gb3JNYWMnLCBmdW5jdGlvbiAoKSB7XG4gIGRlc2NyaWJlKCcjc3RhcnRTZXNzaW9uJywgd2l0aE1vY2tzKHsgfSwgKG1vY2tzLCBTKSA9PiB7XG4gICAgbGV0IGFwcGl1bTRNYWNEcml2ZXIgPSBuZXcgQXBwaXVtRm9yTWFjKGJ1aWxkQXBwaXVtRm9yTWFjT3B0cygpKTtcblxuICAgIGl0KCdzaG91bGQgc3RhcnQgYSBzZXNzaW9uJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IGNhcHMgPSB7Zm9vOiAnYmFyJ307XG4gICAgICBtb2Nrcy5qd3Byb3h5ID0gUy5zYW5kYm94Lm1vY2soYXBwaXVtNE1hY0RyaXZlci5qd3Byb3h5KTtcbiAgICAgIG1vY2tzLmp3cHJveHkuZXhwZWN0cyhcImNvbW1hbmRcIikub25jZSgpXG4gICAgICAgIC53aXRoRXhhY3RBcmdzKFwiL3Nlc3Npb25cIiwgXCJQT1NUXCIsIHtkZXNpcmVkQ2FwYWJpbGl0aWVzOiBjYXBzfSlcbiAgICAgICAgLnJldHVybnMoUHJvbWlzZS5yZXNvbHZlKCkpO1xuICAgICAgYXdhaXQgYXBwaXVtNE1hY0RyaXZlci5zdGFydFNlc3Npb24oY2Fwcyk7XG4gICAgICBtb2Nrcy5qd3Byb3h5LnZlcmlmeSgpO1xuICAgIH0pO1xuICB9KSk7XG59KTtcblxuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
