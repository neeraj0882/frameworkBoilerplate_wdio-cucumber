#!/usr/bin/env node

/* eslint-disable no-console */

'use strict';

var fs = require('fs'),
    path = require('path'),
    system = require('appium-support').system;

function waitForDeps(cb) {
  // see if we can import the necessary code
  // try it a ridiculous (but finite) number of times
  var i = 0;
  function check() {
    i++;
    try {
      require('./build/lib/installer');
      cb();
    } catch (err) {
      if (err.message.indexOf("Cannot find module './build/lib/installer'") !== -1) {
        console.warn('Project does not appear to built yet. Please run `gulp transpile` first.');
        return cb('Could not install module: ' + err);
      }
      console.warn('Error trying to install WinAppDriver MSI. Waiting and trying again.', err.message);
      if (i <= 200) {
        setTimeout(check, 1000);
      } else {
        cb('Could not import installation module: ' + err);
      }
    }
  }
  check();
}

if (require.main === module) {
  if (!system.isWindows()) {
    console.warn("Not installing WinAppDriver since did not detect a Windows system");
    process.exit(0);
  }
  // check if cur dir exists
  var installScript = path.resolve(__dirname, 'build', 'lib', 'installer.js');
  waitForDeps(function (err) {
    if (err) {
      console.warn("Unable to import install script. Re-run `install appium-windows-driver` manually.");
      return;
    }
    fs.stat(installScript, function (err) {
      if (err) {
        console.warn("NOTE: Run 'gulp transpile' before using");
        return;
      }
      require('./build/lib/installer').setupWAD()['catch'](function (err) {
        console.error(err.message);
        console.error("WinAppDriver was not installed; please check your " + "system and re-run npm install if you need WinAppDriver");
      });
    });
  });
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluc3RhbGwtbnBtLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBR0EsSUFBSSxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztJQUNsQixJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztJQUN0QixNQUFNLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUMsTUFBTSxDQUFDOztBQUc5QyxTQUFTLFdBQVcsQ0FBRSxFQUFFLEVBQUU7OztBQUd4QixNQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDVixXQUFTLEtBQUssR0FBSTtBQUNoQixLQUFDLEVBQUUsQ0FBQztBQUNKLFFBQUk7QUFDRixhQUFPLENBQUMsdUJBQXVCLENBQUMsQ0FBQztBQUNqQyxRQUFFLEVBQUUsQ0FBQztLQUNOLENBQUMsT0FBTyxHQUFHLEVBQUU7QUFDWixVQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLDRDQUE0QyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7QUFDNUUsZUFBTyxDQUFDLElBQUksQ0FBQywwRUFBMEUsQ0FBQyxDQUFDO0FBQ3pGLGVBQU8sRUFBRSxDQUFDLDRCQUE0QixHQUFHLEdBQUcsQ0FBQyxDQUFDO09BQy9DO0FBQ0QsYUFBTyxDQUFDLElBQUksQ0FBQyxxRUFBcUUsRUFBRSxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDakcsVUFBSSxDQUFDLElBQUksR0FBRyxFQUFFO0FBQ1osa0JBQVUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7T0FDekIsTUFBTTtBQUNMLFVBQUUsQ0FBQyx3Q0FBd0MsR0FBRyxHQUFHLENBQUMsQ0FBQztPQUNwRDtLQUNGO0dBQ0Y7QUFDRCxPQUFLLEVBQUUsQ0FBQztDQUNUOztBQUVELElBQUksT0FBTyxDQUFDLElBQUksS0FBSyxNQUFNLEVBQUU7QUFDM0IsTUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRTtBQUN2QixXQUFPLENBQUMsSUFBSSxDQUFDLG1FQUFtRSxDQUFDLENBQUM7QUFDbEYsV0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztHQUNqQjs7QUFFRCxNQUFJLGFBQWEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLGNBQWMsQ0FBQyxDQUFDO0FBQzVFLGFBQVcsQ0FBQyxVQUFVLEdBQUcsRUFBRTtBQUN6QixRQUFJLEdBQUcsRUFBRTtBQUNQLGFBQU8sQ0FBQyxJQUFJLENBQUMsbUZBQW1GLENBQUMsQ0FBQztBQUNsRyxhQUFPO0tBQ1I7QUFDRCxNQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxVQUFVLEdBQUcsRUFBRTtBQUNwQyxVQUFJLEdBQUcsRUFBRTtBQUNQLGVBQU8sQ0FBQyxJQUFJLENBQUMseUNBQXlDLENBQUMsQ0FBQztBQUN4RCxlQUFPO09BQ1I7QUFDRCxhQUFPLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxRQUFRLEVBQUUsU0FBTSxDQUFDLFVBQVUsR0FBRyxFQUFFO0FBQy9ELGVBQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzNCLGVBQU8sQ0FBQyxLQUFLLENBQUMsb0RBQW9ELEdBQ3BELHdEQUF3RCxDQUFDLENBQUM7T0FDekUsQ0FBQyxDQUFDO0tBQ0osQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDO0NBQ0oiLCJmaWxlIjoiaW5zdGFsbC1ucG0uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cblxudmFyIGZzID0gcmVxdWlyZSgnZnMnKVxuICAsIHBhdGggPSByZXF1aXJlKCdwYXRoJylcbiAgLCBzeXN0ZW0gPSByZXF1aXJlKCdhcHBpdW0tc3VwcG9ydCcpLnN5c3RlbTtcblxuXG5mdW5jdGlvbiB3YWl0Rm9yRGVwcyAoY2IpIHtcbiAgLy8gc2VlIGlmIHdlIGNhbiBpbXBvcnQgdGhlIG5lY2Vzc2FyeSBjb2RlXG4gIC8vIHRyeSBpdCBhIHJpZGljdWxvdXMgKGJ1dCBmaW5pdGUpIG51bWJlciBvZiB0aW1lc1xuICB2YXIgaSA9IDA7XG4gIGZ1bmN0aW9uIGNoZWNrICgpIHtcbiAgICBpKys7XG4gICAgdHJ5IHtcbiAgICAgIHJlcXVpcmUoJy4vYnVpbGQvbGliL2luc3RhbGxlcicpO1xuICAgICAgY2IoKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGlmIChlcnIubWVzc2FnZS5pbmRleE9mKFwiQ2Fubm90IGZpbmQgbW9kdWxlICcuL2J1aWxkL2xpYi9pbnN0YWxsZXInXCIpICE9PSAtMSkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ1Byb2plY3QgZG9lcyBub3QgYXBwZWFyIHRvIGJ1aWx0IHlldC4gUGxlYXNlIHJ1biBgZ3VscCB0cmFuc3BpbGVgIGZpcnN0LicpO1xuICAgICAgICByZXR1cm4gY2IoJ0NvdWxkIG5vdCBpbnN0YWxsIG1vZHVsZTogJyArIGVycik7XG4gICAgICB9XG4gICAgICBjb25zb2xlLndhcm4oJ0Vycm9yIHRyeWluZyB0byBpbnN0YWxsIFdpbkFwcERyaXZlciBNU0kuIFdhaXRpbmcgYW5kIHRyeWluZyBhZ2Fpbi4nLCBlcnIubWVzc2FnZSk7XG4gICAgICBpZiAoaSA8PSAyMDApIHtcbiAgICAgICAgc2V0VGltZW91dChjaGVjaywgMTAwMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYignQ291bGQgbm90IGltcG9ydCBpbnN0YWxsYXRpb24gbW9kdWxlOiAnICsgZXJyKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY2hlY2soKTtcbn1cblxuaWYgKHJlcXVpcmUubWFpbiA9PT0gbW9kdWxlKSB7XG4gIGlmICghc3lzdGVtLmlzV2luZG93cygpKSB7XG4gICAgY29uc29sZS53YXJuKFwiTm90IGluc3RhbGxpbmcgV2luQXBwRHJpdmVyIHNpbmNlIGRpZCBub3QgZGV0ZWN0IGEgV2luZG93cyBzeXN0ZW1cIik7XG4gICAgcHJvY2Vzcy5leGl0KDApO1xuICB9XG4gIC8vIGNoZWNrIGlmIGN1ciBkaXIgZXhpc3RzXG4gIHZhciBpbnN0YWxsU2NyaXB0ID0gcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJ2J1aWxkJywgJ2xpYicsICdpbnN0YWxsZXIuanMnKTtcbiAgd2FpdEZvckRlcHMoZnVuY3Rpb24gKGVycikge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIlVuYWJsZSB0byBpbXBvcnQgaW5zdGFsbCBzY3JpcHQuIFJlLXJ1biBgaW5zdGFsbCBhcHBpdW0td2luZG93cy1kcml2ZXJgIG1hbnVhbGx5LlwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZnMuc3RhdChpbnN0YWxsU2NyaXB0LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIk5PVEU6IFJ1biAnZ3VscCB0cmFuc3BpbGUnIGJlZm9yZSB1c2luZ1wiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcmVxdWlyZSgnLi9idWlsZC9saWIvaW5zdGFsbGVyJykuc2V0dXBXQUQoKS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyLm1lc3NhZ2UpO1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiV2luQXBwRHJpdmVyIHdhcyBub3QgaW5zdGFsbGVkOyBwbGVhc2UgY2hlY2sgeW91ciBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgXCJzeXN0ZW0gYW5kIHJlLXJ1biBucG0gaW5zdGFsbCBpZiB5b3UgbmVlZCBXaW5BcHBEcml2ZXJcIik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbiJdLCJzb3VyY2VSb290IjoiLi4ifQ==
