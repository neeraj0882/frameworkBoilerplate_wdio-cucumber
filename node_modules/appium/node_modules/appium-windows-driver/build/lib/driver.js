'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumBaseDriver = require('appium-base-driver');

var _appiumSupport = require('appium-support');

var _winappdriver = require('./winappdriver');

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

// Appium instantiates this class

var WindowsDriver = (function (_BaseDriver) {
  _inherits(WindowsDriver, _BaseDriver);

  function WindowsDriver() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var shouldValidateCaps = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

    _classCallCheck(this, WindowsDriver);

    _get(Object.getPrototypeOf(WindowsDriver.prototype), 'constructor', this).call(this, opts, shouldValidateCaps);
    this.jwpProxyActive = false;
    this.opts.address = opts.address || _winappdriver.DEFAULT_WAD_HOST;
  }

  _createClass(WindowsDriver, [{
    key: 'createSession',
    value: function createSession(caps, reqCaps, curSessions) {
      var sessionId, _ref, _ref2;

      return _regeneratorRuntime.async(function createSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (_appiumSupport.system.isWindows()) {
              context$2$0.next = 2;
              break;
            }

            throw new Error("WinAppDriver tests only run on Windows");

          case 2:
            context$2$0.prev = 2;
            sessionId = undefined;
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(_get(Object.getPrototypeOf(WindowsDriver.prototype), 'createSession', this).call(this, caps));

          case 6:
            _ref = context$2$0.sent;
            _ref2 = _slicedToArray(_ref, 1);
            sessionId = _ref2[0];
            context$2$0.next = 11;
            return _regeneratorRuntime.awrap(this.startWinAppDriverSession(curSessions));

          case 11:
            return context$2$0.abrupt('return', [sessionId, caps]);

          case 14:
            context$2$0.prev = 14;
            context$2$0.t0 = context$2$0['catch'](2);
            context$2$0.next = 18;
            return _regeneratorRuntime.awrap(this.deleteSession());

          case 18:
            throw context$2$0.t0;

          case 19:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[2, 14]]);
    }
  }, {
    key: 'getNextAvailablePort',
    value: function getNextAvailablePort(curSessions) {
      var newWADPort = _winappdriver.DEFAULT_WAD_PORT;

      // start at 4724 and go up till we find a port that isn't in use
      while (_lodash2['default'].find(curSessions, function (o) {
        return o.WADPort === newWADPort;
      })) {
        newWADPort++;
      }

      return newWADPort;
    }
  }, {
    key: 'startWinAppDriverSession',
    value: function startWinAppDriverSession(curSessions) {
      return _regeneratorRuntime.async(function startWinAppDriverSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:

            this.opts.port = this.getNextAvailablePort(curSessions);
            this.winAppDriver = new _winappdriver.WinAppDriver({
              app: this.opts.app,
              port: this.opts.port
            });

            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.winAppDriver.start());

          case 4:
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.winAppDriver.startSession(this.caps));

          case 6:
            this.proxyReqRes = this.winAppDriver.proxyReqRes.bind(this.winAppDriver);
            // now that everything has started successfully, turn on proxying so all
            // subsequent session requests go straight to/from WinAppDriver
            this.jwpProxyActive = true;

          case 8:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'deleteSession',
    value: function deleteSession() {
      return _regeneratorRuntime.async(function deleteSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Deleting WinAppDriver session');

            if (!(this.winAppDriver && this.jwpProxyActive)) {
              context$2$0.next = 7;
              break;
            }

            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.winAppDriver.deleteSession());

          case 4:
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.winAppDriver.stop());

          case 6:
            this.winAppDriver = null;

          case 7:
            this.jwpProxyActive = false;
            context$2$0.next = 10;
            return _regeneratorRuntime.awrap(_get(Object.getPrototypeOf(WindowsDriver.prototype), 'deleteSession', this).call(this));

          case 10:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'proxyActive',
    value: function proxyActive() {
      // we always have an active proxy to the WinAppDriver server
      return true;
    }
  }, {
    key: 'canProxy',
    value: function canProxy() {
      // we can always proxy to the WinAppDriver server
      return true;
    }
  }, {
    key: 'driverData',
    get: function get() {
      return { WADPort: this.opts.port };
    }
  }]);

  return WindowsDriver;
})(_appiumBaseDriver.BaseDriver);

exports.WindowsDriver = WindowsDriver;
exports['default'] = WindowsDriver;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9kcml2ZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7c0JBQWMsUUFBUTs7OztnQ0FDSyxvQkFBb0I7OzZCQUN4QixnQkFBZ0I7OzRCQUMwQixnQkFBZ0I7O3NCQUM5RCxVQUFVOzs7Ozs7SUFHdkIsYUFBYTtZQUFiLGFBQWE7O0FBQ0wsV0FEUixhQUFhLEdBQ2tDO1FBQXRDLElBQUkseURBQUcsRUFBRTtRQUFFLGtCQUFrQix5REFBRyxJQUFJOzswQkFEN0MsYUFBYTs7QUFFZiwrQkFGRSxhQUFhLDZDQUVULElBQUksRUFBRSxrQkFBa0IsRUFBRTtBQUNoQyxRQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQztBQUM1QixRQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxrQ0FBb0IsQ0FBQztHQUN0RDs7ZUFMRyxhQUFhOztXQU9HLHVCQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsV0FBVztVQU12QyxTQUFTOzs7OztnQkFKVixzQkFBTyxTQUFTLEVBQUU7Ozs7O2tCQUNmLElBQUksS0FBSyxDQUFDLHdDQUF3QyxDQUFDOzs7O0FBR3JELHFCQUFTOzt3RUFiYixhQUFhLCtDQWMyQixJQUFJOzs7OztBQUEzQyxxQkFBUzs7NkNBQ0osSUFBSSxDQUFDLHdCQUF3QixDQUFDLFdBQVcsQ0FBQzs7O2dEQUN6QyxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUM7Ozs7Ozs2Q0FFbEIsSUFBSSxDQUFDLGFBQWEsRUFBRTs7Ozs7Ozs7OztLQUc3Qjs7O1dBRW1CLDhCQUFDLFdBQVcsRUFBRTtBQUNoQyxVQUFJLFVBQVUsaUNBQW1CLENBQUM7OztBQUdsQyxhQUFPLG9CQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsVUFBQyxDQUFDO2VBQUssQ0FBQyxDQUFDLE9BQU8sS0FBSyxVQUFVO09BQUEsQ0FBQyxFQUFFO0FBQzNELGtCQUFVLEVBQUUsQ0FBQztPQUNkOztBQUVELGFBQU8sVUFBVSxDQUFDO0tBQ25COzs7V0FFOEIsa0NBQUMsV0FBVzs7Ozs7QUFFekMsZ0JBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUN4RCxnQkFBSSxDQUFDLFlBQVksR0FBRywrQkFBaUI7QUFDbkMsaUJBQUcsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUc7QUFDbEIsa0JBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUk7YUFDckIsQ0FBQyxDQUFDOzs7NkNBRUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUU7Ozs7NkNBQ3pCLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7OztBQUMvQyxnQkFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDOzs7QUFHekUsZ0JBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDOzs7Ozs7O0tBQzVCOzs7V0FFbUI7Ozs7QUFDbEIsZ0NBQU8sS0FBSyxDQUFDLCtCQUErQixDQUFDLENBQUM7O2tCQUUxQyxJQUFJLENBQUMsWUFBWSxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUE7Ozs7Ozs2Q0FDcEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUU7Ozs7NkNBQ2pDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFOzs7QUFDOUIsZ0JBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDOzs7QUFFM0IsZ0JBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDOzt3RUExRDFCLGFBQWE7Ozs7Ozs7S0E0RGhCOzs7V0FFVyx1QkFBRzs7QUFFYixhQUFPLElBQUksQ0FBQztLQUNiOzs7V0FFUSxvQkFBRzs7QUFFVixhQUFPLElBQUksQ0FBQztLQUNiOzs7U0FFYyxlQUFHO0FBQ2hCLGFBQU8sRUFBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUMsQ0FBQztLQUNsQzs7O1NBMUVHLGFBQWE7OztRQTZFVixhQUFhLEdBQWIsYUFBYTtxQkFDUCxhQUFhIiwiZmlsZSI6ImxpYi9kcml2ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgQmFzZURyaXZlciB9IGZyb20gJ2FwcGl1bS1iYXNlLWRyaXZlcic7XG5pbXBvcnQgeyBzeXN0ZW0gfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgeyBXaW5BcHBEcml2ZXIsIERFRkFVTFRfV0FEX0hPU1QsIERFRkFVTFRfV0FEX1BPUlQgfSBmcm9tICcuL3dpbmFwcGRyaXZlcic7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4vbG9nZ2VyJztcblxuLy8gQXBwaXVtIGluc3RhbnRpYXRlcyB0aGlzIGNsYXNzXG5jbGFzcyBXaW5kb3dzRHJpdmVyIGV4dGVuZHMgQmFzZURyaXZlciB7XG4gIGNvbnN0cnVjdG9yIChvcHRzID0ge30sIHNob3VsZFZhbGlkYXRlQ2FwcyA9IHRydWUpIHtcbiAgICBzdXBlcihvcHRzLCBzaG91bGRWYWxpZGF0ZUNhcHMpO1xuICAgIHRoaXMuandwUHJveHlBY3RpdmUgPSBmYWxzZTtcbiAgICB0aGlzLm9wdHMuYWRkcmVzcyA9IG9wdHMuYWRkcmVzcyB8fCBERUZBVUxUX1dBRF9IT1NUO1xuICB9XG5cbiAgYXN5bmMgY3JlYXRlU2Vzc2lvbiAoY2FwcywgcmVxQ2FwcywgY3VyU2Vzc2lvbnMpIHtcblxuICAgIGlmICghc3lzdGVtLmlzV2luZG93cygpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJXaW5BcHBEcml2ZXIgdGVzdHMgb25seSBydW4gb24gV2luZG93c1wiKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGxldCBzZXNzaW9uSWQ7XG4gICAgICBbc2Vzc2lvbklkXSA9IGF3YWl0IHN1cGVyLmNyZWF0ZVNlc3Npb24oY2Fwcyk7XG4gICAgICBhd2FpdCB0aGlzLnN0YXJ0V2luQXBwRHJpdmVyU2Vzc2lvbihjdXJTZXNzaW9ucyk7XG4gICAgICByZXR1cm4gW3Nlc3Npb25JZCwgY2Fwc107XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgYXdhaXQgdGhpcy5kZWxldGVTZXNzaW9uKCk7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfVxuXG4gIGdldE5leHRBdmFpbGFibGVQb3J0KGN1clNlc3Npb25zKSB7XG4gICAgbGV0IG5ld1dBRFBvcnQgPSBERUZBVUxUX1dBRF9QT1JUO1xuXG4gICAgLy8gc3RhcnQgYXQgNDcyNCBhbmQgZ28gdXAgdGlsbCB3ZSBmaW5kIGEgcG9ydCB0aGF0IGlzbid0IGluIHVzZVxuICAgIHdoaWxlIChfLmZpbmQoY3VyU2Vzc2lvbnMsIChvKSA9PiBvLldBRFBvcnQgPT09IG5ld1dBRFBvcnQpKSB7XG4gICAgICBuZXdXQURQb3J0Kys7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ld1dBRFBvcnQ7XG4gIH1cblxuICBhc3luYyBzdGFydFdpbkFwcERyaXZlclNlc3Npb24gKGN1clNlc3Npb25zKSB7XG5cbiAgICB0aGlzLm9wdHMucG9ydCA9IHRoaXMuZ2V0TmV4dEF2YWlsYWJsZVBvcnQoY3VyU2Vzc2lvbnMpO1xuICAgIHRoaXMud2luQXBwRHJpdmVyID0gbmV3IFdpbkFwcERyaXZlcih7XG4gICAgICBhcHA6IHRoaXMub3B0cy5hcHAsXG4gICAgICBwb3J0OiB0aGlzLm9wdHMucG9ydFxuICAgIH0pO1xuXG4gICAgYXdhaXQgdGhpcy53aW5BcHBEcml2ZXIuc3RhcnQoKTtcbiAgICBhd2FpdCB0aGlzLndpbkFwcERyaXZlci5zdGFydFNlc3Npb24odGhpcy5jYXBzKTtcbiAgICB0aGlzLnByb3h5UmVxUmVzID0gdGhpcy53aW5BcHBEcml2ZXIucHJveHlSZXFSZXMuYmluZCh0aGlzLndpbkFwcERyaXZlcik7XG4gICAgLy8gbm93IHRoYXQgZXZlcnl0aGluZyBoYXMgc3RhcnRlZCBzdWNjZXNzZnVsbHksIHR1cm4gb24gcHJveHlpbmcgc28gYWxsXG4gICAgLy8gc3Vic2VxdWVudCBzZXNzaW9uIHJlcXVlc3RzIGdvIHN0cmFpZ2h0IHRvL2Zyb20gV2luQXBwRHJpdmVyXG4gICAgdGhpcy5qd3BQcm94eUFjdGl2ZSA9IHRydWU7XG4gIH1cblxuICBhc3luYyBkZWxldGVTZXNzaW9uICgpIHtcbiAgICBsb2dnZXIuZGVidWcoJ0RlbGV0aW5nIFdpbkFwcERyaXZlciBzZXNzaW9uJyk7XG5cbiAgICBpZiAodGhpcy53aW5BcHBEcml2ZXIgJiYgdGhpcy5qd3BQcm94eUFjdGl2ZSkge1xuICAgICAgYXdhaXQgdGhpcy53aW5BcHBEcml2ZXIuZGVsZXRlU2Vzc2lvbigpO1xuICAgICAgYXdhaXQgdGhpcy53aW5BcHBEcml2ZXIuc3RvcCgpO1xuICAgICAgdGhpcy53aW5BcHBEcml2ZXIgPSBudWxsO1xuICAgIH1cbiAgICB0aGlzLmp3cFByb3h5QWN0aXZlID0gZmFsc2U7XG4gICAgYXdhaXQgc3VwZXIuZGVsZXRlU2Vzc2lvbigpO1xuICB9XG5cbiAgcHJveHlBY3RpdmUgKCkge1xuICAgIC8vIHdlIGFsd2F5cyBoYXZlIGFuIGFjdGl2ZSBwcm94eSB0byB0aGUgV2luQXBwRHJpdmVyIHNlcnZlclxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgY2FuUHJveHkgKCkge1xuICAgIC8vIHdlIGNhbiBhbHdheXMgcHJveHkgdG8gdGhlIFdpbkFwcERyaXZlciBzZXJ2ZXJcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGdldCBkcml2ZXJEYXRhICgpIHtcbiAgICByZXR1cm4ge1dBRFBvcnQ6IHRoaXMub3B0cy5wb3J0fTtcbiAgfVxufVxuXG5leHBvcnQgeyBXaW5kb3dzRHJpdmVyIH07XG5leHBvcnQgZGVmYXVsdCBXaW5kb3dzRHJpdmVyO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLiJ9
