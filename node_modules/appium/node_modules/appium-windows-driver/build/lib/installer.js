'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _requestPromise = require('request-promise');

var _requestPromise2 = _interopRequireDefault(_requestPromise);

var _appiumSupport = require('appium-support');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _teen_process = require('teen_process');

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var WAD_VER = "1.0";
var WAD_DL = 'https://github.com/Microsoft/WinAppDriver/releases/download/v' + WAD_VER + '/WindowsApplicationDriver.msi';
var WAD_DL_MD5 = "efd463b8e97920bb35462616724ac7ed";

var WAD_INSTALL_PATH = process.env["ProgramFiles(x86)"] || process.env.ProgramFiles || "C:\\Program Files";
exports.WAD_INSTALL_PATH = WAD_INSTALL_PATH = _path2['default'].resolve(WAD_INSTALL_PATH, "Windows Application Driver", "WinAppDriver.exe");
var WAD_EXE_MD5 = "0aef68b1149b9b9d78a4f7389854e954";
var WAD_GUID = "DDCD58BF-37CF-4758-A15E-A60E7CF20E41";

function downloadWAD() {
  var tempFile, body, downloadedMd5;
  return _regeneratorRuntime.async(function downloadWAD$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].info('Opening temp file to write WinAppDriver to...');
        tempFile = _path2['default'].resolve(process.env.TEMP, "WinAppDriver.msi");

        _logger2['default'].info('Will write to ' + tempFile);

        // actually download the msi file
        _logger2['default'].info('Downloading ' + WAD_DL + '...');
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(_requestPromise2['default'].get({ url: WAD_DL, encoding: 'binary' }));

      case 6:
        body = context$1$0.sent;

        _logger2['default'].info('Writing binary content to ' + tempFile + '...');
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(tempFile, body, { encoding: 'binary' }));

      case 10:
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.md5(tempFile));

      case 12:
        downloadedMd5 = context$1$0.sent;

        if (!(downloadedMd5 !== WAD_DL_MD5)) {
          context$1$0.next = 15;
          break;
        }

        throw new Error('Checksum validation error: expected ' + WAD_DL_MD5 + ' but ' + ('got ' + downloadedMd5));

      case 15:
        return context$1$0.abrupt('return', tempFile);

      case 16:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function installWAD(msiPath) {
  return _regeneratorRuntime.async(function installWAD$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].info('Running MSI installer...');
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('msiexec', ['/i', msiPath, '/qn']));

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function verifyWAD() {
  return _regeneratorRuntime.async(function verifyWAD$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].info('You must use WinAppDriver version ' + WAD_VER);
        _logger2['default'].info('Verifying WinAppDriver version ' + WAD_VER + ' is installed via comparing the checksum.');
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(WAD_INSTALL_PATH));

      case 4:
        context$1$0.t0 = context$1$0.sent;

        if (!context$1$0.t0) {
          context$1$0.next = 11;
          break;
        }

        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.md5(WAD_INSTALL_PATH));

      case 8:
        context$1$0.t1 = context$1$0.sent;
        context$1$0.t2 = WAD_EXE_MD5;
        context$1$0.t0 = context$1$0.t1 === context$1$0.t2;

      case 11:
        return context$1$0.abrupt('return', context$1$0.t0);

      case 12:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function isAdmin() {
  var testFilePath;
  return _regeneratorRuntime.async(function isAdmin$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        testFilePath = _path2['default'].resolve("/", "Windows", "System32", "wad-test.txt");
        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(testFilePath));

      case 4:
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(testFilePath, "foo"));

      case 6:
        return context$1$0.abrupt('return', true);

      case 9:
        context$1$0.prev = 9;
        context$1$0.t0 = context$1$0['catch'](1);
        return context$1$0.abrupt('return', false);

      case 12:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 9]]);
}

function setupWAD() {
  var msiPath;
  return _regeneratorRuntime.async(function setupWAD$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (_appiumSupport.system.isWindows()) {
          context$1$0.next = 2;
          break;
        }

        throw new Error('Can only download WinAppDriver on Windows!');

      case 2:
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(verifyWAD());

      case 4:
        if (!context$1$0.sent) {
          context$1$0.next = 7;
          break;
        }

        _logger2['default'].info('WinAppDriver.exe version ' + WAD_VER + ' already exists with correct checksum, not re-downloading');
        return context$1$0.abrupt('return');

      case 7:

        _logger2['default'].info('WinAppDriver.exe doesn\'t exist at the correct version ' + WAD_VER + ', setting up');

        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(isAdmin());

      case 10:
        if (context$1$0.sent) {
          context$1$0.next = 12;
          break;
        }

        throw new Error('WARNING: You are not running as an administrator so WinAppDriver cannot be installed for you; please reinstall as admin');

      case 12:
        context$1$0.next = 14;
        return _regeneratorRuntime.awrap(downloadWAD());

      case 14:
        msiPath = context$1$0.sent;
        context$1$0.next = 17;
        return _regeneratorRuntime.awrap(installWAD(msiPath));

      case 17:
        context$1$0.next = 19;
        return _regeneratorRuntime.awrap(verifyWAD());

      case 19:
        if (context$1$0.sent) {
          context$1$0.next = 21;
          break;
        }

        throw new Error('Installed version of WinAppDriver failed checksum check');

      case 21:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

exports.downloadWAD = downloadWAD;
exports.setupWAD = setupWAD;
exports.verifyWAD = verifyWAD;
exports.installWAD = installWAD;
exports.WAD_INSTALL_PATH = WAD_INSTALL_PATH;
exports.WAD_GUID = WAD_GUID;
exports['default'] = setupWAD;

// validate checksum
//# sourceMappingURL=data:application/json;charset=utf8;base64,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SUFBSSwrQkFBNkIsT0FBTywrREFBNEQsQ0FBQzs7Ozs7QUFJM0csNEJBQUksSUFBSSw2REFBMEQsT0FBTyxrQkFBZSxDQUFDOzs7eUNBRTlFLE9BQU8sRUFBRTs7Ozs7Ozs7Y0FDWixJQUFJLEtBQUssMkhBQTJIOzs7O3lDQUd0SCxXQUFXLEVBQUU7OztBQUE3QixlQUFPOzt5Q0FDUCxVQUFVLENBQUMsT0FBTyxDQUFDOzs7O3lDQUNkLFNBQVMsRUFBRTs7Ozs7Ozs7Y0FDZCxJQUFJLEtBQUssMkRBQTJEOzs7Ozs7O0NBRTdFOztRQUVRLFdBQVcsR0FBWCxXQUFXO1FBQUUsUUFBUSxHQUFSLFFBQVE7UUFBRSxTQUFTLEdBQVQsU0FBUztRQUFFLFVBQVUsR0FBVixVQUFVO1FBQUUsZ0JBQWdCLEdBQWhCLGdCQUFnQjtRQUM5RCxRQUFRLEdBQVIsUUFBUTtxQkFDRixRQUFRIiwiZmlsZSI6ImxpYi9pbnN0YWxsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcmVxdWVzdCBmcm9tICdyZXF1ZXN0LXByb21pc2UnO1xuaW1wb3J0IHsgc3lzdGVtLCBmcyB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgZXhlYyB9IGZyb20gJ3RlZW5fcHJvY2Vzcyc7XG5pbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcblxuY29uc3QgV0FEX1ZFUiA9IFwiMS4wXCI7XG5jb25zdCBXQURfREwgPSBgaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9XaW5BcHBEcml2ZXIvcmVsZWFzZXMvZG93bmxvYWQvdiR7V0FEX1ZFUn0vV2luZG93c0FwcGxpY2F0aW9uRHJpdmVyLm1zaWA7XG5jb25zdCBXQURfRExfTUQ1ID0gXCJlZmQ0NjNiOGU5NzkyMGJiMzU0NjI2MTY3MjRhYzdlZFwiO1xuXG5sZXQgV0FEX0lOU1RBTExfUEFUSCA9IHByb2Nlc3MuZW52W1wiUHJvZ3JhbUZpbGVzKHg4NilcIl0gfHwgcHJvY2Vzcy5lbnYuUHJvZ3JhbUZpbGVzIHx8IFwiQzpcXFxcUHJvZ3JhbSBGaWxlc1wiO1xuV0FEX0lOU1RBTExfUEFUSCA9IHBhdGgucmVzb2x2ZShXQURfSU5TVEFMTF9QQVRILCBcIldpbmRvd3MgQXBwbGljYXRpb24gRHJpdmVyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiV2luQXBwRHJpdmVyLmV4ZVwiKTtcbmNvbnN0IFdBRF9FWEVfTUQ1ID0gXCIwYWVmNjhiMTE0OWI5YjlkNzhhNGY3Mzg5ODU0ZTk1NFwiO1xuY29uc3QgV0FEX0dVSUQgPSBcIkREQ0Q1OEJGLTM3Q0YtNDc1OC1BMTVFLUE2MEU3Q0YyMEU0MVwiO1xuXG5hc3luYyBmdW5jdGlvbiBkb3dubG9hZFdBRCAoKSB7XG4gIGxvZy5pbmZvKGBPcGVuaW5nIHRlbXAgZmlsZSB0byB3cml0ZSBXaW5BcHBEcml2ZXIgdG8uLi5gKTtcbiAgbGV0IHRlbXBGaWxlID0gcGF0aC5yZXNvbHZlKHByb2Nlc3MuZW52LlRFTVAsIFwiV2luQXBwRHJpdmVyLm1zaVwiKTtcbiAgbG9nLmluZm8oYFdpbGwgd3JpdGUgdG8gJHt0ZW1wRmlsZX1gKTtcblxuICAvLyBhY3R1YWxseSBkb3dubG9hZCB0aGUgbXNpIGZpbGVcbiAgbG9nLmluZm8oYERvd25sb2FkaW5nICR7V0FEX0RMfS4uLmApO1xuICBsZXQgYm9keSA9IGF3YWl0IHJlcXVlc3QuZ2V0KHt1cmw6IFdBRF9ETCwgZW5jb2Rpbmc6ICdiaW5hcnknfSk7XG4gIGxvZy5pbmZvKGBXcml0aW5nIGJpbmFyeSBjb250ZW50IHRvICR7dGVtcEZpbGV9Li4uYCk7XG4gIGF3YWl0IGZzLndyaXRlRmlsZSh0ZW1wRmlsZSwgYm9keSwge2VuY29kaW5nOiAnYmluYXJ5J30pO1xuXG4gIC8vIHZhbGlkYXRlIGNoZWNrc3VtXG4gIGxldCBkb3dubG9hZGVkTWQ1ID0gYXdhaXQgZnMubWQ1KHRlbXBGaWxlKTtcbiAgaWYgKGRvd25sb2FkZWRNZDUgIT09IFdBRF9ETF9NRDUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYENoZWNrc3VtIHZhbGlkYXRpb24gZXJyb3I6IGV4cGVjdGVkICR7V0FEX0RMX01ENX0gYnV0IGAgK1xuICAgICAgICAgICAgICAgICAgICBgZ290ICR7ZG93bmxvYWRlZE1kNX1gKTtcbiAgfVxuXG4gIHJldHVybiB0ZW1wRmlsZTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gaW5zdGFsbFdBRCAobXNpUGF0aCkge1xuICBsb2cuaW5mbyhgUnVubmluZyBNU0kgaW5zdGFsbGVyLi4uYCk7XG4gIGF3YWl0IGV4ZWMoJ21zaWV4ZWMnLCBbJy9pJywgbXNpUGF0aCwgJy9xbiddKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gdmVyaWZ5V0FEICgpIHtcbiAgbG9nLmluZm8oYFlvdSBtdXN0IHVzZSBXaW5BcHBEcml2ZXIgdmVyc2lvbiAke1dBRF9WRVJ9YCk7XG4gIGxvZy5pbmZvKGBWZXJpZnlpbmcgV2luQXBwRHJpdmVyIHZlcnNpb24gJHtXQURfVkVSfSBpcyBpbnN0YWxsZWQgdmlhIGNvbXBhcmluZyB0aGUgY2hlY2tzdW0uYCk7XG4gIHJldHVybiBhd2FpdCBmcy5leGlzdHMoV0FEX0lOU1RBTExfUEFUSCkgJiZcbiAgICAgICAgIGF3YWl0IGZzLm1kNShXQURfSU5TVEFMTF9QQVRIKSA9PT0gV0FEX0VYRV9NRDU7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGlzQWRtaW4gKCkge1xuICBsZXQgdGVzdEZpbGVQYXRoID0gcGF0aC5yZXNvbHZlKFwiL1wiLCBcIldpbmRvd3NcIiwgXCJTeXN0ZW0zMlwiLCBcIndhZC10ZXN0LnR4dFwiKTtcbiAgdHJ5IHtcbiAgICBhd2FpdCBmcy5yaW1yYWYodGVzdEZpbGVQYXRoKTtcbiAgICBhd2FpdCBmcy53cml0ZUZpbGUodGVzdEZpbGVQYXRoLCBcImZvb1wiKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoaWduKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNldHVwV0FEICgpIHtcbiAgaWYgKCFzeXN0ZW0uaXNXaW5kb3dzKCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYENhbiBvbmx5IGRvd25sb2FkIFdpbkFwcERyaXZlciBvbiBXaW5kb3dzIWApO1xuICB9XG5cbiAgaWYgKGF3YWl0IHZlcmlmeVdBRCgpKSB7XG4gICAgbG9nLmluZm8oYFdpbkFwcERyaXZlci5leGUgdmVyc2lvbiAke1dBRF9WRVJ9IGFscmVhZHkgZXhpc3RzIHdpdGggY29ycmVjdCBjaGVja3N1bSwgbm90IHJlLWRvd25sb2FkaW5nYCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbG9nLmluZm8oYFdpbkFwcERyaXZlci5leGUgZG9lc24ndCBleGlzdCBhdCB0aGUgY29ycmVjdCB2ZXJzaW9uICR7V0FEX1ZFUn0sIHNldHRpbmcgdXBgKTtcblxuICBpZiAoIWF3YWl0IGlzQWRtaW4oKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgV0FSTklORzogWW91IGFyZSBub3QgcnVubmluZyBhcyBhbiBhZG1pbmlzdHJhdG9yIHNvIFdpbkFwcERyaXZlciBjYW5ub3QgYmUgaW5zdGFsbGVkIGZvciB5b3U7IHBsZWFzZSByZWluc3RhbGwgYXMgYWRtaW5gKTtcbiAgfVxuXG4gIGNvbnN0IG1zaVBhdGggPSBhd2FpdCBkb3dubG9hZFdBRCgpO1xuICBhd2FpdCBpbnN0YWxsV0FEKG1zaVBhdGgpO1xuICBpZiAoIWF3YWl0IHZlcmlmeVdBRCgpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBJbnN0YWxsZWQgdmVyc2lvbiBvZiBXaW5BcHBEcml2ZXIgZmFpbGVkIGNoZWNrc3VtIGNoZWNrYCk7XG4gIH1cbn1cblxuZXhwb3J0IHsgZG93bmxvYWRXQUQsIHNldHVwV0FELCB2ZXJpZnlXQUQsIGluc3RhbGxXQUQsIFdBRF9JTlNUQUxMX1BBVEgsXG4gICAgICAgICBXQURfR1VJRCB9O1xuZXhwb3J0IGRlZmF1bHQgc2V0dXBXQUQ7XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uIn0=
