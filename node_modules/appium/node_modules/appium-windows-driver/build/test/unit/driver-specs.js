require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _ = require('../..');

var _2 = _interopRequireDefault(_);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('driver.js', function () {
  describe('constructor', function () {
    it('calls BaseDriver constructor with opts', function () {
      var driver = new _2['default']({ foo: 'bar' });
      driver.should.exist;
      driver.opts.foo.should.equal('bar');
    });
  });

  describe('createSession', function () {
    it('should set sessionId', function callee$2$0() {
      var driver;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver = new _2['default']({ app: 'myapp' }, false);

            _sinon2['default'].mock(driver).expects('startWinAppDriverSession').once().returns(_Promise.resolve());
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.createSession({ cap: 'foo' }));

          case 4:
            driver.sessionId.should.exist;
            driver.caps.cap.should.equal('foo');

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    // TODO: Implement or delete
    //it('should set the default context', async () => {
    //  let driver = new SelendroidDriver({}, false);
    //  sinon.mock(driver).expects('checkAppPresent')
    //    .returns(Promise.resolve());
    //  sinon.mock(driver).expects('startSelendroidSession')
    //    .returns(Promise.resolve());
    //  await driver.createSession({});
    //  driver.curContext.should.equal('NATIVE_APP');
    //});
  });

  describe('proxying', function () {
    var driver = undefined;
    before(function () {
      driver = new _2['default']({}, false);
      driver.sessionId = 'abc';
    });
    describe('#proxyActive', function () {
      it('should exist', function () {
        driver.proxyActive.should.be.an['instanceof'](Function);
      });
      it('should return true', function () {
        driver.proxyActive('abc').should.be['true'];
      });
      it('should throw an error if session id is wrong', function () {
        (function () {
          driver.proxyActive('aaa');
        }).should['throw'];
      });
    });

    // TODO: Implement or delete 
    //describe('#getProxyAvoidList', () => {
    //  it('should exist', () => {
    //    driver.getProxyAvoidList.should.be.an.instanceof(Function);
    //  });
    //  it('should return jwpProxyAvoid array', () => {
    //    let avoidList = driver.getProxyAvoidList('abc');
    //    avoidList.should.be.an.instanceof(Array);
    //    avoidList.should.eql(driver.jwpProxyAvoid);
    //  });
    //  it('should throw an error if session id is wrong', () => {
    //    (() => { driver.getProxyAvoidList('aaa'); }).should.throw;
    //  });
    //});

    describe('#canProxy', function () {
      it('should exist', function () {
        driver.canProxy.should.be.an['instanceof'](Function);
      });
      it('should return true', function () {
        driver.canProxy('abc').should.be['true'];
      });
      it('should throw an error if session id is wrong', function () {
        (function () {
          driver.canProxy('aaa');
        }).should['throw'];
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvdW5pdC9kcml2ZXItc3BlY3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O2dCQUUwQixPQUFPOzs7O29CQUNoQixNQUFNOzs7OzhCQUNJLGtCQUFrQjs7OztxQkFDM0IsT0FBTzs7OztBQUV6QixrQkFBSyxNQUFNLEVBQUUsQ0FBQztBQUNkLGtCQUFLLEdBQUcsNkJBQWdCLENBQUM7O0FBRXpCLFFBQVEsQ0FBQyxXQUFXLEVBQUUsWUFBTTtBQUMxQixVQUFRLENBQUMsYUFBYSxFQUFFLFlBQU07QUFDNUIsTUFBRSxDQUFDLHdDQUF3QyxFQUFFLFlBQU07QUFDakQsVUFBSSxNQUFNLEdBQUcsa0JBQWtCLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7QUFDL0MsWUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7QUFDcEIsWUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUNyQyxDQUFDLENBQUM7R0FDSixDQUFDLENBQUM7O0FBRUgsVUFBUSxDQUFDLGVBQWUsRUFBRSxZQUFNO0FBQzlCLE1BQUUsQ0FBQyxzQkFBc0IsRUFBRTtVQUNyQixNQUFNOzs7O0FBQU4sa0JBQU0sR0FBRyxrQkFBa0IsRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFDLEVBQUUsS0FBSyxDQUFDOztBQUN0RCwrQkFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLDBCQUEwQixDQUFDLENBQ2pELElBQUksRUFBRSxDQUNOLE9BQU8sQ0FBQyxTQUFRLE9BQU8sRUFBRSxDQUFDLENBQUM7OzZDQUMxQixNQUFNLENBQUMsYUFBYSxDQUFDLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDOzs7QUFDMUMsa0JBQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztBQUM5QixrQkFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQzs7Ozs7OztLQUNyQyxDQUFDLENBQUM7Ozs7Ozs7Ozs7OztHQVlKLENBQUMsQ0FBQzs7QUFFSCxVQUFRLENBQUMsVUFBVSxFQUFFLFlBQU07QUFDekIsUUFBSSxNQUFNLFlBQUEsQ0FBQztBQUNYLFVBQU0sQ0FBQyxZQUFNO0FBQ1gsWUFBTSxHQUFHLGtCQUFrQixFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDdEMsWUFBTSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7S0FDMUIsQ0FBQyxDQUFDO0FBQ0gsWUFBUSxDQUFDLGNBQWMsRUFBRSxZQUFNO0FBQzdCLFFBQUUsQ0FBQyxjQUFjLEVBQUUsWUFBTTtBQUN2QixjQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxjQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7T0FDdEQsQ0FBQyxDQUFDO0FBQ0gsUUFBRSxDQUFDLG9CQUFvQixFQUFFLFlBQU07QUFDN0IsY0FBTSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxRQUFLLENBQUM7T0FDMUMsQ0FBQyxDQUFDO0FBQ0gsUUFBRSxDQUFDLDhDQUE4QyxFQUFFLFlBQU07QUFDdkQsU0FBQyxZQUFNO0FBQUUsZ0JBQU0sQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7U0FBRSxDQUFBLENBQUUsTUFBTSxTQUFNLENBQUM7T0FDckQsQ0FBQyxDQUFDO0tBQ0osQ0FBQyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7OztBQWlCSCxZQUFRLENBQUMsV0FBVyxFQUFFLFlBQU07QUFDMUIsUUFBRSxDQUFDLGNBQWMsRUFBRSxZQUFNO0FBQ3ZCLGNBQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLGNBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztPQUNuRCxDQUFDLENBQUM7QUFDSCxRQUFFLENBQUMsb0JBQW9CLEVBQUUsWUFBTTtBQUM3QixjQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLFFBQUssQ0FBQztPQUN2QyxDQUFDLENBQUM7QUFDSCxRQUFFLENBQUMsOENBQThDLEVBQUUsWUFBTTtBQUN2RCxTQUFDLFlBQU07QUFBRSxnQkFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUFFLENBQUEsQ0FBRSxNQUFNLFNBQU0sQ0FBQztPQUNsRCxDQUFDLENBQUM7S0FDSixDQUFDLENBQUM7R0FDSixDQUFDLENBQUM7Q0FDSixDQUFDLENBQUMiLCJmaWxlIjoidGVzdC91bml0L2RyaXZlci1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRyYW5zcGlsZTptb2NoYVxuXG5pbXBvcnQgV2luZG93c0RyaXZlciBmcm9tICcuLi8uLic7XG5pbXBvcnQgY2hhaSBmcm9tICdjaGFpJztcbmltcG9ydCBjaGFpQXNQcm9taXNlZCBmcm9tICdjaGFpLWFzLXByb21pc2VkJztcbmltcG9ydCBzaW5vbiBmcm9tICdzaW5vbic7XG5cbmNoYWkuc2hvdWxkKCk7XG5jaGFpLnVzZShjaGFpQXNQcm9taXNlZCk7XG5cbmRlc2NyaWJlKCdkcml2ZXIuanMnLCAoKSA9PiB7XG4gIGRlc2NyaWJlKCdjb25zdHJ1Y3RvcicsICgpID0+IHtcbiAgICBpdCgnY2FsbHMgQmFzZURyaXZlciBjb25zdHJ1Y3RvciB3aXRoIG9wdHMnLCAoKSA9PiB7XG4gICAgICBsZXQgZHJpdmVyID0gbmV3IFdpbmRvd3NEcml2ZXIoeyBmb286ICdiYXInIH0pO1xuICAgICAgZHJpdmVyLnNob3VsZC5leGlzdDtcbiAgICAgIGRyaXZlci5vcHRzLmZvby5zaG91bGQuZXF1YWwoJ2JhcicpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnY3JlYXRlU2Vzc2lvbicsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHNldCBzZXNzaW9uSWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBsZXQgZHJpdmVyID0gbmV3IFdpbmRvd3NEcml2ZXIoeyBhcHA6ICdteWFwcCd9LCBmYWxzZSk7XG4gICAgICBzaW5vbi5tb2NrKGRyaXZlcikuZXhwZWN0cygnc3RhcnRXaW5BcHBEcml2ZXJTZXNzaW9uJylcbiAgICAgICAgICAub25jZSgpXG4gICAgICAgICAgLnJldHVybnMoUHJvbWlzZS5yZXNvbHZlKCkpO1xuICAgICAgYXdhaXQgZHJpdmVyLmNyZWF0ZVNlc3Npb24oeyBjYXA6ICdmb28nIH0pO1xuICAgICAgZHJpdmVyLnNlc3Npb25JZC5zaG91bGQuZXhpc3Q7XG4gICAgICBkcml2ZXIuY2Fwcy5jYXAuc2hvdWxkLmVxdWFsKCdmb28nKTtcbiAgICB9KTtcblxuICAgIC8vIFRPRE86IEltcGxlbWVudCBvciBkZWxldGVcbiAgICAvL2l0KCdzaG91bGQgc2V0IHRoZSBkZWZhdWx0IGNvbnRleHQnLCBhc3luYyAoKSA9PiB7XG4gICAgLy8gIGxldCBkcml2ZXIgPSBuZXcgU2VsZW5kcm9pZERyaXZlcih7fSwgZmFsc2UpO1xuICAgIC8vICBzaW5vbi5tb2NrKGRyaXZlcikuZXhwZWN0cygnY2hlY2tBcHBQcmVzZW50JylcbiAgICAvLyAgICAucmV0dXJucyhQcm9taXNlLnJlc29sdmUoKSk7XG4gICAgLy8gIHNpbm9uLm1vY2soZHJpdmVyKS5leHBlY3RzKCdzdGFydFNlbGVuZHJvaWRTZXNzaW9uJylcbiAgICAvLyAgICAucmV0dXJucyhQcm9taXNlLnJlc29sdmUoKSk7XG4gICAgLy8gIGF3YWl0IGRyaXZlci5jcmVhdGVTZXNzaW9uKHt9KTtcbiAgICAvLyAgZHJpdmVyLmN1ckNvbnRleHQuc2hvdWxkLmVxdWFsKCdOQVRJVkVfQVBQJyk7XG4gICAgLy99KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3Byb3h5aW5nJywgKCkgPT4ge1xuICAgIGxldCBkcml2ZXI7XG4gICAgYmVmb3JlKCgpID0+IHtcbiAgICAgIGRyaXZlciA9IG5ldyBXaW5kb3dzRHJpdmVyKHt9LCBmYWxzZSk7XG4gICAgICBkcml2ZXIuc2Vzc2lvbklkID0gJ2FiYyc7XG4gICAgfSk7XG4gICAgZGVzY3JpYmUoJyNwcm94eUFjdGl2ZScsICgpID0+IHtcbiAgICAgIGl0KCdzaG91bGQgZXhpc3QnLCAoKSA9PiB7XG4gICAgICAgIGRyaXZlci5wcm94eUFjdGl2ZS5zaG91bGQuYmUuYW4uaW5zdGFuY2VvZihGdW5jdGlvbik7XG4gICAgICB9KTtcbiAgICAgIGl0KCdzaG91bGQgcmV0dXJuIHRydWUnLCAoKSA9PiB7XG4gICAgICAgIGRyaXZlci5wcm94eUFjdGl2ZSgnYWJjJykuc2hvdWxkLmJlLnRydWU7XG4gICAgICB9KTtcbiAgICAgIGl0KCdzaG91bGQgdGhyb3cgYW4gZXJyb3IgaWYgc2Vzc2lvbiBpZCBpcyB3cm9uZycsICgpID0+IHtcbiAgICAgICAgKCgpID0+IHsgZHJpdmVyLnByb3h5QWN0aXZlKCdhYWEnKTsgfSkuc2hvdWxkLnRocm93O1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyBUT0RPOiBJbXBsZW1lbnQgb3IgZGVsZXRlICBcbiAgICAvL2Rlc2NyaWJlKCcjZ2V0UHJveHlBdm9pZExpc3QnLCAoKSA9PiB7XG4gICAgLy8gIGl0KCdzaG91bGQgZXhpc3QnLCAoKSA9PiB7XG4gICAgLy8gICAgZHJpdmVyLmdldFByb3h5QXZvaWRMaXN0LnNob3VsZC5iZS5hbi5pbnN0YW5jZW9mKEZ1bmN0aW9uKTtcbiAgICAvLyAgfSk7XG4gICAgLy8gIGl0KCdzaG91bGQgcmV0dXJuIGp3cFByb3h5QXZvaWQgYXJyYXknLCAoKSA9PiB7XG4gICAgLy8gICAgbGV0IGF2b2lkTGlzdCA9IGRyaXZlci5nZXRQcm94eUF2b2lkTGlzdCgnYWJjJyk7XG4gICAgLy8gICAgYXZvaWRMaXN0LnNob3VsZC5iZS5hbi5pbnN0YW5jZW9mKEFycmF5KTtcbiAgICAvLyAgICBhdm9pZExpc3Quc2hvdWxkLmVxbChkcml2ZXIuandwUHJveHlBdm9pZCk7XG4gICAgLy8gIH0pO1xuICAgIC8vICBpdCgnc2hvdWxkIHRocm93IGFuIGVycm9yIGlmIHNlc3Npb24gaWQgaXMgd3JvbmcnLCAoKSA9PiB7XG4gICAgLy8gICAgKCgpID0+IHsgZHJpdmVyLmdldFByb3h5QXZvaWRMaXN0KCdhYWEnKTsgfSkuc2hvdWxkLnRocm93O1xuICAgIC8vICB9KTtcbiAgICAvL30pO1xuXG4gICAgZGVzY3JpYmUoJyNjYW5Qcm94eScsICgpID0+IHtcbiAgICAgIGl0KCdzaG91bGQgZXhpc3QnLCAoKSA9PiB7XG4gICAgICAgIGRyaXZlci5jYW5Qcm94eS5zaG91bGQuYmUuYW4uaW5zdGFuY2VvZihGdW5jdGlvbik7XG4gICAgICB9KTtcbiAgICAgIGl0KCdzaG91bGQgcmV0dXJuIHRydWUnLCAoKSA9PiB7XG4gICAgICAgIGRyaXZlci5jYW5Qcm94eSgnYWJjJykuc2hvdWxkLmJlLnRydWU7XG4gICAgICB9KTtcbiAgICAgIGl0KCdzaG91bGQgdGhyb3cgYW4gZXJyb3IgaWYgc2Vzc2lvbiBpZCBpcyB3cm9uZycsICgpID0+IHtcbiAgICAgICAgKCgpID0+IHsgZHJpdmVyLmNhblByb3h5KCdhYWEnKTsgfSkuc2hvdWxkLnRocm93O1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
