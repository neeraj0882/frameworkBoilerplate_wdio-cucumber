require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _libWinappdriver = require('../../lib/winappdriver');

var _libWinappdriver2 = _interopRequireDefault(_libWinappdriver);

var _appiumTestSupport = require('appium-test-support');

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

function buildWinAppDriverOpts() {
  return {
    app: 'foo',
    host: 'localhost',
    port: 4723
  };
}

describe('WinAppDriverServer', function () {
  describe('#constructor', function () {
    it('should complain if required options not sent', function () {
      (function () {
        new _libWinappdriver2['default']();
      }).should['throw'](/Option.*app.*required/);
      (function () {
        new _libWinappdriver2['default']({});
      }).should['throw'](/Option.*app.*required/);
    });
  });

  describe('#startSession', (0, _appiumTestSupport.withMocks)({}, function (mocks, S) {
    var winAppDriver = new _libWinappdriver2['default'](buildWinAppDriverOpts());

    it('should start a session', function callee$2$0() {
      var caps;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            caps = { foo: 'bar' };

            mocks.jwproxy = S.sandbox.mock(winAppDriver.jwproxy);
            mocks.jwproxy.expects("command").once().withExactArgs("/session", "POST", { desiredCapabilities: caps }).returns(_Promise.resolve());
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(winAppDriver.startSession(caps));

          case 5:
            mocks.jwproxy.verify();

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvdW5pdC93aW5hcHBkcml2ZXItc3BlY3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O29CQUVpQixNQUFNOzs7OzhCQUNJLGtCQUFrQjs7OzsrQkFDZCx3QkFBd0I7Ozs7aUNBQzdCLHFCQUFxQjs7QUFFL0Msa0JBQUssTUFBTSxFQUFFLENBQUM7QUFDZCxrQkFBSyxHQUFHLDZCQUFnQixDQUFDOztBQUV6QixTQUFTLHFCQUFxQixHQUFJO0FBQ2hDLFNBQU87QUFDTCxPQUFHLEVBQUUsS0FBSztBQUNWLFFBQUksRUFBRSxXQUFXO0FBQ2pCLFFBQUksRUFBRSxJQUFJO0dBQ1gsQ0FBQztDQUNIOztBQUVELFFBQVEsQ0FBQyxvQkFBb0IsRUFBRSxZQUFNO0FBQ25DLFVBQVEsQ0FBQyxjQUFjLEVBQUUsWUFBTTtBQUM3QixNQUFFLENBQUMsOENBQThDLEVBQUUsWUFBTTtBQUN2RCxPQUFDLFlBQU07QUFDTCwwQ0FBd0IsQ0FBQztPQUMxQixDQUFBLENBQUUsTUFBTSxTQUFNLENBQUMsdUJBQXVCLENBQUMsQ0FBQztBQUN6QyxPQUFDLFlBQU07QUFDTCx5Q0FBdUIsRUFBRSxDQUFDLENBQUM7T0FDNUIsQ0FBQSxDQUFFLE1BQU0sU0FBTSxDQUFDLHVCQUF1QixDQUFDLENBQUM7S0FDMUMsQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDOztBQUVILFVBQVEsQ0FBQyxlQUFlLEVBQUUsa0NBQVUsRUFBRyxFQUFFLFVBQUMsS0FBSyxFQUFFLENBQUMsRUFBSztBQUNyRCxRQUFJLFlBQVksR0FBRyxpQ0FBdUIscUJBQXFCLEVBQUUsQ0FBQyxDQUFDOztBQUVuRSxNQUFFLENBQUMsd0JBQXdCLEVBQUU7VUFDdkIsSUFBSTs7OztBQUFKLGdCQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFOztBQUN6QixpQkFBSyxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDckQsaUJBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUNwQyxhQUFhLENBQUMsVUFBVSxFQUFFLE1BQU0sRUFBRSxFQUFFLG1CQUFtQixFQUFFLElBQUksRUFBRSxDQUFDLENBQ2hFLE9BQU8sQ0FBQyxTQUFRLE9BQU8sRUFBRSxDQUFDLENBQUM7OzZDQUN4QixZQUFZLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQzs7O0FBQ3JDLGlCQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDOzs7Ozs7O0tBQ3hCLENBQUMsQ0FBQztHQUNKLENBQUMsQ0FBQyxDQUFDO0NBQ0wsQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3QvdW5pdC93aW5hcHBkcml2ZXItc3BlY3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0cmFuc3BpbGU6bW9jaGFcblxuaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XG5pbXBvcnQgY2hhaUFzUHJvbWlzZWQgZnJvbSAnY2hhaS1hcy1wcm9taXNlZCc7XG5pbXBvcnQgV2luQXBwRHJpdmVyU2VydmVyIGZyb20gJy4uLy4uL2xpYi93aW5hcHBkcml2ZXInO1xuaW1wb3J0IHsgd2l0aE1vY2tzIH0gZnJvbSAnYXBwaXVtLXRlc3Qtc3VwcG9ydCc7XG5cbmNoYWkuc2hvdWxkKCk7XG5jaGFpLnVzZShjaGFpQXNQcm9taXNlZCk7XG5cbmZ1bmN0aW9uIGJ1aWxkV2luQXBwRHJpdmVyT3B0cyAoKSB7XG4gIHJldHVybiB7XG4gICAgYXBwOiAnZm9vJyxcbiAgICBob3N0OiAnbG9jYWxob3N0JyxcbiAgICBwb3J0OiA0NzIzXG4gIH07XG59XG5cbmRlc2NyaWJlKCdXaW5BcHBEcml2ZXJTZXJ2ZXInLCAoKSA9PiB7XG4gIGRlc2NyaWJlKCcjY29uc3RydWN0b3InLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBjb21wbGFpbiBpZiByZXF1aXJlZCBvcHRpb25zIG5vdCBzZW50JywgKCkgPT4ge1xuICAgICAgKCgpID0+IHtcbiAgICAgICAgbmV3IFdpbkFwcERyaXZlclNlcnZlcigpO1xuICAgICAgfSkuc2hvdWxkLnRocm93KC9PcHRpb24uKmFwcC4qcmVxdWlyZWQvKTtcbiAgICAgICgoKSA9PiB7XG4gICAgICAgIG5ldyBXaW5BcHBEcml2ZXJTZXJ2ZXIoe30pO1xuICAgICAgfSkuc2hvdWxkLnRocm93KC9PcHRpb24uKmFwcC4qcmVxdWlyZWQvKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJyNzdGFydFNlc3Npb24nLCB3aXRoTW9ja3MoeyB9LCAobW9ja3MsIFMpID0+IHtcbiAgICBsZXQgd2luQXBwRHJpdmVyID0gbmV3IFdpbkFwcERyaXZlclNlcnZlcihidWlsZFdpbkFwcERyaXZlck9wdHMoKSk7XG5cbiAgICBpdCgnc2hvdWxkIHN0YXJ0IGEgc2Vzc2lvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIGxldCBjYXBzID0geyBmb286ICdiYXInIH07XG4gICAgICBtb2Nrcy5qd3Byb3h5ID0gUy5zYW5kYm94Lm1vY2sod2luQXBwRHJpdmVyLmp3cHJveHkpO1xuICAgICAgbW9ja3Muandwcm94eS5leHBlY3RzKFwiY29tbWFuZFwiKS5vbmNlKClcbiAgICAgICAgLndpdGhFeGFjdEFyZ3MoXCIvc2Vzc2lvblwiLCBcIlBPU1RcIiwgeyBkZXNpcmVkQ2FwYWJpbGl0aWVzOiBjYXBzIH0pXG4gICAgICAgIC5yZXR1cm5zKFByb21pc2UucmVzb2x2ZSgpKTtcbiAgICAgIGF3YWl0IHdpbkFwcERyaXZlci5zdGFydFNlc3Npb24oY2Fwcyk7XG4gICAgICBtb2Nrcy5qd3Byb3h5LnZlcmlmeSgpO1xuICAgIH0pO1xuICB9KSk7XG59KTtcblxuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
