'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _buffer = require('buffer');

var _pngjs = require('pngjs');

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _util = require('./util');

var cv = null;

/**
 * @typedef {Object} Region
 * @property {number} left - The offset from the left side
 * @property {number} top - The offset from the top
 * @property {number} width - The width
 * @property {number} height - The height
 */

/**
 * @typedef {Object} Point
 * @property {number} x - The x coordinate
 * @property {number} y - The y coordinate
 */

/**
* @typedef {Object} Rect
* @property {number} x - The top left coordinate
* @property {number} y - The bottom right coordinate
* @property {number} width - The width
* @property {number} height - The height
*/

var BYTES_IN_PIXEL_BLOCK = 4;
var SCANLINE_FILTER_METHOD = 4;

var AVAILABLE_DETECTORS = ['AKAZE', 'AGAST', 'BRISK', 'FAST', 'GFTT', 'KAZE', 'MSER', 'SIFT', 'ORB'];

var AVAILABLE_MATCHING_FUNCTIONS = ['FlannBased', 'BruteForce', 'BruteForceL1', 'BruteForceHamming', 'BruteForceHammingLut', 'BruteForceSL2'];

/**
 * @throws {Error} If opencv4nodejs module is not installed or cannot be loaded
 */
function initOpenCV() {
  if (!cv) {
    try {
      cv = require('opencv4nodejs');
    } catch (ign) {}
  }
  if (!cv) {
    throw new Error('opencv4nodejs module is required to use OpenCV features. ' + 'Please install it first (npm i -g opencv4nodejs) and restart Appium. ' + 'Read https://github.com/justadudewhohacks/opencv4nodejs#how-to-install for more details on this topic.');
  }
}

/**
 * @typedef {Object} MatchComputationResult
 * @property {cv.DescriptorMatch} desciptor - OpenCV match descriptor
 * @property {Array<cv.KeyPoint>} keyPoints - The array of key points
 */

/**
 * Calculates an OpenCV match descriptor of an image, which can be used
 * for brute-force matching.
 * Read https://docs.opencv.org/3.0-beta/doc/py_tutorials/py_feature2d/py_matcher/py_matcher.html
 * for more details.
 *
 * @param {cv.Mat} img Image data
 * @param {cv.FeatureDetector} detector OpenCV feature detector instance
 *
 * @returns {MatchComputationResult}
 */
function detectAndCompute(img, detector) {
  var keyPoints, descriptor;
  return _regeneratorRuntime.async(function detectAndCompute$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(detector.detectAsync(img));

      case 2:
        keyPoints = context$1$0.sent;
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(detector.computeAsync(img, keyPoints));

      case 5:
        descriptor = context$1$0.sent;
        return context$1$0.abrupt('return', {
          keyPoints: keyPoints,
          descriptor: descriptor
        });

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

/**
 * Calculated the bounding rect coordinates for the array of matching points
 *
 * @param {Array<Point>} matchedPoints Array of matching points
 * @returns {Rect} The matching bounding rect or a zero rect if no match
 * can be found.
 */
function calculateMatchedRect(matchedPoints) {
  if (matchedPoints.length < 2) {
    return {
      x: 0,
      y: 0,
      width: 0,
      height: 0
    };
  }

  var pointsSortedByDistance = matchedPoints.map(function (point) {
    return [Math.sqrt(point.x * point.x + point.y * point.y), point];
  }).sort(function (pair1, pair2) {
    return pair1[0] >= pair2[0];
  }).map(function (pair) {
    return pair[1];
  });
  var firstPoint = _lodash2['default'].head(pointsSortedByDistance);
  var lastPoint = _lodash2['default'].last(pointsSortedByDistance);
  var topLeftPoint = {
    x: firstPoint.x <= lastPoint.x ? firstPoint.x : lastPoint.x,
    y: firstPoint.y <= lastPoint.y ? firstPoint.y : lastPoint.y
  };
  var bottomRightPoint = {
    x: firstPoint.x >= lastPoint.x ? firstPoint.x : lastPoint.x,
    y: firstPoint.y >= lastPoint.y ? firstPoint.y : lastPoint.y
  };
  return {
    x: topLeftPoint.x,
    y: topLeftPoint.y,
    width: bottomRightPoint.x - topLeftPoint.x,
    height: bottomRightPoint.y - topLeftPoint.y
  };
}

/**
 * Draws a rectanngle on the given image matrix
 *
 * @param {cv.Mat} mat The source image
 * @param {Rect} region The region to highlight
 *
 * @returns {cv.Mat} The same image with the rectange on it
 */
function highlightRegion(mat, region) {
  if (region.width <= 0 || region.height <= 0) {
    return;
  }

  // highlight in red
  var color = new cv.Vec(0, 0, 255);
  var thickness = 2;
  mat.drawRectangle(new cv.Rect(region.x, region.y, region.width, region.height), color, thickness, cv.LINE_8);
  return mat;
}

/**
 * @typedef {Object} MatchingOptions
 * @property {?string} detectorName ['ORB'] One of possible OpenCV feature detector names
 * from `AVAILABLE_DETECTORS` array.
 * Some of these methods (FAST, AGAST, GFTT, FAST, SIFT and MSER) are not available
 * in the default OpenCV installation and have to be enabled manually before
 * library compilation.
 * @property {?string} matchFunc ['BruteForce'] The name of the matching function.
 * Should be one of `AVAILABLE_MATCHING_FUNCTIONS` array.
 * @property {?number|Function} goodMatchesFactor The maximum count of "good" matches
 * (e. g. with minimal distances) or a function, which accepts 3 arguments: the current distance,
 * minimal distance, maximum distance and returns true or false to include or exclude the match.
 * @property {?boolean} visualize [false] Whether to return the resulting visalization
 * as an image (useful for debugging purposes)
 */

/**
 * @typedef {Object} MatchingResult
 * @property {number} count The count of matched edges on both images.
 * The more matching edges there are no both images the more similar they are.
 * @property {number} totalCount The total count of matched edges on both images.
 * It is equal to `count` if `goodMatchesFactor` does not limit the matches,
 * otherwise it contains the total count of matches before `goodMatchesFactor` is
 * applied.
 * @property {?Buffer} visualization The visualization of the matching result
 * represented as PNG image buffer. This visualization looks like
 * https://user-images.githubusercontent.com/31125521/29702731-c79e3142-8972-11e7-947e-db109d415469.jpg
 * @property {Array<Point>} points1 The array of matching points on the first image
 * @property {Rect} rect1 The bounding rect for the `matchedPoints1` set or a zero rect
 * if not enough matching points are found
 * @property {Array<Point>} points2 The array of matching points on the second image
 * @property {Rect} rect2 The bounding rect for the `matchedPoints2` set or a zero rect
 * if not enough matching points are found
 */

/**
 * Calculates the count of common edges between two images.
 * The images might be rotated or resized relatively to each other.
 *
 * @param {Buffer} img1Data The data of the first image packed into a NodeJS buffer
 * @param {Buffer} img2Data The data of the second image packed into a NodeJS buffer
 * @param {?MatchingOptions} options [{}] Set of matching options
 *
 * @returns {MatchingResult} Maching result
 * @throws {Error} If `detectorName` value is unknown.
 */
function getImagesMatches(img1Data, img2Data) {
  var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

  var _options$detectorName, detectorName, _options$visualize, visualize, goodMatchesFactor, _options$matchFunc, matchFunc, detector, _ref, _ref2, img1, img2, _ref3, _ref32, result1, result2, matches, totalCount, points1, rect1, points2, rect2, result, visualization;

  return _regeneratorRuntime.async(function getImagesMatches$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        initOpenCV();

        _options$detectorName = options.detectorName;
        detectorName = _options$detectorName === undefined ? 'ORB' : _options$detectorName;
        _options$visualize = options.visualize;
        visualize = _options$visualize === undefined ? false : _options$visualize;
        goodMatchesFactor = options.goodMatchesFactor;
        _options$matchFunc = options.matchFunc;
        matchFunc = _options$matchFunc === undefined ? 'BruteForce' : _options$matchFunc;

        if (_lodash2['default'].includes(AVAILABLE_DETECTORS, detectorName)) {
          context$1$0.next = 10;
          break;
        }

        throw new Error('\'' + detectorName + '\' detector is unknown. ' + ('Only ' + JSON.stringify(AVAILABLE_DETECTORS) + ' detectors are supported.'));

      case 10:
        if (_lodash2['default'].includes(AVAILABLE_MATCHING_FUNCTIONS, matchFunc)) {
          context$1$0.next = 12;
          break;
        }

        throw new Error('\'' + matchFunc + '\' matching function is unknown. ' + ('Only ' + JSON.stringify(AVAILABLE_MATCHING_FUNCTIONS) + ' matching functions are supported.'));

      case 12:
        detector = new cv[detectorName + 'Detector']();
        context$1$0.next = 15;
        return _regeneratorRuntime.awrap(_bluebird2['default'].all([cv.imdecodeAsync(img1Data), cv.imdecodeAsync(img2Data)]));

      case 15:
        _ref = context$1$0.sent;
        _ref2 = _slicedToArray(_ref, 2);
        img1 = _ref2[0];
        img2 = _ref2[1];
        context$1$0.next = 21;
        return _regeneratorRuntime.awrap(_bluebird2['default'].all([detectAndCompute(img1, detector), detectAndCompute(img2, detector)]));

      case 21:
        _ref3 = context$1$0.sent;
        _ref32 = _slicedToArray(_ref3, 2);
        result1 = _ref32[0];
        result2 = _ref32[1];
        matches = [];
        context$1$0.prev = 26;
        context$1$0.next = 29;
        return _regeneratorRuntime.awrap(cv['match' + matchFunc + 'Async'](result1.descriptor, result2.descriptor));

      case 29:
        matches = context$1$0.sent;
        context$1$0.next = 35;
        break;

      case 32:
        context$1$0.prev = 32;
        context$1$0.t0 = context$1$0['catch'](26);
        throw new Error('Cannot find any matches between the given images. Try another detection algorithm. ' + (' Original error: ' + context$1$0.t0));

      case 35:
        totalCount = matches.length;

        if ((0, _util.hasValue)(goodMatchesFactor)) {
          if (_lodash2['default'].isFunction(goodMatchesFactor)) {
            (function () {
              var distances = matches.map(function (match) {
                return match.distance;
              });
              var minDistance = _lodash2['default'].min(distances);
              var maxDistance = _lodash2['default'].max(distances);
              matches = matches.filter(function (match) {
                return goodMatchesFactor(match.distance, minDistance, maxDistance);
              });
            })();
          } else {
            if (matches.length > goodMatchesFactor) {
              matches = matches.sort(function (match1, match2) {
                return match1.distance - match2.distance;
              }).slice(0, goodMatchesFactor);
            }
          }
        }

        points1 = matches.map(function (match) {
          return result1.keyPoints[match.queryIdx].point;
        });
        rect1 = calculateMatchedRect(points1);
        points2 = matches.map(function (match) {
          return result2.keyPoints[match.trainIdx].point;
        });
        rect2 = calculateMatchedRect(points2);
        result = {
          points1: points1,
          rect1: rect1,
          points2: points2,
          rect2: rect2,
          totalCount: totalCount,
          count: matches.length
        };

        if (!visualize) {
          context$1$0.next = 49;
          break;
        }

        visualization = cv.drawMatches(img1, img2, result1.keyPoints, result2.keyPoints, matches);

        highlightRegion(visualization, rect1);
        highlightRegion(visualization, {
          x: img1.cols + rect2.x,
          y: rect2.y,
          width: rect2.width,
          height: rect2.height
        });
        context$1$0.next = 48;
        return _regeneratorRuntime.awrap(cv.imencodeAsync('.png', visualization));

      case 48:
        result.visualization = context$1$0.sent;

      case 49:
        return context$1$0.abrupt('return', result);

      case 50:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[26, 32]]);
}

/**
 * @typedef {Object} SimilarityOptions
 * @property {?boolean} visualize [false] Whether to return the resulting visalization
 * as an image (useful for debugging purposes)
 */

/**
 * @typedef {Object} SimilarityResult
 * @property {number} score The similarity score as a float number in range [0.0, 1.0].
 * 1.0 is the highest score (means both images are totally equal).
 * @property {?Buffer} visualization The visualization of the matching result
 * represented as PNG image buffer. This image includes both input pictures where
 * difference regions are highlighted with rectangles.
 */

/**
 * Calculates the similarity score between two images.
 * It is expected, that both images have the same resolution.
 *
 * @param {Buffer} img1Data The data of the first image packed into a NodeJS buffer
 * @param {Buffer} img2Data The data of the second image packed into a NodeJS buffer
 * @param {?SimilarityOptions} options [{}] Set of similarity calculation options
 *
 * @returns {SimilarityResult} The calculation result
 * @throws {Error} If the given images have different resolution.
 */
function getImagesSimilarity(img1Data, img2Data) {
  var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

  var _options$visualize2, visualize, _ref4, _ref42, template, reference, _ref5, _ref52, matched, minMax, result, resultMat, mask, contours, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, contour, boundingRect;

  return _regeneratorRuntime.async(function getImagesSimilarity$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        initOpenCV();

        _options$visualize2 = options.visualize;
        visualize = _options$visualize2 === undefined ? false : _options$visualize2;
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(_bluebird2['default'].all([cv.imdecodeAsync(img1Data), cv.imdecodeAsync(img2Data)]));

      case 5:
        _ref4 = context$1$0.sent;
        _ref42 = _slicedToArray(_ref4, 2);
        template = _ref42[0];
        reference = _ref42[1];

        if (!(template.rows !== reference.rows || template.cols !== reference.cols)) {
          context$1$0.next = 11;
          break;
        }

        throw new Error('Both images are expected to have the same size in order to ' + 'calculate the similarity score.');

      case 11:
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap(_bluebird2['default'].all([template.convertToAsync(cv.CV_8UC3), reference.convertToAsync(cv.CV_8UC3)]));

      case 13:
        _ref5 = context$1$0.sent;
        _ref52 = _slicedToArray(_ref5, 2);
        template = _ref52[0];
        reference = _ref52[1];
        context$1$0.next = 19;
        return _regeneratorRuntime.awrap(reference.matchTemplateAsync(template, cv.TM_CCOEFF_NORMED));

      case 19:
        matched = context$1$0.sent;
        context$1$0.next = 22;
        return _regeneratorRuntime.awrap(matched.minMaxLocAsync());

      case 22:
        minMax = context$1$0.sent;
        result = {
          score: minMax.maxVal
        };

        if (!visualize) {
          context$1$0.next = 66;
          break;
        }

        resultMat = new cv.Mat(template.rows, template.cols * 2, cv.CV_8UC3);
        context$1$0.next = 28;
        return _regeneratorRuntime.awrap(_bluebird2['default'].all([reference.copyToAsync(resultMat.getRegion(new cv.Rect(0, 0, reference.cols, reference.rows))), template.copyToAsync(resultMat.getRegion(new cv.Rect(reference.cols, 0, template.cols, template.rows)))]));

      case 28:
        mask = reference.absdiff(template);
        context$1$0.next = 31;
        return _regeneratorRuntime.awrap(mask.cvtColorAsync(cv.COLOR_BGR2GRAY));

      case 31:
        mask = context$1$0.sent;
        contours = [];
        context$1$0.prev = 33;
        context$1$0.next = 36;
        return _regeneratorRuntime.awrap(mask.thresholdAsync(128, 255, cv.THRESH_BINARY | cv.THRESH_OTSU));

      case 36:
        mask = context$1$0.sent;
        context$1$0.next = 39;
        return _regeneratorRuntime.awrap(mask.findContoursAsync(cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE));

      case 39:
        contours = context$1$0.sent;
        context$1$0.next = 44;
        break;

      case 42:
        context$1$0.prev = 42;
        context$1$0.t0 = context$1$0['catch'](33);

      case 44:
        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 47;

        // No contours can be found, which means, most likely, that images are equal

        for (_iterator = _getIterator(contours); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          contour = _step.value;
          boundingRect = contour.boundingRect();

          highlightRegion(resultMat, boundingRect);
          highlightRegion(resultMat, {
            x: reference.cols + boundingRect.x,
            y: boundingRect.y,
            width: boundingRect.width,
            height: boundingRect.height
          });
        }
        context$1$0.next = 55;
        break;

      case 51:
        context$1$0.prev = 51;
        context$1$0.t1 = context$1$0['catch'](47);
        _didIteratorError = true;
        _iteratorError = context$1$0.t1;

      case 55:
        context$1$0.prev = 55;
        context$1$0.prev = 56;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 58:
        context$1$0.prev = 58;

        if (!_didIteratorError) {
          context$1$0.next = 61;
          break;
        }

        throw _iteratorError;

      case 61:
        return context$1$0.finish(58);

      case 62:
        return context$1$0.finish(55);

      case 63:
        context$1$0.next = 65;
        return _regeneratorRuntime.awrap(cv.imencodeAsync('.png', resultMat));

      case 65:
        result.visualization = context$1$0.sent;

      case 66:
        return context$1$0.abrupt('return', result);

      case 67:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[33, 42], [47, 51, 55, 63], [56,, 58, 62]]);
}

/**
 * @typedef {Object} OccurrenceOptions
 * @property {?boolean} visualize [false] Whether to return the resulting visalization
 * as an image (useful for debugging purposes)
 */

/**
 * @typedef {Object} OccurrenceResult
 * @property {Rect} rect The region of the partial image occurence
 * on the full image
 * @property {?Buffer} visualization The visualization of the matching result
 * represented as PNG image buffer. On this image the matching
 * region is highlighted with a rectangle.
 */

/**
 * Calculates the occurence position of a partial image in the full
 * image.
 *
 * @param {Buffer} fullImgData The data of the full image packed into a NodeJS buffer
 * @param {Buffer} partialImgData The data of the partial image packed into a NodeJS buffer
 * @param {?OccurrenceOptions} options [{}] Set of occurrence calculation options
 *
 * @returns {OccurrenceResult}
 * @throws {Error} If no occurences of the partial image can be found in the full image
 */
function getImageOccurrence(fullImgData, partialImgData) {
  var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

  var _options$visualize3, visualize, _ref6, _ref62, fullImg, partialImg, result, matched, minMax;

  return _regeneratorRuntime.async(function getImageOccurrence$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        initOpenCV();

        _options$visualize3 = options.visualize;
        visualize = _options$visualize3 === undefined ? false : _options$visualize3;
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(_bluebird2['default'].all([cv.imdecodeAsync(fullImgData), cv.imdecodeAsync(partialImgData)]));

      case 5:
        _ref6 = context$1$0.sent;
        _ref62 = _slicedToArray(_ref6, 2);
        fullImg = _ref62[0];
        partialImg = _ref62[1];
        result = {};
        context$1$0.prev = 10;
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap(fullImg.matchTemplateAsync(partialImg, cv.TM_CCOEFF_NORMED));

      case 13:
        matched = context$1$0.sent;
        context$1$0.next = 16;
        return _regeneratorRuntime.awrap(matched.minMaxLocAsync());

      case 16:
        minMax = context$1$0.sent;

        result.rect = {
          x: minMax.maxLoc.x,
          y: minMax.maxLoc.y,
          width: partialImg.cols,
          height: partialImg.rows
        };
        context$1$0.next = 23;
        break;

      case 20:
        context$1$0.prev = 20;
        context$1$0.t0 = context$1$0['catch'](10);
        throw new Error('Cannot find any occurences of the partial image in the full image. ' + ('Original error: ' + context$1$0.t0));

      case 23:
        if (!visualize) {
          context$1$0.next = 28;
          break;
        }

        highlightRegion(fullImg, result.rect);
        context$1$0.next = 27;
        return _regeneratorRuntime.awrap(cv.imencodeAsync('.png', fullImg));

      case 27:
        result.visualization = context$1$0.sent;

      case 28:
        return context$1$0.abrupt('return', result);

      case 29:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[10, 20]]);
}

/**
 * Crop the image by given rectangle (use base64 string as input and output)
 *
 * @param {string} base64Image The string with base64 encoded image
 * @param {Region} rect The selected region of image
 * @return {string} base64 encoded string of cropped image
 */
function cropBase64Image(base64Image, rect) {
  var image;
  return _regeneratorRuntime.async(function cropBase64Image$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(base64ToImage(base64Image));

      case 2:
        image = context$1$0.sent;

        cropImage(image, rect);
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(imageToBase64(image));

      case 6:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

/**
 * Create a pngjs image from given base64 image
 *
 * @param {string} base64Image The string with base64 encoded image
 * @return {PNG} The image object
 */
function base64ToImage(base64Image) {
  var imageBuffer;
  return _regeneratorRuntime.async(function base64ToImage$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        imageBuffer = new _buffer.Buffer(base64Image, 'base64');
        return context$1$0.abrupt('return', new _bluebird2['default'](function (resolve, reject) {
          var image = new _pngjs.PNG({ filterType: SCANLINE_FILTER_METHOD });
          image.parse(imageBuffer, function (err, image) {
            // eslint-disable-line promise/prefer-await-to-callbacks
            if (err) {
              return reject(err);
            }
            resolve(image);
          });
        }));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

/**
 * Create a base64 string for given image object
 *
 * @param {PNG} image The image object
 * @return {string} The string with base64 encoded image
 */
function imageToBase64(image) {
  return _regeneratorRuntime.async(function imageToBase64$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        return context$1$0.abrupt('return', new _bluebird2['default'](function (resolve, reject) {
          var chunks = [];
          image.pack().on('data', function (chunk) {
            return chunks.push(chunk);
          }).on('end', function () {
            resolve(_buffer.Buffer.concat(chunks).toString('base64'));
          }).on('error', function (err) {
            // eslint-disable-line promise/prefer-await-to-callbacks
            reject(err);
          });
        }));

      case 1:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

/**
 * Crop the image by given rectangle
 *
 * @param {PNG} image The image to mutate by cropping
 * @param {Region} rect The selected region of image
 */
function cropImage(image, rect) {
  var imageRect = { width: image.width, height: image.height };
  var interRect = getRectIntersection(rect, imageRect);
  if (interRect.width < rect.width || interRect.height < rect.height) {
    throw new Error('Cannot crop ' + JSON.stringify(rect) + ' from ' + JSON.stringify(imageRect) + ' because the intersection between them was not the size of the rect');
  }

  var firstVerticalPixel = interRect.top;
  var lastVerticalPixel = interRect.top + interRect.height;

  var firstHorizontalPixel = interRect.left;
  var lastHorizontalPixel = interRect.left + interRect.width;

  var croppedArray = [];
  for (var y = firstVerticalPixel; y < lastVerticalPixel; y++) {
    for (var x = firstHorizontalPixel; x < lastHorizontalPixel; x++) {
      var firstByteIdxInPixelBlock = imageRect.width * y + x << 2;
      for (var byteIdx = 0; byteIdx < BYTES_IN_PIXEL_BLOCK; byteIdx++) {
        croppedArray.push(image.data[firstByteIdxInPixelBlock + byteIdx]);
      }
    }
  }

  image.data = new _buffer.Buffer(croppedArray);
  image.width = interRect.width;
  image.height = interRect.height;
  return image;
}

function getRectIntersection(rect, imageSize) {
  var left = rect.left >= imageSize.width ? imageSize.width : rect.left;
  var top = rect.top >= imageSize.height ? imageSize.height : rect.top;
  var width = imageSize.width >= left + rect.width ? rect.width : imageSize.width - left;
  var height = imageSize.height >= top + rect.height ? rect.height : imageSize.height - top;
  return { left: left, top: top, width: width, height: height };
}

exports.cropBase64Image = cropBase64Image;
exports.base64ToImage = base64ToImage;
exports.imageToBase64 = imageToBase64;
exports.cropImage = cropImage;
exports.getImagesMatches = getImagesMatches;
exports.getImagesSimilarity = getImagesSimilarity;
exports.getImageOccurrence = getImageOccurrence;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
