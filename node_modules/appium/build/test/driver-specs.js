require('source-map-support').install();

'use strict';

var _extends = require('babel-runtime/helpers/extends')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _libAppium = require('../lib/appium');

var _appiumFakeDriver = require('appium-fake-driver');

var _helpers = require('./helpers');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _appiumXcuitestDriver = require('appium-xcuitest-driver');

var _appiumIosDriver = require('appium-ios-driver');

var _asyncbox = require('asyncbox');

var _libUtils = require('../lib/utils');

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

var SESSION_ID = 1;

describe('AppiumDriver', function () {
  describe('AppiumDriver', function () {
    function getDriverAndFakeDriver() {
      var appium = new _libAppium.AppiumDriver({});
      var fakeDriver = new _appiumFakeDriver.FakeDriver();
      var mockFakeDriver = _sinon2['default'].mock(fakeDriver);
      appium.getDriverForCaps = function () /*args*/{
        return function () {
          return fakeDriver;
        };
      };
      return [appium, mockFakeDriver];
    }
    describe('createSession', function () {
      var appium = undefined;
      var mockFakeDriver = undefined;
      beforeEach(function () {
        var _getDriverAndFakeDriver = getDriverAndFakeDriver();

        var _getDriverAndFakeDriver2 = _slicedToArray(_getDriverAndFakeDriver, 2);

        appium = _getDriverAndFakeDriver2[0];
        mockFakeDriver = _getDriverAndFakeDriver2[1];
      });
      afterEach(function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mockFakeDriver.restore();
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(appium.deleteSession(SESSION_ID));

            case 3:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });

      it('should call inner driver\'s createSession with desired capabilities', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mockFakeDriver.expects("createSession").once().withExactArgs(_helpers.BASE_CAPS, undefined, null, []).returns([SESSION_ID, _helpers.BASE_CAPS]);
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(appium.createSession(_helpers.BASE_CAPS));

            case 3:
              mockFakeDriver.verify();

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
      it('should call inner driver\'s createSession with desired and default capabilities', function callee$3$0() {
        var defaultCaps, allCaps;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              defaultCaps = { deviceName: 'Emulator' }, allCaps = _lodash2['default'].extend(_lodash2['default'].clone(defaultCaps), _helpers.BASE_CAPS);

              appium.args.defaultCapabilities = defaultCaps;
              mockFakeDriver.expects("createSession").once().withArgs(allCaps).returns([SESSION_ID, allCaps]);
              context$4$0.next = 5;
              return _regeneratorRuntime.awrap(appium.createSession(_helpers.BASE_CAPS));

            case 5:
              mockFakeDriver.verify();

            case 6:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
      it('should call inner driver\'s createSession with desired and default capabilities without overriding caps', function callee$3$0() {
        var defaultCaps;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              defaultCaps = { platformName: 'Ersatz' };

              appium.args.defaultCapabilities = defaultCaps;
              mockFakeDriver.expects("createSession").once().withArgs(_helpers.BASE_CAPS).returns([SESSION_ID, _helpers.BASE_CAPS]);
              context$4$0.next = 5;
              return _regeneratorRuntime.awrap(appium.createSession(_helpers.BASE_CAPS));

            case 5:
              mockFakeDriver.verify();

            case 6:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
      it('should kill all other sessions if sessionOverride is on', function callee$3$0() {
        var fakeDrivers, mockFakeDrivers, sessions, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, mfd;

        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              appium.args.sessionOverride = true;

              // mock three sessions that should be removed when the new one is created
              fakeDrivers = [new _appiumFakeDriver.FakeDriver(), new _appiumFakeDriver.FakeDriver(), new _appiumFakeDriver.FakeDriver()];
              mockFakeDrivers = _lodash2['default'].map(fakeDrivers, function (fd) {
                return _sinon2['default'].mock(fd);
              });

              mockFakeDrivers[0].expects('deleteSession').once();
              mockFakeDrivers[1].expects('deleteSession').once().throws('Cannot shut down Android driver; it has already shut down');
              mockFakeDrivers[2].expects('deleteSession').once();
              appium.sessions['abc-123-xyz'] = fakeDrivers[0];
              appium.sessions['xyz-321-abc'] = fakeDrivers[1];
              appium.sessions['123-abc-xyz'] = fakeDrivers[2];

              context$4$0.next = 11;
              return _regeneratorRuntime.awrap(appium.getSessions());

            case 11:
              sessions = context$4$0.sent;

              sessions.should.have.length(3);

              mockFakeDriver.expects("createSession").once().withExactArgs(_helpers.BASE_CAPS, undefined, null, []).returns([SESSION_ID, _helpers.BASE_CAPS]);
              context$4$0.next = 16;
              return _regeneratorRuntime.awrap(appium.createSession(_helpers.BASE_CAPS));

            case 16:
              context$4$0.next = 18;
              return _regeneratorRuntime.awrap(appium.getSessions());

            case 18:
              sessions = context$4$0.sent;

              sessions.should.have.length(1);

              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              context$4$0.prev = 23;
              for (_iterator = _getIterator(mockFakeDrivers); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                mfd = _step.value;

                mfd.verify();
              }
              context$4$0.next = 31;
              break;

            case 27:
              context$4$0.prev = 27;
              context$4$0.t0 = context$4$0['catch'](23);
              _didIteratorError = true;
              _iteratorError = context$4$0.t0;

            case 31:
              context$4$0.prev = 31;
              context$4$0.prev = 32;

              if (!_iteratorNormalCompletion && _iterator['return']) {
                _iterator['return']();
              }

            case 34:
              context$4$0.prev = 34;

              if (!_didIteratorError) {
                context$4$0.next = 37;
                break;
              }

              throw _iteratorError;

            case 37:
              return context$4$0.finish(34);

            case 38:
              return context$4$0.finish(31);

            case 39:
              mockFakeDriver.verify();

            case 40:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this, [[23, 27, 31, 39], [32,, 34, 38]]);
      });
      it('should call "createSession" with W3C capabilities argument, if provided', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mockFakeDriver.expects("createSession").once().withArgs(null, undefined, _helpers.W3C_CAPS).returns([SESSION_ID, _helpers.BASE_CAPS]);
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(appium.createSession(undefined, undefined, _helpers.W3C_CAPS));

            case 3:
              mockFakeDriver.verify();

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
      it('should call "createSession" with W3C capabilities argument with additional provided parameters', function callee$3$0() {
        var w3cCaps;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              w3cCaps = _extends({}, _helpers.W3C_CAPS, {
                alwaysMatch: _extends({}, _helpers.W3C_CAPS.alwaysMatch, {
                  'appium:someOtherParm': 'someOtherParm'
                })
              });

              mockFakeDriver.expects("createSession").once().withArgs(null, undefined, {
                alwaysMatch: _extends({}, w3cCaps.alwaysMatch, {
                  'appium:someOtherParm': 'someOtherParm'
                }),
                firstMatch: [{}]
              }).returns([SESSION_ID, (0, _libUtils.insertAppiumPrefixes)(_helpers.BASE_CAPS)]);

              context$4$0.next = 4;
              return _regeneratorRuntime.awrap(appium.createSession(undefined, undefined, w3cCaps));

            case 4:
              mockFakeDriver.verify();

            case 5:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
      it('should call "createSession" with JSONWP capabilities if W3C has incomplete capabilities', function callee$3$0() {
        var w3cCaps, jsonwpCaps;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              w3cCaps = _extends({}, _helpers.W3C_CAPS, {
                alwaysMatch: _extends({}, _helpers.W3C_CAPS.alwaysMatch, {
                  'appium:someOtherParm': 'someOtherParm'
                })
              });
              jsonwpCaps = _extends({}, _helpers.BASE_CAPS, {
                automationName: 'Fake',
                someOtherParam: 'someOtherParam'
              });

              mockFakeDriver.expects("createSession").once().withArgs(jsonwpCaps, undefined, null).returns([SESSION_ID, jsonwpCaps]);

              context$4$0.next = 5;
              return _regeneratorRuntime.awrap(appium.createSession(jsonwpCaps, undefined, w3cCaps));

            case 5:
              mockFakeDriver.verify();

            case 6:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
    });
    describe('deleteSession', function () {
      var appium = undefined;
      var mockFakeDriver = undefined;
      beforeEach(function () {
        var _getDriverAndFakeDriver3 = getDriverAndFakeDriver();

        var _getDriverAndFakeDriver32 = _slicedToArray(_getDriverAndFakeDriver3, 2);

        appium = _getDriverAndFakeDriver32[0];
        mockFakeDriver = _getDriverAndFakeDriver32[1];
      });
      afterEach(function () {
        mockFakeDriver.restore();
      });
      it('should remove the session if it is found', function callee$3$0() {
        var _value, sessionId, sessions;

        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(appium.createSession(_helpers.BASE_CAPS));

            case 2:
              context$4$0.t0 = context$4$0.sent.value;
              _value = _slicedToArray(context$4$0.t0, 1);
              sessionId = _value[0];
              context$4$0.next = 7;
              return _regeneratorRuntime.awrap(appium.getSessions());

            case 7:
              sessions = context$4$0.sent;

              sessions.should.have.length(1);
              context$4$0.next = 11;
              return _regeneratorRuntime.awrap(appium.deleteSession(sessionId));

            case 11:
              context$4$0.next = 13;
              return _regeneratorRuntime.awrap(appium.getSessions());

            case 13:
              sessions = context$4$0.sent;

              sessions.should.have.length(0);

            case 15:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
      it('should call inner driver\'s deleteSession method', function callee$3$0() {
        var _value2, sessionId;

        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(appium.createSession(_helpers.BASE_CAPS));

            case 2:
              context$4$0.t0 = context$4$0.sent.value;
              _value2 = _slicedToArray(context$4$0.t0, 1);
              sessionId = _value2[0];

              mockFakeDriver.expects("deleteSession").once().withExactArgs(sessionId, []).returns();
              context$4$0.next = 8;
              return _regeneratorRuntime.awrap(appium.deleteSession(sessionId));

            case 8:
              mockFakeDriver.verify();

              // cleanup, since we faked the delete session call
              context$4$0.next = 11;
              return _regeneratorRuntime.awrap(mockFakeDriver.object.deleteSession());

            case 11:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
    });
    describe('getSessions', function () {
      var appium = undefined;
      var sessions = undefined;
      before(function () {
        appium = new _libAppium.AppiumDriver({});
      });
      afterEach(function callee$3$0() {
        var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, session;

        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              _iteratorNormalCompletion2 = true;
              _didIteratorError2 = false;
              _iteratorError2 = undefined;
              context$4$0.prev = 3;
              _iterator2 = _getIterator(sessions);

            case 5:
              if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                context$4$0.next = 12;
                break;
              }

              session = _step2.value;
              context$4$0.next = 9;
              return _regeneratorRuntime.awrap(appium.deleteSession(session.id));

            case 9:
              _iteratorNormalCompletion2 = true;
              context$4$0.next = 5;
              break;

            case 12:
              context$4$0.next = 18;
              break;

            case 14:
              context$4$0.prev = 14;
              context$4$0.t0 = context$4$0['catch'](3);
              _didIteratorError2 = true;
              _iteratorError2 = context$4$0.t0;

            case 18:
              context$4$0.prev = 18;
              context$4$0.prev = 19;

              if (!_iteratorNormalCompletion2 && _iterator2['return']) {
                _iterator2['return']();
              }

            case 21:
              context$4$0.prev = 21;

              if (!_didIteratorError2) {
                context$4$0.next = 24;
                break;
              }

              throw _iteratorError2;

            case 24:
              return context$4$0.finish(21);

            case 25:
              return context$4$0.finish(18);

            case 26:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this, [[3, 14, 18, 26], [19,, 21, 25]]);
      });
      it('should return an empty array of sessions', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(appium.getSessions());

            case 2:
              sessions = context$4$0.sent;

              sessions.should.be.an.array;
              sessions.should.be.empty;

            case 5:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
      it('should return sessions created', function callee$3$0() {
        var session1, session2;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(appium.createSession(_lodash2['default'].extend(_lodash2['default'].clone(_helpers.BASE_CAPS), { cap: 'value' })));

            case 2:
              session1 = context$4$0.sent.value;
              context$4$0.next = 5;
              return _regeneratorRuntime.awrap(appium.createSession(_lodash2['default'].extend(_lodash2['default'].clone(_helpers.BASE_CAPS), { cap: 'other value' })));

            case 5:
              session2 = context$4$0.sent.value;
              context$4$0.next = 8;
              return _regeneratorRuntime.awrap(appium.getSessions());

            case 8:
              sessions = context$4$0.sent;

              sessions.should.be.an.array;
              sessions.should.have.length(2);
              sessions[0].id.should.equal(session1[0]);
              sessions[0].capabilities.should.eql(session1[1]);
              sessions[1].id.should.equal(session2[0]);
              sessions[1].capabilities.should.eql(session2[1]);

            case 15:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
    });
    describe('getStatus', function () {
      var appium = undefined;
      before(function () {
        appium = new _libAppium.AppiumDriver({});
      });
      it('should return a status', function callee$3$0() {
        var status;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(appium.getStatus());

            case 2:
              status = context$4$0.sent;

              status.build.should.exist;
              status.build.version.should.exist;

            case 5:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
    });
    describe('sessionExists', function () {});
    describe('attachUnexpectedShutdownHandler', function () {
      var appium = undefined,
          mockFakeDriver = undefined;
      beforeEach(function () {
        var _getDriverAndFakeDriver4 = getDriverAndFakeDriver();

        var _getDriverAndFakeDriver42 = _slicedToArray(_getDriverAndFakeDriver4, 2);

        appium = _getDriverAndFakeDriver42[0];
        mockFakeDriver = _getDriverAndFakeDriver42[1];
      });
      afterEach(function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(mockFakeDriver.object.deleteSession());

            case 2:
              mockFakeDriver.restore();
              appium.args.defaultCapabilities = {};

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });

      it('should remove session if inner driver unexpectedly exits with an error', function callee$3$0() {
        var _value3, sessionId;

        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(appium.createSession(_lodash2['default'].clone(_helpers.BASE_CAPS)));

            case 2:
              context$4$0.t0 = context$4$0.sent.value;
              _value3 = _slicedToArray(context$4$0.t0, 1);
              sessionId = _value3[0];
              // eslint-disable-line comma-spacing
              _lodash2['default'].keys(appium.sessions).should.contain(sessionId);
              appium.sessions[sessionId].unexpectedShutdownDeferred.reject(new Error("Oops"));
              // let event loop spin so rejection is handled
              context$4$0.next = 9;
              return _regeneratorRuntime.awrap((0, _asyncbox.sleep)(1));

            case 9:
              _lodash2['default'].keys(appium.sessions).should.not.contain(sessionId);

            case 10:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
      it('should remove session if inner driver unexpectedly exits with no error', function callee$3$0() {
        var _value4, sessionId;

        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(appium.createSession(_lodash2['default'].clone(_helpers.BASE_CAPS)));

            case 2:
              context$4$0.t0 = context$4$0.sent.value;
              _value4 = _slicedToArray(context$4$0.t0, 1);
              sessionId = _value4[0];
              // eslint-disable-line comma-spacing
              _lodash2['default'].keys(appium.sessions).should.contain(sessionId);
              appium.sessions[sessionId].unexpectedShutdownDeferred.resolve();
              // let event loop spin so rejection is handled
              context$4$0.next = 9;
              return _regeneratorRuntime.awrap((0, _asyncbox.sleep)(1));

            case 9:
              _lodash2['default'].keys(appium.sessions).should.not.contain(sessionId);

            case 10:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
      it('should not remove session if inner driver cancels unexpected exit', function callee$3$0() {
        var _value5, sessionId;

        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(appium.createSession(_lodash2['default'].clone(_helpers.BASE_CAPS)));

            case 2:
              context$4$0.t0 = context$4$0.sent.value;
              _value5 = _slicedToArray(context$4$0.t0, 1);
              sessionId = _value5[0];
              // eslint-disable-line comma-spacing
              _lodash2['default'].keys(appium.sessions).should.contain(sessionId);
              appium.sessions[sessionId].onUnexpectedShutdown.cancel();
              // let event loop spin so rejection is handled
              context$4$0.next = 9;
              return _regeneratorRuntime.awrap((0, _asyncbox.sleep)(1));

            case 9:
              _lodash2['default'].keys(appium.sessions).should.contain(sessionId);

            case 10:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
    });
    describe('getDriverForCaps', function () {
      it('should not blow up if user does not provide platformName', function () {
        var appium = new _libAppium.AppiumDriver({});
        (function () {
          appium.getDriverForCaps({});
        }).should['throw'](/platformName/);
      });
      it('should get XCUITestDriver driver for automationName of XCUITest', function () {
        var appium = new _libAppium.AppiumDriver({});
        var driver = appium.getDriverForCaps({
          platformName: 'iOS',
          automationName: 'XCUITest'
        });
        driver.should.be.an['instanceof'](Function);
        driver.should.equal(_appiumXcuitestDriver.XCUITestDriver);
      });
      it('should get iosdriver for ios < 10', function () {
        var appium = new _libAppium.AppiumDriver({});
        var caps = {
          platformName: 'iOS',
          platformVersion: '8.0'
        };
        var driver = appium.getDriverForCaps(caps);
        driver.should.be.an['instanceof'](Function);
        driver.should.equal(_appiumIosDriver.IosDriver);

        caps.platformVersion = '8.1';
        driver = appium.getDriverForCaps(caps);
        driver.should.equal(_appiumIosDriver.IosDriver);

        caps.platformVersion = '9.4';
        driver = appium.getDriverForCaps(caps);
        driver.should.equal(_appiumIosDriver.IosDriver);

        caps.platformVersion = '';
        driver = appium.getDriverForCaps(caps);
        driver.should.equal(_appiumIosDriver.IosDriver);

        caps.platformVersion = 'foo';
        driver = appium.getDriverForCaps(caps);
        driver.should.equal(_appiumIosDriver.IosDriver);

        delete caps.platformVersion;
        driver = appium.getDriverForCaps(caps);
        driver.should.equal(_appiumIosDriver.IosDriver);
      });
      it('should get xcuitestdriver for ios >= 10', function () {
        var appium = new _libAppium.AppiumDriver({});
        var caps = {
          platformName: 'iOS',
          platformVersion: '10'
        };
        var driver = appium.getDriverForCaps(caps);
        driver.should.be.an['instanceof'](Function);
        driver.should.equal(_appiumXcuitestDriver.XCUITestDriver);

        caps.platformVersion = '10.0';
        driver = appium.getDriverForCaps(caps);
        driver.should.equal(_appiumXcuitestDriver.XCUITestDriver);

        caps.platformVersion = '10.1';
        driver = appium.getDriverForCaps(caps);
        driver.should.equal(_appiumXcuitestDriver.XCUITestDriver);

        caps.platformVersion = '12.14';
        driver = appium.getDriverForCaps(caps);
        driver.should.equal(_appiumXcuitestDriver.XCUITestDriver);
      });
    });
  });
});

// a default capability with the same key as a desired capability
// should do nothing
//# sourceMappingURL=data:application/json;charset=utf8;base64,
