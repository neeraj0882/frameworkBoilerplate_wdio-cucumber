require('source-map-support').install();

'use strict';

var _extends = require('babel-runtime/helpers/extends')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _wd = require('wd');

var _wd2 = _interopRequireDefault(_wd);

var _requestPromise = require('request-promise');

var _requestPromise2 = _interopRequireDefault(_requestPromise);

var _libMain = require('../lib/main');

var _helpers = require('./helpers');

var _appiumBaseDriver = require('appium-base-driver');

var _appiumFakeDriver = require('appium-fake-driver');

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

_chai2['default'].use(_chaiAsPromised2['default']);

var should = _chai2['default'].should();
var shouldStartServer = process.env.USE_RUNNING_SERVER !== "0";
var caps = { platformName: "Fake", deviceName: "Fake", app: _helpers.TEST_FAKE_APP };

describe('FakeDriver - via HTTP', function () {
  var server = null;
  var baseUrl = 'http://' + _helpers.TEST_HOST + ':' + _helpers.TEST_PORT + '/wd/hub/session';
  before(function callee$1$0() {
    var args;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          if (!shouldStartServer) {
            context$2$0.next = 5;
            break;
          }

          args = { port: _helpers.TEST_PORT, host: _helpers.TEST_HOST };
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap((0, _libMain.main)(args));

        case 4:
          server = context$2$0.sent;

        case 5:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });
  after(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          if (!server) {
            context$2$0.next = 3;
            break;
          }

          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(server.close());

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  describe('session handling', function () {
    it('should start and stop a session', function callee$2$0() {
      var driver, _ref, _ref2, sessionId;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver = _wd2['default'].promiseChainRemote(_helpers.TEST_HOST, _helpers.TEST_PORT);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.init(caps));

          case 3:
            _ref = context$3$0.sent;
            _ref2 = _slicedToArray(_ref, 1);
            sessionId = _ref2[0];

            should.exist(sessionId);
            sessionId.should.be.a('string');
            context$3$0.next = 10;
            return _regeneratorRuntime.awrap(driver.quit());

          case 10:
            context$3$0.next = 12;
            return _regeneratorRuntime.awrap(driver.title().should.eventually.be.rejectedWith(/terminated/));

          case 12:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should be able to run two FakeDriver sessions simultaneously', function callee$2$0() {
      var driver1, _ref3, _ref32, sessionId1, driver2, _ref4, _ref42, sessionId2;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver1 = _wd2['default'].promiseChainRemote(_helpers.TEST_HOST, _helpers.TEST_PORT);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver1.init(caps));

          case 3:
            _ref3 = context$3$0.sent;
            _ref32 = _slicedToArray(_ref3, 1);
            sessionId1 = _ref32[0];

            should.exist(sessionId1);
            sessionId1.should.be.a('string');
            driver2 = _wd2['default'].promiseChainRemote(_helpers.TEST_HOST, _helpers.TEST_PORT);
            context$3$0.next = 11;
            return _regeneratorRuntime.awrap(driver2.init(caps));

          case 11:
            _ref4 = context$3$0.sent;
            _ref42 = _slicedToArray(_ref4, 1);
            sessionId2 = _ref42[0];

            should.exist(sessionId2);
            sessionId2.should.be.a('string');
            sessionId1.should.not.equal(sessionId2);
            context$3$0.next = 19;
            return _regeneratorRuntime.awrap(driver1.quit());

          case 19:
            context$3$0.next = 21;
            return _regeneratorRuntime.awrap(driver2.quit());

          case 21:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should not be able to run two FakeDriver sessions simultaneously when one is unique', function callee$2$0() {
      var uniqueCaps, driver1, _ref5, _ref52, sessionId1, driver2;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            uniqueCaps = _lodash2['default'].clone(caps);

            uniqueCaps.uniqueApp = true;
            driver1 = _wd2['default'].promiseChainRemote(_helpers.TEST_HOST, _helpers.TEST_PORT);
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(driver1.init(uniqueCaps));

          case 5:
            _ref5 = context$3$0.sent;
            _ref52 = _slicedToArray(_ref5, 1);
            sessionId1 = _ref52[0];

            should.exist(sessionId1);
            sessionId1.should.be.a('string');
            driver2 = _wd2['default'].promiseChainRemote(_helpers.TEST_HOST, _helpers.TEST_PORT);
            context$3$0.next = 13;
            return _regeneratorRuntime.awrap(driver2.init(caps).should.eventually.be.rejected);

          case 13:
            context$3$0.next = 15;
            return _regeneratorRuntime.awrap(driver1.quit());

          case 15:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should use the newCommandTimeout of the inner Driver on session creation', function callee$2$0() {
      var driver, _ref6, _ref62, sessionId;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver = _wd2['default'].promiseChainRemote(_helpers.TEST_HOST, _helpers.TEST_PORT);

            caps.newCommandTimeout = 0.25;

            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.init(caps));

          case 4:
            _ref6 = context$3$0.sent;
            _ref62 = _slicedToArray(_ref6, 1);
            sessionId = _ref62[0];

            should.exist(sessionId);

            context$3$0.next = 10;
            return _regeneratorRuntime.awrap(_bluebird2['default'].delay(250));

          case 10:
            context$3$0.next = 12;
            return _regeneratorRuntime.awrap(driver.source().should.eventually.be.rejectedWith(/terminated/));

          case 12:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should accept valid W3C capabilities and start a W3C session', function callee$2$0() {
      var w3cCaps, _ref7,

      // Create the session
      status, value, sessionId, _ref8, screenshotStatus, screenshotValue, _ref9,

      // Now use that sessionID to call an arbitrary W3C-only endpoint that isn't implemented to see if it responds with correct error
      statusCode, error, _error$value, errorMessage, message, stacktrace;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            w3cCaps = {
              capabilities: {
                alwaysMatch: { platformName: 'Fake' },
                firstMatch: [{ 'appium:deviceName': 'Fake', 'appium:app': _helpers.TEST_FAKE_APP }]
              }
            };
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_requestPromise2['default'].post({ url: baseUrl, json: w3cCaps }));

          case 3:
            _ref7 = context$3$0.sent;
            status = _ref7.status;
            value = _ref7.value;
            sessionId = _ref7.sessionId;

            should.not.exist(status); // Test that it's a W3C session by checking that 'status' is not in the response
            should.not.exist(sessionId);
            value.sessionId.should.be.a.string;
            value.should.exist;
            value.capabilities.should.deep.equal({
              platformName: 'Fake',
              deviceName: 'Fake',
              app: _helpers.TEST_FAKE_APP
            });

            // Now use that sessionId to call /screenshot
            context$3$0.next = 14;
            return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({ url: baseUrl + '/' + value.sessionId + '/screenshot', json: true }));

          case 14:
            _ref8 = context$3$0.sent;
            screenshotStatus = _ref8.status;
            screenshotValue = _ref8.value;

            should.not.exist(screenshotStatus);
            screenshotValue.should.equal('hahahanotreallyascreenshot');context$3$0.next = 21;
            return _regeneratorRuntime.awrap(_requestPromise2['default'].post({ url: baseUrl + '/' + value.sessionId + '/execute/async', json: { script: '', args: ['a'] } }).should.eventually.be.rejected);

          case 21:
            _ref9 = context$3$0.sent;
            statusCode = _ref9.statusCode;
            error = _ref9.error;

            statusCode.should.equal(404);
            _error$value = error.value;
            errorMessage = _error$value.error;
            message = _error$value.message;
            stacktrace = _error$value.stacktrace;

            errorMessage.should.match(/unknown method/);
            message.should.match(/Method has not yet been implemented/);
            stacktrace.should.match(/FakeDriver.executeCommand/);

            // End session
            context$3$0.next = 34;
            return _regeneratorRuntime.awrap(_requestPromise2['default']['delete']({ url: baseUrl + '/' + value.sessionId }).should.eventually.be.resolved);

          case 34:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should reject invalid W3C capabilities and respond with a 400 Bad Parameters error', function callee$2$0() {
      var badW3Ccaps, _ref10, statusCode, error;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            badW3Ccaps = {
              capabilities: {
                alwaysMatch: {},
                firstMatch: [{ 'appium:deviceName': 'Fake', 'appium:app': _helpers.TEST_FAKE_APP }]
              }
            };
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_requestPromise2['default'].post({ url: baseUrl, json: badW3Ccaps }).should.eventually.be.rejected);

          case 3:
            _ref10 = context$3$0.sent;
            statusCode = _ref10.statusCode;
            error = _ref10.error;

            statusCode.should.equal(400);
            error.value.message.should.match(/can't be blank/);

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should accept a combo of W3C and JSONWP capabilities but default to W3C', function callee$2$0() {
      var combinedCaps, _ref11, status, value, sessionId;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            combinedCaps = {
              "desiredCapabilities": _extends({}, caps),
              "capabilities": {
                "alwaysMatch": _extends({}, caps),
                "firstMatch": [{
                  w3cParam: 'w3cParam'
                }]
              }
            };
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_requestPromise2['default'].post({ url: baseUrl, json: combinedCaps }));

          case 3:
            _ref11 = context$3$0.sent;
            status = _ref11.status;
            value = _ref11.value;
            sessionId = _ref11.sessionId;

            should.not.exist(status); // If it's a W3C session, should not respond with 'status'
            should.not.exist(sessionId);
            value.sessionId.should.exist;
            value.capabilities.should.deep.equal(_extends({}, caps, {
              w3cParam: 'w3cParam'
            }));

            // End session
            context$3$0.next = 13;
            return _regeneratorRuntime.awrap(_requestPromise2['default']['delete']({ url: baseUrl + '/' + value.sessionId }).should.eventually.be.resolved);

          case 13:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should accept a combo of W3C and JSONWP but use JSONWP if desiredCapabilities contains extraneous keys', function callee$2$0() {
      var combinedCaps, _ref12, sessionId, status, value;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            combinedCaps = {
              "desiredCapabilities": _extends({}, caps, {
                automationName: 'Fake',
                anotherParam: 'Hello'
              }),
              "capabilities": {
                "alwaysMatch": _extends({}, caps),
                "firstMatch": [{
                  w3cParam: 'w3cParam'
                }]
              }
            };
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_requestPromise2['default'].post({ url: baseUrl, json: combinedCaps }));

          case 3:
            _ref12 = context$3$0.sent;
            sessionId = _ref12.sessionId;
            status = _ref12.status;
            value = _ref12.value;

            status.should.exist;
            sessionId.should.exist;
            should.not.exist(value.sessionId);
            value.should.deep.equal(_extends({}, caps, {
              automationName: 'Fake',
              anotherParam: 'Hello'
            }));

            // End session
            context$3$0.next = 13;
            return _regeneratorRuntime.awrap(_requestPromise2['default']['delete']({ url: baseUrl + '/' + value.sessionId }).should.eventually.be.resolved);

          case 13:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should reject bad W3C capabilities with a BadParametersError (400)', function callee$2$0() {
      var w3cCaps, _ref13, error, statusCode, response, message;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            w3cCaps = {
              "capabilities": {
                "alwaysMatch": _extends({}, caps, {
                  "automationName": "BadAutomationName"
                })
              }
            };
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_requestPromise2['default'].post({ url: baseUrl, json: w3cCaps }).should.eventually.be.rejected);

          case 3:
            _ref13 = context$3$0.sent;
            error = _ref13.error;
            statusCode = _ref13.statusCode;
            response = _ref13.response;

            response.headers['content-type'].should.match(/application\/json/);
            message = error.value.message;

            message.should.match(/BadAutomationName not part of/);
            statusCode.should.equal(400);

          case 11:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should accept capabilities that are provided in the firstMatch array', function callee$2$0() {
      var w3cCaps, _ref14, value, sessionId, status;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            w3cCaps = {
              "capabilities": {
                "alwaysMatch": {},
                "firstMatch": [{}, _extends({}, caps)]
              }
            };
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_requestPromise2['default'].post({ url: baseUrl, json: w3cCaps }));

          case 3:
            _ref14 = context$3$0.sent;
            value = _ref14.value;
            sessionId = _ref14.sessionId;
            status = _ref14.status;

            should.not.exist(status);
            should.not.exist(sessionId);
            value.capabilities.should.deep.equal(caps);

            // End session
            context$3$0.next = 12;
            return _regeneratorRuntime.awrap(_requestPromise2['default']['delete']({ url: baseUrl + '/' + value.sessionId }).should.eventually.be.resolved);

          case 12:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should fall back to MJSONWP if w3c caps are invalid', function callee$2$0() {
      var combinedCaps, _ref15, value, sessionId, status;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            combinedCaps = {
              "desiredCapabilities": _extends({}, caps),
              "capabilities": {
                "alwaysMatch": {},
                "firstMatch": [{}, _extends({}, caps, {
                  deviceName: null
                })]
              }
            };
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_requestPromise2['default'].post({ url: baseUrl, json: combinedCaps }));

          case 3:
            _ref15 = context$3$0.sent;
            value = _ref15.value;
            sessionId = _ref15.sessionId;
            status = _ref15.status;

            status.should.exist;
            sessionId.should.exist;
            value.should.deep.equal(caps);

            // End session
            context$3$0.next = 12;
            return _regeneratorRuntime.awrap(_requestPromise2['default']['delete']({ url: baseUrl + '/' + value.sessionId }).should.eventually.be.resolved);

          case 12:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should fall back to MJSONWP if Inner Driver is not ready for W3C', function callee$2$0() {
      var combinedCaps, createSessionStub, _ref16, value, sessionId, status;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            combinedCaps = {
              "desiredCapabilities": _extends({}, caps),
              "capabilities": {
                "alwaysMatch": _extends({}, caps, {
                  deviceName: null
                })
              }
            };
            createSessionStub = _sinon2['default'].stub(_appiumFakeDriver.FakeDriver.prototype, 'createSession', function callee$3$0(jsonwpCaps) {
              var res;
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    context$4$0.next = 2;
                    return _regeneratorRuntime.awrap(_appiumBaseDriver.BaseDriver.prototype.createSession.call(this, jsonwpCaps));

                  case 2:
                    res = context$4$0.sent;

                    this.protocol.should.equal('MJSONWP');
                    return context$4$0.abrupt('return', res);

                  case 5:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, this);
            });
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(_requestPromise2['default'].post({ url: baseUrl, json: combinedCaps }));

          case 4:
            _ref16 = context$3$0.sent;
            value = _ref16.value;
            sessionId = _ref16.sessionId;
            status = _ref16.status;

            status.should.exist;
            sessionId.should.exist;
            value.should.deep.equal(caps);

            createSessionStub.restore();

          case 12:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should handle concurrent MJSONWP and W3C sessions', function callee$2$0() {
      var combinedCaps, _ref17, mjsonwpSessId, mjsonwpValue, status, _ref18, value, w3cSessId, mjsonwpPayload, w3cPayload;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            combinedCaps = {
              "desiredCapabilities": _extends({}, caps),
              "capabilities": {
                "alwaysMatch": _extends({}, caps)
              }
            };
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_requestPromise2['default'].post({ url: baseUrl, json: _lodash2['default'].omit(combinedCaps, 'capabilities') }));

          case 3:
            _ref17 = context$3$0.sent;
            mjsonwpSessId = _ref17.sessionId;
            mjsonwpValue = _ref17.value;
            status = _ref17.status;
            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(_requestPromise2['default'].post({ url: baseUrl, json: _lodash2['default'].omit(combinedCaps, 'desiredCapabilities') }));

          case 9:
            _ref18 = context$3$0.sent;
            value = _ref18.value;
            w3cSessId = value.sessionId;

            status.should.exist;
            mjsonwpValue.should.eql(caps);
            mjsonwpSessId.should.exist;
            value.sessionId.should.exist;
            value.capabilities.should.eql(caps);

            // Test that both return the proper payload based on their protocol
            context$3$0.next = 19;
            return _regeneratorRuntime.awrap((0, _requestPromise2['default'])(baseUrl + '/' + mjsonwpSessId, { json: true }));

          case 19:
            mjsonwpPayload = context$3$0.sent;
            context$3$0.next = 22;
            return _regeneratorRuntime.awrap((0, _requestPromise2['default'])(baseUrl + '/' + w3cSessId, { json: true }));

          case 22:
            w3cPayload = context$3$0.sent;

            // Test that the payloads are MJSONWP and W3C
            mjsonwpPayload.sessionId.should.exist;
            mjsonwpPayload.status.should.exist;
            mjsonwpPayload.value.should.eql(caps);
            should.not.exist(w3cPayload.sessionId);
            should.not.exist(w3cPayload.status);
            w3cPayload.value.should.eql(caps);

          case 29:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
});

describe('Logsink', function () {
  var server = null;
  var logs = [];
  var logHandler = function logHandler(level, message) {
    logs.push([level, message]);
  };
  var args = { port: _helpers.TEST_PORT, host: _helpers.TEST_HOST, logHandler: logHandler };

  before(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _libMain.main)(args));

        case 2:
          server = context$2$0.sent;

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  after(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(server.close());

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('should send logs to a logHandler passed in by a parent package', function callee$1$0() {
    var welcomeIndex;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          logs.length.should.be.above(1);
          welcomeIndex = logs[0][1].includes('versions of node') ? 1 : 0;

          logs[welcomeIndex].length.should.equal(2);
          logs[welcomeIndex][1].should.include("Welcome to Appium");

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });
});

// Try with valid capabilities and check that it returns a session ID

// Have an MJSONWP and W3C session running concurrently
//# sourceMappingURL=data:application/json;charset=utf8;base64,
